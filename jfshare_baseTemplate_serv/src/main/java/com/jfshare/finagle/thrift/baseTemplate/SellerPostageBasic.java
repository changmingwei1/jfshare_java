/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.baseTemplate;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class SellerPostageBasic implements TBase<SellerPostageBasic, SellerPostageBasic._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SellerPostageBasic");

  private static final TField SELLER_ID_FIELD_DESC = new TField("sellerId", TType.I32, (short)1);
  private static final TField PRODUCT_POSTAGE_BASIC_LIST_FIELD_DESC = new TField("productPostageBasicList", TType.LIST, (short)2);


  public int sellerId;
  public List<ProductPostageBasic> productPostageBasicList;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SELLER_ID((short)1, "sellerId"),
    PRODUCT_POSTAGE_BASIC_LIST((short)2, "productPostageBasicList");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SELLER_ID
  	return SELLER_ID;
        case 2: // PRODUCT_POSTAGE_BASIC_LIST
  	return PRODUCT_POSTAGE_BASIC_LIST;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SELLERID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SELLER_ID, new FieldMetaData("sellerId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PRODUCT_POSTAGE_BASIC_LIST, new FieldMetaData("productPostageBasicList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, ProductPostageBasic.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(SellerPostageBasic.class, metaDataMap);
  }


  public SellerPostageBasic() {
  }

  public SellerPostageBasic(
    int sellerId,
    List<ProductPostageBasic> productPostageBasicList)
  {
    this();
    this.sellerId = sellerId;
    setSellerIdIsSet(true);
    this.productPostageBasicList = productPostageBasicList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SellerPostageBasic(SellerPostageBasic other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.sellerId = other.sellerId;
    if (other.isSetProductPostageBasicList()) {
      List<ProductPostageBasic> __this__productPostageBasicList = new ArrayList<ProductPostageBasic>();
      for (ProductPostageBasic other_element : other.productPostageBasicList) {
        __this__productPostageBasicList.add(new ProductPostageBasic(other_element));
      }
      this.productPostageBasicList = __this__productPostageBasicList;
    }
  }

  public SellerPostageBasic deepCopy() {
    return new SellerPostageBasic(this);
  }

  @Override
  public void clear() {
    setSellerIdIsSet(false);
    this.sellerId = 0;
    this.productPostageBasicList = null;
  }

  public int getSellerId() {
    return this.sellerId;
  }

  public SellerPostageBasic setSellerId(int sellerId) {
    this.sellerId = sellerId;
    setSellerIdIsSet(true);

    return this;
  }

  public void unsetSellerId() {
  __isset_bit_vector.clear(__SELLERID_ISSET_ID);
  }

  /** Returns true if field sellerId is set (has been asigned a value) and false otherwise */
  public boolean isSetSellerId() {
    return __isset_bit_vector.get(__SELLERID_ISSET_ID);
  }

  public void setSellerIdIsSet(boolean value) {
    __isset_bit_vector.set(__SELLERID_ISSET_ID, value);
  }

  public int getProductPostageBasicListSize() {
    return (this.productPostageBasicList == null) ? 0 : this.productPostageBasicList.size();
  }

  public java.util.Iterator<ProductPostageBasic> getProductPostageBasicListIterator() {
    return (this.productPostageBasicList == null) ? null : this.productPostageBasicList.iterator();
  }

  public void addToProductPostageBasicList(ProductPostageBasic elem) {
    if (this.productPostageBasicList == null) {
      this.productPostageBasicList = new ArrayList<ProductPostageBasic>();
    }
    this.productPostageBasicList.add(elem);
  }

  public List<ProductPostageBasic> getProductPostageBasicList() {
    return this.productPostageBasicList;
  }

  public SellerPostageBasic setProductPostageBasicList(List<ProductPostageBasic> productPostageBasicList) {
    this.productPostageBasicList = productPostageBasicList;
    
    return this;
  }

  public void unsetProductPostageBasicList() {
    this.productPostageBasicList = null;
  }

  /** Returns true if field productPostageBasicList is set (has been asigned a value) and false otherwise */
  public boolean isSetProductPostageBasicList() {
    return this.productPostageBasicList != null;
  }

  public void setProductPostageBasicListIsSet(boolean value) {
    if (!value) {
      this.productPostageBasicList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SELLER_ID:
      if (value == null) {
        unsetSellerId();
      } else {
        setSellerId((Integer)value);
      }
      break;
    case PRODUCT_POSTAGE_BASIC_LIST:
      if (value == null) {
        unsetProductPostageBasicList();
      } else {
        setProductPostageBasicList((List<ProductPostageBasic>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SELLER_ID:
      return new Integer(getSellerId());
    case PRODUCT_POSTAGE_BASIC_LIST:
      return getProductPostageBasicList();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SELLER_ID:
      return isSetSellerId();
    case PRODUCT_POSTAGE_BASIC_LIST:
      return isSetProductPostageBasicList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SellerPostageBasic)
      return this.equals((SellerPostageBasic)that);
    return false;
  }

  public boolean equals(SellerPostageBasic that) {
    if (that == null)
      return false;
    boolean this_present_sellerId = true;
    boolean that_present_sellerId = true;
    if (this_present_sellerId || that_present_sellerId) {
      if (!(this_present_sellerId && that_present_sellerId))
        return false;
      if (this.sellerId != that.sellerId)
        return false;
    }
    boolean this_present_productPostageBasicList = true && this.isSetProductPostageBasicList();
    boolean that_present_productPostageBasicList = true && that.isSetProductPostageBasicList();
    if (this_present_productPostageBasicList || that_present_productPostageBasicList) {
      if (!(this_present_productPostageBasicList && that_present_productPostageBasicList))
        return false;
      if (!this.productPostageBasicList.equals(that.productPostageBasicList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_sellerId = true;
    builder.append(present_sellerId);
    if (present_sellerId)
      builder.append(sellerId);
    boolean present_productPostageBasicList = true && (isSetProductPostageBasicList());
    builder.append(present_productPostageBasicList);
    if (present_productPostageBasicList)
      builder.append(productPostageBasicList);
    return builder.toHashCode();
  }

  public int compareTo(SellerPostageBasic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SellerPostageBasic typedOther = (SellerPostageBasic)other;

    lastComparison = Boolean.valueOf(isSetSellerId()).compareTo(typedOther.isSetSellerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerId()) {
      lastComparison = TBaseHelper.compareTo(this.sellerId, typedOther.sellerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductPostageBasicList()).compareTo(typedOther.isSetProductPostageBasicList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductPostageBasicList()) {
      lastComparison = TBaseHelper.compareTo(this.productPostageBasicList, typedOther.productPostageBasicList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // SELLER_ID
          if (field.type == TType.I32) {
            this.sellerId = iprot.readI32();
            setSellerIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PRODUCT_POSTAGE_BASIC_LIST
          if (field.type == TType.LIST) {
            {
            TList _list16 = iprot.readListBegin();
            this.productPostageBasicList = new ArrayList<ProductPostageBasic>(_list16.size);
            for (int _i17 = 0; _i17 < _list16.size; ++_i17)
            {
              ProductPostageBasic _elem18;
              _elem18 = new ProductPostageBasic();
              _elem18.read(iprot);
              this.productPostageBasicList.add(_elem18);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SELLER_ID_FIELD_DESC);
    oprot.writeI32(this.sellerId);
    oprot.writeFieldEnd();
    if (this.productPostageBasicList != null) {
      oprot.writeFieldBegin(PRODUCT_POSTAGE_BASIC_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.productPostageBasicList.size()));
        for (ProductPostageBasic _iter19 : this.productPostageBasicList)
        {
          _iter19.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SellerPostageBasic(");
    boolean first = true;
    sb.append("sellerId:");
    sb.append(this.sellerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productPostageBasicList:");
    if (this.productPostageBasicList == null) {
      sb.append("null");
    } else {
      sb.append(this.productPostageBasicList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
