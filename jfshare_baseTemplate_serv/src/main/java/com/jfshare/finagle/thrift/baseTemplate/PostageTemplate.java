/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.baseTemplate;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class PostageTemplate implements TBase<PostageTemplate, PostageTemplate._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("PostageTemplate");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short)1);
  private static final TField SELLER_ID_FIELD_DESC = new TField("sellerId", TType.I32, (short)2);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)4);
  private static final TField POSTAGE_LIST_FIELD_DESC = new TField("postageList", TType.LIST, (short)5);
  private static final TField TEMPLATE_GROUP_FIELD_DESC = new TField("templateGroup", TType.I32, (short)6);
  private static final TField TEMPLATE_DESC_FIELD_DESC = new TField("templateDesc", TType.STRING, (short)7);


  public int id;
  public int sellerId;
  public String name;
  public int type;
  public List<Postage> postageList;
  public int templateGroup;
  public String templateDesc;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    SELLER_ID((short)2, "sellerId"),
    NAME((short)3, "name"),
    TYPE((short)4, "type"),
    POSTAGE_LIST((short)5, "postageList"),
    TEMPLATE_GROUP((short)6, "templateGroup"),
    TEMPLATE_DESC((short)7, "templateDesc");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
  	return ID;
        case 2: // SELLER_ID
  	return SELLER_ID;
        case 3: // NAME
  	return NAME;
        case 4: // TYPE
  	return TYPE;
        case 5: // POSTAGE_LIST
  	return POSTAGE_LIST;
        case 6: // TEMPLATE_GROUP
  	return TEMPLATE_GROUP;
        case 7: // TEMPLATE_DESC
  	return TEMPLATE_DESC;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SELLERID_ISSET_ID = 1;
  private static final int __TYPE_ISSET_ID = 2;
  private static final int __TEMPLATEGROUP_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.SELLER_ID, new FieldMetaData("sellerId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.POSTAGE_LIST, new FieldMetaData("postageList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, Postage.class))));
    tmpMap.put(_Fields.TEMPLATE_GROUP, new FieldMetaData("templateGroup", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_DESC, new FieldMetaData("templateDesc", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(PostageTemplate.class, metaDataMap);
  }


  public PostageTemplate() {
  }

  public PostageTemplate(
    int id,
    int sellerId,
    String name,
    int type,
    List<Postage> postageList,
    int templateGroup)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.sellerId = sellerId;
    setSellerIdIsSet(true);
    this.name = name;
    this.type = type;
    setTypeIsSet(true);
    this.postageList = postageList;
    this.templateGroup = templateGroup;
    setTemplateGroupIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PostageTemplate(PostageTemplate other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    this.sellerId = other.sellerId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.type = other.type;
    if (other.isSetPostageList()) {
      List<Postage> __this__postageList = new ArrayList<Postage>();
      for (Postage other_element : other.postageList) {
        __this__postageList.add(new Postage(other_element));
      }
      this.postageList = __this__postageList;
    }
    this.templateGroup = other.templateGroup;
    if (other.isSetTemplateDesc()) {
      this.templateDesc = other.templateDesc;
    }
  }

  public PostageTemplate deepCopy() {
    return new PostageTemplate(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setSellerIdIsSet(false);
    this.sellerId = 0;
    this.name = null;
    setTypeIsSet(false);
    this.type = 0;
    this.postageList = null;
    setTemplateGroupIsSet(false);
    this.templateGroup = 0;
    this.templateDesc = null;
  }

  public int getId() {
    return this.id;
  }

  public PostageTemplate setId(int id) {
    this.id = id;
    setIdIsSet(true);

    return this;
  }

  public void unsetId() {
  __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public int getSellerId() {
    return this.sellerId;
  }

  public PostageTemplate setSellerId(int sellerId) {
    this.sellerId = sellerId;
    setSellerIdIsSet(true);

    return this;
  }

  public void unsetSellerId() {
  __isset_bit_vector.clear(__SELLERID_ISSET_ID);
  }

  /** Returns true if field sellerId is set (has been asigned a value) and false otherwise */
  public boolean isSetSellerId() {
    return __isset_bit_vector.get(__SELLERID_ISSET_ID);
  }

  public void setSellerIdIsSet(boolean value) {
    __isset_bit_vector.set(__SELLERID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public PostageTemplate setName(String name) {
    this.name = name;
    
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public PostageTemplate setType(int type) {
    this.type = type;
    setTypeIsSet(true);

    return this;
  }

  public void unsetType() {
  __isset_bit_vector.clear(__TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been asigned a value) and false otherwise */
  public boolean isSetType() {
    return __isset_bit_vector.get(__TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bit_vector.set(__TYPE_ISSET_ID, value);
  }

  public int getPostageListSize() {
    return (this.postageList == null) ? 0 : this.postageList.size();
  }

  public java.util.Iterator<Postage> getPostageListIterator() {
    return (this.postageList == null) ? null : this.postageList.iterator();
  }

  public void addToPostageList(Postage elem) {
    if (this.postageList == null) {
      this.postageList = new ArrayList<Postage>();
    }
    this.postageList.add(elem);
  }

  public List<Postage> getPostageList() {
    return this.postageList;
  }

  public PostageTemplate setPostageList(List<Postage> postageList) {
    this.postageList = postageList;
    
    return this;
  }

  public void unsetPostageList() {
    this.postageList = null;
  }

  /** Returns true if field postageList is set (has been asigned a value) and false otherwise */
  public boolean isSetPostageList() {
    return this.postageList != null;
  }

  public void setPostageListIsSet(boolean value) {
    if (!value) {
      this.postageList = null;
    }
  }

  public int getTemplateGroup() {
    return this.templateGroup;
  }

  public PostageTemplate setTemplateGroup(int templateGroup) {
    this.templateGroup = templateGroup;
    setTemplateGroupIsSet(true);

    return this;
  }

  public void unsetTemplateGroup() {
  __isset_bit_vector.clear(__TEMPLATEGROUP_ISSET_ID);
  }

  /** Returns true if field templateGroup is set (has been asigned a value) and false otherwise */
  public boolean isSetTemplateGroup() {
    return __isset_bit_vector.get(__TEMPLATEGROUP_ISSET_ID);
  }

  public void setTemplateGroupIsSet(boolean value) {
    __isset_bit_vector.set(__TEMPLATEGROUP_ISSET_ID, value);
  }

  public String getTemplateDesc() {
    return this.templateDesc;
  }

  public PostageTemplate setTemplateDesc(String templateDesc) {
    this.templateDesc = templateDesc;
    
    return this;
  }

  public void unsetTemplateDesc() {
    this.templateDesc = null;
  }

  /** Returns true if field templateDesc is set (has been asigned a value) and false otherwise */
  public boolean isSetTemplateDesc() {
    return this.templateDesc != null;
  }

  public void setTemplateDescIsSet(boolean value) {
    if (!value) {
      this.templateDesc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;
    case SELLER_ID:
      if (value == null) {
        unsetSellerId();
      } else {
        setSellerId((Integer)value);
      }
      break;
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;
    case POSTAGE_LIST:
      if (value == null) {
        unsetPostageList();
      } else {
        setPostageList((List<Postage>)value);
      }
      break;
    case TEMPLATE_GROUP:
      if (value == null) {
        unsetTemplateGroup();
      } else {
        setTemplateGroup((Integer)value);
      }
      break;
    case TEMPLATE_DESC:
      if (value == null) {
        unsetTemplateDesc();
      } else {
        setTemplateDesc((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Integer(getId());
    case SELLER_ID:
      return new Integer(getSellerId());
    case NAME:
      return getName();
    case TYPE:
      return new Integer(getType());
    case POSTAGE_LIST:
      return getPostageList();
    case TEMPLATE_GROUP:
      return new Integer(getTemplateGroup());
    case TEMPLATE_DESC:
      return getTemplateDesc();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SELLER_ID:
      return isSetSellerId();
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case POSTAGE_LIST:
      return isSetPostageList();
    case TEMPLATE_GROUP:
      return isSetTemplateGroup();
    case TEMPLATE_DESC:
      return isSetTemplateDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PostageTemplate)
      return this.equals((PostageTemplate)that);
    return false;
  }

  public boolean equals(PostageTemplate that) {
    if (that == null)
      return false;
    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }
    boolean this_present_sellerId = true;
    boolean that_present_sellerId = true;
    if (this_present_sellerId || that_present_sellerId) {
      if (!(this_present_sellerId && that_present_sellerId))
        return false;
      if (this.sellerId != that.sellerId)
        return false;
    }
    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }
    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }
    boolean this_present_postageList = true && this.isSetPostageList();
    boolean that_present_postageList = true && that.isSetPostageList();
    if (this_present_postageList || that_present_postageList) {
      if (!(this_present_postageList && that_present_postageList))
        return false;
      if (!this.postageList.equals(that.postageList))
        return false;
    }
    boolean this_present_templateGroup = true;
    boolean that_present_templateGroup = true;
    if (this_present_templateGroup || that_present_templateGroup) {
      if (!(this_present_templateGroup && that_present_templateGroup))
        return false;
      if (this.templateGroup != that.templateGroup)
        return false;
    }
    boolean this_present_templateDesc = true && this.isSetTemplateDesc();
    boolean that_present_templateDesc = true && that.isSetTemplateDesc();
    if (this_present_templateDesc || that_present_templateDesc) {
      if (!(this_present_templateDesc && that_present_templateDesc))
        return false;
      if (!this.templateDesc.equals(that.templateDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);
    boolean present_sellerId = true;
    builder.append(present_sellerId);
    if (present_sellerId)
      builder.append(sellerId);
    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);
    boolean present_type = true;
    builder.append(present_type);
    if (present_type)
      builder.append(type);
    boolean present_postageList = true && (isSetPostageList());
    builder.append(present_postageList);
    if (present_postageList)
      builder.append(postageList);
    boolean present_templateGroup = true;
    builder.append(present_templateGroup);
    if (present_templateGroup)
      builder.append(templateGroup);
    boolean present_templateDesc = true && (isSetTemplateDesc());
    builder.append(present_templateDesc);
    if (present_templateDesc)
      builder.append(templateDesc);
    return builder.toHashCode();
  }

  public int compareTo(PostageTemplate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PostageTemplate typedOther = (PostageTemplate)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerId()).compareTo(typedOther.isSetSellerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerId()) {
      lastComparison = TBaseHelper.compareTo(this.sellerId, typedOther.sellerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostageList()).compareTo(typedOther.isSetPostageList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostageList()) {
      lastComparison = TBaseHelper.compareTo(this.postageList, typedOther.postageList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateGroup()).compareTo(typedOther.isSetTemplateGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateGroup()) {
      lastComparison = TBaseHelper.compareTo(this.templateGroup, typedOther.templateGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateDesc()).compareTo(typedOther.isSetTemplateDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateDesc()) {
      lastComparison = TBaseHelper.compareTo(this.templateDesc, typedOther.templateDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SELLER_ID
          if (field.type == TType.I32) {
            this.sellerId = iprot.readI32();
            setSellerIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TYPE
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            setTypeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // POSTAGE_LIST
          if (field.type == TType.LIST) {
            {
            TList _list12 = iprot.readListBegin();
            this.postageList = new ArrayList<Postage>(_list12.size);
            for (int _i13 = 0; _i13 < _list12.size; ++_i13)
            {
              Postage _elem14;
              _elem14 = new Postage();
              _elem14.read(iprot);
              this.postageList.add(_elem14);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // TEMPLATE_GROUP
          if (field.type == TType.I32) {
            this.templateGroup = iprot.readI32();
            setTemplateGroupIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // TEMPLATE_DESC
          if (field.type == TType.STRING) {
            this.templateDesc = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SELLER_ID_FIELD_DESC);
    oprot.writeI32(this.sellerId);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (this.postageList != null) {
      oprot.writeFieldBegin(POSTAGE_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.postageList.size()));
        for (Postage _iter15 : this.postageList)
        {
          _iter15.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TEMPLATE_GROUP_FIELD_DESC);
    oprot.writeI32(this.templateGroup);
    oprot.writeFieldEnd();
    if (this.templateDesc != null) {
      if (isSetTemplateDesc()) {
        oprot.writeFieldBegin(TEMPLATE_DESC_FIELD_DESC);
        oprot.writeString(this.templateDesc);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PostageTemplate(");
    boolean first = true;
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerId:");
    sb.append(this.sellerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("postageList:");
    if (this.postageList == null) {
      sb.append("null");
    } else {
      sb.append(this.postageList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateGroup:");
    sb.append(this.templateGroup);
    first = false;
    if (isSetTemplateDesc()) {
      if (!first) sb.append(", ");
      sb.append("templateDesc:");
      if (this.templateDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.templateDesc);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
