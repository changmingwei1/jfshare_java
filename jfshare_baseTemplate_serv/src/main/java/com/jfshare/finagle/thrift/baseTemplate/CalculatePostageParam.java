/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.baseTemplate;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class CalculatePostageParam implements TBase<CalculatePostageParam, CalculatePostageParam._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("CalculatePostageParam");

  private static final TField TEMPLATE_ID_FIELD_DESC = new TField("templateId", TType.I32, (short)1);
  private static final TField NUMBER_FIELD_DESC = new TField("number", TType.I32, (short)2);
  private static final TField WEIGHT_FIELD_DESC = new TField("weight", TType.I32, (short)3);
  private static final TField ORDER_AMOUNT_FIELD_DESC = new TField("orderAmount", TType.STRING, (short)4);
  private static final TField SEND_TO_PROVINCE_FIELD_DESC = new TField("sendToProvince", TType.STRING, (short)5);


  public int templateId;
  public int number;
  public int weight;
  public String orderAmount;
  public String sendToProvince;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TEMPLATE_ID((short)1, "templateId"),
    NUMBER((short)2, "number"),
    WEIGHT((short)3, "weight"),
    ORDER_AMOUNT((short)4, "orderAmount"),
    SEND_TO_PROVINCE((short)5, "sendToProvince");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEMPLATE_ID
  	return TEMPLATE_ID;
        case 2: // NUMBER
  	return NUMBER;
        case 3: // WEIGHT
  	return WEIGHT;
        case 4: // ORDER_AMOUNT
  	return ORDER_AMOUNT;
        case 5: // SEND_TO_PROVINCE
  	return SEND_TO_PROVINCE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __TEMPLATEID_ISSET_ID = 0;
  private static final int __NUMBER_ISSET_ID = 1;
  private static final int __WEIGHT_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEMPLATE_ID, new FieldMetaData("templateId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.NUMBER, new FieldMetaData("number", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.WEIGHT, new FieldMetaData("weight", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ORDER_AMOUNT, new FieldMetaData("orderAmount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SEND_TO_PROVINCE, new FieldMetaData("sendToProvince", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(CalculatePostageParam.class, metaDataMap);
  }


  public CalculatePostageParam() {
  }

  public CalculatePostageParam(
    int templateId,
    int number,
    int weight,
    String orderAmount,
    String sendToProvince)
  {
    this();
    this.templateId = templateId;
    setTemplateIdIsSet(true);
    this.number = number;
    setNumberIsSet(true);
    this.weight = weight;
    setWeightIsSet(true);
    this.orderAmount = orderAmount;
    this.sendToProvince = sendToProvince;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CalculatePostageParam(CalculatePostageParam other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.templateId = other.templateId;
    this.number = other.number;
    this.weight = other.weight;
    if (other.isSetOrderAmount()) {
      this.orderAmount = other.orderAmount;
    }
    if (other.isSetSendToProvince()) {
      this.sendToProvince = other.sendToProvince;
    }
  }

  public CalculatePostageParam deepCopy() {
    return new CalculatePostageParam(this);
  }

  @Override
  public void clear() {
    setTemplateIdIsSet(false);
    this.templateId = 0;
    setNumberIsSet(false);
    this.number = 0;
    setWeightIsSet(false);
    this.weight = 0;
    this.orderAmount = null;
    this.sendToProvince = null;
  }

  public int getTemplateId() {
    return this.templateId;
  }

  public CalculatePostageParam setTemplateId(int templateId) {
    this.templateId = templateId;
    setTemplateIdIsSet(true);

    return this;
  }

  public void unsetTemplateId() {
  __isset_bit_vector.clear(__TEMPLATEID_ISSET_ID);
  }

  /** Returns true if field templateId is set (has been asigned a value) and false otherwise */
  public boolean isSetTemplateId() {
    return __isset_bit_vector.get(__TEMPLATEID_ISSET_ID);
  }

  public void setTemplateIdIsSet(boolean value) {
    __isset_bit_vector.set(__TEMPLATEID_ISSET_ID, value);
  }

  public int getNumber() {
    return this.number;
  }

  public CalculatePostageParam setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);

    return this;
  }

  public void unsetNumber() {
  __isset_bit_vector.clear(__NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been asigned a value) and false otherwise */
  public boolean isSetNumber() {
    return __isset_bit_vector.get(__NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bit_vector.set(__NUMBER_ISSET_ID, value);
  }

  public int getWeight() {
    return this.weight;
  }

  public CalculatePostageParam setWeight(int weight) {
    this.weight = weight;
    setWeightIsSet(true);

    return this;
  }

  public void unsetWeight() {
  __isset_bit_vector.clear(__WEIGHT_ISSET_ID);
  }

  /** Returns true if field weight is set (has been asigned a value) and false otherwise */
  public boolean isSetWeight() {
    return __isset_bit_vector.get(__WEIGHT_ISSET_ID);
  }

  public void setWeightIsSet(boolean value) {
    __isset_bit_vector.set(__WEIGHT_ISSET_ID, value);
  }

  public String getOrderAmount() {
    return this.orderAmount;
  }

  public CalculatePostageParam setOrderAmount(String orderAmount) {
    this.orderAmount = orderAmount;
    
    return this;
  }

  public void unsetOrderAmount() {
    this.orderAmount = null;
  }

  /** Returns true if field orderAmount is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderAmount() {
    return this.orderAmount != null;
  }

  public void setOrderAmountIsSet(boolean value) {
    if (!value) {
      this.orderAmount = null;
    }
  }

  public String getSendToProvince() {
    return this.sendToProvince;
  }

  public CalculatePostageParam setSendToProvince(String sendToProvince) {
    this.sendToProvince = sendToProvince;
    
    return this;
  }

  public void unsetSendToProvince() {
    this.sendToProvince = null;
  }

  /** Returns true if field sendToProvince is set (has been asigned a value) and false otherwise */
  public boolean isSetSendToProvince() {
    return this.sendToProvince != null;
  }

  public void setSendToProvinceIsSet(boolean value) {
    if (!value) {
      this.sendToProvince = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEMPLATE_ID:
      if (value == null) {
        unsetTemplateId();
      } else {
        setTemplateId((Integer)value);
      }
      break;
    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Integer)value);
      }
      break;
    case WEIGHT:
      if (value == null) {
        unsetWeight();
      } else {
        setWeight((Integer)value);
      }
      break;
    case ORDER_AMOUNT:
      if (value == null) {
        unsetOrderAmount();
      } else {
        setOrderAmount((String)value);
      }
      break;
    case SEND_TO_PROVINCE:
      if (value == null) {
        unsetSendToProvince();
      } else {
        setSendToProvince((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEMPLATE_ID:
      return new Integer(getTemplateId());
    case NUMBER:
      return new Integer(getNumber());
    case WEIGHT:
      return new Integer(getWeight());
    case ORDER_AMOUNT:
      return getOrderAmount();
    case SEND_TO_PROVINCE:
      return getSendToProvince();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEMPLATE_ID:
      return isSetTemplateId();
    case NUMBER:
      return isSetNumber();
    case WEIGHT:
      return isSetWeight();
    case ORDER_AMOUNT:
      return isSetOrderAmount();
    case SEND_TO_PROVINCE:
      return isSetSendToProvince();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CalculatePostageParam)
      return this.equals((CalculatePostageParam)that);
    return false;
  }

  public boolean equals(CalculatePostageParam that) {
    if (that == null)
      return false;
    boolean this_present_templateId = true;
    boolean that_present_templateId = true;
    if (this_present_templateId || that_present_templateId) {
      if (!(this_present_templateId && that_present_templateId))
        return false;
      if (this.templateId != that.templateId)
        return false;
    }
    boolean this_present_number = true;
    boolean that_present_number = true;
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }
    boolean this_present_weight = true;
    boolean that_present_weight = true;
    if (this_present_weight || that_present_weight) {
      if (!(this_present_weight && that_present_weight))
        return false;
      if (this.weight != that.weight)
        return false;
    }
    boolean this_present_orderAmount = true && this.isSetOrderAmount();
    boolean that_present_orderAmount = true && that.isSetOrderAmount();
    if (this_present_orderAmount || that_present_orderAmount) {
      if (!(this_present_orderAmount && that_present_orderAmount))
        return false;
      if (!this.orderAmount.equals(that.orderAmount))
        return false;
    }
    boolean this_present_sendToProvince = true && this.isSetSendToProvince();
    boolean that_present_sendToProvince = true && that.isSetSendToProvince();
    if (this_present_sendToProvince || that_present_sendToProvince) {
      if (!(this_present_sendToProvince && that_present_sendToProvince))
        return false;
      if (!this.sendToProvince.equals(that.sendToProvince))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_templateId = true;
    builder.append(present_templateId);
    if (present_templateId)
      builder.append(templateId);
    boolean present_number = true;
    builder.append(present_number);
    if (present_number)
      builder.append(number);
    boolean present_weight = true;
    builder.append(present_weight);
    if (present_weight)
      builder.append(weight);
    boolean present_orderAmount = true && (isSetOrderAmount());
    builder.append(present_orderAmount);
    if (present_orderAmount)
      builder.append(orderAmount);
    boolean present_sendToProvince = true && (isSetSendToProvince());
    builder.append(present_sendToProvince);
    if (present_sendToProvince)
      builder.append(sendToProvince);
    return builder.toHashCode();
  }

  public int compareTo(CalculatePostageParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CalculatePostageParam typedOther = (CalculatePostageParam)other;

    lastComparison = Boolean.valueOf(isSetTemplateId()).compareTo(typedOther.isSetTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateId()) {
      lastComparison = TBaseHelper.compareTo(this.templateId, typedOther.templateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(typedOther.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = TBaseHelper.compareTo(this.number, typedOther.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeight()).compareTo(typedOther.isSetWeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeight()) {
      lastComparison = TBaseHelper.compareTo(this.weight, typedOther.weight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderAmount()).compareTo(typedOther.isSetOrderAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderAmount()) {
      lastComparison = TBaseHelper.compareTo(this.orderAmount, typedOther.orderAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendToProvince()).compareTo(typedOther.isSetSendToProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendToProvince()) {
      lastComparison = TBaseHelper.compareTo(this.sendToProvince, typedOther.sendToProvince);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // TEMPLATE_ID
          if (field.type == TType.I32) {
            this.templateId = iprot.readI32();
            setTemplateIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NUMBER
          if (field.type == TType.I32) {
            this.number = iprot.readI32();
            setNumberIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // WEIGHT
          if (field.type == TType.I32) {
            this.weight = iprot.readI32();
            setWeightIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ORDER_AMOUNT
          if (field.type == TType.STRING) {
            this.orderAmount = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SEND_TO_PROVINCE
          if (field.type == TType.STRING) {
            this.sendToProvince = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
    oprot.writeI32(this.templateId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUMBER_FIELD_DESC);
    oprot.writeI32(this.number);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
    oprot.writeI32(this.weight);
    oprot.writeFieldEnd();
    if (this.orderAmount != null) {
      oprot.writeFieldBegin(ORDER_AMOUNT_FIELD_DESC);
      oprot.writeString(this.orderAmount);
      oprot.writeFieldEnd();
    }
    if (this.sendToProvince != null) {
      oprot.writeFieldBegin(SEND_TO_PROVINCE_FIELD_DESC);
      oprot.writeString(this.sendToProvince);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CalculatePostageParam(");
    boolean first = true;
    sb.append("templateId:");
    sb.append(this.templateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number:");
    sb.append(this.number);
    first = false;
    if (!first) sb.append(", ");
    sb.append("weight:");
    sb.append(this.weight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderAmount:");
    if (this.orderAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.orderAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendToProvince:");
    if (this.sendToProvince == null) {
      sb.append("null");
    } else {
      sb.append(this.sendToProvince);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
