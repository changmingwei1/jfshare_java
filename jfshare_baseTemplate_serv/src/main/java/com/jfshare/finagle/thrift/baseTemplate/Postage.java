/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.baseTemplate;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class Postage implements TBase<Postage, Postage._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Postage");

  private static final TField SUPPORT_PROVINCE_FIELD_DESC = new TField("supportProvince", TType.STRING, (short)1);
  private static final TField RULE_FIELD_DESC = new TField("rule", TType.STRING, (short)2);


  public String supportProvince;
  public String rule;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUPPORT_PROVINCE((short)1, "supportProvince"),
    RULE((short)2, "rule");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUPPORT_PROVINCE
  	return SUPPORT_PROVINCE;
        case 2: // RULE
  	return RULE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUPPORT_PROVINCE, new FieldMetaData("supportProvince", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.RULE, new FieldMetaData("rule", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Postage.class, metaDataMap);
  }


  public Postage() {
  }

  public Postage(
    String supportProvince,
    String rule)
  {
    this();
    this.supportProvince = supportProvince;
    this.rule = rule;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Postage(Postage other) {
    if (other.isSetSupportProvince()) {
      this.supportProvince = other.supportProvince;
    }
    if (other.isSetRule()) {
      this.rule = other.rule;
    }
  }

  public Postage deepCopy() {
    return new Postage(this);
  }

  @Override
  public void clear() {
    this.supportProvince = null;
    this.rule = null;
  }

  public String getSupportProvince() {
    return this.supportProvince;
  }

  public Postage setSupportProvince(String supportProvince) {
    this.supportProvince = supportProvince;
    
    return this;
  }

  public void unsetSupportProvince() {
    this.supportProvince = null;
  }

  /** Returns true if field supportProvince is set (has been asigned a value) and false otherwise */
  public boolean isSetSupportProvince() {
    return this.supportProvince != null;
  }

  public void setSupportProvinceIsSet(boolean value) {
    if (!value) {
      this.supportProvince = null;
    }
  }

  public String getRule() {
    return this.rule;
  }

  public Postage setRule(String rule) {
    this.rule = rule;
    
    return this;
  }

  public void unsetRule() {
    this.rule = null;
  }

  /** Returns true if field rule is set (has been asigned a value) and false otherwise */
  public boolean isSetRule() {
    return this.rule != null;
  }

  public void setRuleIsSet(boolean value) {
    if (!value) {
      this.rule = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUPPORT_PROVINCE:
      if (value == null) {
        unsetSupportProvince();
      } else {
        setSupportProvince((String)value);
      }
      break;
    case RULE:
      if (value == null) {
        unsetRule();
      } else {
        setRule((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUPPORT_PROVINCE:
      return getSupportProvince();
    case RULE:
      return getRule();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUPPORT_PROVINCE:
      return isSetSupportProvince();
    case RULE:
      return isSetRule();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Postage)
      return this.equals((Postage)that);
    return false;
  }

  public boolean equals(Postage that) {
    if (that == null)
      return false;
    boolean this_present_supportProvince = true && this.isSetSupportProvince();
    boolean that_present_supportProvince = true && that.isSetSupportProvince();
    if (this_present_supportProvince || that_present_supportProvince) {
      if (!(this_present_supportProvince && that_present_supportProvince))
        return false;
      if (!this.supportProvince.equals(that.supportProvince))
        return false;
    }
    boolean this_present_rule = true && this.isSetRule();
    boolean that_present_rule = true && that.isSetRule();
    if (this_present_rule || that_present_rule) {
      if (!(this_present_rule && that_present_rule))
        return false;
      if (!this.rule.equals(that.rule))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_supportProvince = true && (isSetSupportProvince());
    builder.append(present_supportProvince);
    if (present_supportProvince)
      builder.append(supportProvince);
    boolean present_rule = true && (isSetRule());
    builder.append(present_rule);
    if (present_rule)
      builder.append(rule);
    return builder.toHashCode();
  }

  public int compareTo(Postage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Postage typedOther = (Postage)other;

    lastComparison = Boolean.valueOf(isSetSupportProvince()).compareTo(typedOther.isSetSupportProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupportProvince()) {
      lastComparison = TBaseHelper.compareTo(this.supportProvince, typedOther.supportProvince);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRule()).compareTo(typedOther.isSetRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRule()) {
      lastComparison = TBaseHelper.compareTo(this.rule, typedOther.rule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // SUPPORT_PROVINCE
          if (field.type == TType.STRING) {
            this.supportProvince = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // RULE
          if (field.type == TType.STRING) {
            this.rule = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.supportProvince != null) {
      oprot.writeFieldBegin(SUPPORT_PROVINCE_FIELD_DESC);
      oprot.writeString(this.supportProvince);
      oprot.writeFieldEnd();
    }
    if (this.rule != null) {
      oprot.writeFieldBegin(RULE_FIELD_DESC);
      oprot.writeString(this.rule);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Postage(");
    boolean first = true;
    sb.append("supportProvince:");
    if (this.supportProvince == null) {
      sb.append("null");
    } else {
      sb.append(this.supportProvince);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rule:");
    if (this.rule == null) {
      sb.append("null");
    } else {
      sb.append(this.rule);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
