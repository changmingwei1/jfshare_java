/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.common;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class AttributionId implements TBase<AttributionId, AttributionId._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("AttributionId");

  private static final TField PROVINCE_ID_FIELD_DESC = new TField("provinceId", TType.I32, (short)1);
  private static final TField CITY_ID_FIELD_DESC = new TField("cityId", TType.I32, (short)2);
  private static final TField COUNTY_ID_FIELD_DESC = new TField("countyId", TType.I32, (short)3);


  public int provinceId;
  public int cityId;
  public int countyId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PROVINCE_ID((short)1, "provinceId"),
    CITY_ID((short)2, "cityId"),
    COUNTY_ID((short)3, "countyId");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROVINCE_ID
  	return PROVINCE_ID;
        case 2: // CITY_ID
  	return CITY_ID;
        case 3: // COUNTY_ID
  	return COUNTY_ID;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __PROVINCEID_ISSET_ID = 0;
  private static final int __CITYID_ISSET_ID = 1;
  private static final int __COUNTYID_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROVINCE_ID, new FieldMetaData("provinceId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CITY_ID, new FieldMetaData("cityId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.COUNTY_ID, new FieldMetaData("countyId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(AttributionId.class, metaDataMap);
  }


  public AttributionId() {
  }

  public AttributionId(
    int provinceId,
    int cityId,
    int countyId)
  {
    this();
    this.provinceId = provinceId;
    setProvinceIdIsSet(true);
    this.cityId = cityId;
    setCityIdIsSet(true);
    this.countyId = countyId;
    setCountyIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AttributionId(AttributionId other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.provinceId = other.provinceId;
    this.cityId = other.cityId;
    this.countyId = other.countyId;
  }

  public AttributionId deepCopy() {
    return new AttributionId(this);
  }

  @Override
  public void clear() {
    setProvinceIdIsSet(false);
    this.provinceId = 0;
    setCityIdIsSet(false);
    this.cityId = 0;
    setCountyIdIsSet(false);
    this.countyId = 0;
  }

  public int getProvinceId() {
    return this.provinceId;
  }

  public AttributionId setProvinceId(int provinceId) {
    this.provinceId = provinceId;
    setProvinceIdIsSet(true);

    return this;
  }

  public void unsetProvinceId() {
  __isset_bit_vector.clear(__PROVINCEID_ISSET_ID);
  }

  /** Returns true if field provinceId is set (has been asigned a value) and false otherwise */
  public boolean isSetProvinceId() {
    return __isset_bit_vector.get(__PROVINCEID_ISSET_ID);
  }

  public void setProvinceIdIsSet(boolean value) {
    __isset_bit_vector.set(__PROVINCEID_ISSET_ID, value);
  }

  public int getCityId() {
    return this.cityId;
  }

  public AttributionId setCityId(int cityId) {
    this.cityId = cityId;
    setCityIdIsSet(true);

    return this;
  }

  public void unsetCityId() {
  __isset_bit_vector.clear(__CITYID_ISSET_ID);
  }

  /** Returns true if field cityId is set (has been asigned a value) and false otherwise */
  public boolean isSetCityId() {
    return __isset_bit_vector.get(__CITYID_ISSET_ID);
  }

  public void setCityIdIsSet(boolean value) {
    __isset_bit_vector.set(__CITYID_ISSET_ID, value);
  }

  public int getCountyId() {
    return this.countyId;
  }

  public AttributionId setCountyId(int countyId) {
    this.countyId = countyId;
    setCountyIdIsSet(true);

    return this;
  }

  public void unsetCountyId() {
  __isset_bit_vector.clear(__COUNTYID_ISSET_ID);
  }

  /** Returns true if field countyId is set (has been asigned a value) and false otherwise */
  public boolean isSetCountyId() {
    return __isset_bit_vector.get(__COUNTYID_ISSET_ID);
  }

  public void setCountyIdIsSet(boolean value) {
    __isset_bit_vector.set(__COUNTYID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROVINCE_ID:
      if (value == null) {
        unsetProvinceId();
      } else {
        setProvinceId((Integer)value);
      }
      break;
    case CITY_ID:
      if (value == null) {
        unsetCityId();
      } else {
        setCityId((Integer)value);
      }
      break;
    case COUNTY_ID:
      if (value == null) {
        unsetCountyId();
      } else {
        setCountyId((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROVINCE_ID:
      return new Integer(getProvinceId());
    case CITY_ID:
      return new Integer(getCityId());
    case COUNTY_ID:
      return new Integer(getCountyId());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROVINCE_ID:
      return isSetProvinceId();
    case CITY_ID:
      return isSetCityId();
    case COUNTY_ID:
      return isSetCountyId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AttributionId)
      return this.equals((AttributionId)that);
    return false;
  }

  public boolean equals(AttributionId that) {
    if (that == null)
      return false;
    boolean this_present_provinceId = true;
    boolean that_present_provinceId = true;
    if (this_present_provinceId || that_present_provinceId) {
      if (!(this_present_provinceId && that_present_provinceId))
        return false;
      if (this.provinceId != that.provinceId)
        return false;
    }
    boolean this_present_cityId = true;
    boolean that_present_cityId = true;
    if (this_present_cityId || that_present_cityId) {
      if (!(this_present_cityId && that_present_cityId))
        return false;
      if (this.cityId != that.cityId)
        return false;
    }
    boolean this_present_countyId = true;
    boolean that_present_countyId = true;
    if (this_present_countyId || that_present_countyId) {
      if (!(this_present_countyId && that_present_countyId))
        return false;
      if (this.countyId != that.countyId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_provinceId = true;
    builder.append(present_provinceId);
    if (present_provinceId)
      builder.append(provinceId);
    boolean present_cityId = true;
    builder.append(present_cityId);
    if (present_cityId)
      builder.append(cityId);
    boolean present_countyId = true;
    builder.append(present_countyId);
    if (present_countyId)
      builder.append(countyId);
    return builder.toHashCode();
  }

  public int compareTo(AttributionId other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AttributionId typedOther = (AttributionId)other;

    lastComparison = Boolean.valueOf(isSetProvinceId()).compareTo(typedOther.isSetProvinceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceId()) {
      lastComparison = TBaseHelper.compareTo(this.provinceId, typedOther.provinceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityId()).compareTo(typedOther.isSetCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityId()) {
      lastComparison = TBaseHelper.compareTo(this.cityId, typedOther.cityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountyId()).compareTo(typedOther.isSetCountyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountyId()) {
      lastComparison = TBaseHelper.compareTo(this.countyId, typedOther.countyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PROVINCE_ID
          if (field.type == TType.I32) {
            this.provinceId = iprot.readI32();
            setProvinceIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CITY_ID
          if (field.type == TType.I32) {
            this.cityId = iprot.readI32();
            setCityIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COUNTY_ID
          if (field.type == TType.I32) {
            this.countyId = iprot.readI32();
            setCountyIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(PROVINCE_ID_FIELD_DESC);
    oprot.writeI32(this.provinceId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CITY_ID_FIELD_DESC);
    oprot.writeI32(this.cityId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(COUNTY_ID_FIELD_DESC);
    oprot.writeI32(this.countyId);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AttributionId(");
    boolean first = true;
    sb.append("provinceId:");
    sb.append(this.provinceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityId:");
    sb.append(this.cityId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("countyId:");
    sb.append(this.countyId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
