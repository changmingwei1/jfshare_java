/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.buyer;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class Buyer implements TBase<Buyer, Buyer._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Buyer");

  private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I32, (short)1);
  private static final TField LOGIN_NAME_FIELD_DESC = new TField("loginName", TType.STRING, (short)2);
  private static final TField USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, (short)3);
  private static final TField PWD_ENC_FIELD_DESC = new TField("pwdEnc", TType.STRING, (short)4);
  private static final TField FAV_IMG_FIELD_DESC = new TField("favImg", TType.STRING, (short)5);
  private static final TField BIRTHDAY_FIELD_DESC = new TField("birthday", TType.STRING, (short)6);
  private static final TField SEX_FIELD_DESC = new TField("sex", TType.I32, (short)7);
  private static final TField ID_CARD_FIELD_DESC = new TField("idCard", TType.STRING, (short)8);
  private static final TField MOBILE_FIELD_DESC = new TField("mobile", TType.STRING, (short)9);
  private static final TField TEL_FIELD_DESC = new TField("tel", TType.STRING, (short)10);
  private static final TField EMAIL_FIELD_DESC = new TField("email", TType.STRING, (short)11);
  private static final TField PROVINCE_ID_FIELD_DESC = new TField("provinceId", TType.I32, (short)12);
  private static final TField CITY_ID_FIELD_DESC = new TField("cityId", TType.I32, (short)13);
  private static final TField COUNTY_ID_FIELD_DESC = new TField("countyId", TType.I32, (short)14);
  private static final TField PROVINCE_NAME_FIELD_DESC = new TField("provinceName", TType.STRING, (short)15);
  private static final TField CITY_NAME_FIELD_DESC = new TField("cityName", TType.STRING, (short)16);
  private static final TField COUNTY_NAME_FIELD_DESC = new TField("countyName", TType.STRING, (short)17);
  private static final TField ADDRESS_FIELD_DESC = new TField("address", TType.STRING, (short)18);
  private static final TField POST_CODE_FIELD_DESC = new TField("postCode", TType.STRING, (short)19);
  private static final TField DEGREE_FIELD_DESC = new TField("degree", TType.I32, (short)20);
  private static final TField SALARY_FIELD_DESC = new TField("salary", TType.I32, (short)21);
  private static final TField REMARK_FIELD_DESC = new TField("remark", TType.STRING, (short)22);
  private static final TField SERIAL_FIELD_DESC = new TField("serial", TType.I32, (short)23);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.STRING, (short)24);
  private static final TField LAST_UPDATE_TIME_FIELD_DESC = new TField("lastUpdateTime", TType.STRING, (short)25);


  public int userId;
  public String loginName;
  public String userName;
  public String pwdEnc;
  public String favImg;
  public String birthday;
  public int sex;
  public String idCard;
  public String mobile;
  public String tel;
  public String email;
  public int provinceId;
  public int cityId;
  public int countyId;
  public String provinceName;
  public String cityName;
  public String countyName;
  public String address;
  public String postCode;
  public int degree;
  public int salary;
  public String remark;
  public int serial;
  public String createTime;
  public String lastUpdateTime;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_ID((short)1, "userId"),
    LOGIN_NAME((short)2, "loginName"),
    USER_NAME((short)3, "userName"),
    PWD_ENC((short)4, "pwdEnc"),
    FAV_IMG((short)5, "favImg"),
    BIRTHDAY((short)6, "birthday"),
    SEX((short)7, "sex"),
    ID_CARD((short)8, "idCard"),
    MOBILE((short)9, "mobile"),
    TEL((short)10, "tel"),
    EMAIL((short)11, "email"),
    PROVINCE_ID((short)12, "provinceId"),
    CITY_ID((short)13, "cityId"),
    COUNTY_ID((short)14, "countyId"),
    PROVINCE_NAME((short)15, "provinceName"),
    CITY_NAME((short)16, "cityName"),
    COUNTY_NAME((short)17, "countyName"),
    ADDRESS((short)18, "address"),
    POST_CODE((short)19, "postCode"),
    DEGREE((short)20, "degree"),
    SALARY((short)21, "salary"),
    REMARK((short)22, "remark"),
    SERIAL((short)23, "serial"),
    CREATE_TIME((short)24, "createTime"),
    LAST_UPDATE_TIME((short)25, "lastUpdateTime");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
  	return USER_ID;
        case 2: // LOGIN_NAME
  	return LOGIN_NAME;
        case 3: // USER_NAME
  	return USER_NAME;
        case 4: // PWD_ENC
  	return PWD_ENC;
        case 5: // FAV_IMG
  	return FAV_IMG;
        case 6: // BIRTHDAY
  	return BIRTHDAY;
        case 7: // SEX
  	return SEX;
        case 8: // ID_CARD
  	return ID_CARD;
        case 9: // MOBILE
  	return MOBILE;
        case 10: // TEL
  	return TEL;
        case 11: // EMAIL
  	return EMAIL;
        case 12: // PROVINCE_ID
  	return PROVINCE_ID;
        case 13: // CITY_ID
  	return CITY_ID;
        case 14: // COUNTY_ID
  	return COUNTY_ID;
        case 15: // PROVINCE_NAME
  	return PROVINCE_NAME;
        case 16: // CITY_NAME
  	return CITY_NAME;
        case 17: // COUNTY_NAME
  	return COUNTY_NAME;
        case 18: // ADDRESS
  	return ADDRESS;
        case 19: // POST_CODE
  	return POST_CODE;
        case 20: // DEGREE
  	return DEGREE;
        case 21: // SALARY
  	return SALARY;
        case 22: // REMARK
  	return REMARK;
        case 23: // SERIAL
  	return SERIAL;
        case 24: // CREATE_TIME
  	return CREATE_TIME;
        case 25: // LAST_UPDATE_TIME
  	return LAST_UPDATE_TIME;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __SEX_ISSET_ID = 1;
  private static final int __PROVINCEID_ISSET_ID = 2;
  private static final int __CITYID_ISSET_ID = 3;
  private static final int __COUNTYID_ISSET_ID = 4;
  private static final int __DEGREE_ISSET_ID = 5;
  private static final int __SALARY_ISSET_ID = 6;
  private static final int __SERIAL_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.LOGIN_NAME, new FieldMetaData("loginName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new FieldMetaData("userName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PWD_ENC, new FieldMetaData("pwdEnc", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.FAV_IMG, new FieldMetaData("favImg", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.BIRTHDAY, new FieldMetaData("birthday", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SEX, new FieldMetaData("sex", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ID_CARD, new FieldMetaData("idCard", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new FieldMetaData("mobile", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TEL, new FieldMetaData("tel", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new FieldMetaData("email", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PROVINCE_ID, new FieldMetaData("provinceId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CITY_ID, new FieldMetaData("cityId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.COUNTY_ID, new FieldMetaData("countyId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PROVINCE_NAME, new FieldMetaData("provinceName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CITY_NAME, new FieldMetaData("cityName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.COUNTY_NAME, new FieldMetaData("countyName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new FieldMetaData("address", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.POST_CODE, new FieldMetaData("postCode", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DEGREE, new FieldMetaData("degree", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.SALARY, new FieldMetaData("salary", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.REMARK, new FieldMetaData("remark", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SERIAL, new FieldMetaData("serial", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new FieldMetaData("lastUpdateTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Buyer.class, metaDataMap);
  }


  public Buyer() {
  }

  public Buyer(
    int userId,
    String loginName,
    String userName,
    String pwdEnc,
    String favImg,
    String birthday,
    int sex,
    String idCard,
    String mobile,
    String tel,
    String email,
    int provinceId,
    int cityId,
    int countyId,
    String provinceName,
    String cityName,
    String countyName,
    String address,
    String postCode,
    int degree,
    int salary,
    String remark,
    int serial,
    String createTime,
    String lastUpdateTime)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.loginName = loginName;
    this.userName = userName;
    this.pwdEnc = pwdEnc;
    this.favImg = favImg;
    this.birthday = birthday;
    this.sex = sex;
    setSexIsSet(true);
    this.idCard = idCard;
    this.mobile = mobile;
    this.tel = tel;
    this.email = email;
    this.provinceId = provinceId;
    setProvinceIdIsSet(true);
    this.cityId = cityId;
    setCityIdIsSet(true);
    this.countyId = countyId;
    setCountyIdIsSet(true);
    this.provinceName = provinceName;
    this.cityName = cityName;
    this.countyName = countyName;
    this.address = address;
    this.postCode = postCode;
    this.degree = degree;
    setDegreeIsSet(true);
    this.salary = salary;
    setSalaryIsSet(true);
    this.remark = remark;
    this.serial = serial;
    setSerialIsSet(true);
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Buyer(Buyer other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.userId = other.userId;
    if (other.isSetLoginName()) {
      this.loginName = other.loginName;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetPwdEnc()) {
      this.pwdEnc = other.pwdEnc;
    }
    if (other.isSetFavImg()) {
      this.favImg = other.favImg;
    }
    if (other.isSetBirthday()) {
      this.birthday = other.birthday;
    }
    this.sex = other.sex;
    if (other.isSetIdCard()) {
      this.idCard = other.idCard;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetTel()) {
      this.tel = other.tel;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    this.provinceId = other.provinceId;
    this.cityId = other.cityId;
    this.countyId = other.countyId;
    if (other.isSetProvinceName()) {
      this.provinceName = other.provinceName;
    }
    if (other.isSetCityName()) {
      this.cityName = other.cityName;
    }
    if (other.isSetCountyName()) {
      this.countyName = other.countyName;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetPostCode()) {
      this.postCode = other.postCode;
    }
    this.degree = other.degree;
    this.salary = other.salary;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.serial = other.serial;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
  }

  public Buyer deepCopy() {
    return new Buyer(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.loginName = null;
    this.userName = null;
    this.pwdEnc = null;
    this.favImg = null;
    this.birthday = null;
    setSexIsSet(false);
    this.sex = 0;
    this.idCard = null;
    this.mobile = null;
    this.tel = null;
    this.email = null;
    setProvinceIdIsSet(false);
    this.provinceId = 0;
    setCityIdIsSet(false);
    this.cityId = 0;
    setCountyIdIsSet(false);
    this.countyId = 0;
    this.provinceName = null;
    this.cityName = null;
    this.countyName = null;
    this.address = null;
    this.postCode = null;
    setDegreeIsSet(false);
    this.degree = 0;
    setSalaryIsSet(false);
    this.salary = 0;
    this.remark = null;
    setSerialIsSet(false);
    this.serial = 0;
    this.createTime = null;
    this.lastUpdateTime = null;
  }

  public int getUserId() {
    return this.userId;
  }

  public Buyer setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);

    return this;
  }

  public void unsetUserId() {
  __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been asigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public String getLoginName() {
    return this.loginName;
  }

  public Buyer setLoginName(String loginName) {
    this.loginName = loginName;
    
    return this;
  }

  public void unsetLoginName() {
    this.loginName = null;
  }

  /** Returns true if field loginName is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginName() {
    return this.loginName != null;
  }

  public void setLoginNameIsSet(boolean value) {
    if (!value) {
      this.loginName = null;
    }
  }

  public String getUserName() {
    return this.userName;
  }

  public Buyer setUserName(String userName) {
    this.userName = userName;
    
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been asigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getPwdEnc() {
    return this.pwdEnc;
  }

  public Buyer setPwdEnc(String pwdEnc) {
    this.pwdEnc = pwdEnc;
    
    return this;
  }

  public void unsetPwdEnc() {
    this.pwdEnc = null;
  }

  /** Returns true if field pwdEnc is set (has been asigned a value) and false otherwise */
  public boolean isSetPwdEnc() {
    return this.pwdEnc != null;
  }

  public void setPwdEncIsSet(boolean value) {
    if (!value) {
      this.pwdEnc = null;
    }
  }

  public String getFavImg() {
    return this.favImg;
  }

  public Buyer setFavImg(String favImg) {
    this.favImg = favImg;
    
    return this;
  }

  public void unsetFavImg() {
    this.favImg = null;
  }

  /** Returns true if field favImg is set (has been asigned a value) and false otherwise */
  public boolean isSetFavImg() {
    return this.favImg != null;
  }

  public void setFavImgIsSet(boolean value) {
    if (!value) {
      this.favImg = null;
    }
  }

  public String getBirthday() {
    return this.birthday;
  }

  public Buyer setBirthday(String birthday) {
    this.birthday = birthday;
    
    return this;
  }

  public void unsetBirthday() {
    this.birthday = null;
  }

  /** Returns true if field birthday is set (has been asigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return this.birthday != null;
  }

  public void setBirthdayIsSet(boolean value) {
    if (!value) {
      this.birthday = null;
    }
  }

  public int getSex() {
    return this.sex;
  }

  public Buyer setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);

    return this;
  }

  public void unsetSex() {
  __isset_bit_vector.clear(__SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been asigned a value) and false otherwise */
  public boolean isSetSex() {
    return __isset_bit_vector.get(__SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bit_vector.set(__SEX_ISSET_ID, value);
  }

  public String getIdCard() {
    return this.idCard;
  }

  public Buyer setIdCard(String idCard) {
    this.idCard = idCard;
    
    return this;
  }

  public void unsetIdCard() {
    this.idCard = null;
  }

  /** Returns true if field idCard is set (has been asigned a value) and false otherwise */
  public boolean isSetIdCard() {
    return this.idCard != null;
  }

  public void setIdCardIsSet(boolean value) {
    if (!value) {
      this.idCard = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public Buyer setMobile(String mobile) {
    this.mobile = mobile;
    
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been asigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getTel() {
    return this.tel;
  }

  public Buyer setTel(String tel) {
    this.tel = tel;
    
    return this;
  }

  public void unsetTel() {
    this.tel = null;
  }

  /** Returns true if field tel is set (has been asigned a value) and false otherwise */
  public boolean isSetTel() {
    return this.tel != null;
  }

  public void setTelIsSet(boolean value) {
    if (!value) {
      this.tel = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public Buyer setEmail(String email) {
    this.email = email;
    
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been asigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public int getProvinceId() {
    return this.provinceId;
  }

  public Buyer setProvinceId(int provinceId) {
    this.provinceId = provinceId;
    setProvinceIdIsSet(true);

    return this;
  }

  public void unsetProvinceId() {
  __isset_bit_vector.clear(__PROVINCEID_ISSET_ID);
  }

  /** Returns true if field provinceId is set (has been asigned a value) and false otherwise */
  public boolean isSetProvinceId() {
    return __isset_bit_vector.get(__PROVINCEID_ISSET_ID);
  }

  public void setProvinceIdIsSet(boolean value) {
    __isset_bit_vector.set(__PROVINCEID_ISSET_ID, value);
  }

  public int getCityId() {
    return this.cityId;
  }

  public Buyer setCityId(int cityId) {
    this.cityId = cityId;
    setCityIdIsSet(true);

    return this;
  }

  public void unsetCityId() {
  __isset_bit_vector.clear(__CITYID_ISSET_ID);
  }

  /** Returns true if field cityId is set (has been asigned a value) and false otherwise */
  public boolean isSetCityId() {
    return __isset_bit_vector.get(__CITYID_ISSET_ID);
  }

  public void setCityIdIsSet(boolean value) {
    __isset_bit_vector.set(__CITYID_ISSET_ID, value);
  }

  public int getCountyId() {
    return this.countyId;
  }

  public Buyer setCountyId(int countyId) {
    this.countyId = countyId;
    setCountyIdIsSet(true);

    return this;
  }

  public void unsetCountyId() {
  __isset_bit_vector.clear(__COUNTYID_ISSET_ID);
  }

  /** Returns true if field countyId is set (has been asigned a value) and false otherwise */
  public boolean isSetCountyId() {
    return __isset_bit_vector.get(__COUNTYID_ISSET_ID);
  }

  public void setCountyIdIsSet(boolean value) {
    __isset_bit_vector.set(__COUNTYID_ISSET_ID, value);
  }

  public String getProvinceName() {
    return this.provinceName;
  }

  public Buyer setProvinceName(String provinceName) {
    this.provinceName = provinceName;
    
    return this;
  }

  public void unsetProvinceName() {
    this.provinceName = null;
  }

  /** Returns true if field provinceName is set (has been asigned a value) and false otherwise */
  public boolean isSetProvinceName() {
    return this.provinceName != null;
  }

  public void setProvinceNameIsSet(boolean value) {
    if (!value) {
      this.provinceName = null;
    }
  }

  public String getCityName() {
    return this.cityName;
  }

  public Buyer setCityName(String cityName) {
    this.cityName = cityName;
    
    return this;
  }

  public void unsetCityName() {
    this.cityName = null;
  }

  /** Returns true if field cityName is set (has been asigned a value) and false otherwise */
  public boolean isSetCityName() {
    return this.cityName != null;
  }

  public void setCityNameIsSet(boolean value) {
    if (!value) {
      this.cityName = null;
    }
  }

  public String getCountyName() {
    return this.countyName;
  }

  public Buyer setCountyName(String countyName) {
    this.countyName = countyName;
    
    return this;
  }

  public void unsetCountyName() {
    this.countyName = null;
  }

  /** Returns true if field countyName is set (has been asigned a value) and false otherwise */
  public boolean isSetCountyName() {
    return this.countyName != null;
  }

  public void setCountyNameIsSet(boolean value) {
    if (!value) {
      this.countyName = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public Buyer setAddress(String address) {
    this.address = address;
    
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been asigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getPostCode() {
    return this.postCode;
  }

  public Buyer setPostCode(String postCode) {
    this.postCode = postCode;
    
    return this;
  }

  public void unsetPostCode() {
    this.postCode = null;
  }

  /** Returns true if field postCode is set (has been asigned a value) and false otherwise */
  public boolean isSetPostCode() {
    return this.postCode != null;
  }

  public void setPostCodeIsSet(boolean value) {
    if (!value) {
      this.postCode = null;
    }
  }

  public int getDegree() {
    return this.degree;
  }

  public Buyer setDegree(int degree) {
    this.degree = degree;
    setDegreeIsSet(true);

    return this;
  }

  public void unsetDegree() {
  __isset_bit_vector.clear(__DEGREE_ISSET_ID);
  }

  /** Returns true if field degree is set (has been asigned a value) and false otherwise */
  public boolean isSetDegree() {
    return __isset_bit_vector.get(__DEGREE_ISSET_ID);
  }

  public void setDegreeIsSet(boolean value) {
    __isset_bit_vector.set(__DEGREE_ISSET_ID, value);
  }

  public int getSalary() {
    return this.salary;
  }

  public Buyer setSalary(int salary) {
    this.salary = salary;
    setSalaryIsSet(true);

    return this;
  }

  public void unsetSalary() {
  __isset_bit_vector.clear(__SALARY_ISSET_ID);
  }

  /** Returns true if field salary is set (has been asigned a value) and false otherwise */
  public boolean isSetSalary() {
    return __isset_bit_vector.get(__SALARY_ISSET_ID);
  }

  public void setSalaryIsSet(boolean value) {
    __isset_bit_vector.set(__SALARY_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public Buyer setRemark(String remark) {
    this.remark = remark;
    
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been asigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getSerial() {
    return this.serial;
  }

  public Buyer setSerial(int serial) {
    this.serial = serial;
    setSerialIsSet(true);

    return this;
  }

  public void unsetSerial() {
  __isset_bit_vector.clear(__SERIAL_ISSET_ID);
  }

  /** Returns true if field serial is set (has been asigned a value) and false otherwise */
  public boolean isSetSerial() {
    return __isset_bit_vector.get(__SERIAL_ISSET_ID);
  }

  public void setSerialIsSet(boolean value) {
    __isset_bit_vector.set(__SERIAL_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public Buyer setCreateTime(String createTime) {
    this.createTime = createTime;
    
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public Buyer setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been asigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;
    case LOGIN_NAME:
      if (value == null) {
        unsetLoginName();
      } else {
        setLoginName((String)value);
      }
      break;
    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;
    case PWD_ENC:
      if (value == null) {
        unsetPwdEnc();
      } else {
        setPwdEnc((String)value);
      }
      break;
    case FAV_IMG:
      if (value == null) {
        unsetFavImg();
      } else {
        setFavImg((String)value);
      }
      break;
    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((String)value);
      }
      break;
    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Integer)value);
      }
      break;
    case ID_CARD:
      if (value == null) {
        unsetIdCard();
      } else {
        setIdCard((String)value);
      }
      break;
    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;
    case TEL:
      if (value == null) {
        unsetTel();
      } else {
        setTel((String)value);
      }
      break;
    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;
    case PROVINCE_ID:
      if (value == null) {
        unsetProvinceId();
      } else {
        setProvinceId((Integer)value);
      }
      break;
    case CITY_ID:
      if (value == null) {
        unsetCityId();
      } else {
        setCityId((Integer)value);
      }
      break;
    case COUNTY_ID:
      if (value == null) {
        unsetCountyId();
      } else {
        setCountyId((Integer)value);
      }
      break;
    case PROVINCE_NAME:
      if (value == null) {
        unsetProvinceName();
      } else {
        setProvinceName((String)value);
      }
      break;
    case CITY_NAME:
      if (value == null) {
        unsetCityName();
      } else {
        setCityName((String)value);
      }
      break;
    case COUNTY_NAME:
      if (value == null) {
        unsetCountyName();
      } else {
        setCountyName((String)value);
      }
      break;
    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;
    case POST_CODE:
      if (value == null) {
        unsetPostCode();
      } else {
        setPostCode((String)value);
      }
      break;
    case DEGREE:
      if (value == null) {
        unsetDegree();
      } else {
        setDegree((Integer)value);
      }
      break;
    case SALARY:
      if (value == null) {
        unsetSalary();
      } else {
        setSalary((Integer)value);
      }
      break;
    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;
    case SERIAL:
      if (value == null) {
        unsetSerial();
      } else {
        setSerial((Integer)value);
      }
      break;
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;
    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return new Integer(getUserId());
    case LOGIN_NAME:
      return getLoginName();
    case USER_NAME:
      return getUserName();
    case PWD_ENC:
      return getPwdEnc();
    case FAV_IMG:
      return getFavImg();
    case BIRTHDAY:
      return getBirthday();
    case SEX:
      return new Integer(getSex());
    case ID_CARD:
      return getIdCard();
    case MOBILE:
      return getMobile();
    case TEL:
      return getTel();
    case EMAIL:
      return getEmail();
    case PROVINCE_ID:
      return new Integer(getProvinceId());
    case CITY_ID:
      return new Integer(getCityId());
    case COUNTY_ID:
      return new Integer(getCountyId());
    case PROVINCE_NAME:
      return getProvinceName();
    case CITY_NAME:
      return getCityName();
    case COUNTY_NAME:
      return getCountyName();
    case ADDRESS:
      return getAddress();
    case POST_CODE:
      return getPostCode();
    case DEGREE:
      return new Integer(getDegree());
    case SALARY:
      return new Integer(getSalary());
    case REMARK:
      return getRemark();
    case SERIAL:
      return new Integer(getSerial());
    case CREATE_TIME:
      return getCreateTime();
    case LAST_UPDATE_TIME:
      return getLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case LOGIN_NAME:
      return isSetLoginName();
    case USER_NAME:
      return isSetUserName();
    case PWD_ENC:
      return isSetPwdEnc();
    case FAV_IMG:
      return isSetFavImg();
    case BIRTHDAY:
      return isSetBirthday();
    case SEX:
      return isSetSex();
    case ID_CARD:
      return isSetIdCard();
    case MOBILE:
      return isSetMobile();
    case TEL:
      return isSetTel();
    case EMAIL:
      return isSetEmail();
    case PROVINCE_ID:
      return isSetProvinceId();
    case CITY_ID:
      return isSetCityId();
    case COUNTY_ID:
      return isSetCountyId();
    case PROVINCE_NAME:
      return isSetProvinceName();
    case CITY_NAME:
      return isSetCityName();
    case COUNTY_NAME:
      return isSetCountyName();
    case ADDRESS:
      return isSetAddress();
    case POST_CODE:
      return isSetPostCode();
    case DEGREE:
      return isSetDegree();
    case SALARY:
      return isSetSalary();
    case REMARK:
      return isSetRemark();
    case SERIAL:
      return isSetSerial();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Buyer)
      return this.equals((Buyer)that);
    return false;
  }

  public boolean equals(Buyer that) {
    if (that == null)
      return false;
    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }
    boolean this_present_loginName = true && this.isSetLoginName();
    boolean that_present_loginName = true && that.isSetLoginName();
    if (this_present_loginName || that_present_loginName) {
      if (!(this_present_loginName && that_present_loginName))
        return false;
      if (!this.loginName.equals(that.loginName))
        return false;
    }
    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }
    boolean this_present_pwdEnc = true && this.isSetPwdEnc();
    boolean that_present_pwdEnc = true && that.isSetPwdEnc();
    if (this_present_pwdEnc || that_present_pwdEnc) {
      if (!(this_present_pwdEnc && that_present_pwdEnc))
        return false;
      if (!this.pwdEnc.equals(that.pwdEnc))
        return false;
    }
    boolean this_present_favImg = true && this.isSetFavImg();
    boolean that_present_favImg = true && that.isSetFavImg();
    if (this_present_favImg || that_present_favImg) {
      if (!(this_present_favImg && that_present_favImg))
        return false;
      if (!this.favImg.equals(that.favImg))
        return false;
    }
    boolean this_present_birthday = true && this.isSetBirthday();
    boolean that_present_birthday = true && that.isSetBirthday();
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (!this.birthday.equals(that.birthday))
        return false;
    }
    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }
    boolean this_present_idCard = true && this.isSetIdCard();
    boolean that_present_idCard = true && that.isSetIdCard();
    if (this_present_idCard || that_present_idCard) {
      if (!(this_present_idCard && that_present_idCard))
        return false;
      if (!this.idCard.equals(that.idCard))
        return false;
    }
    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }
    boolean this_present_tel = true && this.isSetTel();
    boolean that_present_tel = true && that.isSetTel();
    if (this_present_tel || that_present_tel) {
      if (!(this_present_tel && that_present_tel))
        return false;
      if (!this.tel.equals(that.tel))
        return false;
    }
    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }
    boolean this_present_provinceId = true;
    boolean that_present_provinceId = true;
    if (this_present_provinceId || that_present_provinceId) {
      if (!(this_present_provinceId && that_present_provinceId))
        return false;
      if (this.provinceId != that.provinceId)
        return false;
    }
    boolean this_present_cityId = true;
    boolean that_present_cityId = true;
    if (this_present_cityId || that_present_cityId) {
      if (!(this_present_cityId && that_present_cityId))
        return false;
      if (this.cityId != that.cityId)
        return false;
    }
    boolean this_present_countyId = true;
    boolean that_present_countyId = true;
    if (this_present_countyId || that_present_countyId) {
      if (!(this_present_countyId && that_present_countyId))
        return false;
      if (this.countyId != that.countyId)
        return false;
    }
    boolean this_present_provinceName = true && this.isSetProvinceName();
    boolean that_present_provinceName = true && that.isSetProvinceName();
    if (this_present_provinceName || that_present_provinceName) {
      if (!(this_present_provinceName && that_present_provinceName))
        return false;
      if (!this.provinceName.equals(that.provinceName))
        return false;
    }
    boolean this_present_cityName = true && this.isSetCityName();
    boolean that_present_cityName = true && that.isSetCityName();
    if (this_present_cityName || that_present_cityName) {
      if (!(this_present_cityName && that_present_cityName))
        return false;
      if (!this.cityName.equals(that.cityName))
        return false;
    }
    boolean this_present_countyName = true && this.isSetCountyName();
    boolean that_present_countyName = true && that.isSetCountyName();
    if (this_present_countyName || that_present_countyName) {
      if (!(this_present_countyName && that_present_countyName))
        return false;
      if (!this.countyName.equals(that.countyName))
        return false;
    }
    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }
    boolean this_present_postCode = true && this.isSetPostCode();
    boolean that_present_postCode = true && that.isSetPostCode();
    if (this_present_postCode || that_present_postCode) {
      if (!(this_present_postCode && that_present_postCode))
        return false;
      if (!this.postCode.equals(that.postCode))
        return false;
    }
    boolean this_present_degree = true;
    boolean that_present_degree = true;
    if (this_present_degree || that_present_degree) {
      if (!(this_present_degree && that_present_degree))
        return false;
      if (this.degree != that.degree)
        return false;
    }
    boolean this_present_salary = true;
    boolean that_present_salary = true;
    if (this_present_salary || that_present_salary) {
      if (!(this_present_salary && that_present_salary))
        return false;
      if (this.salary != that.salary)
        return false;
    }
    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }
    boolean this_present_serial = true;
    boolean that_present_serial = true;
    if (this_present_serial || that_present_serial) {
      if (!(this_present_serial && that_present_serial))
        return false;
      if (this.serial != that.serial)
        return false;
    }
    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }
    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_userId = true;
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);
    boolean present_loginName = true && (isSetLoginName());
    builder.append(present_loginName);
    if (present_loginName)
      builder.append(loginName);
    boolean present_userName = true && (isSetUserName());
    builder.append(present_userName);
    if (present_userName)
      builder.append(userName);
    boolean present_pwdEnc = true && (isSetPwdEnc());
    builder.append(present_pwdEnc);
    if (present_pwdEnc)
      builder.append(pwdEnc);
    boolean present_favImg = true && (isSetFavImg());
    builder.append(present_favImg);
    if (present_favImg)
      builder.append(favImg);
    boolean present_birthday = true && (isSetBirthday());
    builder.append(present_birthday);
    if (present_birthday)
      builder.append(birthday);
    boolean present_sex = true;
    builder.append(present_sex);
    if (present_sex)
      builder.append(sex);
    boolean present_idCard = true && (isSetIdCard());
    builder.append(present_idCard);
    if (present_idCard)
      builder.append(idCard);
    boolean present_mobile = true && (isSetMobile());
    builder.append(present_mobile);
    if (present_mobile)
      builder.append(mobile);
    boolean present_tel = true && (isSetTel());
    builder.append(present_tel);
    if (present_tel)
      builder.append(tel);
    boolean present_email = true && (isSetEmail());
    builder.append(present_email);
    if (present_email)
      builder.append(email);
    boolean present_provinceId = true;
    builder.append(present_provinceId);
    if (present_provinceId)
      builder.append(provinceId);
    boolean present_cityId = true;
    builder.append(present_cityId);
    if (present_cityId)
      builder.append(cityId);
    boolean present_countyId = true;
    builder.append(present_countyId);
    if (present_countyId)
      builder.append(countyId);
    boolean present_provinceName = true && (isSetProvinceName());
    builder.append(present_provinceName);
    if (present_provinceName)
      builder.append(provinceName);
    boolean present_cityName = true && (isSetCityName());
    builder.append(present_cityName);
    if (present_cityName)
      builder.append(cityName);
    boolean present_countyName = true && (isSetCountyName());
    builder.append(present_countyName);
    if (present_countyName)
      builder.append(countyName);
    boolean present_address = true && (isSetAddress());
    builder.append(present_address);
    if (present_address)
      builder.append(address);
    boolean present_postCode = true && (isSetPostCode());
    builder.append(present_postCode);
    if (present_postCode)
      builder.append(postCode);
    boolean present_degree = true;
    builder.append(present_degree);
    if (present_degree)
      builder.append(degree);
    boolean present_salary = true;
    builder.append(present_salary);
    if (present_salary)
      builder.append(salary);
    boolean present_remark = true && (isSetRemark());
    builder.append(present_remark);
    if (present_remark)
      builder.append(remark);
    boolean present_serial = true;
    builder.append(present_serial);
    if (present_serial)
      builder.append(serial);
    boolean present_createTime = true && (isSetCreateTime());
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);
    boolean present_lastUpdateTime = true && (isSetLastUpdateTime());
    builder.append(present_lastUpdateTime);
    if (present_lastUpdateTime)
      builder.append(lastUpdateTime);
    return builder.toHashCode();
  }

  public int compareTo(Buyer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Buyer typedOther = (Buyer)other;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginName()).compareTo(typedOther.isSetLoginName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginName()) {
      lastComparison = TBaseHelper.compareTo(this.loginName, typedOther.loginName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = TBaseHelper.compareTo(this.userName, typedOther.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPwdEnc()).compareTo(typedOther.isSetPwdEnc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPwdEnc()) {
      lastComparison = TBaseHelper.compareTo(this.pwdEnc, typedOther.pwdEnc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFavImg()).compareTo(typedOther.isSetFavImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFavImg()) {
      lastComparison = TBaseHelper.compareTo(this.favImg, typedOther.favImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(typedOther.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = TBaseHelper.compareTo(this.birthday, typedOther.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdCard()).compareTo(typedOther.isSetIdCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdCard()) {
      lastComparison = TBaseHelper.compareTo(this.idCard, typedOther.idCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(typedOther.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = TBaseHelper.compareTo(this.mobile, typedOther.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTel()).compareTo(typedOther.isSetTel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTel()) {
      lastComparison = TBaseHelper.compareTo(this.tel, typedOther.tel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = TBaseHelper.compareTo(this.email, typedOther.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceId()).compareTo(typedOther.isSetProvinceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceId()) {
      lastComparison = TBaseHelper.compareTo(this.provinceId, typedOther.provinceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityId()).compareTo(typedOther.isSetCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityId()) {
      lastComparison = TBaseHelper.compareTo(this.cityId, typedOther.cityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountyId()).compareTo(typedOther.isSetCountyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountyId()) {
      lastComparison = TBaseHelper.compareTo(this.countyId, typedOther.countyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceName()).compareTo(typedOther.isSetProvinceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceName()) {
      lastComparison = TBaseHelper.compareTo(this.provinceName, typedOther.provinceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityName()).compareTo(typedOther.isSetCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityName()) {
      lastComparison = TBaseHelper.compareTo(this.cityName, typedOther.cityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountyName()).compareTo(typedOther.isSetCountyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountyName()) {
      lastComparison = TBaseHelper.compareTo(this.countyName, typedOther.countyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(typedOther.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = TBaseHelper.compareTo(this.address, typedOther.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostCode()).compareTo(typedOther.isSetPostCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostCode()) {
      lastComparison = TBaseHelper.compareTo(this.postCode, typedOther.postCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDegree()).compareTo(typedOther.isSetDegree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDegree()) {
      lastComparison = TBaseHelper.compareTo(this.degree, typedOther.degree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary()).compareTo(typedOther.isSetSalary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary()) {
      lastComparison = TBaseHelper.compareTo(this.salary, typedOther.salary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(typedOther.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = TBaseHelper.compareTo(this.remark, typedOther.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerial()).compareTo(typedOther.isSetSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerial()) {
      lastComparison = TBaseHelper.compareTo(this.serial, typedOther.serial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(typedOther.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = TBaseHelper.compareTo(this.lastUpdateTime, typedOther.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // USER_ID
          if (field.type == TType.I32) {
            this.userId = iprot.readI32();
            setUserIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LOGIN_NAME
          if (field.type == TType.STRING) {
            this.loginName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // USER_NAME
          if (field.type == TType.STRING) {
            this.userName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PWD_ENC
          if (field.type == TType.STRING) {
            this.pwdEnc = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // FAV_IMG
          if (field.type == TType.STRING) {
            this.favImg = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // BIRTHDAY
          if (field.type == TType.STRING) {
            this.birthday = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // SEX
          if (field.type == TType.I32) {
            this.sex = iprot.readI32();
            setSexIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // ID_CARD
          if (field.type == TType.STRING) {
            this.idCard = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // MOBILE
          if (field.type == TType.STRING) {
            this.mobile = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // TEL
          if (field.type == TType.STRING) {
            this.tel = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // EMAIL
          if (field.type == TType.STRING) {
            this.email = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // PROVINCE_ID
          if (field.type == TType.I32) {
            this.provinceId = iprot.readI32();
            setProvinceIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // CITY_ID
          if (field.type == TType.I32) {
            this.cityId = iprot.readI32();
            setCityIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // COUNTY_ID
          if (field.type == TType.I32) {
            this.countyId = iprot.readI32();
            setCountyIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // PROVINCE_NAME
          if (field.type == TType.STRING) {
            this.provinceName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // CITY_NAME
          if (field.type == TType.STRING) {
            this.cityName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // COUNTY_NAME
          if (field.type == TType.STRING) {
            this.countyName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // ADDRESS
          if (field.type == TType.STRING) {
            this.address = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 19: // POST_CODE
          if (field.type == TType.STRING) {
            this.postCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // DEGREE
          if (field.type == TType.I32) {
            this.degree = iprot.readI32();
            setDegreeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 21: // SALARY
          if (field.type == TType.I32) {
            this.salary = iprot.readI32();
            setSalaryIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 22: // REMARK
          if (field.type == TType.STRING) {
            this.remark = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 23: // SERIAL
          if (field.type == TType.I32) {
            this.serial = iprot.readI32();
            setSerialIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 24: // CREATE_TIME
          if (field.type == TType.STRING) {
            this.createTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 25: // LAST_UPDATE_TIME
          if (field.type == TType.STRING) {
            this.lastUpdateTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(USER_ID_FIELD_DESC);
    oprot.writeI32(this.userId);
    oprot.writeFieldEnd();
    if (this.loginName != null) {
      oprot.writeFieldBegin(LOGIN_NAME_FIELD_DESC);
      oprot.writeString(this.loginName);
      oprot.writeFieldEnd();
    }
    if (this.userName != null) {
      oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
      oprot.writeString(this.userName);
      oprot.writeFieldEnd();
    }
    if (this.pwdEnc != null) {
      oprot.writeFieldBegin(PWD_ENC_FIELD_DESC);
      oprot.writeString(this.pwdEnc);
      oprot.writeFieldEnd();
    }
    if (this.favImg != null) {
      oprot.writeFieldBegin(FAV_IMG_FIELD_DESC);
      oprot.writeString(this.favImg);
      oprot.writeFieldEnd();
    }
    if (this.birthday != null) {
      oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
      oprot.writeString(this.birthday);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SEX_FIELD_DESC);
    oprot.writeI32(this.sex);
    oprot.writeFieldEnd();
    if (this.idCard != null) {
      oprot.writeFieldBegin(ID_CARD_FIELD_DESC);
      oprot.writeString(this.idCard);
      oprot.writeFieldEnd();
    }
    if (this.mobile != null) {
      oprot.writeFieldBegin(MOBILE_FIELD_DESC);
      oprot.writeString(this.mobile);
      oprot.writeFieldEnd();
    }
    if (this.tel != null) {
      oprot.writeFieldBegin(TEL_FIELD_DESC);
      oprot.writeString(this.tel);
      oprot.writeFieldEnd();
    }
    if (this.email != null) {
      oprot.writeFieldBegin(EMAIL_FIELD_DESC);
      oprot.writeString(this.email);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PROVINCE_ID_FIELD_DESC);
    oprot.writeI32(this.provinceId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CITY_ID_FIELD_DESC);
    oprot.writeI32(this.cityId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(COUNTY_ID_FIELD_DESC);
    oprot.writeI32(this.countyId);
    oprot.writeFieldEnd();
    if (this.provinceName != null) {
      oprot.writeFieldBegin(PROVINCE_NAME_FIELD_DESC);
      oprot.writeString(this.provinceName);
      oprot.writeFieldEnd();
    }
    if (this.cityName != null) {
      oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
      oprot.writeString(this.cityName);
      oprot.writeFieldEnd();
    }
    if (this.countyName != null) {
      oprot.writeFieldBegin(COUNTY_NAME_FIELD_DESC);
      oprot.writeString(this.countyName);
      oprot.writeFieldEnd();
    }
    if (this.address != null) {
      oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
      oprot.writeString(this.address);
      oprot.writeFieldEnd();
    }
    if (this.postCode != null) {
      oprot.writeFieldBegin(POST_CODE_FIELD_DESC);
      oprot.writeString(this.postCode);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(DEGREE_FIELD_DESC);
    oprot.writeI32(this.degree);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SALARY_FIELD_DESC);
    oprot.writeI32(this.salary);
    oprot.writeFieldEnd();
    if (this.remark != null) {
      oprot.writeFieldBegin(REMARK_FIELD_DESC);
      oprot.writeString(this.remark);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SERIAL_FIELD_DESC);
    oprot.writeI32(this.serial);
    oprot.writeFieldEnd();
    if (this.createTime != null) {
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeString(this.createTime);
      oprot.writeFieldEnd();
    }
    if (this.lastUpdateTime != null) {
      oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
      oprot.writeString(this.lastUpdateTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Buyer(");
    boolean first = true;
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginName:");
    if (this.loginName == null) {
      sb.append("null");
    } else {
      sb.append(this.loginName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pwdEnc:");
    if (this.pwdEnc == null) {
      sb.append("null");
    } else {
      sb.append(this.pwdEnc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("favImg:");
    if (this.favImg == null) {
      sb.append("null");
    } else {
      sb.append(this.favImg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthday:");
    if (this.birthday == null) {
      sb.append("null");
    } else {
      sb.append(this.birthday);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idCard:");
    if (this.idCard == null) {
      sb.append("null");
    } else {
      sb.append(this.idCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tel:");
    if (this.tel == null) {
      sb.append("null");
    } else {
      sb.append(this.tel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceId:");
    sb.append(this.provinceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityId:");
    sb.append(this.cityId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("countyId:");
    sb.append(this.countyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceName:");
    if (this.provinceName == null) {
      sb.append("null");
    } else {
      sb.append(this.provinceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityName:");
    if (this.cityName == null) {
      sb.append("null");
    } else {
      sb.append(this.cityName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("countyName:");
    if (this.countyName == null) {
      sb.append("null");
    } else {
      sb.append(this.countyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("postCode:");
    if (this.postCode == null) {
      sb.append("null");
    } else {
      sb.append(this.postCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("degree:");
    sb.append(this.degree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("salary:");
    sb.append(this.salary);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serial:");
    sb.append(this.serial);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
