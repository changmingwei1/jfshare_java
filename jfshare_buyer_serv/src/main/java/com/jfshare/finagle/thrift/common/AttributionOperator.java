/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.common;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class AttributionOperator implements TBase<AttributionOperator, AttributionOperator._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("AttributionOperator");

  private static final TField PROVINCE_ID_FIELD_DESC = new TField("provinceId", TType.I32, (short)1);
  private static final TField PROVINCE_NAME_FIELD_DESC = new TField("provinceName", TType.STRING, (short)2);
  private static final TField CITY_ID_FIELD_DESC = new TField("cityId", TType.I32, (short)3);
  private static final TField CITY_NAME_FIELD_DESC = new TField("cityName", TType.STRING, (short)4);
  private static final TField OPERATOR_FIELD_DESC = new TField("operator", TType.STRING, (short)5);


  public int provinceId;
  public String provinceName;
  public int cityId;
  public String cityName;
  public String operator;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PROVINCE_ID((short)1, "provinceId"),
    PROVINCE_NAME((short)2, "provinceName"),
    CITY_ID((short)3, "cityId"),
    CITY_NAME((short)4, "cityName"),
    OPERATOR((short)5, "operator");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROVINCE_ID
  	return PROVINCE_ID;
        case 2: // PROVINCE_NAME
  	return PROVINCE_NAME;
        case 3: // CITY_ID
  	return CITY_ID;
        case 4: // CITY_NAME
  	return CITY_NAME;
        case 5: // OPERATOR
  	return OPERATOR;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __PROVINCEID_ISSET_ID = 0;
  private static final int __CITYID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROVINCE_ID, new FieldMetaData("provinceId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PROVINCE_NAME, new FieldMetaData("provinceName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CITY_ID, new FieldMetaData("cityId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CITY_NAME, new FieldMetaData("cityName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.OPERATOR, new FieldMetaData("operator", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(AttributionOperator.class, metaDataMap);
  }


  public AttributionOperator() {
  }

  public AttributionOperator(
    int provinceId,
    String provinceName,
    int cityId,
    String cityName,
    String operator)
  {
    this();
    this.provinceId = provinceId;
    setProvinceIdIsSet(true);
    this.provinceName = provinceName;
    this.cityId = cityId;
    setCityIdIsSet(true);
    this.cityName = cityName;
    this.operator = operator;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AttributionOperator(AttributionOperator other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.provinceId = other.provinceId;
    if (other.isSetProvinceName()) {
      this.provinceName = other.provinceName;
    }
    this.cityId = other.cityId;
    if (other.isSetCityName()) {
      this.cityName = other.cityName;
    }
    if (other.isSetOperator()) {
      this.operator = other.operator;
    }
  }

  public AttributionOperator deepCopy() {
    return new AttributionOperator(this);
  }

  @Override
  public void clear() {
    setProvinceIdIsSet(false);
    this.provinceId = 0;
    this.provinceName = null;
    setCityIdIsSet(false);
    this.cityId = 0;
    this.cityName = null;
    this.operator = null;
  }

  public int getProvinceId() {
    return this.provinceId;
  }

  public AttributionOperator setProvinceId(int provinceId) {
    this.provinceId = provinceId;
    setProvinceIdIsSet(true);

    return this;
  }

  public void unsetProvinceId() {
  __isset_bit_vector.clear(__PROVINCEID_ISSET_ID);
  }

  /** Returns true if field provinceId is set (has been asigned a value) and false otherwise */
  public boolean isSetProvinceId() {
    return __isset_bit_vector.get(__PROVINCEID_ISSET_ID);
  }

  public void setProvinceIdIsSet(boolean value) {
    __isset_bit_vector.set(__PROVINCEID_ISSET_ID, value);
  }

  public String getProvinceName() {
    return this.provinceName;
  }

  public AttributionOperator setProvinceName(String provinceName) {
    this.provinceName = provinceName;
    
    return this;
  }

  public void unsetProvinceName() {
    this.provinceName = null;
  }

  /** Returns true if field provinceName is set (has been asigned a value) and false otherwise */
  public boolean isSetProvinceName() {
    return this.provinceName != null;
  }

  public void setProvinceNameIsSet(boolean value) {
    if (!value) {
      this.provinceName = null;
    }
  }

  public int getCityId() {
    return this.cityId;
  }

  public AttributionOperator setCityId(int cityId) {
    this.cityId = cityId;
    setCityIdIsSet(true);

    return this;
  }

  public void unsetCityId() {
  __isset_bit_vector.clear(__CITYID_ISSET_ID);
  }

  /** Returns true if field cityId is set (has been asigned a value) and false otherwise */
  public boolean isSetCityId() {
    return __isset_bit_vector.get(__CITYID_ISSET_ID);
  }

  public void setCityIdIsSet(boolean value) {
    __isset_bit_vector.set(__CITYID_ISSET_ID, value);
  }

  public String getCityName() {
    return this.cityName;
  }

  public AttributionOperator setCityName(String cityName) {
    this.cityName = cityName;
    
    return this;
  }

  public void unsetCityName() {
    this.cityName = null;
  }

  /** Returns true if field cityName is set (has been asigned a value) and false otherwise */
  public boolean isSetCityName() {
    return this.cityName != null;
  }

  public void setCityNameIsSet(boolean value) {
    if (!value) {
      this.cityName = null;
    }
  }

  public String getOperator() {
    return this.operator;
  }

  public AttributionOperator setOperator(String operator) {
    this.operator = operator;
    
    return this;
  }

  public void unsetOperator() {
    this.operator = null;
  }

  /** Returns true if field operator is set (has been asigned a value) and false otherwise */
  public boolean isSetOperator() {
    return this.operator != null;
  }

  public void setOperatorIsSet(boolean value) {
    if (!value) {
      this.operator = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROVINCE_ID:
      if (value == null) {
        unsetProvinceId();
      } else {
        setProvinceId((Integer)value);
      }
      break;
    case PROVINCE_NAME:
      if (value == null) {
        unsetProvinceName();
      } else {
        setProvinceName((String)value);
      }
      break;
    case CITY_ID:
      if (value == null) {
        unsetCityId();
      } else {
        setCityId((Integer)value);
      }
      break;
    case CITY_NAME:
      if (value == null) {
        unsetCityName();
      } else {
        setCityName((String)value);
      }
      break;
    case OPERATOR:
      if (value == null) {
        unsetOperator();
      } else {
        setOperator((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROVINCE_ID:
      return new Integer(getProvinceId());
    case PROVINCE_NAME:
      return getProvinceName();
    case CITY_ID:
      return new Integer(getCityId());
    case CITY_NAME:
      return getCityName();
    case OPERATOR:
      return getOperator();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROVINCE_ID:
      return isSetProvinceId();
    case PROVINCE_NAME:
      return isSetProvinceName();
    case CITY_ID:
      return isSetCityId();
    case CITY_NAME:
      return isSetCityName();
    case OPERATOR:
      return isSetOperator();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AttributionOperator)
      return this.equals((AttributionOperator)that);
    return false;
  }

  public boolean equals(AttributionOperator that) {
    if (that == null)
      return false;
    boolean this_present_provinceId = true;
    boolean that_present_provinceId = true;
    if (this_present_provinceId || that_present_provinceId) {
      if (!(this_present_provinceId && that_present_provinceId))
        return false;
      if (this.provinceId != that.provinceId)
        return false;
    }
    boolean this_present_provinceName = true && this.isSetProvinceName();
    boolean that_present_provinceName = true && that.isSetProvinceName();
    if (this_present_provinceName || that_present_provinceName) {
      if (!(this_present_provinceName && that_present_provinceName))
        return false;
      if (!this.provinceName.equals(that.provinceName))
        return false;
    }
    boolean this_present_cityId = true;
    boolean that_present_cityId = true;
    if (this_present_cityId || that_present_cityId) {
      if (!(this_present_cityId && that_present_cityId))
        return false;
      if (this.cityId != that.cityId)
        return false;
    }
    boolean this_present_cityName = true && this.isSetCityName();
    boolean that_present_cityName = true && that.isSetCityName();
    if (this_present_cityName || that_present_cityName) {
      if (!(this_present_cityName && that_present_cityName))
        return false;
      if (!this.cityName.equals(that.cityName))
        return false;
    }
    boolean this_present_operator = true && this.isSetOperator();
    boolean that_present_operator = true && that.isSetOperator();
    if (this_present_operator || that_present_operator) {
      if (!(this_present_operator && that_present_operator))
        return false;
      if (!this.operator.equals(that.operator))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_provinceId = true;
    builder.append(present_provinceId);
    if (present_provinceId)
      builder.append(provinceId);
    boolean present_provinceName = true && (isSetProvinceName());
    builder.append(present_provinceName);
    if (present_provinceName)
      builder.append(provinceName);
    boolean present_cityId = true;
    builder.append(present_cityId);
    if (present_cityId)
      builder.append(cityId);
    boolean present_cityName = true && (isSetCityName());
    builder.append(present_cityName);
    if (present_cityName)
      builder.append(cityName);
    boolean present_operator = true && (isSetOperator());
    builder.append(present_operator);
    if (present_operator)
      builder.append(operator);
    return builder.toHashCode();
  }

  public int compareTo(AttributionOperator other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AttributionOperator typedOther = (AttributionOperator)other;

    lastComparison = Boolean.valueOf(isSetProvinceId()).compareTo(typedOther.isSetProvinceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceId()) {
      lastComparison = TBaseHelper.compareTo(this.provinceId, typedOther.provinceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceName()).compareTo(typedOther.isSetProvinceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceName()) {
      lastComparison = TBaseHelper.compareTo(this.provinceName, typedOther.provinceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityId()).compareTo(typedOther.isSetCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityId()) {
      lastComparison = TBaseHelper.compareTo(this.cityId, typedOther.cityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityName()).compareTo(typedOther.isSetCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityName()) {
      lastComparison = TBaseHelper.compareTo(this.cityName, typedOther.cityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator()).compareTo(typedOther.isSetOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator()) {
      lastComparison = TBaseHelper.compareTo(this.operator, typedOther.operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PROVINCE_ID
          if (field.type == TType.I32) {
            this.provinceId = iprot.readI32();
            setProvinceIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PROVINCE_NAME
          if (field.type == TType.STRING) {
            this.provinceName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CITY_ID
          if (field.type == TType.I32) {
            this.cityId = iprot.readI32();
            setCityIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CITY_NAME
          if (field.type == TType.STRING) {
            this.cityName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // OPERATOR
          if (field.type == TType.STRING) {
            this.operator = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(PROVINCE_ID_FIELD_DESC);
    oprot.writeI32(this.provinceId);
    oprot.writeFieldEnd();
    if (this.provinceName != null) {
      oprot.writeFieldBegin(PROVINCE_NAME_FIELD_DESC);
      oprot.writeString(this.provinceName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CITY_ID_FIELD_DESC);
    oprot.writeI32(this.cityId);
    oprot.writeFieldEnd();
    if (this.cityName != null) {
      oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
      oprot.writeString(this.cityName);
      oprot.writeFieldEnd();
    }
    if (this.operator != null) {
      oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
      oprot.writeString(this.operator);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AttributionOperator(");
    boolean first = true;
    sb.append("provinceId:");
    sb.append(this.provinceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceName:");
    if (this.provinceName == null) {
      sb.append("null");
    } else {
      sb.append(this.provinceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityId:");
    sb.append(this.cityId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityName:");
    if (this.cityName == null) {
      sb.append("null");
    } else {
      sb.append(this.cityName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator:");
    if (this.operator == null) {
      sb.append("null");
    } else {
      sb.append(this.operator);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
