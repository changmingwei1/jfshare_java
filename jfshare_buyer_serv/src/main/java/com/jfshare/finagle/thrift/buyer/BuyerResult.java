/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.buyer;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class BuyerResult implements TBase<BuyerResult, BuyerResult._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BuyerResult");

  private static final TField RESULT_FIELD_DESC = new TField("result", TType.STRUCT, (short)1);
  private static final TField BUYER_FIELD_DESC = new TField("buyer", TType.STRUCT, (short)2);
  private static final TField LOGIN_LOG_FIELD_DESC = new TField("loginLog", TType.STRUCT, (short)3);
  private static final TField VALUE_FIELD_DESC = new TField("value", TType.BOOL, (short)4);
  private static final TField THIRD_USER_FIELD_DESC = new TField("thirdUser", TType.STRUCT, (short)5);
  private static final TField AUTH_INFO_FIELD_DESC = new TField("authInfo", TType.STRUCT, (short)6);


  public com.jfshare.finagle.thrift.result.Result result;
  public Buyer buyer;
  public LoginLog loginLog;
  public boolean value;
  public ThirdpartyUser thirdUser;
  public AuthInfo authInfo;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    RESULT((short)1, "result"),
    BUYER((short)2, "buyer"),
    LOGIN_LOG((short)3, "loginLog"),
    VALUE((short)4, "value"),
    THIRD_USER((short)5, "thirdUser"),
    AUTH_INFO((short)6, "authInfo");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT
  	return RESULT;
        case 2: // BUYER
  	return BUYER;
        case 3: // LOGIN_LOG
  	return LOGIN_LOG;
        case 4: // VALUE
  	return VALUE;
        case 5: // THIRD_USER
  	return THIRD_USER;
        case 6: // AUTH_INFO
  	return AUTH_INFO;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __VALUE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT, new FieldMetaData("result", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    tmpMap.put(_Fields.BUYER, new FieldMetaData("buyer", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, Buyer.class)));
    tmpMap.put(_Fields.LOGIN_LOG, new FieldMetaData("loginLog", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, LoginLog.class)));
    tmpMap.put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.THIRD_USER, new FieldMetaData("thirdUser", TFieldRequirementType.OPTIONAL,
      new StructMetaData(TType.STRUCT, ThirdpartyUser.class)));
    tmpMap.put(_Fields.AUTH_INFO, new FieldMetaData("authInfo", TFieldRequirementType.OPTIONAL,
      new StructMetaData(TType.STRUCT, AuthInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BuyerResult.class, metaDataMap);
  }


  public BuyerResult() {
  }

  public BuyerResult(
    com.jfshare.finagle.thrift.result.Result result,
    Buyer buyer,
    LoginLog loginLog)
  {
    this();
    this.result = result;
    this.buyer = buyer;
    this.loginLog = loginLog;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BuyerResult(BuyerResult other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetResult()) {
      this.result = new com.jfshare.finagle.thrift.result.Result(other.result);
    }
    if (other.isSetBuyer()) {
      this.buyer = new Buyer(other.buyer);
    }
    if (other.isSetLoginLog()) {
      this.loginLog = new LoginLog(other.loginLog);
    }
    this.value = other.value;
    if (other.isSetThirdUser()) {
      this.thirdUser = new ThirdpartyUser(other.thirdUser);
    }
    if (other.isSetAuthInfo()) {
      this.authInfo = new AuthInfo(other.authInfo);
    }
  }

  public BuyerResult deepCopy() {
    return new BuyerResult(this);
  }

  @Override
  public void clear() {
    this.result = null;
    this.buyer = null;
    this.loginLog = null;
    setValueIsSet(false);
    this.value = false;
    this.thirdUser = null;
    this.authInfo = null;
  }

  public com.jfshare.finagle.thrift.result.Result getResult() {
    return this.result;
  }

  public BuyerResult setResult(com.jfshare.finagle.thrift.result.Result result) {
    this.result = result;
    
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been asigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public Buyer getBuyer() {
    return this.buyer;
  }

  public BuyerResult setBuyer(Buyer buyer) {
    this.buyer = buyer;
    
    return this;
  }

  public void unsetBuyer() {
    this.buyer = null;
  }

  /** Returns true if field buyer is set (has been asigned a value) and false otherwise */
  public boolean isSetBuyer() {
    return this.buyer != null;
  }

  public void setBuyerIsSet(boolean value) {
    if (!value) {
      this.buyer = null;
    }
  }

  public LoginLog getLoginLog() {
    return this.loginLog;
  }

  public BuyerResult setLoginLog(LoginLog loginLog) {
    this.loginLog = loginLog;
    
    return this;
  }

  public void unsetLoginLog() {
    this.loginLog = null;
  }

  /** Returns true if field loginLog is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginLog() {
    return this.loginLog != null;
  }

  public void setLoginLogIsSet(boolean value) {
    if (!value) {
      this.loginLog = null;
    }
  }

  public boolean isValue() {
    return this.value;
  }

  public BuyerResult setValue(boolean value) {
    this.value = value;
    setValueIsSet(true);

    return this;
  }

  public void unsetValue() {
  __isset_bit_vector.clear(__VALUE_ISSET_ID);
  }

  /** Returns true if field value is set (has been asigned a value) and false otherwise */
  public boolean isSetValue() {
    return __isset_bit_vector.get(__VALUE_ISSET_ID);
  }

  public void setValueIsSet(boolean value) {
    __isset_bit_vector.set(__VALUE_ISSET_ID, value);
  }

  public ThirdpartyUser getThirdUser() {
    return this.thirdUser;
  }

  public BuyerResult setThirdUser(ThirdpartyUser thirdUser) {
    this.thirdUser = thirdUser;
    
    return this;
  }

  public void unsetThirdUser() {
    this.thirdUser = null;
  }

  /** Returns true if field thirdUser is set (has been asigned a value) and false otherwise */
  public boolean isSetThirdUser() {
    return this.thirdUser != null;
  }

  public void setThirdUserIsSet(boolean value) {
    if (!value) {
      this.thirdUser = null;
    }
  }

  public AuthInfo getAuthInfo() {
    return this.authInfo;
  }

  public BuyerResult setAuthInfo(AuthInfo authInfo) {
    this.authInfo = authInfo;
    
    return this;
  }

  public void unsetAuthInfo() {
    this.authInfo = null;
  }

  /** Returns true if field authInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetAuthInfo() {
    return this.authInfo != null;
  }

  public void setAuthInfoIsSet(boolean value) {
    if (!value) {
      this.authInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    case BUYER:
      if (value == null) {
        unsetBuyer();
      } else {
        setBuyer((Buyer)value);
      }
      break;
    case LOGIN_LOG:
      if (value == null) {
        unsetLoginLog();
      } else {
        setLoginLog((LoginLog)value);
      }
      break;
    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((Boolean)value);
      }
      break;
    case THIRD_USER:
      if (value == null) {
        unsetThirdUser();
      } else {
        setThirdUser((ThirdpartyUser)value);
      }
      break;
    case AUTH_INFO:
      if (value == null) {
        unsetAuthInfo();
      } else {
        setAuthInfo((AuthInfo)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT:
      return getResult();
    case BUYER:
      return getBuyer();
    case LOGIN_LOG:
      return getLoginLog();
    case VALUE:
      return new Boolean(isValue());
    case THIRD_USER:
      return getThirdUser();
    case AUTH_INFO:
      return getAuthInfo();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT:
      return isSetResult();
    case BUYER:
      return isSetBuyer();
    case LOGIN_LOG:
      return isSetLoginLog();
    case VALUE:
      return isSetValue();
    case THIRD_USER:
      return isSetThirdUser();
    case AUTH_INFO:
      return isSetAuthInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BuyerResult)
      return this.equals((BuyerResult)that);
    return false;
  }

  public boolean equals(BuyerResult that) {
    if (that == null)
      return false;
    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }
    boolean this_present_buyer = true && this.isSetBuyer();
    boolean that_present_buyer = true && that.isSetBuyer();
    if (this_present_buyer || that_present_buyer) {
      if (!(this_present_buyer && that_present_buyer))
        return false;
      if (!this.buyer.equals(that.buyer))
        return false;
    }
    boolean this_present_loginLog = true && this.isSetLoginLog();
    boolean that_present_loginLog = true && that.isSetLoginLog();
    if (this_present_loginLog || that_present_loginLog) {
      if (!(this_present_loginLog && that_present_loginLog))
        return false;
      if (!this.loginLog.equals(that.loginLog))
        return false;
    }
    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (this.value != that.value)
        return false;
    }
    boolean this_present_thirdUser = true && this.isSetThirdUser();
    boolean that_present_thirdUser = true && that.isSetThirdUser();
    if (this_present_thirdUser || that_present_thirdUser) {
      if (!(this_present_thirdUser && that_present_thirdUser))
        return false;
      if (!this.thirdUser.equals(that.thirdUser))
        return false;
    }
    boolean this_present_authInfo = true && this.isSetAuthInfo();
    boolean that_present_authInfo = true && that.isSetAuthInfo();
    if (this_present_authInfo || that_present_authInfo) {
      if (!(this_present_authInfo && that_present_authInfo))
        return false;
      if (!this.authInfo.equals(that.authInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_result = true && (isSetResult());
    builder.append(present_result);
    if (present_result)
      builder.append(result);
    boolean present_buyer = true && (isSetBuyer());
    builder.append(present_buyer);
    if (present_buyer)
      builder.append(buyer);
    boolean present_loginLog = true && (isSetLoginLog());
    builder.append(present_loginLog);
    if (present_loginLog)
      builder.append(loginLog);
    boolean present_value = true && (isSetValue());
    builder.append(present_value);
    if (present_value)
      builder.append(value);
    boolean present_thirdUser = true && (isSetThirdUser());
    builder.append(present_thirdUser);
    if (present_thirdUser)
      builder.append(thirdUser);
    boolean present_authInfo = true && (isSetAuthInfo());
    builder.append(present_authInfo);
    if (present_authInfo)
      builder.append(authInfo);
    return builder.toHashCode();
  }

  public int compareTo(BuyerResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BuyerResult typedOther = (BuyerResult)other;

    lastComparison = Boolean.valueOf(isSetResult()).compareTo(typedOther.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = TBaseHelper.compareTo(this.result, typedOther.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyer()).compareTo(typedOther.isSetBuyer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyer()) {
      lastComparison = TBaseHelper.compareTo(this.buyer, typedOther.buyer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginLog()).compareTo(typedOther.isSetLoginLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginLog()) {
      lastComparison = TBaseHelper.compareTo(this.loginLog, typedOther.loginLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdUser()).compareTo(typedOther.isSetThirdUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdUser()) {
      lastComparison = TBaseHelper.compareTo(this.thirdUser, typedOther.thirdUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthInfo()).compareTo(typedOther.isSetAuthInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthInfo()) {
      lastComparison = TBaseHelper.compareTo(this.authInfo, typedOther.authInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // RESULT
          if (field.type == TType.STRUCT) {
            this.result = new com.jfshare.finagle.thrift.result.Result();
            this.result.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // BUYER
          if (field.type == TType.STRUCT) {
            this.buyer = new Buyer();
            this.buyer.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LOGIN_LOG
          if (field.type == TType.STRUCT) {
            this.loginLog = new LoginLog();
            this.loginLog.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // VALUE
          if (field.type == TType.BOOL) {
            this.value = iprot.readBool();
            setValueIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // THIRD_USER
          if (field.type == TType.STRUCT) {
            this.thirdUser = new ThirdpartyUser();
            this.thirdUser.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // AUTH_INFO
          if (field.type == TType.STRUCT) {
            this.authInfo = new AuthInfo();
            this.authInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.result != null) {
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      this.result.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.buyer != null) {
      oprot.writeFieldBegin(BUYER_FIELD_DESC);
      this.buyer.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.loginLog != null) {
      oprot.writeFieldBegin(LOGIN_LOG_FIELD_DESC);
      this.loginLog.write(oprot);
      oprot.writeFieldEnd();
    }
    if (isSetValue()) {
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeBool(this.value);
      oprot.writeFieldEnd();
    }
    if (this.thirdUser != null) {
      if (isSetThirdUser()) {
        oprot.writeFieldBegin(THIRD_USER_FIELD_DESC);
        this.thirdUser.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.authInfo != null) {
      if (isSetAuthInfo()) {
        oprot.writeFieldBegin(AUTH_INFO_FIELD_DESC);
        this.authInfo.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BuyerResult(");
    boolean first = true;
    sb.append("result:");
    if (this.result == null) {
      sb.append("null");
    } else {
      sb.append(this.result);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyer:");
    if (this.buyer == null) {
      sb.append("null");
    } else {
      sb.append(this.buyer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginLog:");
    if (this.loginLog == null) {
      sb.append("null");
    } else {
      sb.append(this.loginLog);
    }
    first = false;
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      sb.append(this.value);
      first = false;
      }
    if (isSetThirdUser()) {
      if (!first) sb.append(", ");
      sb.append("thirdUser:");
      if (this.thirdUser == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdUser);
      }
      first = false;
      }
    if (isSetAuthInfo()) {
      if (!first) sb.append(", ");
      sb.append("authInfo:");
      if (this.authInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.authInfo);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
