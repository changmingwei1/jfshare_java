/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.common;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class AreaInfo implements TBase<AreaInfo, AreaInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("AreaInfo");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField SHORT_NAME_FIELD_DESC = new TField("shortName", TType.STRING, (short)3);
  private static final TField PROPERTY_FIELD_DESC = new TField("property", TType.STRING, (short)4);
  private static final TField POST_CODE_FIELD_DESC = new TField("postCode", TType.STRING, (short)5);
  private static final TField PINYIN_FIELD_DESC = new TField("pinyin", TType.STRING, (short)6);
  private static final TField INITIAL_FIELD_DESC = new TField("initial", TType.STRING, (short)7);
  private static final TField PROVINCE_ID_FIELD_DESC = new TField("provinceId", TType.I32, (short)8);
  private static final TField CITY_ID_FIELD_DESC = new TField("cityId", TType.I32, (short)9);
  private static final TField COUNTY_ID_FIELD_DESC = new TField("countyId", TType.I32, (short)10);


  public int id;
  public String name;
  public String shortName;
  public String property;
  public String postCode;
  public String pinyin;
  public String initial;
  public int provinceId;
  public int cityId;
  public int countyId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    SHORT_NAME((short)3, "shortName"),
    PROPERTY((short)4, "property"),
    POST_CODE((short)5, "postCode"),
    PINYIN((short)6, "pinyin"),
    INITIAL((short)7, "initial"),
    PROVINCE_ID((short)8, "provinceId"),
    CITY_ID((short)9, "cityId"),
    COUNTY_ID((short)10, "countyId");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
  	return ID;
        case 2: // NAME
  	return NAME;
        case 3: // SHORT_NAME
  	return SHORT_NAME;
        case 4: // PROPERTY
  	return PROPERTY;
        case 5: // POST_CODE
  	return POST_CODE;
        case 6: // PINYIN
  	return PINYIN;
        case 7: // INITIAL
  	return INITIAL;
        case 8: // PROVINCE_ID
  	return PROVINCE_ID;
        case 9: // CITY_ID
  	return CITY_ID;
        case 10: // COUNTY_ID
  	return COUNTY_ID;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PROVINCEID_ISSET_ID = 1;
  private static final int __CITYID_ISSET_ID = 2;
  private static final int __COUNTYID_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SHORT_NAME, new FieldMetaData("shortName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PROPERTY, new FieldMetaData("property", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.POST_CODE, new FieldMetaData("postCode", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PINYIN, new FieldMetaData("pinyin", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.INITIAL, new FieldMetaData("initial", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PROVINCE_ID, new FieldMetaData("provinceId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CITY_ID, new FieldMetaData("cityId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.COUNTY_ID, new FieldMetaData("countyId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(AreaInfo.class, metaDataMap);
  }


  public AreaInfo() {
  }

  public AreaInfo(
    int id,
    String name,
    String shortName,
    String property,
    String postCode)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.shortName = shortName;
    this.property = property;
    this.postCode = postCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AreaInfo(AreaInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetShortName()) {
      this.shortName = other.shortName;
    }
    if (other.isSetProperty()) {
      this.property = other.property;
    }
    if (other.isSetPostCode()) {
      this.postCode = other.postCode;
    }
    if (other.isSetPinyin()) {
      this.pinyin = other.pinyin;
    }
    if (other.isSetInitial()) {
      this.initial = other.initial;
    }
    this.provinceId = other.provinceId;
    this.cityId = other.cityId;
    this.countyId = other.countyId;
  }

  public AreaInfo deepCopy() {
    return new AreaInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.shortName = null;
    this.property = null;
    this.postCode = null;
    this.pinyin = null;
    this.initial = null;
    setProvinceIdIsSet(false);
    this.provinceId = 0;
    setCityIdIsSet(false);
    this.cityId = 0;
    setCountyIdIsSet(false);
    this.countyId = 0;
  }

  public int getId() {
    return this.id;
  }

  public AreaInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);

    return this;
  }

  public void unsetId() {
  __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public AreaInfo setName(String name) {
    this.name = name;
    
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getShortName() {
    return this.shortName;
  }

  public AreaInfo setShortName(String shortName) {
    this.shortName = shortName;
    
    return this;
  }

  public void unsetShortName() {
    this.shortName = null;
  }

  /** Returns true if field shortName is set (has been asigned a value) and false otherwise */
  public boolean isSetShortName() {
    return this.shortName != null;
  }

  public void setShortNameIsSet(boolean value) {
    if (!value) {
      this.shortName = null;
    }
  }

  public String getProperty() {
    return this.property;
  }

  public AreaInfo setProperty(String property) {
    this.property = property;
    
    return this;
  }

  public void unsetProperty() {
    this.property = null;
  }

  /** Returns true if field property is set (has been asigned a value) and false otherwise */
  public boolean isSetProperty() {
    return this.property != null;
  }

  public void setPropertyIsSet(boolean value) {
    if (!value) {
      this.property = null;
    }
  }

  public String getPostCode() {
    return this.postCode;
  }

  public AreaInfo setPostCode(String postCode) {
    this.postCode = postCode;
    
    return this;
  }

  public void unsetPostCode() {
    this.postCode = null;
  }

  /** Returns true if field postCode is set (has been asigned a value) and false otherwise */
  public boolean isSetPostCode() {
    return this.postCode != null;
  }

  public void setPostCodeIsSet(boolean value) {
    if (!value) {
      this.postCode = null;
    }
  }

  public String getPinyin() {
    return this.pinyin;
  }

  public AreaInfo setPinyin(String pinyin) {
    this.pinyin = pinyin;
    
    return this;
  }

  public void unsetPinyin() {
    this.pinyin = null;
  }

  /** Returns true if field pinyin is set (has been asigned a value) and false otherwise */
  public boolean isSetPinyin() {
    return this.pinyin != null;
  }

  public void setPinyinIsSet(boolean value) {
    if (!value) {
      this.pinyin = null;
    }
  }

  public String getInitial() {
    return this.initial;
  }

  public AreaInfo setInitial(String initial) {
    this.initial = initial;
    
    return this;
  }

  public void unsetInitial() {
    this.initial = null;
  }

  /** Returns true if field initial is set (has been asigned a value) and false otherwise */
  public boolean isSetInitial() {
    return this.initial != null;
  }

  public void setInitialIsSet(boolean value) {
    if (!value) {
      this.initial = null;
    }
  }

  public int getProvinceId() {
    return this.provinceId;
  }

  public AreaInfo setProvinceId(int provinceId) {
    this.provinceId = provinceId;
    setProvinceIdIsSet(true);

    return this;
  }

  public void unsetProvinceId() {
  __isset_bit_vector.clear(__PROVINCEID_ISSET_ID);
  }

  /** Returns true if field provinceId is set (has been asigned a value) and false otherwise */
  public boolean isSetProvinceId() {
    return __isset_bit_vector.get(__PROVINCEID_ISSET_ID);
  }

  public void setProvinceIdIsSet(boolean value) {
    __isset_bit_vector.set(__PROVINCEID_ISSET_ID, value);
  }

  public int getCityId() {
    return this.cityId;
  }

  public AreaInfo setCityId(int cityId) {
    this.cityId = cityId;
    setCityIdIsSet(true);

    return this;
  }

  public void unsetCityId() {
  __isset_bit_vector.clear(__CITYID_ISSET_ID);
  }

  /** Returns true if field cityId is set (has been asigned a value) and false otherwise */
  public boolean isSetCityId() {
    return __isset_bit_vector.get(__CITYID_ISSET_ID);
  }

  public void setCityIdIsSet(boolean value) {
    __isset_bit_vector.set(__CITYID_ISSET_ID, value);
  }

  public int getCountyId() {
    return this.countyId;
  }

  public AreaInfo setCountyId(int countyId) {
    this.countyId = countyId;
    setCountyIdIsSet(true);

    return this;
  }

  public void unsetCountyId() {
  __isset_bit_vector.clear(__COUNTYID_ISSET_ID);
  }

  /** Returns true if field countyId is set (has been asigned a value) and false otherwise */
  public boolean isSetCountyId() {
    return __isset_bit_vector.get(__COUNTYID_ISSET_ID);
  }

  public void setCountyIdIsSet(boolean value) {
    __isset_bit_vector.set(__COUNTYID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;
    case SHORT_NAME:
      if (value == null) {
        unsetShortName();
      } else {
        setShortName((String)value);
      }
      break;
    case PROPERTY:
      if (value == null) {
        unsetProperty();
      } else {
        setProperty((String)value);
      }
      break;
    case POST_CODE:
      if (value == null) {
        unsetPostCode();
      } else {
        setPostCode((String)value);
      }
      break;
    case PINYIN:
      if (value == null) {
        unsetPinyin();
      } else {
        setPinyin((String)value);
      }
      break;
    case INITIAL:
      if (value == null) {
        unsetInitial();
      } else {
        setInitial((String)value);
      }
      break;
    case PROVINCE_ID:
      if (value == null) {
        unsetProvinceId();
      } else {
        setProvinceId((Integer)value);
      }
      break;
    case CITY_ID:
      if (value == null) {
        unsetCityId();
      } else {
        setCityId((Integer)value);
      }
      break;
    case COUNTY_ID:
      if (value == null) {
        unsetCountyId();
      } else {
        setCountyId((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Integer(getId());
    case NAME:
      return getName();
    case SHORT_NAME:
      return getShortName();
    case PROPERTY:
      return getProperty();
    case POST_CODE:
      return getPostCode();
    case PINYIN:
      return getPinyin();
    case INITIAL:
      return getInitial();
    case PROVINCE_ID:
      return new Integer(getProvinceId());
    case CITY_ID:
      return new Integer(getCityId());
    case COUNTY_ID:
      return new Integer(getCountyId());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case SHORT_NAME:
      return isSetShortName();
    case PROPERTY:
      return isSetProperty();
    case POST_CODE:
      return isSetPostCode();
    case PINYIN:
      return isSetPinyin();
    case INITIAL:
      return isSetInitial();
    case PROVINCE_ID:
      return isSetProvinceId();
    case CITY_ID:
      return isSetCityId();
    case COUNTY_ID:
      return isSetCountyId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AreaInfo)
      return this.equals((AreaInfo)that);
    return false;
  }

  public boolean equals(AreaInfo that) {
    if (that == null)
      return false;
    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }
    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }
    boolean this_present_shortName = true && this.isSetShortName();
    boolean that_present_shortName = true && that.isSetShortName();
    if (this_present_shortName || that_present_shortName) {
      if (!(this_present_shortName && that_present_shortName))
        return false;
      if (!this.shortName.equals(that.shortName))
        return false;
    }
    boolean this_present_property = true && this.isSetProperty();
    boolean that_present_property = true && that.isSetProperty();
    if (this_present_property || that_present_property) {
      if (!(this_present_property && that_present_property))
        return false;
      if (!this.property.equals(that.property))
        return false;
    }
    boolean this_present_postCode = true && this.isSetPostCode();
    boolean that_present_postCode = true && that.isSetPostCode();
    if (this_present_postCode || that_present_postCode) {
      if (!(this_present_postCode && that_present_postCode))
        return false;
      if (!this.postCode.equals(that.postCode))
        return false;
    }
    boolean this_present_pinyin = true && this.isSetPinyin();
    boolean that_present_pinyin = true && that.isSetPinyin();
    if (this_present_pinyin || that_present_pinyin) {
      if (!(this_present_pinyin && that_present_pinyin))
        return false;
      if (!this.pinyin.equals(that.pinyin))
        return false;
    }
    boolean this_present_initial = true && this.isSetInitial();
    boolean that_present_initial = true && that.isSetInitial();
    if (this_present_initial || that_present_initial) {
      if (!(this_present_initial && that_present_initial))
        return false;
      if (!this.initial.equals(that.initial))
        return false;
    }
    boolean this_present_provinceId = true && this.isSetProvinceId();
    boolean that_present_provinceId = true && that.isSetProvinceId();
    if (this_present_provinceId || that_present_provinceId) {
      if (!(this_present_provinceId && that_present_provinceId))
        return false;
      if (this.provinceId != that.provinceId)
        return false;
    }
    boolean this_present_cityId = true && this.isSetCityId();
    boolean that_present_cityId = true && that.isSetCityId();
    if (this_present_cityId || that_present_cityId) {
      if (!(this_present_cityId && that_present_cityId))
        return false;
      if (this.cityId != that.cityId)
        return false;
    }
    boolean this_present_countyId = true && this.isSetCountyId();
    boolean that_present_countyId = true && that.isSetCountyId();
    if (this_present_countyId || that_present_countyId) {
      if (!(this_present_countyId && that_present_countyId))
        return false;
      if (this.countyId != that.countyId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);
    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);
    boolean present_shortName = true && (isSetShortName());
    builder.append(present_shortName);
    if (present_shortName)
      builder.append(shortName);
    boolean present_property = true && (isSetProperty());
    builder.append(present_property);
    if (present_property)
      builder.append(property);
    boolean present_postCode = true && (isSetPostCode());
    builder.append(present_postCode);
    if (present_postCode)
      builder.append(postCode);
    boolean present_pinyin = true && (isSetPinyin());
    builder.append(present_pinyin);
    if (present_pinyin)
      builder.append(pinyin);
    boolean present_initial = true && (isSetInitial());
    builder.append(present_initial);
    if (present_initial)
      builder.append(initial);
    boolean present_provinceId = true && (isSetProvinceId());
    builder.append(present_provinceId);
    if (present_provinceId)
      builder.append(provinceId);
    boolean present_cityId = true && (isSetCityId());
    builder.append(present_cityId);
    if (present_cityId)
      builder.append(cityId);
    boolean present_countyId = true && (isSetCountyId());
    builder.append(present_countyId);
    if (present_countyId)
      builder.append(countyId);
    return builder.toHashCode();
  }

  public int compareTo(AreaInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AreaInfo typedOther = (AreaInfo)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortName()).compareTo(typedOther.isSetShortName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortName()) {
      lastComparison = TBaseHelper.compareTo(this.shortName, typedOther.shortName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperty()).compareTo(typedOther.isSetProperty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperty()) {
      lastComparison = TBaseHelper.compareTo(this.property, typedOther.property);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostCode()).compareTo(typedOther.isSetPostCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostCode()) {
      lastComparison = TBaseHelper.compareTo(this.postCode, typedOther.postCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPinyin()).compareTo(typedOther.isSetPinyin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPinyin()) {
      lastComparison = TBaseHelper.compareTo(this.pinyin, typedOther.pinyin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitial()).compareTo(typedOther.isSetInitial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitial()) {
      lastComparison = TBaseHelper.compareTo(this.initial, typedOther.initial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceId()).compareTo(typedOther.isSetProvinceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceId()) {
      lastComparison = TBaseHelper.compareTo(this.provinceId, typedOther.provinceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityId()).compareTo(typedOther.isSetCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityId()) {
      lastComparison = TBaseHelper.compareTo(this.cityId, typedOther.cityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountyId()).compareTo(typedOther.isSetCountyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountyId()) {
      lastComparison = TBaseHelper.compareTo(this.countyId, typedOther.countyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SHORT_NAME
          if (field.type == TType.STRING) {
            this.shortName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PROPERTY
          if (field.type == TType.STRING) {
            this.property = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // POST_CODE
          if (field.type == TType.STRING) {
            this.postCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // PINYIN
          if (field.type == TType.STRING) {
            this.pinyin = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // INITIAL
          if (field.type == TType.STRING) {
            this.initial = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // PROVINCE_ID
          if (field.type == TType.I32) {
            this.provinceId = iprot.readI32();
            setProvinceIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // CITY_ID
          if (field.type == TType.I32) {
            this.cityId = iprot.readI32();
            setCityIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // COUNTY_ID
          if (field.type == TType.I32) {
            this.countyId = iprot.readI32();
            setCountyIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.shortName != null) {
      oprot.writeFieldBegin(SHORT_NAME_FIELD_DESC);
      oprot.writeString(this.shortName);
      oprot.writeFieldEnd();
    }
    if (this.property != null) {
      oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
      oprot.writeString(this.property);
      oprot.writeFieldEnd();
    }
    if (this.postCode != null) {
      oprot.writeFieldBegin(POST_CODE_FIELD_DESC);
      oprot.writeString(this.postCode);
      oprot.writeFieldEnd();
    }
    if (this.pinyin != null) {
      if (isSetPinyin()) {
        oprot.writeFieldBegin(PINYIN_FIELD_DESC);
        oprot.writeString(this.pinyin);
        oprot.writeFieldEnd();
      }
    }
    if (this.initial != null) {
      if (isSetInitial()) {
        oprot.writeFieldBegin(INITIAL_FIELD_DESC);
        oprot.writeString(this.initial);
        oprot.writeFieldEnd();
      }
    }
    if (isSetProvinceId()) {
      oprot.writeFieldBegin(PROVINCE_ID_FIELD_DESC);
      oprot.writeI32(this.provinceId);
      oprot.writeFieldEnd();
    }
    if (isSetCityId()) {
      oprot.writeFieldBegin(CITY_ID_FIELD_DESC);
      oprot.writeI32(this.cityId);
      oprot.writeFieldEnd();
    }
    if (isSetCountyId()) {
      oprot.writeFieldBegin(COUNTY_ID_FIELD_DESC);
      oprot.writeI32(this.countyId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AreaInfo(");
    boolean first = true;
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortName:");
    if (this.shortName == null) {
      sb.append("null");
    } else {
      sb.append(this.shortName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("property:");
    if (this.property == null) {
      sb.append("null");
    } else {
      sb.append(this.property);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("postCode:");
    if (this.postCode == null) {
      sb.append("null");
    } else {
      sb.append(this.postCode);
    }
    first = false;
    if (isSetPinyin()) {
      if (!first) sb.append(", ");
      sb.append("pinyin:");
      if (this.pinyin == null) {
        sb.append("null");
      } else {
        sb.append(this.pinyin);
      }
      first = false;
      }
    if (isSetInitial()) {
      if (!first) sb.append(", ");
      sb.append("initial:");
      if (this.initial == null) {
        sb.append("null");
      } else {
        sb.append(this.initial);
      }
      first = false;
      }
    if (isSetProvinceId()) {
      if (!first) sb.append(", ");
      sb.append("provinceId:");
      sb.append(this.provinceId);
      first = false;
      }
    if (isSetCityId()) {
      if (!first) sb.append(", ");
      sb.append("cityId:");
      sb.append(this.cityId);
      first = false;
      }
    if (isSetCountyId()) {
      if (!first) sb.append(", ");
      sb.append("countyId:");
      sb.append(this.countyId);
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
