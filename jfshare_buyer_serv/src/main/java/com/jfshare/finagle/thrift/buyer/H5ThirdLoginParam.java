/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.buyer;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class H5ThirdLoginParam implements TBase<H5ThirdLoginParam, H5ThirdLoginParam._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("H5ThirdLoginParam");

  private static final TField APP_CODE_FIELD_DESC = new TField("appCode", TType.STRING, (short)1);
  private static final TField REQUEST_DATE_FIELD_DESC = new TField("requestDate", TType.STRING, (short)2);
  private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short)3);
  private static final TField MOBILE_FIELD_DESC = new TField("mobile", TType.STRING, (short)4);
  private static final TField WAY_TYPE_FIELD_DESC = new TField("wayType", TType.STRING, (short)5);
  private static final TField REDIRECT_URL_FIELD_DESC = new TField("redirectUrl", TType.STRING, (short)6);


  public String appCode;
  public String requestDate;
  public String sign;
  public String mobile;
  public String wayType;
  public String redirectUrl;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    APP_CODE((short)1, "appCode"),
    REQUEST_DATE((short)2, "requestDate"),
    SIGN((short)3, "sign"),
    MOBILE((short)4, "mobile"),
    WAY_TYPE((short)5, "wayType"),
    REDIRECT_URL((short)6, "redirectUrl");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_CODE
  	return APP_CODE;
        case 2: // REQUEST_DATE
  	return REQUEST_DATE;
        case 3: // SIGN
  	return SIGN;
        case 4: // MOBILE
  	return MOBILE;
        case 5: // WAY_TYPE
  	return WAY_TYPE;
        case 6: // REDIRECT_URL
  	return REDIRECT_URL;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_CODE, new FieldMetaData("appCode", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DATE, new FieldMetaData("requestDate", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new FieldMetaData("mobile", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.WAY_TYPE, new FieldMetaData("wayType", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.REDIRECT_URL, new FieldMetaData("redirectUrl", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(H5ThirdLoginParam.class, metaDataMap);
  }


  public H5ThirdLoginParam() {
  }

  public H5ThirdLoginParam(
    String appCode,
    String requestDate,
    String sign,
    String mobile,
    String wayType,
    String redirectUrl)
  {
    this();
    this.appCode = appCode;
    this.requestDate = requestDate;
    this.sign = sign;
    this.mobile = mobile;
    this.wayType = wayType;
    this.redirectUrl = redirectUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public H5ThirdLoginParam(H5ThirdLoginParam other) {
    if (other.isSetAppCode()) {
      this.appCode = other.appCode;
    }
    if (other.isSetRequestDate()) {
      this.requestDate = other.requestDate;
    }
    if (other.isSetSign()) {
      this.sign = other.sign;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetWayType()) {
      this.wayType = other.wayType;
    }
    if (other.isSetRedirectUrl()) {
      this.redirectUrl = other.redirectUrl;
    }
  }

  public H5ThirdLoginParam deepCopy() {
    return new H5ThirdLoginParam(this);
  }

  @Override
  public void clear() {
    this.appCode = null;
    this.requestDate = null;
    this.sign = null;
    this.mobile = null;
    this.wayType = null;
    this.redirectUrl = null;
  }

  public String getAppCode() {
    return this.appCode;
  }

  public H5ThirdLoginParam setAppCode(String appCode) {
    this.appCode = appCode;
    
    return this;
  }

  public void unsetAppCode() {
    this.appCode = null;
  }

  /** Returns true if field appCode is set (has been asigned a value) and false otherwise */
  public boolean isSetAppCode() {
    return this.appCode != null;
  }

  public void setAppCodeIsSet(boolean value) {
    if (!value) {
      this.appCode = null;
    }
  }

  public String getRequestDate() {
    return this.requestDate;
  }

  public H5ThirdLoginParam setRequestDate(String requestDate) {
    this.requestDate = requestDate;
    
    return this;
  }

  public void unsetRequestDate() {
    this.requestDate = null;
  }

  /** Returns true if field requestDate is set (has been asigned a value) and false otherwise */
  public boolean isSetRequestDate() {
    return this.requestDate != null;
  }

  public void setRequestDateIsSet(boolean value) {
    if (!value) {
      this.requestDate = null;
    }
  }

  public String getSign() {
    return this.sign;
  }

  public H5ThirdLoginParam setSign(String sign) {
    this.sign = sign;
    
    return this;
  }

  public void unsetSign() {
    this.sign = null;
  }

  /** Returns true if field sign is set (has been asigned a value) and false otherwise */
  public boolean isSetSign() {
    return this.sign != null;
  }

  public void setSignIsSet(boolean value) {
    if (!value) {
      this.sign = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public H5ThirdLoginParam setMobile(String mobile) {
    this.mobile = mobile;
    
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been asigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getWayType() {
    return this.wayType;
  }

  public H5ThirdLoginParam setWayType(String wayType) {
    this.wayType = wayType;
    
    return this;
  }

  public void unsetWayType() {
    this.wayType = null;
  }

  /** Returns true if field wayType is set (has been asigned a value) and false otherwise */
  public boolean isSetWayType() {
    return this.wayType != null;
  }

  public void setWayTypeIsSet(boolean value) {
    if (!value) {
      this.wayType = null;
    }
  }

  public String getRedirectUrl() {
    return this.redirectUrl;
  }

  public H5ThirdLoginParam setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    
    return this;
  }

  public void unsetRedirectUrl() {
    this.redirectUrl = null;
  }

  /** Returns true if field redirectUrl is set (has been asigned a value) and false otherwise */
  public boolean isSetRedirectUrl() {
    return this.redirectUrl != null;
  }

  public void setRedirectUrlIsSet(boolean value) {
    if (!value) {
      this.redirectUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_CODE:
      if (value == null) {
        unsetAppCode();
      } else {
        setAppCode((String)value);
      }
      break;
    case REQUEST_DATE:
      if (value == null) {
        unsetRequestDate();
      } else {
        setRequestDate((String)value);
      }
      break;
    case SIGN:
      if (value == null) {
        unsetSign();
      } else {
        setSign((String)value);
      }
      break;
    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;
    case WAY_TYPE:
      if (value == null) {
        unsetWayType();
      } else {
        setWayType((String)value);
      }
      break;
    case REDIRECT_URL:
      if (value == null) {
        unsetRedirectUrl();
      } else {
        setRedirectUrl((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_CODE:
      return getAppCode();
    case REQUEST_DATE:
      return getRequestDate();
    case SIGN:
      return getSign();
    case MOBILE:
      return getMobile();
    case WAY_TYPE:
      return getWayType();
    case REDIRECT_URL:
      return getRedirectUrl();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_CODE:
      return isSetAppCode();
    case REQUEST_DATE:
      return isSetRequestDate();
    case SIGN:
      return isSetSign();
    case MOBILE:
      return isSetMobile();
    case WAY_TYPE:
      return isSetWayType();
    case REDIRECT_URL:
      return isSetRedirectUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof H5ThirdLoginParam)
      return this.equals((H5ThirdLoginParam)that);
    return false;
  }

  public boolean equals(H5ThirdLoginParam that) {
    if (that == null)
      return false;
    boolean this_present_appCode = true && this.isSetAppCode();
    boolean that_present_appCode = true && that.isSetAppCode();
    if (this_present_appCode || that_present_appCode) {
      if (!(this_present_appCode && that_present_appCode))
        return false;
      if (!this.appCode.equals(that.appCode))
        return false;
    }
    boolean this_present_requestDate = true && this.isSetRequestDate();
    boolean that_present_requestDate = true && that.isSetRequestDate();
    if (this_present_requestDate || that_present_requestDate) {
      if (!(this_present_requestDate && that_present_requestDate))
        return false;
      if (!this.requestDate.equals(that.requestDate))
        return false;
    }
    boolean this_present_sign = true && this.isSetSign();
    boolean that_present_sign = true && that.isSetSign();
    if (this_present_sign || that_present_sign) {
      if (!(this_present_sign && that_present_sign))
        return false;
      if (!this.sign.equals(that.sign))
        return false;
    }
    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }
    boolean this_present_wayType = true && this.isSetWayType();
    boolean that_present_wayType = true && that.isSetWayType();
    if (this_present_wayType || that_present_wayType) {
      if (!(this_present_wayType && that_present_wayType))
        return false;
      if (!this.wayType.equals(that.wayType))
        return false;
    }
    boolean this_present_redirectUrl = true && this.isSetRedirectUrl();
    boolean that_present_redirectUrl = true && that.isSetRedirectUrl();
    if (this_present_redirectUrl || that_present_redirectUrl) {
      if (!(this_present_redirectUrl && that_present_redirectUrl))
        return false;
      if (!this.redirectUrl.equals(that.redirectUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_appCode = true && (isSetAppCode());
    builder.append(present_appCode);
    if (present_appCode)
      builder.append(appCode);
    boolean present_requestDate = true && (isSetRequestDate());
    builder.append(present_requestDate);
    if (present_requestDate)
      builder.append(requestDate);
    boolean present_sign = true && (isSetSign());
    builder.append(present_sign);
    if (present_sign)
      builder.append(sign);
    boolean present_mobile = true && (isSetMobile());
    builder.append(present_mobile);
    if (present_mobile)
      builder.append(mobile);
    boolean present_wayType = true && (isSetWayType());
    builder.append(present_wayType);
    if (present_wayType)
      builder.append(wayType);
    boolean present_redirectUrl = true && (isSetRedirectUrl());
    builder.append(present_redirectUrl);
    if (present_redirectUrl)
      builder.append(redirectUrl);
    return builder.toHashCode();
  }

  public int compareTo(H5ThirdLoginParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    H5ThirdLoginParam typedOther = (H5ThirdLoginParam)other;

    lastComparison = Boolean.valueOf(isSetAppCode()).compareTo(typedOther.isSetAppCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppCode()) {
      lastComparison = TBaseHelper.compareTo(this.appCode, typedOther.appCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDate()).compareTo(typedOther.isSetRequestDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDate()) {
      lastComparison = TBaseHelper.compareTo(this.requestDate, typedOther.requestDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSign()) {
      lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(typedOther.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = TBaseHelper.compareTo(this.mobile, typedOther.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWayType()).compareTo(typedOther.isSetWayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWayType()) {
      lastComparison = TBaseHelper.compareTo(this.wayType, typedOther.wayType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRedirectUrl()).compareTo(typedOther.isSetRedirectUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedirectUrl()) {
      lastComparison = TBaseHelper.compareTo(this.redirectUrl, typedOther.redirectUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // APP_CODE
          if (field.type == TType.STRING) {
            this.appCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // REQUEST_DATE
          if (field.type == TType.STRING) {
            this.requestDate = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SIGN
          if (field.type == TType.STRING) {
            this.sign = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // MOBILE
          if (field.type == TType.STRING) {
            this.mobile = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // WAY_TYPE
          if (field.type == TType.STRING) {
            this.wayType = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // REDIRECT_URL
          if (field.type == TType.STRING) {
            this.redirectUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.appCode != null) {
      oprot.writeFieldBegin(APP_CODE_FIELD_DESC);
      oprot.writeString(this.appCode);
      oprot.writeFieldEnd();
    }
    if (this.requestDate != null) {
      oprot.writeFieldBegin(REQUEST_DATE_FIELD_DESC);
      oprot.writeString(this.requestDate);
      oprot.writeFieldEnd();
    }
    if (this.sign != null) {
      oprot.writeFieldBegin(SIGN_FIELD_DESC);
      oprot.writeString(this.sign);
      oprot.writeFieldEnd();
    }
    if (this.mobile != null) {
      oprot.writeFieldBegin(MOBILE_FIELD_DESC);
      oprot.writeString(this.mobile);
      oprot.writeFieldEnd();
    }
    if (this.wayType != null) {
      oprot.writeFieldBegin(WAY_TYPE_FIELD_DESC);
      oprot.writeString(this.wayType);
      oprot.writeFieldEnd();
    }
    if (this.redirectUrl != null) {
      oprot.writeFieldBegin(REDIRECT_URL_FIELD_DESC);
      oprot.writeString(this.redirectUrl);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("H5ThirdLoginParam(");
    boolean first = true;
    sb.append("appCode:");
    if (this.appCode == null) {
      sb.append("null");
    } else {
      sb.append(this.appCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDate:");
    if (this.requestDate == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sign:");
    if (this.sign == null) {
      sb.append("null");
    } else {
      sb.append(this.sign);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wayType:");
    if (this.wayType == null) {
      sb.append("null");
    } else {
      sb.append(this.wayType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("redirectUrl:");
    if (this.redirectUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.redirectUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
