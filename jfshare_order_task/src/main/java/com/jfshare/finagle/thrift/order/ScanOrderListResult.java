/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.order;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.meta_data.ListMetaData;
import org.apache.thrift.meta_data.StructMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class ScanOrderListResult implements TBase<ScanOrderListResult, ScanOrderListResult._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ScanOrderListResult");

  private static final TField RESULT_FIELD_DESC = new TField("result", TType.STRUCT, (short)1);
  private static final TField TOTAL_FIELD_DESC = new TField("total", TType.I32, (short)2);
  private static final TField PAGE_COUNT_FIELD_DESC = new TField("pageCount", TType.I32, (short)3);
  private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)4);
  private static final TField CUR_PAGE_FIELD_DESC = new TField("curPage", TType.I32, (short)5);
  private static final TField SCAN_ORDER_LIST_FIELD_DESC = new TField("scanOrderList", TType.LIST, (short)6);
  private static final TField TOTAL_AMOUNT_FIELD_DESC = new TField("totalAmount", TType.STRING, (short)7);


  public com.jfshare.finagle.thrift.result.Result result;
  public int total;
  public int pageCount;
  public int count;
  public int curPage;
  public List<ScanOrderDetail> scanOrderList;
  public String totalAmount;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    RESULT((short)1, "result"),
    TOTAL((short)2, "total"),
    PAGE_COUNT((short)3, "pageCount"),
    COUNT((short)4, "count"),
    CUR_PAGE((short)5, "curPage"),
    SCAN_ORDER_LIST((short)6, "scanOrderList"),
    TOTAL_AMOUNT((short)7, "totalAmount");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT
  	return RESULT;
        case 2: // TOTAL
  	return TOTAL;
        case 3: // PAGE_COUNT
  	return PAGE_COUNT;
        case 4: // COUNT
  	return COUNT;
        case 5: // CUR_PAGE
  	return CUR_PAGE;
        case 6: // SCAN_ORDER_LIST
  	return SCAN_ORDER_LIST;
        case 7: // TOTAL_AMOUNT
  	return TOTAL_AMOUNT;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __TOTAL_ISSET_ID = 0;
  private static final int __PAGECOUNT_ISSET_ID = 1;
  private static final int __COUNT_ISSET_ID = 2;
  private static final int __CURPAGE_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT, new FieldMetaData("result", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    tmpMap.put(_Fields.TOTAL, new FieldMetaData("total", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PAGE_COUNT, new FieldMetaData("pageCount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CUR_PAGE, new FieldMetaData("curPage", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.SCAN_ORDER_LIST, new FieldMetaData("scanOrderList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, ScanOrderDetail.class))));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new FieldMetaData("totalAmount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ScanOrderListResult.class, metaDataMap);
  }


  public ScanOrderListResult() {
  }

  public ScanOrderListResult(
    com.jfshare.finagle.thrift.result.Result result,
    int total,
    int pageCount,
    int count,
    int curPage,
    List<ScanOrderDetail> scanOrderList,
    String totalAmount)
  {
    this();
    this.result = result;
    this.total = total;
    setTotalIsSet(true);
    this.pageCount = pageCount;
    setPageCountIsSet(true);
    this.count = count;
    setCountIsSet(true);
    this.curPage = curPage;
    setCurPageIsSet(true);
    this.scanOrderList = scanOrderList;
    this.totalAmount = totalAmount;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ScanOrderListResult(ScanOrderListResult other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetResult()) {
      this.result = new com.jfshare.finagle.thrift.result.Result(other.result);
    }
    this.total = other.total;
    this.pageCount = other.pageCount;
    this.count = other.count;
    this.curPage = other.curPage;
    if (other.isSetScanOrderList()) {
      List<ScanOrderDetail> __this__scanOrderList = new ArrayList<ScanOrderDetail>();
      for (ScanOrderDetail other_element : other.scanOrderList) {
        __this__scanOrderList.add(new ScanOrderDetail(other_element));
      }
      this.scanOrderList = __this__scanOrderList;
    }
    if (other.isSetTotalAmount()) {
      this.totalAmount = other.totalAmount;
    }
  }

  public ScanOrderListResult deepCopy() {
    return new ScanOrderListResult(this);
  }

  @Override
  public void clear() {
    this.result = null;
    setTotalIsSet(false);
    this.total = 0;
    setPageCountIsSet(false);
    this.pageCount = 0;
    setCountIsSet(false);
    this.count = 0;
    setCurPageIsSet(false);
    this.curPage = 0;
    this.scanOrderList = null;
    this.totalAmount = null;
  }

  public com.jfshare.finagle.thrift.result.Result getResult() {
    return this.result;
  }

  public ScanOrderListResult setResult(com.jfshare.finagle.thrift.result.Result result) {
    this.result = result;
    
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been asigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public int getTotal() {
    return this.total;
  }

  public ScanOrderListResult setTotal(int total) {
    this.total = total;
    setTotalIsSet(true);

    return this;
  }

  public void unsetTotal() {
  __isset_bit_vector.clear(__TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been asigned a value) and false otherwise */
  public boolean isSetTotal() {
    return __isset_bit_vector.get(__TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bit_vector.set(__TOTAL_ISSET_ID, value);
  }

  public int getPageCount() {
    return this.pageCount;
  }

  public ScanOrderListResult setPageCount(int pageCount) {
    this.pageCount = pageCount;
    setPageCountIsSet(true);

    return this;
  }

  public void unsetPageCount() {
  __isset_bit_vector.clear(__PAGECOUNT_ISSET_ID);
  }

  /** Returns true if field pageCount is set (has been asigned a value) and false otherwise */
  public boolean isSetPageCount() {
    return __isset_bit_vector.get(__PAGECOUNT_ISSET_ID);
  }

  public void setPageCountIsSet(boolean value) {
    __isset_bit_vector.set(__PAGECOUNT_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public ScanOrderListResult setCount(int count) {
    this.count = count;
    setCountIsSet(true);

    return this;
  }

  public void unsetCount() {
  __isset_bit_vector.clear(__COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been asigned a value) and false otherwise */
  public boolean isSetCount() {
    return __isset_bit_vector.get(__COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bit_vector.set(__COUNT_ISSET_ID, value);
  }

  public int getCurPage() {
    return this.curPage;
  }

  public ScanOrderListResult setCurPage(int curPage) {
    this.curPage = curPage;
    setCurPageIsSet(true);

    return this;
  }

  public void unsetCurPage() {
  __isset_bit_vector.clear(__CURPAGE_ISSET_ID);
  }

  /** Returns true if field curPage is set (has been asigned a value) and false otherwise */
  public boolean isSetCurPage() {
    return __isset_bit_vector.get(__CURPAGE_ISSET_ID);
  }

  public void setCurPageIsSet(boolean value) {
    __isset_bit_vector.set(__CURPAGE_ISSET_ID, value);
  }

  public int getScanOrderListSize() {
    return (this.scanOrderList == null) ? 0 : this.scanOrderList.size();
  }

  public java.util.Iterator<ScanOrderDetail> getScanOrderListIterator() {
    return (this.scanOrderList == null) ? null : this.scanOrderList.iterator();
  }

  public void addToScanOrderList(ScanOrderDetail elem) {
    if (this.scanOrderList == null) {
      this.scanOrderList = new ArrayList<ScanOrderDetail>();
    }
    this.scanOrderList.add(elem);
  }

  public List<ScanOrderDetail> getScanOrderList() {
    return this.scanOrderList;
  }

  public ScanOrderListResult setScanOrderList(List<ScanOrderDetail> scanOrderList) {
    this.scanOrderList = scanOrderList;
    
    return this;
  }

  public void unsetScanOrderList() {
    this.scanOrderList = null;
  }

  /** Returns true if field scanOrderList is set (has been asigned a value) and false otherwise */
  public boolean isSetScanOrderList() {
    return this.scanOrderList != null;
  }

  public void setScanOrderListIsSet(boolean value) {
    if (!value) {
      this.scanOrderList = null;
    }
  }

  public String getTotalAmount() {
    return this.totalAmount;
  }

  public ScanOrderListResult setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
    
    return this;
  }

  public void unsetTotalAmount() {
    this.totalAmount = null;
  }

  /** Returns true if field totalAmount is set (has been asigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return this.totalAmount != null;
  }

  public void setTotalAmountIsSet(boolean value) {
    if (!value) {
      this.totalAmount = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Integer)value);
      }
      break;
    case PAGE_COUNT:
      if (value == null) {
        unsetPageCount();
      } else {
        setPageCount((Integer)value);
      }
      break;
    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;
    case CUR_PAGE:
      if (value == null) {
        unsetCurPage();
      } else {
        setCurPage((Integer)value);
      }
      break;
    case SCAN_ORDER_LIST:
      if (value == null) {
        unsetScanOrderList();
      } else {
        setScanOrderList((List<ScanOrderDetail>)value);
      }
      break;
    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT:
      return getResult();
    case TOTAL:
      return new Integer(getTotal());
    case PAGE_COUNT:
      return new Integer(getPageCount());
    case COUNT:
      return new Integer(getCount());
    case CUR_PAGE:
      return new Integer(getCurPage());
    case SCAN_ORDER_LIST:
      return getScanOrderList();
    case TOTAL_AMOUNT:
      return getTotalAmount();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT:
      return isSetResult();
    case TOTAL:
      return isSetTotal();
    case PAGE_COUNT:
      return isSetPageCount();
    case COUNT:
      return isSetCount();
    case CUR_PAGE:
      return isSetCurPage();
    case SCAN_ORDER_LIST:
      return isSetScanOrderList();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ScanOrderListResult)
      return this.equals((ScanOrderListResult)that);
    return false;
  }

  public boolean equals(ScanOrderListResult that) {
    if (that == null)
      return false;
    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }
    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }
    boolean this_present_pageCount = true;
    boolean that_present_pageCount = true;
    if (this_present_pageCount || that_present_pageCount) {
      if (!(this_present_pageCount && that_present_pageCount))
        return false;
      if (this.pageCount != that.pageCount)
        return false;
    }
    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }
    boolean this_present_curPage = true;
    boolean that_present_curPage = true;
    if (this_present_curPage || that_present_curPage) {
      if (!(this_present_curPage && that_present_curPage))
        return false;
      if (this.curPage != that.curPage)
        return false;
    }
    boolean this_present_scanOrderList = true && this.isSetScanOrderList();
    boolean that_present_scanOrderList = true && that.isSetScanOrderList();
    if (this_present_scanOrderList || that_present_scanOrderList) {
      if (!(this_present_scanOrderList && that_present_scanOrderList))
        return false;
      if (!this.scanOrderList.equals(that.scanOrderList))
        return false;
    }
    boolean this_present_totalAmount = true && this.isSetTotalAmount();
    boolean that_present_totalAmount = true && that.isSetTotalAmount();
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (!this.totalAmount.equals(that.totalAmount))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_result = true && (isSetResult());
    builder.append(present_result);
    if (present_result)
      builder.append(result);
    boolean present_total = true;
    builder.append(present_total);
    if (present_total)
      builder.append(total);
    boolean present_pageCount = true;
    builder.append(present_pageCount);
    if (present_pageCount)
      builder.append(pageCount);
    boolean present_count = true;
    builder.append(present_count);
    if (present_count)
      builder.append(count);
    boolean present_curPage = true;
    builder.append(present_curPage);
    if (present_curPage)
      builder.append(curPage);
    boolean present_scanOrderList = true && (isSetScanOrderList());
    builder.append(present_scanOrderList);
    if (present_scanOrderList)
      builder.append(scanOrderList);
    boolean present_totalAmount = true && (isSetTotalAmount());
    builder.append(present_totalAmount);
    if (present_totalAmount)
      builder.append(totalAmount);
    return builder.toHashCode();
  }

  public int compareTo(ScanOrderListResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ScanOrderListResult typedOther = (ScanOrderListResult)other;

    lastComparison = Boolean.valueOf(isSetResult()).compareTo(typedOther.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = TBaseHelper.compareTo(this.result, typedOther.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(typedOther.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = TBaseHelper.compareTo(this.total, typedOther.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageCount()).compareTo(typedOther.isSetPageCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageCount()) {
      lastComparison = TBaseHelper.compareTo(this.pageCount, typedOther.pageCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurPage()).compareTo(typedOther.isSetCurPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurPage()) {
      lastComparison = TBaseHelper.compareTo(this.curPage, typedOther.curPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScanOrderList()).compareTo(typedOther.isSetScanOrderList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScanOrderList()) {
      lastComparison = TBaseHelper.compareTo(this.scanOrderList, typedOther.scanOrderList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(typedOther.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = TBaseHelper.compareTo(this.totalAmount, typedOther.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // RESULT
          if (field.type == TType.STRUCT) {
            this.result = new com.jfshare.finagle.thrift.result.Result();
            this.result.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TOTAL
          if (field.type == TType.I32) {
            this.total = iprot.readI32();
            setTotalIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PAGE_COUNT
          if (field.type == TType.I32) {
            this.pageCount = iprot.readI32();
            setPageCountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // COUNT
          if (field.type == TType.I32) {
            this.count = iprot.readI32();
            setCountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CUR_PAGE
          if (field.type == TType.I32) {
            this.curPage = iprot.readI32();
            setCurPageIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // SCAN_ORDER_LIST
          if (field.type == TType.LIST) {
            {
            TList _list36 = iprot.readListBegin();
            this.scanOrderList = new ArrayList<ScanOrderDetail>(_list36.size);
            for (int _i37 = 0; _i37 < _list36.size; ++_i37)
            {
              ScanOrderDetail _elem38;
              _elem38 = new ScanOrderDetail();
              _elem38.read(iprot);
              this.scanOrderList.add(_elem38);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // TOTAL_AMOUNT
          if (field.type == TType.STRING) {
            this.totalAmount = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.result != null) {
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      this.result.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TOTAL_FIELD_DESC);
    oprot.writeI32(this.total);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PAGE_COUNT_FIELD_DESC);
    oprot.writeI32(this.pageCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(COUNT_FIELD_DESC);
    oprot.writeI32(this.count);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CUR_PAGE_FIELD_DESC);
    oprot.writeI32(this.curPage);
    oprot.writeFieldEnd();
    if (this.scanOrderList != null) {
      oprot.writeFieldBegin(SCAN_ORDER_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.scanOrderList.size()));
        for (ScanOrderDetail _iter39 : this.scanOrderList)
        {
          _iter39.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.totalAmount != null) {
      oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
      oprot.writeString(this.totalAmount);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ScanOrderListResult(");
    boolean first = true;
    sb.append("result:");
    if (this.result == null) {
      sb.append("null");
    } else {
      sb.append(this.result);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageCount:");
    sb.append(this.pageCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("curPage:");
    sb.append(this.curPage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("scanOrderList:");
    if (this.scanOrderList == null) {
      sb.append("null");
    } else {
      sb.append(this.scanOrderList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmount:");
    if (this.totalAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.totalAmount);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
