/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.pay;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class PayRes implements TBase<PayRes, PayRes._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("PayRes");

  private static final TField PAY_CHANNEL_FIELD_DESC = new TField("payChannel", TType.I32, (short)1);
  private static final TField RES_URL_FIELD_DESC = new TField("resUrl", TType.STRING, (short)2);


  public int payChannel;
  public String resUrl;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PAY_CHANNEL((short)1, "payChannel"),
    RES_URL((short)2, "resUrl");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAY_CHANNEL
  	return PAY_CHANNEL;
        case 2: // RES_URL
  	return RES_URL;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __PAYCHANNEL_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAY_CHANNEL, new FieldMetaData("payChannel", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.RES_URL, new FieldMetaData("resUrl", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(PayRes.class, metaDataMap);
  }


  public PayRes() {
  }

  public PayRes(
    int payChannel,
    String resUrl)
  {
    this();
    this.payChannel = payChannel;
    setPayChannelIsSet(true);
    this.resUrl = resUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PayRes(PayRes other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.payChannel = other.payChannel;
    if (other.isSetResUrl()) {
      this.resUrl = other.resUrl;
    }
  }

  public PayRes deepCopy() {
    return new PayRes(this);
  }

  @Override
  public void clear() {
    setPayChannelIsSet(false);
    this.payChannel = 0;
    this.resUrl = null;
  }

  public int getPayChannel() {
    return this.payChannel;
  }

  public PayRes setPayChannel(int payChannel) {
    this.payChannel = payChannel;
    setPayChannelIsSet(true);

    return this;
  }

  public void unsetPayChannel() {
  __isset_bit_vector.clear(__PAYCHANNEL_ISSET_ID);
  }

  /** Returns true if field payChannel is set (has been asigned a value) and false otherwise */
  public boolean isSetPayChannel() {
    return __isset_bit_vector.get(__PAYCHANNEL_ISSET_ID);
  }

  public void setPayChannelIsSet(boolean value) {
    __isset_bit_vector.set(__PAYCHANNEL_ISSET_ID, value);
  }

  public String getResUrl() {
    return this.resUrl;
  }

  public PayRes setResUrl(String resUrl) {
    this.resUrl = resUrl;
    
    return this;
  }

  public void unsetResUrl() {
    this.resUrl = null;
  }

  /** Returns true if field resUrl is set (has been asigned a value) and false otherwise */
  public boolean isSetResUrl() {
    return this.resUrl != null;
  }

  public void setResUrlIsSet(boolean value) {
    if (!value) {
      this.resUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAY_CHANNEL:
      if (value == null) {
        unsetPayChannel();
      } else {
        setPayChannel((Integer)value);
      }
      break;
    case RES_URL:
      if (value == null) {
        unsetResUrl();
      } else {
        setResUrl((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAY_CHANNEL:
      return new Integer(getPayChannel());
    case RES_URL:
      return getResUrl();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAY_CHANNEL:
      return isSetPayChannel();
    case RES_URL:
      return isSetResUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PayRes)
      return this.equals((PayRes)that);
    return false;
  }

  public boolean equals(PayRes that) {
    if (that == null)
      return false;
    boolean this_present_payChannel = true;
    boolean that_present_payChannel = true;
    if (this_present_payChannel || that_present_payChannel) {
      if (!(this_present_payChannel && that_present_payChannel))
        return false;
      if (this.payChannel != that.payChannel)
        return false;
    }
    boolean this_present_resUrl = true && this.isSetResUrl();
    boolean that_present_resUrl = true && that.isSetResUrl();
    if (this_present_resUrl || that_present_resUrl) {
      if (!(this_present_resUrl && that_present_resUrl))
        return false;
      if (!this.resUrl.equals(that.resUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_payChannel = true;
    builder.append(present_payChannel);
    if (present_payChannel)
      builder.append(payChannel);
    boolean present_resUrl = true && (isSetResUrl());
    builder.append(present_resUrl);
    if (present_resUrl)
      builder.append(resUrl);
    return builder.toHashCode();
  }

  public int compareTo(PayRes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PayRes typedOther = (PayRes)other;

    lastComparison = Boolean.valueOf(isSetPayChannel()).compareTo(typedOther.isSetPayChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayChannel()) {
      lastComparison = TBaseHelper.compareTo(this.payChannel, typedOther.payChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResUrl()).compareTo(typedOther.isSetResUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResUrl()) {
      lastComparison = TBaseHelper.compareTo(this.resUrl, typedOther.resUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PAY_CHANNEL
          if (field.type == TType.I32) {
            this.payChannel = iprot.readI32();
            setPayChannelIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // RES_URL
          if (field.type == TType.STRING) {
            this.resUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(PAY_CHANNEL_FIELD_DESC);
    oprot.writeI32(this.payChannel);
    oprot.writeFieldEnd();
    if (this.resUrl != null) {
      oprot.writeFieldBegin(RES_URL_FIELD_DESC);
      oprot.writeString(this.resUrl);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PayRes(");
    boolean first = true;
    sb.append("payChannel:");
    sb.append(this.payChannel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resUrl:");
    if (this.resUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.resUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
