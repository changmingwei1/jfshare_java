/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.order;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class OrderCount implements TBase<OrderCount, OrderCount._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("OrderCount");

  private static final TField ORDER_STATE_FIELD_DESC = new TField("orderState", TType.I32, (short)1);
  private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)2);


  public int orderState;
  public int count;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ORDER_STATE((short)1, "orderState"),
    COUNT((short)2, "count");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_STATE
  	return ORDER_STATE;
        case 2: // COUNT
  	return COUNT;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __ORDERSTATE_ISSET_ID = 0;
  private static final int __COUNT_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_STATE, new FieldMetaData("orderState", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(OrderCount.class, metaDataMap);
  }


  public OrderCount() {
  }

  public OrderCount(
    int orderState,
    int count)
  {
    this();
    this.orderState = orderState;
    setOrderStateIsSet(true);
    this.count = count;
    setCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderCount(OrderCount other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.orderState = other.orderState;
    this.count = other.count;
  }

  public OrderCount deepCopy() {
    return new OrderCount(this);
  }

  @Override
  public void clear() {
    setOrderStateIsSet(false);
    this.orderState = 0;
    setCountIsSet(false);
    this.count = 0;
  }

  public int getOrderState() {
    return this.orderState;
  }

  public OrderCount setOrderState(int orderState) {
    this.orderState = orderState;
    setOrderStateIsSet(true);

    return this;
  }

  public void unsetOrderState() {
  __isset_bit_vector.clear(__ORDERSTATE_ISSET_ID);
  }

  /** Returns true if field orderState is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderState() {
    return __isset_bit_vector.get(__ORDERSTATE_ISSET_ID);
  }

  public void setOrderStateIsSet(boolean value) {
    __isset_bit_vector.set(__ORDERSTATE_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public OrderCount setCount(int count) {
    this.count = count;
    setCountIsSet(true);

    return this;
  }

  public void unsetCount() {
  __isset_bit_vector.clear(__COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been asigned a value) and false otherwise */
  public boolean isSetCount() {
    return __isset_bit_vector.get(__COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bit_vector.set(__COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_STATE:
      if (value == null) {
        unsetOrderState();
      } else {
        setOrderState((Integer)value);
      }
      break;
    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_STATE:
      return new Integer(getOrderState());
    case COUNT:
      return new Integer(getCount());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_STATE:
      return isSetOrderState();
    case COUNT:
      return isSetCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderCount)
      return this.equals((OrderCount)that);
    return false;
  }

  public boolean equals(OrderCount that) {
    if (that == null)
      return false;
    boolean this_present_orderState = true;
    boolean that_present_orderState = true;
    if (this_present_orderState || that_present_orderState) {
      if (!(this_present_orderState && that_present_orderState))
        return false;
      if (this.orderState != that.orderState)
        return false;
    }
    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_orderState = true;
    builder.append(present_orderState);
    if (present_orderState)
      builder.append(orderState);
    boolean present_count = true;
    builder.append(present_count);
    if (present_count)
      builder.append(count);
    return builder.toHashCode();
  }

  public int compareTo(OrderCount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    OrderCount typedOther = (OrderCount)other;

    lastComparison = Boolean.valueOf(isSetOrderState()).compareTo(typedOther.isSetOrderState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderState()) {
      lastComparison = TBaseHelper.compareTo(this.orderState, typedOther.orderState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ORDER_STATE
          if (field.type == TType.I32) {
            this.orderState = iprot.readI32();
            setOrderStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // COUNT
          if (field.type == TType.I32) {
            this.count = iprot.readI32();
            setCountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ORDER_STATE_FIELD_DESC);
    oprot.writeI32(this.orderState);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(COUNT_FIELD_DESC);
    oprot.writeI32(this.count);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderCount(");
    boolean first = true;
    sb.append("orderState:");
    sb.append(this.orderState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
