/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.order;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class OverSoldQueryConditions implements TBase<OverSoldQueryConditions, OverSoldQueryConditions._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("OverSoldQueryConditions");

  private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short)1);
  private static final TField SELLER_NICK_FIELD_DESC = new TField("sellerNick", TType.STRING, (short)2);
  private static final TField HANDLE_STATE_FIELD_DESC = new TField("handleState", TType.I32, (short)3);
  private static final TField HANDLE_TYPE_FIELD_DESC = new TField("handleType", TType.I32, (short)4);
  private static final TField PAGE_FIELD_DESC = new TField("page", TType.I32, (short)5);
  private static final TField PER_PAGE_FIELD_DESC = new TField("perPage", TType.I32, (short)6);


  public String orderId;
  public String sellerNick;
  public int handleState;
  public int handleType;
  public int page;
  public int perPage;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    SELLER_NICK((short)2, "sellerNick"),
    HANDLE_STATE((short)3, "handleState"),
    HANDLE_TYPE((short)4, "handleType"),
    PAGE((short)5, "page"),
    PER_PAGE((short)6, "perPage");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
  	return ORDER_ID;
        case 2: // SELLER_NICK
  	return SELLER_NICK;
        case 3: // HANDLE_STATE
  	return HANDLE_STATE;
        case 4: // HANDLE_TYPE
  	return HANDLE_TYPE;
        case 5: // PAGE
  	return PAGE;
        case 6: // PER_PAGE
  	return PER_PAGE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __HANDLESTATE_ISSET_ID = 0;
  private static final int __HANDLETYPE_ISSET_ID = 1;
  private static final int __PAGE_ISSET_ID = 2;
  private static final int __PERPAGE_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SELLER_NICK, new FieldMetaData("sellerNick", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.HANDLE_STATE, new FieldMetaData("handleState", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.HANDLE_TYPE, new FieldMetaData("handleType", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PAGE, new FieldMetaData("page", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PER_PAGE, new FieldMetaData("perPage", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(OverSoldQueryConditions.class, metaDataMap);
  }


  public OverSoldQueryConditions() {
  }

  public OverSoldQueryConditions(
    String orderId,
    String sellerNick,
    int handleState,
    int handleType,
    int page,
    int perPage)
  {
    this();
    this.orderId = orderId;
    this.sellerNick = sellerNick;
    this.handleState = handleState;
    setHandleStateIsSet(true);
    this.handleType = handleType;
    setHandleTypeIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.perPage = perPage;
    setPerPageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OverSoldQueryConditions(OverSoldQueryConditions other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetSellerNick()) {
      this.sellerNick = other.sellerNick;
    }
    this.handleState = other.handleState;
    this.handleType = other.handleType;
    this.page = other.page;
    this.perPage = other.perPage;
  }

  public OverSoldQueryConditions deepCopy() {
    return new OverSoldQueryConditions(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.sellerNick = null;
    setHandleStateIsSet(false);
    this.handleState = 0;
    setHandleTypeIsSet(false);
    this.handleType = 0;
    setPageIsSet(false);
    this.page = 0;
    setPerPageIsSet(false);
    this.perPage = 0;
  }

  public String getOrderId() {
    return this.orderId;
  }

  public OverSoldQueryConditions setOrderId(String orderId) {
    this.orderId = orderId;
    
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public String getSellerNick() {
    return this.sellerNick;
  }

  public OverSoldQueryConditions setSellerNick(String sellerNick) {
    this.sellerNick = sellerNick;
    
    return this;
  }

  public void unsetSellerNick() {
    this.sellerNick = null;
  }

  /** Returns true if field sellerNick is set (has been asigned a value) and false otherwise */
  public boolean isSetSellerNick() {
    return this.sellerNick != null;
  }

  public void setSellerNickIsSet(boolean value) {
    if (!value) {
      this.sellerNick = null;
    }
  }

  public int getHandleState() {
    return this.handleState;
  }

  public OverSoldQueryConditions setHandleState(int handleState) {
    this.handleState = handleState;
    setHandleStateIsSet(true);

    return this;
  }

  public void unsetHandleState() {
  __isset_bit_vector.clear(__HANDLESTATE_ISSET_ID);
  }

  /** Returns true if field handleState is set (has been asigned a value) and false otherwise */
  public boolean isSetHandleState() {
    return __isset_bit_vector.get(__HANDLESTATE_ISSET_ID);
  }

  public void setHandleStateIsSet(boolean value) {
    __isset_bit_vector.set(__HANDLESTATE_ISSET_ID, value);
  }

  public int getHandleType() {
    return this.handleType;
  }

  public OverSoldQueryConditions setHandleType(int handleType) {
    this.handleType = handleType;
    setHandleTypeIsSet(true);

    return this;
  }

  public void unsetHandleType() {
  __isset_bit_vector.clear(__HANDLETYPE_ISSET_ID);
  }

  /** Returns true if field handleType is set (has been asigned a value) and false otherwise */
  public boolean isSetHandleType() {
    return __isset_bit_vector.get(__HANDLETYPE_ISSET_ID);
  }

  public void setHandleTypeIsSet(boolean value) {
    __isset_bit_vector.set(__HANDLETYPE_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public OverSoldQueryConditions setPage(int page) {
    this.page = page;
    setPageIsSet(true);

    return this;
  }

  public void unsetPage() {
  __isset_bit_vector.clear(__PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been asigned a value) and false otherwise */
  public boolean isSetPage() {
    return __isset_bit_vector.get(__PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bit_vector.set(__PAGE_ISSET_ID, value);
  }

  public int getPerPage() {
    return this.perPage;
  }

  public OverSoldQueryConditions setPerPage(int perPage) {
    this.perPage = perPage;
    setPerPageIsSet(true);

    return this;
  }

  public void unsetPerPage() {
  __isset_bit_vector.clear(__PERPAGE_ISSET_ID);
  }

  /** Returns true if field perPage is set (has been asigned a value) and false otherwise */
  public boolean isSetPerPage() {
    return __isset_bit_vector.get(__PERPAGE_ISSET_ID);
  }

  public void setPerPageIsSet(boolean value) {
    __isset_bit_vector.set(__PERPAGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;
    case SELLER_NICK:
      if (value == null) {
        unsetSellerNick();
      } else {
        setSellerNick((String)value);
      }
      break;
    case HANDLE_STATE:
      if (value == null) {
        unsetHandleState();
      } else {
        setHandleState((Integer)value);
      }
      break;
    case HANDLE_TYPE:
      if (value == null) {
        unsetHandleType();
      } else {
        setHandleType((Integer)value);
      }
      break;
    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;
    case PER_PAGE:
      if (value == null) {
        unsetPerPage();
      } else {
        setPerPage((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();
    case SELLER_NICK:
      return getSellerNick();
    case HANDLE_STATE:
      return new Integer(getHandleState());
    case HANDLE_TYPE:
      return new Integer(getHandleType());
    case PAGE:
      return new Integer(getPage());
    case PER_PAGE:
      return new Integer(getPerPage());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case SELLER_NICK:
      return isSetSellerNick();
    case HANDLE_STATE:
      return isSetHandleState();
    case HANDLE_TYPE:
      return isSetHandleType();
    case PAGE:
      return isSetPage();
    case PER_PAGE:
      return isSetPerPage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OverSoldQueryConditions)
      return this.equals((OverSoldQueryConditions)that);
    return false;
  }

  public boolean equals(OverSoldQueryConditions that) {
    if (that == null)
      return false;
    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }
    boolean this_present_sellerNick = true && this.isSetSellerNick();
    boolean that_present_sellerNick = true && that.isSetSellerNick();
    if (this_present_sellerNick || that_present_sellerNick) {
      if (!(this_present_sellerNick && that_present_sellerNick))
        return false;
      if (!this.sellerNick.equals(that.sellerNick))
        return false;
    }
    boolean this_present_handleState = true;
    boolean that_present_handleState = true;
    if (this_present_handleState || that_present_handleState) {
      if (!(this_present_handleState && that_present_handleState))
        return false;
      if (this.handleState != that.handleState)
        return false;
    }
    boolean this_present_handleType = true;
    boolean that_present_handleType = true;
    if (this_present_handleType || that_present_handleType) {
      if (!(this_present_handleType && that_present_handleType))
        return false;
      if (this.handleType != that.handleType)
        return false;
    }
    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }
    boolean this_present_perPage = true;
    boolean that_present_perPage = true;
    if (this_present_perPage || that_present_perPage) {
      if (!(this_present_perPage && that_present_perPage))
        return false;
      if (this.perPage != that.perPage)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_orderId = true && (isSetOrderId());
    builder.append(present_orderId);
    if (present_orderId)
      builder.append(orderId);
    boolean present_sellerNick = true && (isSetSellerNick());
    builder.append(present_sellerNick);
    if (present_sellerNick)
      builder.append(sellerNick);
    boolean present_handleState = true;
    builder.append(present_handleState);
    if (present_handleState)
      builder.append(handleState);
    boolean present_handleType = true;
    builder.append(present_handleType);
    if (present_handleType)
      builder.append(handleType);
    boolean present_page = true;
    builder.append(present_page);
    if (present_page)
      builder.append(page);
    boolean present_perPage = true;
    builder.append(present_perPage);
    if (present_perPage)
      builder.append(perPage);
    return builder.toHashCode();
  }

  public int compareTo(OverSoldQueryConditions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    OverSoldQueryConditions typedOther = (OverSoldQueryConditions)other;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerNick()).compareTo(typedOther.isSetSellerNick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerNick()) {
      lastComparison = TBaseHelper.compareTo(this.sellerNick, typedOther.sellerNick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleState()).compareTo(typedOther.isSetHandleState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleState()) {
      lastComparison = TBaseHelper.compareTo(this.handleState, typedOther.handleState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleType()).compareTo(typedOther.isSetHandleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleType()) {
      lastComparison = TBaseHelper.compareTo(this.handleType, typedOther.handleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = TBaseHelper.compareTo(this.page, typedOther.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerPage()).compareTo(typedOther.isSetPerPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerPage()) {
      lastComparison = TBaseHelper.compareTo(this.perPage, typedOther.perPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ORDER_ID
          if (field.type == TType.STRING) {
            this.orderId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SELLER_NICK
          if (field.type == TType.STRING) {
            this.sellerNick = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // HANDLE_STATE
          if (field.type == TType.I32) {
            this.handleState = iprot.readI32();
            setHandleStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // HANDLE_TYPE
          if (field.type == TType.I32) {
            this.handleType = iprot.readI32();
            setHandleTypeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // PAGE
          if (field.type == TType.I32) {
            this.page = iprot.readI32();
            setPageIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // PER_PAGE
          if (field.type == TType.I32) {
            this.perPage = iprot.readI32();
            setPerPageIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.orderId != null) {
      oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
      oprot.writeString(this.orderId);
      oprot.writeFieldEnd();
    }
    if (this.sellerNick != null) {
      oprot.writeFieldBegin(SELLER_NICK_FIELD_DESC);
      oprot.writeString(this.sellerNick);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(HANDLE_STATE_FIELD_DESC);
    oprot.writeI32(this.handleState);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(HANDLE_TYPE_FIELD_DESC);
    oprot.writeI32(this.handleType);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PAGE_FIELD_DESC);
    oprot.writeI32(this.page);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PER_PAGE_FIELD_DESC);
    oprot.writeI32(this.perPage);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OverSoldQueryConditions(");
    boolean first = true;
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerNick:");
    if (this.sellerNick == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerNick);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleState:");
    sb.append(this.handleState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleType:");
    sb.append(this.handleType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perPage:");
    sb.append(this.perPage);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
