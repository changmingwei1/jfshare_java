/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.score;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class ScoreRequestParam implements TBase<ScoreRequestParam, ScoreRequestParam._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ScoreRequestParam");

  private static final TField APP_CODE_FIELD_DESC = new TField("AppCode", TType.STRING, (short)1);
  private static final TField REQUEST_DATE_FIELD_DESC = new TField("RequestDate", TType.STRING, (short)2);
  private static final TField SIGN_FIELD_DESC = new TField("Sign", TType.STRING, (short)3);
  private static final TField SP_ID_FIELD_DESC = new TField("SpID", TType.STRING, (short)4);
  private static final TField OUT_ORDER_ID_FIELD_DESC = new TField("OutOrderID", TType.STRING, (short)5);
  private static final TField DEVICE_NO_FIELD_DESC = new TField("DeviceNo", TType.STRING, (short)6);
  private static final TField DEVICE_TYPE_FIELD_DESC = new TField("DeviceType", TType.STRING, (short)7);
  private static final TField PROVINCE_ID_FIELD_DESC = new TField("ProvinceID", TType.STRING, (short)8);
  private static final TField CUST_ID_FIELD_DESC = new TField("CustID", TType.STRING, (short)9);
  private static final TField NUM_FIELD_DESC = new TField("Num", TType.STRING, (short)10);
  private static final TField REMARK_FIELD_DESC = new TField("Remark", TType.STRING, (short)11);
  private static final TField ACTIVE_ID_FIELD_DESC = new TField("ActiveID", TType.STRING, (short)12);
  private static final TField EXP_TIME_FIELD_DESC = new TField("ExpTime", TType.STRING, (short)13);


  public String AppCode;
  public String RequestDate;
  public String Sign;
  public String SpID;
  public String OutOrderID;
  public String DeviceNo;
  public String DeviceType;
  public String ProvinceID;
  public String CustID;
  public String Num;
  public String Remark;
  public String ActiveID;
  public String ExpTime;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    APP_CODE((short)1, "AppCode"),
    REQUEST_DATE((short)2, "RequestDate"),
    SIGN((short)3, "Sign"),
    SP_ID((short)4, "SpID"),
    OUT_ORDER_ID((short)5, "OutOrderID"),
    DEVICE_NO((short)6, "DeviceNo"),
    DEVICE_TYPE((short)7, "DeviceType"),
    PROVINCE_ID((short)8, "ProvinceID"),
    CUST_ID((short)9, "CustID"),
    NUM((short)10, "Num"),
    REMARK((short)11, "Remark"),
    ACTIVE_ID((short)12, "ActiveID"),
    EXP_TIME((short)13, "ExpTime");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_CODE
  	return APP_CODE;
        case 2: // REQUEST_DATE
  	return REQUEST_DATE;
        case 3: // SIGN
  	return SIGN;
        case 4: // SP_ID
  	return SP_ID;
        case 5: // OUT_ORDER_ID
  	return OUT_ORDER_ID;
        case 6: // DEVICE_NO
  	return DEVICE_NO;
        case 7: // DEVICE_TYPE
  	return DEVICE_TYPE;
        case 8: // PROVINCE_ID
  	return PROVINCE_ID;
        case 9: // CUST_ID
  	return CUST_ID;
        case 10: // NUM
  	return NUM;
        case 11: // REMARK
  	return REMARK;
        case 12: // ACTIVE_ID
  	return ACTIVE_ID;
        case 13: // EXP_TIME
  	return EXP_TIME;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_CODE, new FieldMetaData("AppCode", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DATE, new FieldMetaData("RequestDate", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SIGN, new FieldMetaData("Sign", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SP_ID, new FieldMetaData("SpID", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.OUT_ORDER_ID, new FieldMetaData("OutOrderID", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DEVICE_NO, new FieldMetaData("DeviceNo", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DEVICE_TYPE, new FieldMetaData("DeviceType", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PROVINCE_ID, new FieldMetaData("ProvinceID", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CUST_ID, new FieldMetaData("CustID", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.NUM, new FieldMetaData("Num", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.REMARK, new FieldMetaData("Remark", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_ID, new FieldMetaData("ActiveID", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXP_TIME, new FieldMetaData("ExpTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ScoreRequestParam.class, metaDataMap);
  }


  public ScoreRequestParam() {
  }

  public ScoreRequestParam(
    String AppCode,
    String RequestDate,
    String Sign,
    String SpID,
    String OutOrderID,
    String DeviceNo,
    String DeviceType,
    String ProvinceID,
    String CustID,
    String Num,
    String Remark,
    String ActiveID,
    String ExpTime)
  {
    this();
    this.AppCode = AppCode;
    this.RequestDate = RequestDate;
    this.Sign = Sign;
    this.SpID = SpID;
    this.OutOrderID = OutOrderID;
    this.DeviceNo = DeviceNo;
    this.DeviceType = DeviceType;
    this.ProvinceID = ProvinceID;
    this.CustID = CustID;
    this.Num = Num;
    this.Remark = Remark;
    this.ActiveID = ActiveID;
    this.ExpTime = ExpTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ScoreRequestParam(ScoreRequestParam other) {
    if (other.isSetAppCode()) {
      this.AppCode = other.AppCode;
    }
    if (other.isSetRequestDate()) {
      this.RequestDate = other.RequestDate;
    }
    if (other.isSetSign()) {
      this.Sign = other.Sign;
    }
    if (other.isSetSpID()) {
      this.SpID = other.SpID;
    }
    if (other.isSetOutOrderID()) {
      this.OutOrderID = other.OutOrderID;
    }
    if (other.isSetDeviceNo()) {
      this.DeviceNo = other.DeviceNo;
    }
    if (other.isSetDeviceType()) {
      this.DeviceType = other.DeviceType;
    }
    if (other.isSetProvinceID()) {
      this.ProvinceID = other.ProvinceID;
    }
    if (other.isSetCustID()) {
      this.CustID = other.CustID;
    }
    if (other.isSetNum()) {
      this.Num = other.Num;
    }
    if (other.isSetRemark()) {
      this.Remark = other.Remark;
    }
    if (other.isSetActiveID()) {
      this.ActiveID = other.ActiveID;
    }
    if (other.isSetExpTime()) {
      this.ExpTime = other.ExpTime;
    }
  }

  public ScoreRequestParam deepCopy() {
    return new ScoreRequestParam(this);
  }

  @Override
  public void clear() {
    this.AppCode = null;
    this.RequestDate = null;
    this.Sign = null;
    this.SpID = null;
    this.OutOrderID = null;
    this.DeviceNo = null;
    this.DeviceType = null;
    this.ProvinceID = null;
    this.CustID = null;
    this.Num = null;
    this.Remark = null;
    this.ActiveID = null;
    this.ExpTime = null;
  }

  public String getAppCode() {
    return this.AppCode;
  }

  public ScoreRequestParam setAppCode(String AppCode) {
    this.AppCode = AppCode;
    
    return this;
  }

  public void unsetAppCode() {
    this.AppCode = null;
  }

  /** Returns true if field AppCode is set (has been asigned a value) and false otherwise */
  public boolean isSetAppCode() {
    return this.AppCode != null;
  }

  public void setAppCodeIsSet(boolean value) {
    if (!value) {
      this.AppCode = null;
    }
  }

  public String getRequestDate() {
    return this.RequestDate;
  }

  public ScoreRequestParam setRequestDate(String RequestDate) {
    this.RequestDate = RequestDate;
    
    return this;
  }

  public void unsetRequestDate() {
    this.RequestDate = null;
  }

  /** Returns true if field RequestDate is set (has been asigned a value) and false otherwise */
  public boolean isSetRequestDate() {
    return this.RequestDate != null;
  }

  public void setRequestDateIsSet(boolean value) {
    if (!value) {
      this.RequestDate = null;
    }
  }

  public String getSign() {
    return this.Sign;
  }

  public ScoreRequestParam setSign(String Sign) {
    this.Sign = Sign;
    
    return this;
  }

  public void unsetSign() {
    this.Sign = null;
  }

  /** Returns true if field Sign is set (has been asigned a value) and false otherwise */
  public boolean isSetSign() {
    return this.Sign != null;
  }

  public void setSignIsSet(boolean value) {
    if (!value) {
      this.Sign = null;
    }
  }

  public String getSpID() {
    return this.SpID;
  }

  public ScoreRequestParam setSpID(String SpID) {
    this.SpID = SpID;
    
    return this;
  }

  public void unsetSpID() {
    this.SpID = null;
  }

  /** Returns true if field SpID is set (has been asigned a value) and false otherwise */
  public boolean isSetSpID() {
    return this.SpID != null;
  }

  public void setSpIDIsSet(boolean value) {
    if (!value) {
      this.SpID = null;
    }
  }

  public String getOutOrderID() {
    return this.OutOrderID;
  }

  public ScoreRequestParam setOutOrderID(String OutOrderID) {
    this.OutOrderID = OutOrderID;
    
    return this;
  }

  public void unsetOutOrderID() {
    this.OutOrderID = null;
  }

  /** Returns true if field OutOrderID is set (has been asigned a value) and false otherwise */
  public boolean isSetOutOrderID() {
    return this.OutOrderID != null;
  }

  public void setOutOrderIDIsSet(boolean value) {
    if (!value) {
      this.OutOrderID = null;
    }
  }

  public String getDeviceNo() {
    return this.DeviceNo;
  }

  public ScoreRequestParam setDeviceNo(String DeviceNo) {
    this.DeviceNo = DeviceNo;
    
    return this;
  }

  public void unsetDeviceNo() {
    this.DeviceNo = null;
  }

  /** Returns true if field DeviceNo is set (has been asigned a value) and false otherwise */
  public boolean isSetDeviceNo() {
    return this.DeviceNo != null;
  }

  public void setDeviceNoIsSet(boolean value) {
    if (!value) {
      this.DeviceNo = null;
    }
  }

  public String getDeviceType() {
    return this.DeviceType;
  }

  public ScoreRequestParam setDeviceType(String DeviceType) {
    this.DeviceType = DeviceType;
    
    return this;
  }

  public void unsetDeviceType() {
    this.DeviceType = null;
  }

  /** Returns true if field DeviceType is set (has been asigned a value) and false otherwise */
  public boolean isSetDeviceType() {
    return this.DeviceType != null;
  }

  public void setDeviceTypeIsSet(boolean value) {
    if (!value) {
      this.DeviceType = null;
    }
  }

  public String getProvinceID() {
    return this.ProvinceID;
  }

  public ScoreRequestParam setProvinceID(String ProvinceID) {
    this.ProvinceID = ProvinceID;
    
    return this;
  }

  public void unsetProvinceID() {
    this.ProvinceID = null;
  }

  /** Returns true if field ProvinceID is set (has been asigned a value) and false otherwise */
  public boolean isSetProvinceID() {
    return this.ProvinceID != null;
  }

  public void setProvinceIDIsSet(boolean value) {
    if (!value) {
      this.ProvinceID = null;
    }
  }

  public String getCustID() {
    return this.CustID;
  }

  public ScoreRequestParam setCustID(String CustID) {
    this.CustID = CustID;
    
    return this;
  }

  public void unsetCustID() {
    this.CustID = null;
  }

  /** Returns true if field CustID is set (has been asigned a value) and false otherwise */
  public boolean isSetCustID() {
    return this.CustID != null;
  }

  public void setCustIDIsSet(boolean value) {
    if (!value) {
      this.CustID = null;
    }
  }

  public String getNum() {
    return this.Num;
  }

  public ScoreRequestParam setNum(String Num) {
    this.Num = Num;
    
    return this;
  }

  public void unsetNum() {
    this.Num = null;
  }

  /** Returns true if field Num is set (has been asigned a value) and false otherwise */
  public boolean isSetNum() {
    return this.Num != null;
  }

  public void setNumIsSet(boolean value) {
    if (!value) {
      this.Num = null;
    }
  }

  public String getRemark() {
    return this.Remark;
  }

  public ScoreRequestParam setRemark(String Remark) {
    this.Remark = Remark;
    
    return this;
  }

  public void unsetRemark() {
    this.Remark = null;
  }

  /** Returns true if field Remark is set (has been asigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.Remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.Remark = null;
    }
  }

  public String getActiveID() {
    return this.ActiveID;
  }

  public ScoreRequestParam setActiveID(String ActiveID) {
    this.ActiveID = ActiveID;
    
    return this;
  }

  public void unsetActiveID() {
    this.ActiveID = null;
  }

  /** Returns true if field ActiveID is set (has been asigned a value) and false otherwise */
  public boolean isSetActiveID() {
    return this.ActiveID != null;
  }

  public void setActiveIDIsSet(boolean value) {
    if (!value) {
      this.ActiveID = null;
    }
  }

  public String getExpTime() {
    return this.ExpTime;
  }

  public ScoreRequestParam setExpTime(String ExpTime) {
    this.ExpTime = ExpTime;
    
    return this;
  }

  public void unsetExpTime() {
    this.ExpTime = null;
  }

  /** Returns true if field ExpTime is set (has been asigned a value) and false otherwise */
  public boolean isSetExpTime() {
    return this.ExpTime != null;
  }

  public void setExpTimeIsSet(boolean value) {
    if (!value) {
      this.ExpTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_CODE:
      if (value == null) {
        unsetAppCode();
      } else {
        setAppCode((String)value);
      }
      break;
    case REQUEST_DATE:
      if (value == null) {
        unsetRequestDate();
      } else {
        setRequestDate((String)value);
      }
      break;
    case SIGN:
      if (value == null) {
        unsetSign();
      } else {
        setSign((String)value);
      }
      break;
    case SP_ID:
      if (value == null) {
        unsetSpID();
      } else {
        setSpID((String)value);
      }
      break;
    case OUT_ORDER_ID:
      if (value == null) {
        unsetOutOrderID();
      } else {
        setOutOrderID((String)value);
      }
      break;
    case DEVICE_NO:
      if (value == null) {
        unsetDeviceNo();
      } else {
        setDeviceNo((String)value);
      }
      break;
    case DEVICE_TYPE:
      if (value == null) {
        unsetDeviceType();
      } else {
        setDeviceType((String)value);
      }
      break;
    case PROVINCE_ID:
      if (value == null) {
        unsetProvinceID();
      } else {
        setProvinceID((String)value);
      }
      break;
    case CUST_ID:
      if (value == null) {
        unsetCustID();
      } else {
        setCustID((String)value);
      }
      break;
    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((String)value);
      }
      break;
    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;
    case ACTIVE_ID:
      if (value == null) {
        unsetActiveID();
      } else {
        setActiveID((String)value);
      }
      break;
    case EXP_TIME:
      if (value == null) {
        unsetExpTime();
      } else {
        setExpTime((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_CODE:
      return getAppCode();
    case REQUEST_DATE:
      return getRequestDate();
    case SIGN:
      return getSign();
    case SP_ID:
      return getSpID();
    case OUT_ORDER_ID:
      return getOutOrderID();
    case DEVICE_NO:
      return getDeviceNo();
    case DEVICE_TYPE:
      return getDeviceType();
    case PROVINCE_ID:
      return getProvinceID();
    case CUST_ID:
      return getCustID();
    case NUM:
      return getNum();
    case REMARK:
      return getRemark();
    case ACTIVE_ID:
      return getActiveID();
    case EXP_TIME:
      return getExpTime();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_CODE:
      return isSetAppCode();
    case REQUEST_DATE:
      return isSetRequestDate();
    case SIGN:
      return isSetSign();
    case SP_ID:
      return isSetSpID();
    case OUT_ORDER_ID:
      return isSetOutOrderID();
    case DEVICE_NO:
      return isSetDeviceNo();
    case DEVICE_TYPE:
      return isSetDeviceType();
    case PROVINCE_ID:
      return isSetProvinceID();
    case CUST_ID:
      return isSetCustID();
    case NUM:
      return isSetNum();
    case REMARK:
      return isSetRemark();
    case ACTIVE_ID:
      return isSetActiveID();
    case EXP_TIME:
      return isSetExpTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ScoreRequestParam)
      return this.equals((ScoreRequestParam)that);
    return false;
  }

  public boolean equals(ScoreRequestParam that) {
    if (that == null)
      return false;
    boolean this_present_AppCode = true && this.isSetAppCode();
    boolean that_present_AppCode = true && that.isSetAppCode();
    if (this_present_AppCode || that_present_AppCode) {
      if (!(this_present_AppCode && that_present_AppCode))
        return false;
      if (!this.AppCode.equals(that.AppCode))
        return false;
    }
    boolean this_present_RequestDate = true && this.isSetRequestDate();
    boolean that_present_RequestDate = true && that.isSetRequestDate();
    if (this_present_RequestDate || that_present_RequestDate) {
      if (!(this_present_RequestDate && that_present_RequestDate))
        return false;
      if (!this.RequestDate.equals(that.RequestDate))
        return false;
    }
    boolean this_present_Sign = true && this.isSetSign();
    boolean that_present_Sign = true && that.isSetSign();
    if (this_present_Sign || that_present_Sign) {
      if (!(this_present_Sign && that_present_Sign))
        return false;
      if (!this.Sign.equals(that.Sign))
        return false;
    }
    boolean this_present_SpID = true && this.isSetSpID();
    boolean that_present_SpID = true && that.isSetSpID();
    if (this_present_SpID || that_present_SpID) {
      if (!(this_present_SpID && that_present_SpID))
        return false;
      if (!this.SpID.equals(that.SpID))
        return false;
    }
    boolean this_present_OutOrderID = true && this.isSetOutOrderID();
    boolean that_present_OutOrderID = true && that.isSetOutOrderID();
    if (this_present_OutOrderID || that_present_OutOrderID) {
      if (!(this_present_OutOrderID && that_present_OutOrderID))
        return false;
      if (!this.OutOrderID.equals(that.OutOrderID))
        return false;
    }
    boolean this_present_DeviceNo = true && this.isSetDeviceNo();
    boolean that_present_DeviceNo = true && that.isSetDeviceNo();
    if (this_present_DeviceNo || that_present_DeviceNo) {
      if (!(this_present_DeviceNo && that_present_DeviceNo))
        return false;
      if (!this.DeviceNo.equals(that.DeviceNo))
        return false;
    }
    boolean this_present_DeviceType = true && this.isSetDeviceType();
    boolean that_present_DeviceType = true && that.isSetDeviceType();
    if (this_present_DeviceType || that_present_DeviceType) {
      if (!(this_present_DeviceType && that_present_DeviceType))
        return false;
      if (!this.DeviceType.equals(that.DeviceType))
        return false;
    }
    boolean this_present_ProvinceID = true && this.isSetProvinceID();
    boolean that_present_ProvinceID = true && that.isSetProvinceID();
    if (this_present_ProvinceID || that_present_ProvinceID) {
      if (!(this_present_ProvinceID && that_present_ProvinceID))
        return false;
      if (!this.ProvinceID.equals(that.ProvinceID))
        return false;
    }
    boolean this_present_CustID = true && this.isSetCustID();
    boolean that_present_CustID = true && that.isSetCustID();
    if (this_present_CustID || that_present_CustID) {
      if (!(this_present_CustID && that_present_CustID))
        return false;
      if (!this.CustID.equals(that.CustID))
        return false;
    }
    boolean this_present_Num = true && this.isSetNum();
    boolean that_present_Num = true && that.isSetNum();
    if (this_present_Num || that_present_Num) {
      if (!(this_present_Num && that_present_Num))
        return false;
      if (!this.Num.equals(that.Num))
        return false;
    }
    boolean this_present_Remark = true && this.isSetRemark();
    boolean that_present_Remark = true && that.isSetRemark();
    if (this_present_Remark || that_present_Remark) {
      if (!(this_present_Remark && that_present_Remark))
        return false;
      if (!this.Remark.equals(that.Remark))
        return false;
    }
    boolean this_present_ActiveID = true && this.isSetActiveID();
    boolean that_present_ActiveID = true && that.isSetActiveID();
    if (this_present_ActiveID || that_present_ActiveID) {
      if (!(this_present_ActiveID && that_present_ActiveID))
        return false;
      if (!this.ActiveID.equals(that.ActiveID))
        return false;
    }
    boolean this_present_ExpTime = true && this.isSetExpTime();
    boolean that_present_ExpTime = true && that.isSetExpTime();
    if (this_present_ExpTime || that_present_ExpTime) {
      if (!(this_present_ExpTime && that_present_ExpTime))
        return false;
      if (!this.ExpTime.equals(that.ExpTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_AppCode = true && (isSetAppCode());
    builder.append(present_AppCode);
    if (present_AppCode)
      builder.append(AppCode);
    boolean present_RequestDate = true && (isSetRequestDate());
    builder.append(present_RequestDate);
    if (present_RequestDate)
      builder.append(RequestDate);
    boolean present_Sign = true && (isSetSign());
    builder.append(present_Sign);
    if (present_Sign)
      builder.append(Sign);
    boolean present_SpID = true && (isSetSpID());
    builder.append(present_SpID);
    if (present_SpID)
      builder.append(SpID);
    boolean present_OutOrderID = true && (isSetOutOrderID());
    builder.append(present_OutOrderID);
    if (present_OutOrderID)
      builder.append(OutOrderID);
    boolean present_DeviceNo = true && (isSetDeviceNo());
    builder.append(present_DeviceNo);
    if (present_DeviceNo)
      builder.append(DeviceNo);
    boolean present_DeviceType = true && (isSetDeviceType());
    builder.append(present_DeviceType);
    if (present_DeviceType)
      builder.append(DeviceType);
    boolean present_ProvinceID = true && (isSetProvinceID());
    builder.append(present_ProvinceID);
    if (present_ProvinceID)
      builder.append(ProvinceID);
    boolean present_CustID = true && (isSetCustID());
    builder.append(present_CustID);
    if (present_CustID)
      builder.append(CustID);
    boolean present_Num = true && (isSetNum());
    builder.append(present_Num);
    if (present_Num)
      builder.append(Num);
    boolean present_Remark = true && (isSetRemark());
    builder.append(present_Remark);
    if (present_Remark)
      builder.append(Remark);
    boolean present_ActiveID = true && (isSetActiveID());
    builder.append(present_ActiveID);
    if (present_ActiveID)
      builder.append(ActiveID);
    boolean present_ExpTime = true && (isSetExpTime());
    builder.append(present_ExpTime);
    if (present_ExpTime)
      builder.append(ExpTime);
    return builder.toHashCode();
  }

  public int compareTo(ScoreRequestParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ScoreRequestParam typedOther = (ScoreRequestParam)other;

    lastComparison = Boolean.valueOf(isSetAppCode()).compareTo(typedOther.isSetAppCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppCode()) {
      lastComparison = TBaseHelper.compareTo(this.AppCode, typedOther.AppCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDate()).compareTo(typedOther.isSetRequestDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDate()) {
      lastComparison = TBaseHelper.compareTo(this.RequestDate, typedOther.RequestDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSign()) {
      lastComparison = TBaseHelper.compareTo(this.Sign, typedOther.Sign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpID()).compareTo(typedOther.isSetSpID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpID()) {
      lastComparison = TBaseHelper.compareTo(this.SpID, typedOther.SpID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutOrderID()).compareTo(typedOther.isSetOutOrderID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutOrderID()) {
      lastComparison = TBaseHelper.compareTo(this.OutOrderID, typedOther.OutOrderID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceNo()).compareTo(typedOther.isSetDeviceNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceNo()) {
      lastComparison = TBaseHelper.compareTo(this.DeviceNo, typedOther.DeviceNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceType()).compareTo(typedOther.isSetDeviceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceType()) {
      lastComparison = TBaseHelper.compareTo(this.DeviceType, typedOther.DeviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceID()).compareTo(typedOther.isSetProvinceID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceID()) {
      lastComparison = TBaseHelper.compareTo(this.ProvinceID, typedOther.ProvinceID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustID()).compareTo(typedOther.isSetCustID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustID()) {
      lastComparison = TBaseHelper.compareTo(this.CustID, typedOther.CustID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum()).compareTo(typedOther.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = TBaseHelper.compareTo(this.Num, typedOther.Num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(typedOther.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = TBaseHelper.compareTo(this.Remark, typedOther.Remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveID()).compareTo(typedOther.isSetActiveID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveID()) {
      lastComparison = TBaseHelper.compareTo(this.ActiveID, typedOther.ActiveID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpTime()).compareTo(typedOther.isSetExpTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpTime()) {
      lastComparison = TBaseHelper.compareTo(this.ExpTime, typedOther.ExpTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // APP_CODE
          if (field.type == TType.STRING) {
            this.AppCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // REQUEST_DATE
          if (field.type == TType.STRING) {
            this.RequestDate = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SIGN
          if (field.type == TType.STRING) {
            this.Sign = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SP_ID
          if (field.type == TType.STRING) {
            this.SpID = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // OUT_ORDER_ID
          if (field.type == TType.STRING) {
            this.OutOrderID = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // DEVICE_NO
          if (field.type == TType.STRING) {
            this.DeviceNo = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // DEVICE_TYPE
          if (field.type == TType.STRING) {
            this.DeviceType = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // PROVINCE_ID
          if (field.type == TType.STRING) {
            this.ProvinceID = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // CUST_ID
          if (field.type == TType.STRING) {
            this.CustID = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // NUM
          if (field.type == TType.STRING) {
            this.Num = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // REMARK
          if (field.type == TType.STRING) {
            this.Remark = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // ACTIVE_ID
          if (field.type == TType.STRING) {
            this.ActiveID = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // EXP_TIME
          if (field.type == TType.STRING) {
            this.ExpTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.AppCode != null) {
      oprot.writeFieldBegin(APP_CODE_FIELD_DESC);
      oprot.writeString(this.AppCode);
      oprot.writeFieldEnd();
    }
    if (this.RequestDate != null) {
      oprot.writeFieldBegin(REQUEST_DATE_FIELD_DESC);
      oprot.writeString(this.RequestDate);
      oprot.writeFieldEnd();
    }
    if (this.Sign != null) {
      oprot.writeFieldBegin(SIGN_FIELD_DESC);
      oprot.writeString(this.Sign);
      oprot.writeFieldEnd();
    }
    if (this.SpID != null) {
      oprot.writeFieldBegin(SP_ID_FIELD_DESC);
      oprot.writeString(this.SpID);
      oprot.writeFieldEnd();
    }
    if (this.OutOrderID != null) {
      oprot.writeFieldBegin(OUT_ORDER_ID_FIELD_DESC);
      oprot.writeString(this.OutOrderID);
      oprot.writeFieldEnd();
    }
    if (this.DeviceNo != null) {
      oprot.writeFieldBegin(DEVICE_NO_FIELD_DESC);
      oprot.writeString(this.DeviceNo);
      oprot.writeFieldEnd();
    }
    if (this.DeviceType != null) {
      oprot.writeFieldBegin(DEVICE_TYPE_FIELD_DESC);
      oprot.writeString(this.DeviceType);
      oprot.writeFieldEnd();
    }
    if (this.ProvinceID != null) {
      oprot.writeFieldBegin(PROVINCE_ID_FIELD_DESC);
      oprot.writeString(this.ProvinceID);
      oprot.writeFieldEnd();
    }
    if (this.CustID != null) {
      oprot.writeFieldBegin(CUST_ID_FIELD_DESC);
      oprot.writeString(this.CustID);
      oprot.writeFieldEnd();
    }
    if (this.Num != null) {
      oprot.writeFieldBegin(NUM_FIELD_DESC);
      oprot.writeString(this.Num);
      oprot.writeFieldEnd();
    }
    if (this.Remark != null) {
      oprot.writeFieldBegin(REMARK_FIELD_DESC);
      oprot.writeString(this.Remark);
      oprot.writeFieldEnd();
    }
    if (this.ActiveID != null) {
      oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
      oprot.writeString(this.ActiveID);
      oprot.writeFieldEnd();
    }
    if (this.ExpTime != null) {
      oprot.writeFieldBegin(EXP_TIME_FIELD_DESC);
      oprot.writeString(this.ExpTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ScoreRequestParam(");
    boolean first = true;
    sb.append("AppCode:");
    if (this.AppCode == null) {
      sb.append("null");
    } else {
      sb.append(this.AppCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RequestDate:");
    if (this.RequestDate == null) {
      sb.append("null");
    } else {
      sb.append(this.RequestDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Sign:");
    if (this.Sign == null) {
      sb.append("null");
    } else {
      sb.append(this.Sign);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SpID:");
    if (this.SpID == null) {
      sb.append("null");
    } else {
      sb.append(this.SpID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OutOrderID:");
    if (this.OutOrderID == null) {
      sb.append("null");
    } else {
      sb.append(this.OutOrderID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DeviceNo:");
    if (this.DeviceNo == null) {
      sb.append("null");
    } else {
      sb.append(this.DeviceNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DeviceType:");
    if (this.DeviceType == null) {
      sb.append("null");
    } else {
      sb.append(this.DeviceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ProvinceID:");
    if (this.ProvinceID == null) {
      sb.append("null");
    } else {
      sb.append(this.ProvinceID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CustID:");
    if (this.CustID == null) {
      sb.append("null");
    } else {
      sb.append(this.CustID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Num:");
    if (this.Num == null) {
      sb.append("null");
    } else {
      sb.append(this.Num);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Remark:");
    if (this.Remark == null) {
      sb.append("null");
    } else {
      sb.append(this.Remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ActiveID:");
    if (this.ActiveID == null) {
      sb.append("null");
    } else {
      sb.append(this.ActiveID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ExpTime:");
    if (this.ExpTime == null) {
      sb.append("null");
    } else {
      sb.append(this.ExpTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
