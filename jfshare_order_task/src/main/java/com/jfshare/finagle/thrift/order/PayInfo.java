/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.order;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class PayInfo implements TBase<PayInfo, PayInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("PayInfo");

  private static final TField PAY_CHANNEL_FIELD_DESC = new TField("payChannel", TType.STRING, (short)1);
  private static final TField PAY_ID_FIELD_DESC = new TField("payId", TType.STRING, (short)2);
  private static final TField PAY_TIME_FIELD_DESC = new TField("payTime", TType.STRING, (short)3);
  private static final TField PAY_ACCOUNT_FIELD_DESC = new TField("payAccount", TType.STRING, (short)4);
  private static final TField PAY_STATE_FIELD_DESC = new TField("payState", TType.I32, (short)5);


  public String payChannel;
  public String payId;
  public String payTime;
  public String payAccount;
  public int payState;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PAY_CHANNEL((short)1, "payChannel"),
    PAY_ID((short)2, "payId"),
    PAY_TIME((short)3, "payTime"),
    PAY_ACCOUNT((short)4, "payAccount"),
    PAY_STATE((short)5, "payState");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAY_CHANNEL
  	return PAY_CHANNEL;
        case 2: // PAY_ID
  	return PAY_ID;
        case 3: // PAY_TIME
  	return PAY_TIME;
        case 4: // PAY_ACCOUNT
  	return PAY_ACCOUNT;
        case 5: // PAY_STATE
  	return PAY_STATE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __PAYSTATE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAY_CHANNEL, new FieldMetaData("payChannel", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PAY_ID, new FieldMetaData("payId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PAY_TIME, new FieldMetaData("payTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PAY_ACCOUNT, new FieldMetaData("payAccount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PAY_STATE, new FieldMetaData("payState", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(PayInfo.class, metaDataMap);
  }


  public PayInfo() {
  }

  public PayInfo(
    String payChannel,
    String payId,
    String payTime,
    String payAccount,
    int payState)
  {
    this();
    this.payChannel = payChannel;
    this.payId = payId;
    this.payTime = payTime;
    this.payAccount = payAccount;
    this.payState = payState;
    setPayStateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PayInfo(PayInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetPayChannel()) {
      this.payChannel = other.payChannel;
    }
    if (other.isSetPayId()) {
      this.payId = other.payId;
    }
    if (other.isSetPayTime()) {
      this.payTime = other.payTime;
    }
    if (other.isSetPayAccount()) {
      this.payAccount = other.payAccount;
    }
    this.payState = other.payState;
  }

  public PayInfo deepCopy() {
    return new PayInfo(this);
  }

  @Override
  public void clear() {
    this.payChannel = null;
    this.payId = null;
    this.payTime = null;
    this.payAccount = null;
    setPayStateIsSet(false);
    this.payState = 0;
  }

  public String getPayChannel() {
    return this.payChannel;
  }

  public PayInfo setPayChannel(String payChannel) {
    this.payChannel = payChannel;
    
    return this;
  }

  public void unsetPayChannel() {
    this.payChannel = null;
  }

  /** Returns true if field payChannel is set (has been asigned a value) and false otherwise */
  public boolean isSetPayChannel() {
    return this.payChannel != null;
  }

  public void setPayChannelIsSet(boolean value) {
    if (!value) {
      this.payChannel = null;
    }
  }

  public String getPayId() {
    return this.payId;
  }

  public PayInfo setPayId(String payId) {
    this.payId = payId;
    
    return this;
  }

  public void unsetPayId() {
    this.payId = null;
  }

  /** Returns true if field payId is set (has been asigned a value) and false otherwise */
  public boolean isSetPayId() {
    return this.payId != null;
  }

  public void setPayIdIsSet(boolean value) {
    if (!value) {
      this.payId = null;
    }
  }

  public String getPayTime() {
    return this.payTime;
  }

  public PayInfo setPayTime(String payTime) {
    this.payTime = payTime;
    
    return this;
  }

  public void unsetPayTime() {
    this.payTime = null;
  }

  /** Returns true if field payTime is set (has been asigned a value) and false otherwise */
  public boolean isSetPayTime() {
    return this.payTime != null;
  }

  public void setPayTimeIsSet(boolean value) {
    if (!value) {
      this.payTime = null;
    }
  }

  public String getPayAccount() {
    return this.payAccount;
  }

  public PayInfo setPayAccount(String payAccount) {
    this.payAccount = payAccount;
    
    return this;
  }

  public void unsetPayAccount() {
    this.payAccount = null;
  }

  /** Returns true if field payAccount is set (has been asigned a value) and false otherwise */
  public boolean isSetPayAccount() {
    return this.payAccount != null;
  }

  public void setPayAccountIsSet(boolean value) {
    if (!value) {
      this.payAccount = null;
    }
  }

  public int getPayState() {
    return this.payState;
  }

  public PayInfo setPayState(int payState) {
    this.payState = payState;
    setPayStateIsSet(true);

    return this;
  }

  public void unsetPayState() {
  __isset_bit_vector.clear(__PAYSTATE_ISSET_ID);
  }

  /** Returns true if field payState is set (has been asigned a value) and false otherwise */
  public boolean isSetPayState() {
    return __isset_bit_vector.get(__PAYSTATE_ISSET_ID);
  }

  public void setPayStateIsSet(boolean value) {
    __isset_bit_vector.set(__PAYSTATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAY_CHANNEL:
      if (value == null) {
        unsetPayChannel();
      } else {
        setPayChannel((String)value);
      }
      break;
    case PAY_ID:
      if (value == null) {
        unsetPayId();
      } else {
        setPayId((String)value);
      }
      break;
    case PAY_TIME:
      if (value == null) {
        unsetPayTime();
      } else {
        setPayTime((String)value);
      }
      break;
    case PAY_ACCOUNT:
      if (value == null) {
        unsetPayAccount();
      } else {
        setPayAccount((String)value);
      }
      break;
    case PAY_STATE:
      if (value == null) {
        unsetPayState();
      } else {
        setPayState((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAY_CHANNEL:
      return getPayChannel();
    case PAY_ID:
      return getPayId();
    case PAY_TIME:
      return getPayTime();
    case PAY_ACCOUNT:
      return getPayAccount();
    case PAY_STATE:
      return new Integer(getPayState());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAY_CHANNEL:
      return isSetPayChannel();
    case PAY_ID:
      return isSetPayId();
    case PAY_TIME:
      return isSetPayTime();
    case PAY_ACCOUNT:
      return isSetPayAccount();
    case PAY_STATE:
      return isSetPayState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PayInfo)
      return this.equals((PayInfo)that);
    return false;
  }

  public boolean equals(PayInfo that) {
    if (that == null)
      return false;
    boolean this_present_payChannel = true && this.isSetPayChannel();
    boolean that_present_payChannel = true && that.isSetPayChannel();
    if (this_present_payChannel || that_present_payChannel) {
      if (!(this_present_payChannel && that_present_payChannel))
        return false;
      if (!this.payChannel.equals(that.payChannel))
        return false;
    }
    boolean this_present_payId = true && this.isSetPayId();
    boolean that_present_payId = true && that.isSetPayId();
    if (this_present_payId || that_present_payId) {
      if (!(this_present_payId && that_present_payId))
        return false;
      if (!this.payId.equals(that.payId))
        return false;
    }
    boolean this_present_payTime = true && this.isSetPayTime();
    boolean that_present_payTime = true && that.isSetPayTime();
    if (this_present_payTime || that_present_payTime) {
      if (!(this_present_payTime && that_present_payTime))
        return false;
      if (!this.payTime.equals(that.payTime))
        return false;
    }
    boolean this_present_payAccount = true && this.isSetPayAccount();
    boolean that_present_payAccount = true && that.isSetPayAccount();
    if (this_present_payAccount || that_present_payAccount) {
      if (!(this_present_payAccount && that_present_payAccount))
        return false;
      if (!this.payAccount.equals(that.payAccount))
        return false;
    }
    boolean this_present_payState = true;
    boolean that_present_payState = true;
    if (this_present_payState || that_present_payState) {
      if (!(this_present_payState && that_present_payState))
        return false;
      if (this.payState != that.payState)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_payChannel = true && (isSetPayChannel());
    builder.append(present_payChannel);
    if (present_payChannel)
      builder.append(payChannel);
    boolean present_payId = true && (isSetPayId());
    builder.append(present_payId);
    if (present_payId)
      builder.append(payId);
    boolean present_payTime = true && (isSetPayTime());
    builder.append(present_payTime);
    if (present_payTime)
      builder.append(payTime);
    boolean present_payAccount = true && (isSetPayAccount());
    builder.append(present_payAccount);
    if (present_payAccount)
      builder.append(payAccount);
    boolean present_payState = true;
    builder.append(present_payState);
    if (present_payState)
      builder.append(payState);
    return builder.toHashCode();
  }

  public int compareTo(PayInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PayInfo typedOther = (PayInfo)other;

    lastComparison = Boolean.valueOf(isSetPayChannel()).compareTo(typedOther.isSetPayChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayChannel()) {
      lastComparison = TBaseHelper.compareTo(this.payChannel, typedOther.payChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayId()).compareTo(typedOther.isSetPayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayId()) {
      lastComparison = TBaseHelper.compareTo(this.payId, typedOther.payId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayTime()).compareTo(typedOther.isSetPayTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayTime()) {
      lastComparison = TBaseHelper.compareTo(this.payTime, typedOther.payTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayAccount()).compareTo(typedOther.isSetPayAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayAccount()) {
      lastComparison = TBaseHelper.compareTo(this.payAccount, typedOther.payAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayState()).compareTo(typedOther.isSetPayState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayState()) {
      lastComparison = TBaseHelper.compareTo(this.payState, typedOther.payState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PAY_CHANNEL
          if (field.type == TType.STRING) {
            this.payChannel = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PAY_ID
          if (field.type == TType.STRING) {
            this.payId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PAY_TIME
          if (field.type == TType.STRING) {
            this.payTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PAY_ACCOUNT
          if (field.type == TType.STRING) {
            this.payAccount = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // PAY_STATE
          if (field.type == TType.I32) {
            this.payState = iprot.readI32();
            setPayStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.payChannel != null) {
      oprot.writeFieldBegin(PAY_CHANNEL_FIELD_DESC);
      oprot.writeString(this.payChannel);
      oprot.writeFieldEnd();
    }
    if (this.payId != null) {
      oprot.writeFieldBegin(PAY_ID_FIELD_DESC);
      oprot.writeString(this.payId);
      oprot.writeFieldEnd();
    }
    if (this.payTime != null) {
      oprot.writeFieldBegin(PAY_TIME_FIELD_DESC);
      oprot.writeString(this.payTime);
      oprot.writeFieldEnd();
    }
    if (this.payAccount != null) {
      oprot.writeFieldBegin(PAY_ACCOUNT_FIELD_DESC);
      oprot.writeString(this.payAccount);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PAY_STATE_FIELD_DESC);
    oprot.writeI32(this.payState);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PayInfo(");
    boolean first = true;
    sb.append("payChannel:");
    if (this.payChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.payChannel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payId:");
    if (this.payId == null) {
      sb.append("null");
    } else {
      sb.append(this.payId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payTime:");
    if (this.payTime == null) {
      sb.append("null");
    } else {
      sb.append(this.payTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payAccount:");
    if (this.payAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.payAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payState:");
    sb.append(this.payState);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
