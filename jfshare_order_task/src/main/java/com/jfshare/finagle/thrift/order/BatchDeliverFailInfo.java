/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.order;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class BatchDeliverFailInfo implements TBase<BatchDeliverFailInfo, BatchDeliverFailInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BatchDeliverFailInfo");

  private static final TField INDEX_FIELD_DESC = new TField("index", TType.I32, (short)1);
  private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short)2);
  private static final TField DESC_FIELD_DESC = new TField("desc", TType.STRING, (short)3);
  private static final TField ORDER_FIELD_DESC = new TField("order", TType.STRUCT, (short)4);


  public int index;
  public String orderId;
  public String desc;
  public Order order;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    INDEX((short)1, "index"),
    ORDER_ID((short)2, "orderId"),
    DESC((short)3, "desc"),
    ORDER((short)4, "order");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX
  	return INDEX;
        case 2: // ORDER_ID
  	return ORDER_ID;
        case 3: // DESC
  	return DESC;
        case 4: // ORDER
  	return ORDER;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __INDEX_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX, new FieldMetaData("index", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DESC, new FieldMetaData("desc", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ORDER, new FieldMetaData("order", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, Order.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BatchDeliverFailInfo.class, metaDataMap);
  }


  public BatchDeliverFailInfo() {
  }

  public BatchDeliverFailInfo(
    int index,
    String orderId,
    String desc,
    Order order)
  {
    this();
    this.index = index;
    setIndexIsSet(true);
    this.orderId = orderId;
    this.desc = desc;
    this.order = order;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BatchDeliverFailInfo(BatchDeliverFailInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.index = other.index;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetOrder()) {
      this.order = new Order(other.order);
    }
  }

  public BatchDeliverFailInfo deepCopy() {
    return new BatchDeliverFailInfo(this);
  }

  @Override
  public void clear() {
    setIndexIsSet(false);
    this.index = 0;
    this.orderId = null;
    this.desc = null;
    this.order = null;
  }

  public int getIndex() {
    return this.index;
  }

  public BatchDeliverFailInfo setIndex(int index) {
    this.index = index;
    setIndexIsSet(true);

    return this;
  }

  public void unsetIndex() {
  __isset_bit_vector.clear(__INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been asigned a value) and false otherwise */
  public boolean isSetIndex() {
    return __isset_bit_vector.get(__INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bit_vector.set(__INDEX_ISSET_ID, value);
  }

  public String getOrderId() {
    return this.orderId;
  }

  public BatchDeliverFailInfo setOrderId(String orderId) {
    this.orderId = orderId;
    
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public BatchDeliverFailInfo setDesc(String desc) {
    this.desc = desc;
    
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been asigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public Order getOrder() {
    return this.order;
  }

  public BatchDeliverFailInfo setOrder(Order order) {
    this.order = order;
    
    return this;
  }

  public void unsetOrder() {
    this.order = null;
  }

  /** Returns true if field order is set (has been asigned a value) and false otherwise */
  public boolean isSetOrder() {
    return this.order != null;
  }

  public void setOrderIsSet(boolean value) {
    if (!value) {
      this.order = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Integer)value);
      }
      break;
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;
    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;
    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((Order)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX:
      return new Integer(getIndex());
    case ORDER_ID:
      return getOrderId();
    case DESC:
      return getDesc();
    case ORDER:
      return getOrder();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INDEX:
      return isSetIndex();
    case ORDER_ID:
      return isSetOrderId();
    case DESC:
      return isSetDesc();
    case ORDER:
      return isSetOrder();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BatchDeliverFailInfo)
      return this.equals((BatchDeliverFailInfo)that);
    return false;
  }

  public boolean equals(BatchDeliverFailInfo that) {
    if (that == null)
      return false;
    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }
    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }
    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }
    boolean this_present_order = true && this.isSetOrder();
    boolean that_present_order = true && that.isSetOrder();
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (!this.order.equals(that.order))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_index = true;
    builder.append(present_index);
    if (present_index)
      builder.append(index);
    boolean present_orderId = true && (isSetOrderId());
    builder.append(present_orderId);
    if (present_orderId)
      builder.append(orderId);
    boolean present_desc = true && (isSetDesc());
    builder.append(present_desc);
    if (present_desc)
      builder.append(desc);
    boolean present_order = true && (isSetOrder());
    builder.append(present_order);
    if (present_order)
      builder.append(order);
    return builder.toHashCode();
  }

  public int compareTo(BatchDeliverFailInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BatchDeliverFailInfo typedOther = (BatchDeliverFailInfo)other;

    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(typedOther.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = TBaseHelper.compareTo(this.index, typedOther.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(typedOther.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = TBaseHelper.compareTo(this.desc, typedOther.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder()).compareTo(typedOther.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = TBaseHelper.compareTo(this.order, typedOther.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // INDEX
          if (field.type == TType.I32) {
            this.index = iprot.readI32();
            setIndexIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ORDER_ID
          if (field.type == TType.STRING) {
            this.orderId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DESC
          if (field.type == TType.STRING) {
            this.desc = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ORDER
          if (field.type == TType.STRUCT) {
            this.order = new Order();
            this.order.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(INDEX_FIELD_DESC);
    oprot.writeI32(this.index);
    oprot.writeFieldEnd();
    if (this.orderId != null) {
      oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
      oprot.writeString(this.orderId);
      oprot.writeFieldEnd();
    }
    if (this.desc != null) {
      oprot.writeFieldBegin(DESC_FIELD_DESC);
      oprot.writeString(this.desc);
      oprot.writeFieldEnd();
    }
    if (this.order != null) {
      oprot.writeFieldBegin(ORDER_FIELD_DESC);
      this.order.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BatchDeliverFailInfo(");
    boolean first = true;
    sb.append("index:");
    sb.append(this.index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("order:");
    if (this.order == null) {
      sb.append("null");
    } else {
      sb.append(this.order);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
