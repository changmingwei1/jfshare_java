/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.score;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class CachAmount implements TBase<CachAmount, CachAmount._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("CachAmount");

  private static final TField TOTAL_AMOUNT_FIELD_DESC = new TField("totalAmount", TType.I32, (short)1);
  private static final TField CACH_AMOUNT_FIELD_DESC = new TField("CachAmount", TType.I32, (short)2);


  public int totalAmount;
  public int CachAmount;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TOTAL_AMOUNT((short)1, "totalAmount"),
    CACH_AMOUNT((short)2, "CachAmount");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_AMOUNT
  	return TOTAL_AMOUNT;
        case 2: // CACH_AMOUNT
  	return CACH_AMOUNT;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __TOTALAMOUNT_ISSET_ID = 0;
  private static final int __CACHAMOUNT_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_AMOUNT, new FieldMetaData("totalAmount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CACH_AMOUNT, new FieldMetaData("CachAmount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(CachAmount.class, metaDataMap);
  }


  public CachAmount() {
  }

  public CachAmount(
    int totalAmount,
    int CachAmount)
  {
    this();
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    this.CachAmount = CachAmount;
    setCachAmountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CachAmount(CachAmount other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.totalAmount = other.totalAmount;
    this.CachAmount = other.CachAmount;
  }

  public CachAmount deepCopy() {
    return new CachAmount(this);
  }

  @Override
  public void clear() {
    setTotalAmountIsSet(false);
    this.totalAmount = 0;
    setCachAmountIsSet(false);
    this.CachAmount = 0;
  }

  public int getTotalAmount() {
    return this.totalAmount;
  }

  public CachAmount setTotalAmount(int totalAmount) {
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);

    return this;
  }

  public void unsetTotalAmount() {
  __isset_bit_vector.clear(__TOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalAmount is set (has been asigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return __isset_bit_vector.get(__TOTALAMOUNT_ISSET_ID);
  }

  public void setTotalAmountIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALAMOUNT_ISSET_ID, value);
  }

  public int getCachAmount() {
    return this.CachAmount;
  }

  public CachAmount setCachAmount(int CachAmount) {
    this.CachAmount = CachAmount;
    setCachAmountIsSet(true);

    return this;
  }

  public void unsetCachAmount() {
  __isset_bit_vector.clear(__CACHAMOUNT_ISSET_ID);
  }

  /** Returns true if field CachAmount is set (has been asigned a value) and false otherwise */
  public boolean isSetCachAmount() {
    return __isset_bit_vector.get(__CACHAMOUNT_ISSET_ID);
  }

  public void setCachAmountIsSet(boolean value) {
    __isset_bit_vector.set(__CACHAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((Integer)value);
      }
      break;
    case CACH_AMOUNT:
      if (value == null) {
        unsetCachAmount();
      } else {
        setCachAmount((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_AMOUNT:
      return new Integer(getTotalAmount());
    case CACH_AMOUNT:
      return new Integer(getCachAmount());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case CACH_AMOUNT:
      return isSetCachAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CachAmount)
      return this.equals((CachAmount)that);
    return false;
  }

  public boolean equals(CachAmount that) {
    if (that == null)
      return false;
    boolean this_present_totalAmount = true;
    boolean that_present_totalAmount = true;
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (this.totalAmount != that.totalAmount)
        return false;
    }
    boolean this_present_CachAmount = true;
    boolean that_present_CachAmount = true;
    if (this_present_CachAmount || that_present_CachAmount) {
      if (!(this_present_CachAmount && that_present_CachAmount))
        return false;
      if (this.CachAmount != that.CachAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_totalAmount = true;
    builder.append(present_totalAmount);
    if (present_totalAmount)
      builder.append(totalAmount);
    boolean present_CachAmount = true;
    builder.append(present_CachAmount);
    if (present_CachAmount)
      builder.append(CachAmount);
    return builder.toHashCode();
  }

  public int compareTo(CachAmount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CachAmount typedOther = (CachAmount)other;

    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(typedOther.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = TBaseHelper.compareTo(this.totalAmount, typedOther.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCachAmount()).compareTo(typedOther.isSetCachAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCachAmount()) {
      lastComparison = TBaseHelper.compareTo(this.CachAmount, typedOther.CachAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // TOTAL_AMOUNT
          if (field.type == TType.I32) {
            this.totalAmount = iprot.readI32();
            setTotalAmountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CACH_AMOUNT
          if (field.type == TType.I32) {
            this.CachAmount = iprot.readI32();
            setCachAmountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
    oprot.writeI32(this.totalAmount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CACH_AMOUNT_FIELD_DESC);
    oprot.writeI32(this.CachAmount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CachAmount(");
    boolean first = true;
    sb.append("totalAmount:");
    sb.append(this.totalAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("CachAmount:");
    sb.append(this.CachAmount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
