/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.order;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class PayState implements TBase<PayState, PayState._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("PayState");

  private static final TField PAY_ID_FIELD_DESC = new TField("payId", TType.STRING, (short)1);
  private static final TField TOKEN_ID_FIELD_DESC = new TField("tokenId", TType.STRING, (short)2);
  private static final TField RET_CODE_FIELD_DESC = new TField("retCode", TType.I32, (short)3);
  private static final TField CANCEL_TIME_FIELD_DESC = new TField("cancelTime", TType.I32, (short)4);


  public String payId;
  public String tokenId;
  public int retCode;
  public int cancelTime;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PAY_ID((short)1, "payId"),
    TOKEN_ID((short)2, "tokenId"),
    RET_CODE((short)3, "retCode"),
    CANCEL_TIME((short)4, "cancelTime");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAY_ID
  	return PAY_ID;
        case 2: // TOKEN_ID
  	return TOKEN_ID;
        case 3: // RET_CODE
  	return RET_CODE;
        case 4: // CANCEL_TIME
  	return CANCEL_TIME;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __RETCODE_ISSET_ID = 0;
  private static final int __CANCELTIME_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAY_ID, new FieldMetaData("payId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TOKEN_ID, new FieldMetaData("tokenId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.RET_CODE, new FieldMetaData("retCode", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CANCEL_TIME, new FieldMetaData("cancelTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(PayState.class, metaDataMap);
  }


  public PayState() {
  }

  public PayState(
    String payId,
    String tokenId,
    int retCode,
    int cancelTime)
  {
    this();
    this.payId = payId;
    this.tokenId = tokenId;
    this.retCode = retCode;
    setRetCodeIsSet(true);
    this.cancelTime = cancelTime;
    setCancelTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PayState(PayState other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetPayId()) {
      this.payId = other.payId;
    }
    if (other.isSetTokenId()) {
      this.tokenId = other.tokenId;
    }
    this.retCode = other.retCode;
    this.cancelTime = other.cancelTime;
  }

  public PayState deepCopy() {
    return new PayState(this);
  }

  @Override
  public void clear() {
    this.payId = null;
    this.tokenId = null;
    setRetCodeIsSet(false);
    this.retCode = 0;
    setCancelTimeIsSet(false);
    this.cancelTime = 0;
  }

  public String getPayId() {
    return this.payId;
  }

  public PayState setPayId(String payId) {
    this.payId = payId;
    
    return this;
  }

  public void unsetPayId() {
    this.payId = null;
  }

  /** Returns true if field payId is set (has been asigned a value) and false otherwise */
  public boolean isSetPayId() {
    return this.payId != null;
  }

  public void setPayIdIsSet(boolean value) {
    if (!value) {
      this.payId = null;
    }
  }

  public String getTokenId() {
    return this.tokenId;
  }

  public PayState setTokenId(String tokenId) {
    this.tokenId = tokenId;
    
    return this;
  }

  public void unsetTokenId() {
    this.tokenId = null;
  }

  /** Returns true if field tokenId is set (has been asigned a value) and false otherwise */
  public boolean isSetTokenId() {
    return this.tokenId != null;
  }

  public void setTokenIdIsSet(boolean value) {
    if (!value) {
      this.tokenId = null;
    }
  }

  public int getRetCode() {
    return this.retCode;
  }

  public PayState setRetCode(int retCode) {
    this.retCode = retCode;
    setRetCodeIsSet(true);

    return this;
  }

  public void unsetRetCode() {
  __isset_bit_vector.clear(__RETCODE_ISSET_ID);
  }

  /** Returns true if field retCode is set (has been asigned a value) and false otherwise */
  public boolean isSetRetCode() {
    return __isset_bit_vector.get(__RETCODE_ISSET_ID);
  }

  public void setRetCodeIsSet(boolean value) {
    __isset_bit_vector.set(__RETCODE_ISSET_ID, value);
  }

  public int getCancelTime() {
    return this.cancelTime;
  }

  public PayState setCancelTime(int cancelTime) {
    this.cancelTime = cancelTime;
    setCancelTimeIsSet(true);

    return this;
  }

  public void unsetCancelTime() {
  __isset_bit_vector.clear(__CANCELTIME_ISSET_ID);
  }

  /** Returns true if field cancelTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCancelTime() {
    return __isset_bit_vector.get(__CANCELTIME_ISSET_ID);
  }

  public void setCancelTimeIsSet(boolean value) {
    __isset_bit_vector.set(__CANCELTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAY_ID:
      if (value == null) {
        unsetPayId();
      } else {
        setPayId((String)value);
      }
      break;
    case TOKEN_ID:
      if (value == null) {
        unsetTokenId();
      } else {
        setTokenId((String)value);
      }
      break;
    case RET_CODE:
      if (value == null) {
        unsetRetCode();
      } else {
        setRetCode((Integer)value);
      }
      break;
    case CANCEL_TIME:
      if (value == null) {
        unsetCancelTime();
      } else {
        setCancelTime((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAY_ID:
      return getPayId();
    case TOKEN_ID:
      return getTokenId();
    case RET_CODE:
      return new Integer(getRetCode());
    case CANCEL_TIME:
      return new Integer(getCancelTime());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAY_ID:
      return isSetPayId();
    case TOKEN_ID:
      return isSetTokenId();
    case RET_CODE:
      return isSetRetCode();
    case CANCEL_TIME:
      return isSetCancelTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PayState)
      return this.equals((PayState)that);
    return false;
  }

  public boolean equals(PayState that) {
    if (that == null)
      return false;
    boolean this_present_payId = true && this.isSetPayId();
    boolean that_present_payId = true && that.isSetPayId();
    if (this_present_payId || that_present_payId) {
      if (!(this_present_payId && that_present_payId))
        return false;
      if (!this.payId.equals(that.payId))
        return false;
    }
    boolean this_present_tokenId = true && this.isSetTokenId();
    boolean that_present_tokenId = true && that.isSetTokenId();
    if (this_present_tokenId || that_present_tokenId) {
      if (!(this_present_tokenId && that_present_tokenId))
        return false;
      if (!this.tokenId.equals(that.tokenId))
        return false;
    }
    boolean this_present_retCode = true;
    boolean that_present_retCode = true;
    if (this_present_retCode || that_present_retCode) {
      if (!(this_present_retCode && that_present_retCode))
        return false;
      if (this.retCode != that.retCode)
        return false;
    }
    boolean this_present_cancelTime = true;
    boolean that_present_cancelTime = true;
    if (this_present_cancelTime || that_present_cancelTime) {
      if (!(this_present_cancelTime && that_present_cancelTime))
        return false;
      if (this.cancelTime != that.cancelTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_payId = true && (isSetPayId());
    builder.append(present_payId);
    if (present_payId)
      builder.append(payId);
    boolean present_tokenId = true && (isSetTokenId());
    builder.append(present_tokenId);
    if (present_tokenId)
      builder.append(tokenId);
    boolean present_retCode = true;
    builder.append(present_retCode);
    if (present_retCode)
      builder.append(retCode);
    boolean present_cancelTime = true;
    builder.append(present_cancelTime);
    if (present_cancelTime)
      builder.append(cancelTime);
    return builder.toHashCode();
  }

  public int compareTo(PayState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PayState typedOther = (PayState)other;

    lastComparison = Boolean.valueOf(isSetPayId()).compareTo(typedOther.isSetPayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayId()) {
      lastComparison = TBaseHelper.compareTo(this.payId, typedOther.payId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenId()).compareTo(typedOther.isSetTokenId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenId()) {
      lastComparison = TBaseHelper.compareTo(this.tokenId, typedOther.tokenId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetCode()).compareTo(typedOther.isSetRetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetCode()) {
      lastComparison = TBaseHelper.compareTo(this.retCode, typedOther.retCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelTime()).compareTo(typedOther.isSetCancelTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelTime()) {
      lastComparison = TBaseHelper.compareTo(this.cancelTime, typedOther.cancelTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PAY_ID
          if (field.type == TType.STRING) {
            this.payId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TOKEN_ID
          if (field.type == TType.STRING) {
            this.tokenId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // RET_CODE
          if (field.type == TType.I32) {
            this.retCode = iprot.readI32();
            setRetCodeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CANCEL_TIME
          if (field.type == TType.I32) {
            this.cancelTime = iprot.readI32();
            setCancelTimeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.payId != null) {
      oprot.writeFieldBegin(PAY_ID_FIELD_DESC);
      oprot.writeString(this.payId);
      oprot.writeFieldEnd();
    }
    if (this.tokenId != null) {
      oprot.writeFieldBegin(TOKEN_ID_FIELD_DESC);
      oprot.writeString(this.tokenId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(RET_CODE_FIELD_DESC);
    oprot.writeI32(this.retCode);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CANCEL_TIME_FIELD_DESC);
    oprot.writeI32(this.cancelTime);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PayState(");
    boolean first = true;
    sb.append("payId:");
    if (this.payId == null) {
      sb.append("null");
    } else {
      sb.append(this.payId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenId:");
    if (this.tokenId == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("retCode:");
    sb.append(this.retCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelTime:");
    sb.append(this.cancelTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
