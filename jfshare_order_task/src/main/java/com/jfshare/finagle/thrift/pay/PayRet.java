/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.pay;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class PayRet implements TBase<PayRet, PayRet._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("PayRet");

  private static final TField PAY_ID_FIELD_DESC = new TField("payId", TType.STRING, (short)1);
  private static final TField TOKEN_ID_FIELD_DESC = new TField("tokenId", TType.STRING, (short)2);
  private static final TField ORDER_NO_FIELD_DESC = new TField("orderNo", TType.STRING, (short)3);
  private static final TField EXTRA_PARAM_FIELD_DESC = new TField("extraParam", TType.STRING, (short)4);
  private static final TField PRICE_FIELD_DESC = new TField("price", TType.I32, (short)5);
  private static final TField SCORE_FIELD_DESC = new TField("score", TType.I32, (short)6);
  private static final TField PAY_CHANNEL_FIELD_DESC = new TField("payChannel", TType.I32, (short)7);
  private static final TField RET_CODE_FIELD_DESC = new TField("retCode", TType.I32, (short)8);
  private static final TField ERR_MSG_FIELD_DESC = new TField("errMsg", TType.STRING, (short)9);
  private static final TField THIRD_PRICE_FIELD_DESC = new TField("thirdPrice", TType.I32, (short)10);
  private static final TField THIRD_SCORE_FIELD_DESC = new TField("thirdScore", TType.I32, (short)11);
  private static final TField THIRD_TIME_FIELD_DESC = new TField("thirdTime", TType.STRING, (short)12);
  private static final TField PROCESS_TIME_FIELD_DESC = new TField("processTime", TType.STRING, (short)13);
  private static final TField PAY_ACCOUNT_FIELD_DESC = new TField("payAccount", TType.STRING, (short)14);
  private static final TField BIZ_CODE_FIELD_DESC = new TField("bizCode", TType.I32, (short)15);
  private static final TField SIGN_FIELD_DESC = new TField("sign", TType.STRING, (short)16);


  public String payId;
  public String tokenId;
  public String orderNo;
  public String extraParam;
  public int price;
  public int score;
  public int payChannel;
  public int retCode;
  public String errMsg;
  public int thirdPrice;
  public int thirdScore;
  public String thirdTime;
  public String processTime;
  public String payAccount;
  public int bizCode;
  public String sign;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PAY_ID((short)1, "payId"),
    TOKEN_ID((short)2, "tokenId"),
    ORDER_NO((short)3, "orderNo"),
    EXTRA_PARAM((short)4, "extraParam"),
    PRICE((short)5, "price"),
    SCORE((short)6, "score"),
    PAY_CHANNEL((short)7, "payChannel"),
    RET_CODE((short)8, "retCode"),
    ERR_MSG((short)9, "errMsg"),
    THIRD_PRICE((short)10, "thirdPrice"),
    THIRD_SCORE((short)11, "thirdScore"),
    THIRD_TIME((short)12, "thirdTime"),
    PROCESS_TIME((short)13, "processTime"),
    PAY_ACCOUNT((short)14, "payAccount"),
    BIZ_CODE((short)15, "bizCode"),
    SIGN((short)16, "sign");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAY_ID
  	return PAY_ID;
        case 2: // TOKEN_ID
  	return TOKEN_ID;
        case 3: // ORDER_NO
  	return ORDER_NO;
        case 4: // EXTRA_PARAM
  	return EXTRA_PARAM;
        case 5: // PRICE
  	return PRICE;
        case 6: // SCORE
  	return SCORE;
        case 7: // PAY_CHANNEL
  	return PAY_CHANNEL;
        case 8: // RET_CODE
  	return RET_CODE;
        case 9: // ERR_MSG
  	return ERR_MSG;
        case 10: // THIRD_PRICE
  	return THIRD_PRICE;
        case 11: // THIRD_SCORE
  	return THIRD_SCORE;
        case 12: // THIRD_TIME
  	return THIRD_TIME;
        case 13: // PROCESS_TIME
  	return PROCESS_TIME;
        case 14: // PAY_ACCOUNT
  	return PAY_ACCOUNT;
        case 15: // BIZ_CODE
  	return BIZ_CODE;
        case 16: // SIGN
  	return SIGN;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __PRICE_ISSET_ID = 0;
  private static final int __SCORE_ISSET_ID = 1;
  private static final int __PAYCHANNEL_ISSET_ID = 2;
  private static final int __RETCODE_ISSET_ID = 3;
  private static final int __THIRDPRICE_ISSET_ID = 4;
  private static final int __THIRDSCORE_ISSET_ID = 5;
  private static final int __BIZCODE_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAY_ID, new FieldMetaData("payId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TOKEN_ID, new FieldMetaData("tokenId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ORDER_NO, new FieldMetaData("orderNo", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXTRA_PARAM, new FieldMetaData("extraParam", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PRICE, new FieldMetaData("price", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.SCORE, new FieldMetaData("score", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PAY_CHANNEL, new FieldMetaData("payChannel", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.RET_CODE, new FieldMetaData("retCode", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ERR_MSG, new FieldMetaData("errMsg", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.THIRD_PRICE, new FieldMetaData("thirdPrice", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.THIRD_SCORE, new FieldMetaData("thirdScore", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.THIRD_TIME, new FieldMetaData("thirdTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PROCESS_TIME, new FieldMetaData("processTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PAY_ACCOUNT, new FieldMetaData("payAccount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.BIZ_CODE, new FieldMetaData("bizCode", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.SIGN, new FieldMetaData("sign", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(PayRet.class, metaDataMap);
  }


  public PayRet() {
  }

  public PayRet(
    String payId,
    String tokenId,
    String orderNo,
    String extraParam,
    int price,
    int score,
    int payChannel,
    int retCode,
    String errMsg,
    int thirdPrice,
    int thirdScore,
    String thirdTime,
    String processTime,
    String payAccount,
    int bizCode,
    String sign)
  {
    this();
    this.payId = payId;
    this.tokenId = tokenId;
    this.orderNo = orderNo;
    this.extraParam = extraParam;
    this.price = price;
    setPriceIsSet(true);
    this.score = score;
    setScoreIsSet(true);
    this.payChannel = payChannel;
    setPayChannelIsSet(true);
    this.retCode = retCode;
    setRetCodeIsSet(true);
    this.errMsg = errMsg;
    this.thirdPrice = thirdPrice;
    setThirdPriceIsSet(true);
    this.thirdScore = thirdScore;
    setThirdScoreIsSet(true);
    this.thirdTime = thirdTime;
    this.processTime = processTime;
    this.payAccount = payAccount;
    this.bizCode = bizCode;
    setBizCodeIsSet(true);
    this.sign = sign;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PayRet(PayRet other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetPayId()) {
      this.payId = other.payId;
    }
    if (other.isSetTokenId()) {
      this.tokenId = other.tokenId;
    }
    if (other.isSetOrderNo()) {
      this.orderNo = other.orderNo;
    }
    if (other.isSetExtraParam()) {
      this.extraParam = other.extraParam;
    }
    this.price = other.price;
    this.score = other.score;
    this.payChannel = other.payChannel;
    this.retCode = other.retCode;
    if (other.isSetErrMsg()) {
      this.errMsg = other.errMsg;
    }
    this.thirdPrice = other.thirdPrice;
    this.thirdScore = other.thirdScore;
    if (other.isSetThirdTime()) {
      this.thirdTime = other.thirdTime;
    }
    if (other.isSetProcessTime()) {
      this.processTime = other.processTime;
    }
    if (other.isSetPayAccount()) {
      this.payAccount = other.payAccount;
    }
    this.bizCode = other.bizCode;
    if (other.isSetSign()) {
      this.sign = other.sign;
    }
  }

  public PayRet deepCopy() {
    return new PayRet(this);
  }

  @Override
  public void clear() {
    this.payId = null;
    this.tokenId = null;
    this.orderNo = null;
    this.extraParam = null;
    setPriceIsSet(false);
    this.price = 0;
    setScoreIsSet(false);
    this.score = 0;
    setPayChannelIsSet(false);
    this.payChannel = 0;
    setRetCodeIsSet(false);
    this.retCode = 0;
    this.errMsg = null;
    setThirdPriceIsSet(false);
    this.thirdPrice = 0;
    setThirdScoreIsSet(false);
    this.thirdScore = 0;
    this.thirdTime = null;
    this.processTime = null;
    this.payAccount = null;
    setBizCodeIsSet(false);
    this.bizCode = 0;
    this.sign = null;
  }

  public String getPayId() {
    return this.payId;
  }

  public PayRet setPayId(String payId) {
    this.payId = payId;
    
    return this;
  }

  public void unsetPayId() {
    this.payId = null;
  }

  /** Returns true if field payId is set (has been asigned a value) and false otherwise */
  public boolean isSetPayId() {
    return this.payId != null;
  }

  public void setPayIdIsSet(boolean value) {
    if (!value) {
      this.payId = null;
    }
  }

  public String getTokenId() {
    return this.tokenId;
  }

  public PayRet setTokenId(String tokenId) {
    this.tokenId = tokenId;
    
    return this;
  }

  public void unsetTokenId() {
    this.tokenId = null;
  }

  /** Returns true if field tokenId is set (has been asigned a value) and false otherwise */
  public boolean isSetTokenId() {
    return this.tokenId != null;
  }

  public void setTokenIdIsSet(boolean value) {
    if (!value) {
      this.tokenId = null;
    }
  }

  public String getOrderNo() {
    return this.orderNo;
  }

  public PayRet setOrderNo(String orderNo) {
    this.orderNo = orderNo;
    
    return this;
  }

  public void unsetOrderNo() {
    this.orderNo = null;
  }

  /** Returns true if field orderNo is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderNo() {
    return this.orderNo != null;
  }

  public void setOrderNoIsSet(boolean value) {
    if (!value) {
      this.orderNo = null;
    }
  }

  public String getExtraParam() {
    return this.extraParam;
  }

  public PayRet setExtraParam(String extraParam) {
    this.extraParam = extraParam;
    
    return this;
  }

  public void unsetExtraParam() {
    this.extraParam = null;
  }

  /** Returns true if field extraParam is set (has been asigned a value) and false otherwise */
  public boolean isSetExtraParam() {
    return this.extraParam != null;
  }

  public void setExtraParamIsSet(boolean value) {
    if (!value) {
      this.extraParam = null;
    }
  }

  public int getPrice() {
    return this.price;
  }

  public PayRet setPrice(int price) {
    this.price = price;
    setPriceIsSet(true);

    return this;
  }

  public void unsetPrice() {
  __isset_bit_vector.clear(__PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been asigned a value) and false otherwise */
  public boolean isSetPrice() {
    return __isset_bit_vector.get(__PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bit_vector.set(__PRICE_ISSET_ID, value);
  }

  public int getScore() {
    return this.score;
  }

  public PayRet setScore(int score) {
    this.score = score;
    setScoreIsSet(true);

    return this;
  }

  public void unsetScore() {
  __isset_bit_vector.clear(__SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been asigned a value) and false otherwise */
  public boolean isSetScore() {
    return __isset_bit_vector.get(__SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bit_vector.set(__SCORE_ISSET_ID, value);
  }

  public int getPayChannel() {
    return this.payChannel;
  }

  public PayRet setPayChannel(int payChannel) {
    this.payChannel = payChannel;
    setPayChannelIsSet(true);

    return this;
  }

  public void unsetPayChannel() {
  __isset_bit_vector.clear(__PAYCHANNEL_ISSET_ID);
  }

  /** Returns true if field payChannel is set (has been asigned a value) and false otherwise */
  public boolean isSetPayChannel() {
    return __isset_bit_vector.get(__PAYCHANNEL_ISSET_ID);
  }

  public void setPayChannelIsSet(boolean value) {
    __isset_bit_vector.set(__PAYCHANNEL_ISSET_ID, value);
  }

  public int getRetCode() {
    return this.retCode;
  }

  public PayRet setRetCode(int retCode) {
    this.retCode = retCode;
    setRetCodeIsSet(true);

    return this;
  }

  public void unsetRetCode() {
  __isset_bit_vector.clear(__RETCODE_ISSET_ID);
  }

  /** Returns true if field retCode is set (has been asigned a value) and false otherwise */
  public boolean isSetRetCode() {
    return __isset_bit_vector.get(__RETCODE_ISSET_ID);
  }

  public void setRetCodeIsSet(boolean value) {
    __isset_bit_vector.set(__RETCODE_ISSET_ID, value);
  }

  public String getErrMsg() {
    return this.errMsg;
  }

  public PayRet setErrMsg(String errMsg) {
    this.errMsg = errMsg;
    
    return this;
  }

  public void unsetErrMsg() {
    this.errMsg = null;
  }

  /** Returns true if field errMsg is set (has been asigned a value) and false otherwise */
  public boolean isSetErrMsg() {
    return this.errMsg != null;
  }

  public void setErrMsgIsSet(boolean value) {
    if (!value) {
      this.errMsg = null;
    }
  }

  public int getThirdPrice() {
    return this.thirdPrice;
  }

  public PayRet setThirdPrice(int thirdPrice) {
    this.thirdPrice = thirdPrice;
    setThirdPriceIsSet(true);

    return this;
  }

  public void unsetThirdPrice() {
  __isset_bit_vector.clear(__THIRDPRICE_ISSET_ID);
  }

  /** Returns true if field thirdPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetThirdPrice() {
    return __isset_bit_vector.get(__THIRDPRICE_ISSET_ID);
  }

  public void setThirdPriceIsSet(boolean value) {
    __isset_bit_vector.set(__THIRDPRICE_ISSET_ID, value);
  }

  public int getThirdScore() {
    return this.thirdScore;
  }

  public PayRet setThirdScore(int thirdScore) {
    this.thirdScore = thirdScore;
    setThirdScoreIsSet(true);

    return this;
  }

  public void unsetThirdScore() {
  __isset_bit_vector.clear(__THIRDSCORE_ISSET_ID);
  }

  /** Returns true if field thirdScore is set (has been asigned a value) and false otherwise */
  public boolean isSetThirdScore() {
    return __isset_bit_vector.get(__THIRDSCORE_ISSET_ID);
  }

  public void setThirdScoreIsSet(boolean value) {
    __isset_bit_vector.set(__THIRDSCORE_ISSET_ID, value);
  }

  public String getThirdTime() {
    return this.thirdTime;
  }

  public PayRet setThirdTime(String thirdTime) {
    this.thirdTime = thirdTime;
    
    return this;
  }

  public void unsetThirdTime() {
    this.thirdTime = null;
  }

  /** Returns true if field thirdTime is set (has been asigned a value) and false otherwise */
  public boolean isSetThirdTime() {
    return this.thirdTime != null;
  }

  public void setThirdTimeIsSet(boolean value) {
    if (!value) {
      this.thirdTime = null;
    }
  }

  public String getProcessTime() {
    return this.processTime;
  }

  public PayRet setProcessTime(String processTime) {
    this.processTime = processTime;
    
    return this;
  }

  public void unsetProcessTime() {
    this.processTime = null;
  }

  /** Returns true if field processTime is set (has been asigned a value) and false otherwise */
  public boolean isSetProcessTime() {
    return this.processTime != null;
  }

  public void setProcessTimeIsSet(boolean value) {
    if (!value) {
      this.processTime = null;
    }
  }

  public String getPayAccount() {
    return this.payAccount;
  }

  public PayRet setPayAccount(String payAccount) {
    this.payAccount = payAccount;
    
    return this;
  }

  public void unsetPayAccount() {
    this.payAccount = null;
  }

  /** Returns true if field payAccount is set (has been asigned a value) and false otherwise */
  public boolean isSetPayAccount() {
    return this.payAccount != null;
  }

  public void setPayAccountIsSet(boolean value) {
    if (!value) {
      this.payAccount = null;
    }
  }

  public int getBizCode() {
    return this.bizCode;
  }

  public PayRet setBizCode(int bizCode) {
    this.bizCode = bizCode;
    setBizCodeIsSet(true);

    return this;
  }

  public void unsetBizCode() {
  __isset_bit_vector.clear(__BIZCODE_ISSET_ID);
  }

  /** Returns true if field bizCode is set (has been asigned a value) and false otherwise */
  public boolean isSetBizCode() {
    return __isset_bit_vector.get(__BIZCODE_ISSET_ID);
  }

  public void setBizCodeIsSet(boolean value) {
    __isset_bit_vector.set(__BIZCODE_ISSET_ID, value);
  }

  public String getSign() {
    return this.sign;
  }

  public PayRet setSign(String sign) {
    this.sign = sign;
    
    return this;
  }

  public void unsetSign() {
    this.sign = null;
  }

  /** Returns true if field sign is set (has been asigned a value) and false otherwise */
  public boolean isSetSign() {
    return this.sign != null;
  }

  public void setSignIsSet(boolean value) {
    if (!value) {
      this.sign = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAY_ID:
      if (value == null) {
        unsetPayId();
      } else {
        setPayId((String)value);
      }
      break;
    case TOKEN_ID:
      if (value == null) {
        unsetTokenId();
      } else {
        setTokenId((String)value);
      }
      break;
    case ORDER_NO:
      if (value == null) {
        unsetOrderNo();
      } else {
        setOrderNo((String)value);
      }
      break;
    case EXTRA_PARAM:
      if (value == null) {
        unsetExtraParam();
      } else {
        setExtraParam((String)value);
      }
      break;
    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Integer)value);
      }
      break;
    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Integer)value);
      }
      break;
    case PAY_CHANNEL:
      if (value == null) {
        unsetPayChannel();
      } else {
        setPayChannel((Integer)value);
      }
      break;
    case RET_CODE:
      if (value == null) {
        unsetRetCode();
      } else {
        setRetCode((Integer)value);
      }
      break;
    case ERR_MSG:
      if (value == null) {
        unsetErrMsg();
      } else {
        setErrMsg((String)value);
      }
      break;
    case THIRD_PRICE:
      if (value == null) {
        unsetThirdPrice();
      } else {
        setThirdPrice((Integer)value);
      }
      break;
    case THIRD_SCORE:
      if (value == null) {
        unsetThirdScore();
      } else {
        setThirdScore((Integer)value);
      }
      break;
    case THIRD_TIME:
      if (value == null) {
        unsetThirdTime();
      } else {
        setThirdTime((String)value);
      }
      break;
    case PROCESS_TIME:
      if (value == null) {
        unsetProcessTime();
      } else {
        setProcessTime((String)value);
      }
      break;
    case PAY_ACCOUNT:
      if (value == null) {
        unsetPayAccount();
      } else {
        setPayAccount((String)value);
      }
      break;
    case BIZ_CODE:
      if (value == null) {
        unsetBizCode();
      } else {
        setBizCode((Integer)value);
      }
      break;
    case SIGN:
      if (value == null) {
        unsetSign();
      } else {
        setSign((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAY_ID:
      return getPayId();
    case TOKEN_ID:
      return getTokenId();
    case ORDER_NO:
      return getOrderNo();
    case EXTRA_PARAM:
      return getExtraParam();
    case PRICE:
      return new Integer(getPrice());
    case SCORE:
      return new Integer(getScore());
    case PAY_CHANNEL:
      return new Integer(getPayChannel());
    case RET_CODE:
      return new Integer(getRetCode());
    case ERR_MSG:
      return getErrMsg();
    case THIRD_PRICE:
      return new Integer(getThirdPrice());
    case THIRD_SCORE:
      return new Integer(getThirdScore());
    case THIRD_TIME:
      return getThirdTime();
    case PROCESS_TIME:
      return getProcessTime();
    case PAY_ACCOUNT:
      return getPayAccount();
    case BIZ_CODE:
      return new Integer(getBizCode());
    case SIGN:
      return getSign();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAY_ID:
      return isSetPayId();
    case TOKEN_ID:
      return isSetTokenId();
    case ORDER_NO:
      return isSetOrderNo();
    case EXTRA_PARAM:
      return isSetExtraParam();
    case PRICE:
      return isSetPrice();
    case SCORE:
      return isSetScore();
    case PAY_CHANNEL:
      return isSetPayChannel();
    case RET_CODE:
      return isSetRetCode();
    case ERR_MSG:
      return isSetErrMsg();
    case THIRD_PRICE:
      return isSetThirdPrice();
    case THIRD_SCORE:
      return isSetThirdScore();
    case THIRD_TIME:
      return isSetThirdTime();
    case PROCESS_TIME:
      return isSetProcessTime();
    case PAY_ACCOUNT:
      return isSetPayAccount();
    case BIZ_CODE:
      return isSetBizCode();
    case SIGN:
      return isSetSign();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PayRet)
      return this.equals((PayRet)that);
    return false;
  }

  public boolean equals(PayRet that) {
    if (that == null)
      return false;
    boolean this_present_payId = true && this.isSetPayId();
    boolean that_present_payId = true && that.isSetPayId();
    if (this_present_payId || that_present_payId) {
      if (!(this_present_payId && that_present_payId))
        return false;
      if (!this.payId.equals(that.payId))
        return false;
    }
    boolean this_present_tokenId = true && this.isSetTokenId();
    boolean that_present_tokenId = true && that.isSetTokenId();
    if (this_present_tokenId || that_present_tokenId) {
      if (!(this_present_tokenId && that_present_tokenId))
        return false;
      if (!this.tokenId.equals(that.tokenId))
        return false;
    }
    boolean this_present_orderNo = true && this.isSetOrderNo();
    boolean that_present_orderNo = true && that.isSetOrderNo();
    if (this_present_orderNo || that_present_orderNo) {
      if (!(this_present_orderNo && that_present_orderNo))
        return false;
      if (!this.orderNo.equals(that.orderNo))
        return false;
    }
    boolean this_present_extraParam = true && this.isSetExtraParam();
    boolean that_present_extraParam = true && that.isSetExtraParam();
    if (this_present_extraParam || that_present_extraParam) {
      if (!(this_present_extraParam && that_present_extraParam))
        return false;
      if (!this.extraParam.equals(that.extraParam))
        return false;
    }
    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }
    boolean this_present_score = true;
    boolean that_present_score = true;
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }
    boolean this_present_payChannel = true;
    boolean that_present_payChannel = true;
    if (this_present_payChannel || that_present_payChannel) {
      if (!(this_present_payChannel && that_present_payChannel))
        return false;
      if (this.payChannel != that.payChannel)
        return false;
    }
    boolean this_present_retCode = true;
    boolean that_present_retCode = true;
    if (this_present_retCode || that_present_retCode) {
      if (!(this_present_retCode && that_present_retCode))
        return false;
      if (this.retCode != that.retCode)
        return false;
    }
    boolean this_present_errMsg = true && this.isSetErrMsg();
    boolean that_present_errMsg = true && that.isSetErrMsg();
    if (this_present_errMsg || that_present_errMsg) {
      if (!(this_present_errMsg && that_present_errMsg))
        return false;
      if (!this.errMsg.equals(that.errMsg))
        return false;
    }
    boolean this_present_thirdPrice = true;
    boolean that_present_thirdPrice = true;
    if (this_present_thirdPrice || that_present_thirdPrice) {
      if (!(this_present_thirdPrice && that_present_thirdPrice))
        return false;
      if (this.thirdPrice != that.thirdPrice)
        return false;
    }
    boolean this_present_thirdScore = true;
    boolean that_present_thirdScore = true;
    if (this_present_thirdScore || that_present_thirdScore) {
      if (!(this_present_thirdScore && that_present_thirdScore))
        return false;
      if (this.thirdScore != that.thirdScore)
        return false;
    }
    boolean this_present_thirdTime = true && this.isSetThirdTime();
    boolean that_present_thirdTime = true && that.isSetThirdTime();
    if (this_present_thirdTime || that_present_thirdTime) {
      if (!(this_present_thirdTime && that_present_thirdTime))
        return false;
      if (!this.thirdTime.equals(that.thirdTime))
        return false;
    }
    boolean this_present_processTime = true && this.isSetProcessTime();
    boolean that_present_processTime = true && that.isSetProcessTime();
    if (this_present_processTime || that_present_processTime) {
      if (!(this_present_processTime && that_present_processTime))
        return false;
      if (!this.processTime.equals(that.processTime))
        return false;
    }
    boolean this_present_payAccount = true && this.isSetPayAccount();
    boolean that_present_payAccount = true && that.isSetPayAccount();
    if (this_present_payAccount || that_present_payAccount) {
      if (!(this_present_payAccount && that_present_payAccount))
        return false;
      if (!this.payAccount.equals(that.payAccount))
        return false;
    }
    boolean this_present_bizCode = true;
    boolean that_present_bizCode = true;
    if (this_present_bizCode || that_present_bizCode) {
      if (!(this_present_bizCode && that_present_bizCode))
        return false;
      if (this.bizCode != that.bizCode)
        return false;
    }
    boolean this_present_sign = true && this.isSetSign();
    boolean that_present_sign = true && that.isSetSign();
    if (this_present_sign || that_present_sign) {
      if (!(this_present_sign && that_present_sign))
        return false;
      if (!this.sign.equals(that.sign))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_payId = true && (isSetPayId());
    builder.append(present_payId);
    if (present_payId)
      builder.append(payId);
    boolean present_tokenId = true && (isSetTokenId());
    builder.append(present_tokenId);
    if (present_tokenId)
      builder.append(tokenId);
    boolean present_orderNo = true && (isSetOrderNo());
    builder.append(present_orderNo);
    if (present_orderNo)
      builder.append(orderNo);
    boolean present_extraParam = true && (isSetExtraParam());
    builder.append(present_extraParam);
    if (present_extraParam)
      builder.append(extraParam);
    boolean present_price = true;
    builder.append(present_price);
    if (present_price)
      builder.append(price);
    boolean present_score = true;
    builder.append(present_score);
    if (present_score)
      builder.append(score);
    boolean present_payChannel = true;
    builder.append(present_payChannel);
    if (present_payChannel)
      builder.append(payChannel);
    boolean present_retCode = true;
    builder.append(present_retCode);
    if (present_retCode)
      builder.append(retCode);
    boolean present_errMsg = true && (isSetErrMsg());
    builder.append(present_errMsg);
    if (present_errMsg)
      builder.append(errMsg);
    boolean present_thirdPrice = true;
    builder.append(present_thirdPrice);
    if (present_thirdPrice)
      builder.append(thirdPrice);
    boolean present_thirdScore = true;
    builder.append(present_thirdScore);
    if (present_thirdScore)
      builder.append(thirdScore);
    boolean present_thirdTime = true && (isSetThirdTime());
    builder.append(present_thirdTime);
    if (present_thirdTime)
      builder.append(thirdTime);
    boolean present_processTime = true && (isSetProcessTime());
    builder.append(present_processTime);
    if (present_processTime)
      builder.append(processTime);
    boolean present_payAccount = true && (isSetPayAccount());
    builder.append(present_payAccount);
    if (present_payAccount)
      builder.append(payAccount);
    boolean present_bizCode = true;
    builder.append(present_bizCode);
    if (present_bizCode)
      builder.append(bizCode);
    boolean present_sign = true && (isSetSign());
    builder.append(present_sign);
    if (present_sign)
      builder.append(sign);
    return builder.toHashCode();
  }

  public int compareTo(PayRet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PayRet typedOther = (PayRet)other;

    lastComparison = Boolean.valueOf(isSetPayId()).compareTo(typedOther.isSetPayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayId()) {
      lastComparison = TBaseHelper.compareTo(this.payId, typedOther.payId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenId()).compareTo(typedOther.isSetTokenId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenId()) {
      lastComparison = TBaseHelper.compareTo(this.tokenId, typedOther.tokenId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderNo()).compareTo(typedOther.isSetOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNo()) {
      lastComparison = TBaseHelper.compareTo(this.orderNo, typedOther.orderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraParam()).compareTo(typedOther.isSetExtraParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraParam()) {
      lastComparison = TBaseHelper.compareTo(this.extraParam, typedOther.extraParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(typedOther.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = TBaseHelper.compareTo(this.score, typedOther.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayChannel()).compareTo(typedOther.isSetPayChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayChannel()) {
      lastComparison = TBaseHelper.compareTo(this.payChannel, typedOther.payChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetCode()).compareTo(typedOther.isSetRetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetCode()) {
      lastComparison = TBaseHelper.compareTo(this.retCode, typedOther.retCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrMsg()).compareTo(typedOther.isSetErrMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrMsg()) {
      lastComparison = TBaseHelper.compareTo(this.errMsg, typedOther.errMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdPrice()).compareTo(typedOther.isSetThirdPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdPrice()) {
      lastComparison = TBaseHelper.compareTo(this.thirdPrice, typedOther.thirdPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdScore()).compareTo(typedOther.isSetThirdScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdScore()) {
      lastComparison = TBaseHelper.compareTo(this.thirdScore, typedOther.thirdScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdTime()).compareTo(typedOther.isSetThirdTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdTime()) {
      lastComparison = TBaseHelper.compareTo(this.thirdTime, typedOther.thirdTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessTime()).compareTo(typedOther.isSetProcessTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessTime()) {
      lastComparison = TBaseHelper.compareTo(this.processTime, typedOther.processTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayAccount()).compareTo(typedOther.isSetPayAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayAccount()) {
      lastComparison = TBaseHelper.compareTo(this.payAccount, typedOther.payAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBizCode()).compareTo(typedOther.isSetBizCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizCode()) {
      lastComparison = TBaseHelper.compareTo(this.bizCode, typedOther.bizCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSign()) {
      lastComparison = TBaseHelper.compareTo(this.sign, typedOther.sign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PAY_ID
          if (field.type == TType.STRING) {
            this.payId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TOKEN_ID
          if (field.type == TType.STRING) {
            this.tokenId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ORDER_NO
          if (field.type == TType.STRING) {
            this.orderNo = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // EXTRA_PARAM
          if (field.type == TType.STRING) {
            this.extraParam = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // PRICE
          if (field.type == TType.I32) {
            this.price = iprot.readI32();
            setPriceIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // SCORE
          if (field.type == TType.I32) {
            this.score = iprot.readI32();
            setScoreIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // PAY_CHANNEL
          if (field.type == TType.I32) {
            this.payChannel = iprot.readI32();
            setPayChannelIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // RET_CODE
          if (field.type == TType.I32) {
            this.retCode = iprot.readI32();
            setRetCodeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // ERR_MSG
          if (field.type == TType.STRING) {
            this.errMsg = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // THIRD_PRICE
          if (field.type == TType.I32) {
            this.thirdPrice = iprot.readI32();
            setThirdPriceIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // THIRD_SCORE
          if (field.type == TType.I32) {
            this.thirdScore = iprot.readI32();
            setThirdScoreIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // THIRD_TIME
          if (field.type == TType.STRING) {
            this.thirdTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // PROCESS_TIME
          if (field.type == TType.STRING) {
            this.processTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // PAY_ACCOUNT
          if (field.type == TType.STRING) {
            this.payAccount = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // BIZ_CODE
          if (field.type == TType.I32) {
            this.bizCode = iprot.readI32();
            setBizCodeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // SIGN
          if (field.type == TType.STRING) {
            this.sign = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.payId != null) {
      oprot.writeFieldBegin(PAY_ID_FIELD_DESC);
      oprot.writeString(this.payId);
      oprot.writeFieldEnd();
    }
    if (this.tokenId != null) {
      oprot.writeFieldBegin(TOKEN_ID_FIELD_DESC);
      oprot.writeString(this.tokenId);
      oprot.writeFieldEnd();
    }
    if (this.orderNo != null) {
      oprot.writeFieldBegin(ORDER_NO_FIELD_DESC);
      oprot.writeString(this.orderNo);
      oprot.writeFieldEnd();
    }
    if (this.extraParam != null) {
      oprot.writeFieldBegin(EXTRA_PARAM_FIELD_DESC);
      oprot.writeString(this.extraParam);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PRICE_FIELD_DESC);
    oprot.writeI32(this.price);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SCORE_FIELD_DESC);
    oprot.writeI32(this.score);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PAY_CHANNEL_FIELD_DESC);
    oprot.writeI32(this.payChannel);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(RET_CODE_FIELD_DESC);
    oprot.writeI32(this.retCode);
    oprot.writeFieldEnd();
    if (this.errMsg != null) {
      oprot.writeFieldBegin(ERR_MSG_FIELD_DESC);
      oprot.writeString(this.errMsg);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(THIRD_PRICE_FIELD_DESC);
    oprot.writeI32(this.thirdPrice);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(THIRD_SCORE_FIELD_DESC);
    oprot.writeI32(this.thirdScore);
    oprot.writeFieldEnd();
    if (this.thirdTime != null) {
      oprot.writeFieldBegin(THIRD_TIME_FIELD_DESC);
      oprot.writeString(this.thirdTime);
      oprot.writeFieldEnd();
    }
    if (this.processTime != null) {
      oprot.writeFieldBegin(PROCESS_TIME_FIELD_DESC);
      oprot.writeString(this.processTime);
      oprot.writeFieldEnd();
    }
    if (this.payAccount != null) {
      oprot.writeFieldBegin(PAY_ACCOUNT_FIELD_DESC);
      oprot.writeString(this.payAccount);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(BIZ_CODE_FIELD_DESC);
    oprot.writeI32(this.bizCode);
    oprot.writeFieldEnd();
    if (this.sign != null) {
      oprot.writeFieldBegin(SIGN_FIELD_DESC);
      oprot.writeString(this.sign);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PayRet(");
    boolean first = true;
    sb.append("payId:");
    if (this.payId == null) {
      sb.append("null");
    } else {
      sb.append(this.payId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenId:");
    if (this.tokenId == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderNo:");
    if (this.orderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.orderNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extraParam:");
    if (this.extraParam == null) {
      sb.append("null");
    } else {
      sb.append(this.extraParam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("score:");
    sb.append(this.score);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payChannel:");
    sb.append(this.payChannel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("retCode:");
    sb.append(this.retCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errMsg:");
    if (this.errMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdPrice:");
    sb.append(this.thirdPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdScore:");
    sb.append(this.thirdScore);
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdTime:");
    if (this.thirdTime == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("processTime:");
    if (this.processTime == null) {
      sb.append("null");
    } else {
      sb.append(this.processTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payAccount:");
    if (this.payAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.payAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bizCode:");
    sb.append(this.bizCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sign:");
    if (this.sign == null) {
      sb.append("null");
    } else {
      sb.append(this.sign);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
