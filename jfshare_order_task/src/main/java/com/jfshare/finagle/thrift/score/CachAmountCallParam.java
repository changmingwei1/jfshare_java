/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.score;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class CachAmountCallParam implements TBase<CachAmountCallParam, CachAmountCallParam._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("CachAmountCallParam");

  private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I32, (short)1);
  private static final TField CACH_AMOUNT_FIELD_DESC = new TField("CachAmount", TType.I32, (short)2);
  private static final TField MOBILE_FIELD_DESC = new TField("mobile", TType.STRING, (short)3);


  public int userId;
  public int CachAmount;
  public String mobile;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_ID((short)1, "userId"),
    CACH_AMOUNT((short)2, "CachAmount"),
    MOBILE((short)3, "mobile");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
  	return USER_ID;
        case 2: // CACH_AMOUNT
  	return CACH_AMOUNT;
        case 3: // MOBILE
  	return MOBILE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __CACHAMOUNT_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CACH_AMOUNT, new FieldMetaData("CachAmount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.MOBILE, new FieldMetaData("mobile", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(CachAmountCallParam.class, metaDataMap);
  }


  public CachAmountCallParam() {
  }

  public CachAmountCallParam(
    int userId,
    int CachAmount,
    String mobile)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.CachAmount = CachAmount;
    setCachAmountIsSet(true);
    this.mobile = mobile;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CachAmountCallParam(CachAmountCallParam other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.userId = other.userId;
    this.CachAmount = other.CachAmount;
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
  }

  public CachAmountCallParam deepCopy() {
    return new CachAmountCallParam(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    setCachAmountIsSet(false);
    this.CachAmount = 0;
    this.mobile = null;
  }

  public int getUserId() {
    return this.userId;
  }

  public CachAmountCallParam setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);

    return this;
  }

  public void unsetUserId() {
  __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been asigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public int getCachAmount() {
    return this.CachAmount;
  }

  public CachAmountCallParam setCachAmount(int CachAmount) {
    this.CachAmount = CachAmount;
    setCachAmountIsSet(true);

    return this;
  }

  public void unsetCachAmount() {
  __isset_bit_vector.clear(__CACHAMOUNT_ISSET_ID);
  }

  /** Returns true if field CachAmount is set (has been asigned a value) and false otherwise */
  public boolean isSetCachAmount() {
    return __isset_bit_vector.get(__CACHAMOUNT_ISSET_ID);
  }

  public void setCachAmountIsSet(boolean value) {
    __isset_bit_vector.set(__CACHAMOUNT_ISSET_ID, value);
  }

  public String getMobile() {
    return this.mobile;
  }

  public CachAmountCallParam setMobile(String mobile) {
    this.mobile = mobile;
    
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been asigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;
    case CACH_AMOUNT:
      if (value == null) {
        unsetCachAmount();
      } else {
        setCachAmount((Integer)value);
      }
      break;
    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return new Integer(getUserId());
    case CACH_AMOUNT:
      return new Integer(getCachAmount());
    case MOBILE:
      return getMobile();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case CACH_AMOUNT:
      return isSetCachAmount();
    case MOBILE:
      return isSetMobile();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CachAmountCallParam)
      return this.equals((CachAmountCallParam)that);
    return false;
  }

  public boolean equals(CachAmountCallParam that) {
    if (that == null)
      return false;
    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }
    boolean this_present_CachAmount = true;
    boolean that_present_CachAmount = true;
    if (this_present_CachAmount || that_present_CachAmount) {
      if (!(this_present_CachAmount && that_present_CachAmount))
        return false;
      if (this.CachAmount != that.CachAmount)
        return false;
    }
    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_userId = true;
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);
    boolean present_CachAmount = true;
    builder.append(present_CachAmount);
    if (present_CachAmount)
      builder.append(CachAmount);
    boolean present_mobile = true && (isSetMobile());
    builder.append(present_mobile);
    if (present_mobile)
      builder.append(mobile);
    return builder.toHashCode();
  }

  public int compareTo(CachAmountCallParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CachAmountCallParam typedOther = (CachAmountCallParam)other;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCachAmount()).compareTo(typedOther.isSetCachAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCachAmount()) {
      lastComparison = TBaseHelper.compareTo(this.CachAmount, typedOther.CachAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(typedOther.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = TBaseHelper.compareTo(this.mobile, typedOther.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // USER_ID
          if (field.type == TType.I32) {
            this.userId = iprot.readI32();
            setUserIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CACH_AMOUNT
          if (field.type == TType.I32) {
            this.CachAmount = iprot.readI32();
            setCachAmountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MOBILE
          if (field.type == TType.STRING) {
            this.mobile = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(USER_ID_FIELD_DESC);
    oprot.writeI32(this.userId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CACH_AMOUNT_FIELD_DESC);
    oprot.writeI32(this.CachAmount);
    oprot.writeFieldEnd();
    if (this.mobile != null) {
      oprot.writeFieldBegin(MOBILE_FIELD_DESC);
      oprot.writeString(this.mobile);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CachAmountCallParam(");
    boolean first = true;
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("CachAmount:");
    sb.append(this.CachAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
