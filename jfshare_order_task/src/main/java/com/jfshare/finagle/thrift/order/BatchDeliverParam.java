/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.order;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.meta_data.ListMetaData;
import org.apache.thrift.meta_data.StructMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class BatchDeliverParam implements TBase<BatchDeliverParam, BatchDeliverParam._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BatchDeliverParam");

  private static final TField DELIVER_TYPE_FIELD_DESC = new TField("deliverType", TType.I32, (short)1);
  private static final TField ORDER_LIST_FIELD_DESC = new TField("orderList", TType.LIST, (short)2);
  private static final TField FILE_NAME_FIELD_DESC = new TField("fileName", TType.STRING, (short)3);
  private static final TField FILE_KEY_FIELD_DESC = new TField("fileKey", TType.STRING, (short)4);


  public int deliverType;
  public List<Order> orderList;
  public String fileName;
  public String fileKey;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    DELIVER_TYPE((short)1, "deliverType"),
    ORDER_LIST((short)2, "orderList"),
    FILE_NAME((short)3, "fileName"),
    FILE_KEY((short)4, "fileKey");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DELIVER_TYPE
  	return DELIVER_TYPE;
        case 2: // ORDER_LIST
  	return ORDER_LIST;
        case 3: // FILE_NAME
  	return FILE_NAME;
        case 4: // FILE_KEY
  	return FILE_KEY;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __DELIVERTYPE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DELIVER_TYPE, new FieldMetaData("deliverType", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ORDER_LIST, new FieldMetaData("orderList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, Order.class))));
    tmpMap.put(_Fields.FILE_NAME, new FieldMetaData("fileName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.FILE_KEY, new FieldMetaData("fileKey", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BatchDeliverParam.class, metaDataMap);
  }


  public BatchDeliverParam() {
  }

  public BatchDeliverParam(
    int deliverType,
    List<Order> orderList,
    String fileName,
    String fileKey)
  {
    this();
    this.deliverType = deliverType;
    setDeliverTypeIsSet(true);
    this.orderList = orderList;
    this.fileName = fileName;
    this.fileKey = fileKey;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BatchDeliverParam(BatchDeliverParam other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.deliverType = other.deliverType;
    if (other.isSetOrderList()) {
      List<Order> __this__orderList = new ArrayList<Order>();
      for (Order other_element : other.orderList) {
        __this__orderList.add(new Order(other_element));
      }
      this.orderList = __this__orderList;
    }
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    if (other.isSetFileKey()) {
      this.fileKey = other.fileKey;
    }
  }

  public BatchDeliverParam deepCopy() {
    return new BatchDeliverParam(this);
  }

  @Override
  public void clear() {
    setDeliverTypeIsSet(false);
    this.deliverType = 0;
    this.orderList = null;
    this.fileName = null;
    this.fileKey = null;
  }

  public int getDeliverType() {
    return this.deliverType;
  }

  public BatchDeliverParam setDeliverType(int deliverType) {
    this.deliverType = deliverType;
    setDeliverTypeIsSet(true);

    return this;
  }

  public void unsetDeliverType() {
  __isset_bit_vector.clear(__DELIVERTYPE_ISSET_ID);
  }

  /** Returns true if field deliverType is set (has been asigned a value) and false otherwise */
  public boolean isSetDeliverType() {
    return __isset_bit_vector.get(__DELIVERTYPE_ISSET_ID);
  }

  public void setDeliverTypeIsSet(boolean value) {
    __isset_bit_vector.set(__DELIVERTYPE_ISSET_ID, value);
  }

  public int getOrderListSize() {
    return (this.orderList == null) ? 0 : this.orderList.size();
  }

  public java.util.Iterator<Order> getOrderListIterator() {
    return (this.orderList == null) ? null : this.orderList.iterator();
  }

  public void addToOrderList(Order elem) {
    if (this.orderList == null) {
      this.orderList = new ArrayList<Order>();
    }
    this.orderList.add(elem);
  }

  public List<Order> getOrderList() {
    return this.orderList;
  }

  public BatchDeliverParam setOrderList(List<Order> orderList) {
    this.orderList = orderList;
    
    return this;
  }

  public void unsetOrderList() {
    this.orderList = null;
  }

  /** Returns true if field orderList is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderList() {
    return this.orderList != null;
  }

  public void setOrderListIsSet(boolean value) {
    if (!value) {
      this.orderList = null;
    }
  }

  public String getFileName() {
    return this.fileName;
  }

  public BatchDeliverParam setFileName(String fileName) {
    this.fileName = fileName;
    
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been asigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public String getFileKey() {
    return this.fileKey;
  }

  public BatchDeliverParam setFileKey(String fileKey) {
    this.fileKey = fileKey;
    
    return this;
  }

  public void unsetFileKey() {
    this.fileKey = null;
  }

  /** Returns true if field fileKey is set (has been asigned a value) and false otherwise */
  public boolean isSetFileKey() {
    return this.fileKey != null;
  }

  public void setFileKeyIsSet(boolean value) {
    if (!value) {
      this.fileKey = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DELIVER_TYPE:
      if (value == null) {
        unsetDeliverType();
      } else {
        setDeliverType((Integer)value);
      }
      break;
    case ORDER_LIST:
      if (value == null) {
        unsetOrderList();
      } else {
        setOrderList((List<Order>)value);
      }
      break;
    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;
    case FILE_KEY:
      if (value == null) {
        unsetFileKey();
      } else {
        setFileKey((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DELIVER_TYPE:
      return new Integer(getDeliverType());
    case ORDER_LIST:
      return getOrderList();
    case FILE_NAME:
      return getFileName();
    case FILE_KEY:
      return getFileKey();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DELIVER_TYPE:
      return isSetDeliverType();
    case ORDER_LIST:
      return isSetOrderList();
    case FILE_NAME:
      return isSetFileName();
    case FILE_KEY:
      return isSetFileKey();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BatchDeliverParam)
      return this.equals((BatchDeliverParam)that);
    return false;
  }

  public boolean equals(BatchDeliverParam that) {
    if (that == null)
      return false;
    boolean this_present_deliverType = true;
    boolean that_present_deliverType = true;
    if (this_present_deliverType || that_present_deliverType) {
      if (!(this_present_deliverType && that_present_deliverType))
        return false;
      if (this.deliverType != that.deliverType)
        return false;
    }
    boolean this_present_orderList = true && this.isSetOrderList();
    boolean that_present_orderList = true && that.isSetOrderList();
    if (this_present_orderList || that_present_orderList) {
      if (!(this_present_orderList && that_present_orderList))
        return false;
      if (!this.orderList.equals(that.orderList))
        return false;
    }
    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }
    boolean this_present_fileKey = true && this.isSetFileKey();
    boolean that_present_fileKey = true && that.isSetFileKey();
    if (this_present_fileKey || that_present_fileKey) {
      if (!(this_present_fileKey && that_present_fileKey))
        return false;
      if (!this.fileKey.equals(that.fileKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_deliverType = true;
    builder.append(present_deliverType);
    if (present_deliverType)
      builder.append(deliverType);
    boolean present_orderList = true && (isSetOrderList());
    builder.append(present_orderList);
    if (present_orderList)
      builder.append(orderList);
    boolean present_fileName = true && (isSetFileName());
    builder.append(present_fileName);
    if (present_fileName)
      builder.append(fileName);
    boolean present_fileKey = true && (isSetFileKey());
    builder.append(present_fileKey);
    if (present_fileKey)
      builder.append(fileKey);
    return builder.toHashCode();
  }

  public int compareTo(BatchDeliverParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BatchDeliverParam typedOther = (BatchDeliverParam)other;

    lastComparison = Boolean.valueOf(isSetDeliverType()).compareTo(typedOther.isSetDeliverType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliverType()) {
      lastComparison = TBaseHelper.compareTo(this.deliverType, typedOther.deliverType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderList()).compareTo(typedOther.isSetOrderList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderList()) {
      lastComparison = TBaseHelper.compareTo(this.orderList, typedOther.orderList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(typedOther.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = TBaseHelper.compareTo(this.fileName, typedOther.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileKey()).compareTo(typedOther.isSetFileKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileKey()) {
      lastComparison = TBaseHelper.compareTo(this.fileKey, typedOther.fileKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // DELIVER_TYPE
          if (field.type == TType.I32) {
            this.deliverType = iprot.readI32();
            setDeliverTypeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ORDER_LIST
          if (field.type == TType.LIST) {
            {
            TList _list28 = iprot.readListBegin();
            this.orderList = new ArrayList<Order>(_list28.size);
            for (int _i29 = 0; _i29 < _list28.size; ++_i29)
            {
              Order _elem30;
              _elem30 = new Order();
              _elem30.read(iprot);
              this.orderList.add(_elem30);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // FILE_NAME
          if (field.type == TType.STRING) {
            this.fileName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // FILE_KEY
          if (field.type == TType.STRING) {
            this.fileKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(DELIVER_TYPE_FIELD_DESC);
    oprot.writeI32(this.deliverType);
    oprot.writeFieldEnd();
    if (this.orderList != null) {
      oprot.writeFieldBegin(ORDER_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.orderList.size()));
        for (Order _iter31 : this.orderList)
        {
          _iter31.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.fileName != null) {
      oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
      oprot.writeString(this.fileName);
      oprot.writeFieldEnd();
    }
    if (this.fileKey != null) {
      oprot.writeFieldBegin(FILE_KEY_FIELD_DESC);
      oprot.writeString(this.fileKey);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BatchDeliverParam(");
    boolean first = true;
    sb.append("deliverType:");
    sb.append(this.deliverType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderList:");
    if (this.orderList == null) {
      sb.append("null");
    } else {
      sb.append(this.orderList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileKey:");
    if (this.fileKey == null) {
      sb.append("null");
    } else {
      sb.append(this.fileKey);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
