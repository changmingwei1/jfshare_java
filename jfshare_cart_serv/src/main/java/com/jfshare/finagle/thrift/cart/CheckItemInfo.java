/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.cart;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class CheckItemInfo implements TBase<CheckItemInfo, CheckItemInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("CheckItemInfo");

  private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, (short)1);
  private static final TField SKU_NUM_FIELD_DESC = new TField("skuNum", TType.STRING, (short)2);
  private static final TField SKU_COUNT_FIELD_DESC = new TField("skuCount", TType.I32, (short)3);
  private static final TField CURR_QUANTITY_FIELD_DESC = new TField("currQuantity", TType.I32, (short)4);
  private static final TField MAX_BUY_LIMIT_FIELD_DESC = new TField("maxBuyLimit", TType.I32, (short)5);
  private static final TField CURR_BUY_FIELD_DESC = new TField("currBuy", TType.I32, (short)6);
  private static final TField IS_OUT_OF_GAUGE_FIELD_DESC = new TField("isOutOfGauge", TType.BOOL, (short)7);
  private static final TField IS_OUT_OF_STOCK_FIELD_DESC = new TField("isOutOfStock", TType.BOOL, (short)8);


  public String productId;
  public String skuNum;
  public int skuCount;
  public int currQuantity;
  public int maxBuyLimit;
  public int currBuy;
  public boolean isOutOfGauge;
  public boolean isOutOfStock;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PRODUCT_ID((short)1, "productId"),
    SKU_NUM((short)2, "skuNum"),
    SKU_COUNT((short)3, "skuCount"),
    CURR_QUANTITY((short)4, "currQuantity"),
    MAX_BUY_LIMIT((short)5, "maxBuyLimit"),
    CURR_BUY((short)6, "currBuy"),
    IS_OUT_OF_GAUGE((short)7, "isOutOfGauge"),
    IS_OUT_OF_STOCK((short)8, "isOutOfStock");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
  	return PRODUCT_ID;
        case 2: // SKU_NUM
  	return SKU_NUM;
        case 3: // SKU_COUNT
  	return SKU_COUNT;
        case 4: // CURR_QUANTITY
  	return CURR_QUANTITY;
        case 5: // MAX_BUY_LIMIT
  	return MAX_BUY_LIMIT;
        case 6: // CURR_BUY
  	return CURR_BUY;
        case 7: // IS_OUT_OF_GAUGE
  	return IS_OUT_OF_GAUGE;
        case 8: // IS_OUT_OF_STOCK
  	return IS_OUT_OF_STOCK;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SKUCOUNT_ISSET_ID = 0;
  private static final int __CURRQUANTITY_ISSET_ID = 1;
  private static final int __MAXBUYLIMIT_ISSET_ID = 2;
  private static final int __CURRBUY_ISSET_ID = 3;
  private static final int __ISOUTOFGAUGE_ISSET_ID = 4;
  private static final int __ISOUTOFSTOCK_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new FieldMetaData("productId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SKU_NUM, new FieldMetaData("skuNum", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SKU_COUNT, new FieldMetaData("skuCount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CURR_QUANTITY, new FieldMetaData("currQuantity", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.MAX_BUY_LIMIT, new FieldMetaData("maxBuyLimit", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CURR_BUY, new FieldMetaData("currBuy", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.IS_OUT_OF_GAUGE, new FieldMetaData("isOutOfGauge", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.IS_OUT_OF_STOCK, new FieldMetaData("isOutOfStock", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(CheckItemInfo.class, metaDataMap);
  }


  public CheckItemInfo() {
  }

  public CheckItemInfo(
    String productId,
    String skuNum,
    int skuCount,
    int currQuantity,
    int maxBuyLimit,
    int currBuy,
    boolean isOutOfGauge,
    boolean isOutOfStock)
  {
    this();
    this.productId = productId;
    this.skuNum = skuNum;
    this.skuCount = skuCount;
    setSkuCountIsSet(true);
    this.currQuantity = currQuantity;
    setCurrQuantityIsSet(true);
    this.maxBuyLimit = maxBuyLimit;
    setMaxBuyLimitIsSet(true);
    this.currBuy = currBuy;
    setCurrBuyIsSet(true);
    this.isOutOfGauge = isOutOfGauge;
    setIsOutOfGaugeIsSet(true);
    this.isOutOfStock = isOutOfStock;
    setIsOutOfStockIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CheckItemInfo(CheckItemInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetSkuNum()) {
      this.skuNum = other.skuNum;
    }
    this.skuCount = other.skuCount;
    this.currQuantity = other.currQuantity;
    this.maxBuyLimit = other.maxBuyLimit;
    this.currBuy = other.currBuy;
    this.isOutOfGauge = other.isOutOfGauge;
    this.isOutOfStock = other.isOutOfStock;
  }

  public CheckItemInfo deepCopy() {
    return new CheckItemInfo(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    this.skuNum = null;
    setSkuCountIsSet(false);
    this.skuCount = 0;
    setCurrQuantityIsSet(false);
    this.currQuantity = 0;
    setMaxBuyLimitIsSet(false);
    this.maxBuyLimit = 0;
    setCurrBuyIsSet(false);
    this.currBuy = 0;
    setIsOutOfGaugeIsSet(false);
    this.isOutOfGauge = false;
    setIsOutOfStockIsSet(false);
    this.isOutOfStock = false;
  }

  public String getProductId() {
    return this.productId;
  }

  public CheckItemInfo setProductId(String productId) {
    this.productId = productId;
    
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been asigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public String getSkuNum() {
    return this.skuNum;
  }

  public CheckItemInfo setSkuNum(String skuNum) {
    this.skuNum = skuNum;
    
    return this;
  }

  public void unsetSkuNum() {
    this.skuNum = null;
  }

  /** Returns true if field skuNum is set (has been asigned a value) and false otherwise */
  public boolean isSetSkuNum() {
    return this.skuNum != null;
  }

  public void setSkuNumIsSet(boolean value) {
    if (!value) {
      this.skuNum = null;
    }
  }

  public int getSkuCount() {
    return this.skuCount;
  }

  public CheckItemInfo setSkuCount(int skuCount) {
    this.skuCount = skuCount;
    setSkuCountIsSet(true);

    return this;
  }

  public void unsetSkuCount() {
  __isset_bit_vector.clear(__SKUCOUNT_ISSET_ID);
  }

  /** Returns true if field skuCount is set (has been asigned a value) and false otherwise */
  public boolean isSetSkuCount() {
    return __isset_bit_vector.get(__SKUCOUNT_ISSET_ID);
  }

  public void setSkuCountIsSet(boolean value) {
    __isset_bit_vector.set(__SKUCOUNT_ISSET_ID, value);
  }

  public int getCurrQuantity() {
    return this.currQuantity;
  }

  public CheckItemInfo setCurrQuantity(int currQuantity) {
    this.currQuantity = currQuantity;
    setCurrQuantityIsSet(true);

    return this;
  }

  public void unsetCurrQuantity() {
  __isset_bit_vector.clear(__CURRQUANTITY_ISSET_ID);
  }

  /** Returns true if field currQuantity is set (has been asigned a value) and false otherwise */
  public boolean isSetCurrQuantity() {
    return __isset_bit_vector.get(__CURRQUANTITY_ISSET_ID);
  }

  public void setCurrQuantityIsSet(boolean value) {
    __isset_bit_vector.set(__CURRQUANTITY_ISSET_ID, value);
  }

  public int getMaxBuyLimit() {
    return this.maxBuyLimit;
  }

  public CheckItemInfo setMaxBuyLimit(int maxBuyLimit) {
    this.maxBuyLimit = maxBuyLimit;
    setMaxBuyLimitIsSet(true);

    return this;
  }

  public void unsetMaxBuyLimit() {
  __isset_bit_vector.clear(__MAXBUYLIMIT_ISSET_ID);
  }

  /** Returns true if field maxBuyLimit is set (has been asigned a value) and false otherwise */
  public boolean isSetMaxBuyLimit() {
    return __isset_bit_vector.get(__MAXBUYLIMIT_ISSET_ID);
  }

  public void setMaxBuyLimitIsSet(boolean value) {
    __isset_bit_vector.set(__MAXBUYLIMIT_ISSET_ID, value);
  }

  public int getCurrBuy() {
    return this.currBuy;
  }

  public CheckItemInfo setCurrBuy(int currBuy) {
    this.currBuy = currBuy;
    setCurrBuyIsSet(true);

    return this;
  }

  public void unsetCurrBuy() {
  __isset_bit_vector.clear(__CURRBUY_ISSET_ID);
  }

  /** Returns true if field currBuy is set (has been asigned a value) and false otherwise */
  public boolean isSetCurrBuy() {
    return __isset_bit_vector.get(__CURRBUY_ISSET_ID);
  }

  public void setCurrBuyIsSet(boolean value) {
    __isset_bit_vector.set(__CURRBUY_ISSET_ID, value);
  }

  public boolean isIsOutOfGauge() {
    return this.isOutOfGauge;
  }

  public CheckItemInfo setIsOutOfGauge(boolean isOutOfGauge) {
    this.isOutOfGauge = isOutOfGauge;
    setIsOutOfGaugeIsSet(true);

    return this;
  }

  public void unsetIsOutOfGauge() {
  __isset_bit_vector.clear(__ISOUTOFGAUGE_ISSET_ID);
  }

  /** Returns true if field isOutOfGauge is set (has been asigned a value) and false otherwise */
  public boolean isSetIsOutOfGauge() {
    return __isset_bit_vector.get(__ISOUTOFGAUGE_ISSET_ID);
  }

  public void setIsOutOfGaugeIsSet(boolean value) {
    __isset_bit_vector.set(__ISOUTOFGAUGE_ISSET_ID, value);
  }

  public boolean isIsOutOfStock() {
    return this.isOutOfStock;
  }

  public CheckItemInfo setIsOutOfStock(boolean isOutOfStock) {
    this.isOutOfStock = isOutOfStock;
    setIsOutOfStockIsSet(true);

    return this;
  }

  public void unsetIsOutOfStock() {
  __isset_bit_vector.clear(__ISOUTOFSTOCK_ISSET_ID);
  }

  /** Returns true if field isOutOfStock is set (has been asigned a value) and false otherwise */
  public boolean isSetIsOutOfStock() {
    return __isset_bit_vector.get(__ISOUTOFSTOCK_ISSET_ID);
  }

  public void setIsOutOfStockIsSet(boolean value) {
    __isset_bit_vector.set(__ISOUTOFSTOCK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;
    case SKU_NUM:
      if (value == null) {
        unsetSkuNum();
      } else {
        setSkuNum((String)value);
      }
      break;
    case SKU_COUNT:
      if (value == null) {
        unsetSkuCount();
      } else {
        setSkuCount((Integer)value);
      }
      break;
    case CURR_QUANTITY:
      if (value == null) {
        unsetCurrQuantity();
      } else {
        setCurrQuantity((Integer)value);
      }
      break;
    case MAX_BUY_LIMIT:
      if (value == null) {
        unsetMaxBuyLimit();
      } else {
        setMaxBuyLimit((Integer)value);
      }
      break;
    case CURR_BUY:
      if (value == null) {
        unsetCurrBuy();
      } else {
        setCurrBuy((Integer)value);
      }
      break;
    case IS_OUT_OF_GAUGE:
      if (value == null) {
        unsetIsOutOfGauge();
      } else {
        setIsOutOfGauge((Boolean)value);
      }
      break;
    case IS_OUT_OF_STOCK:
      if (value == null) {
        unsetIsOutOfStock();
      } else {
        setIsOutOfStock((Boolean)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();
    case SKU_NUM:
      return getSkuNum();
    case SKU_COUNT:
      return new Integer(getSkuCount());
    case CURR_QUANTITY:
      return new Integer(getCurrQuantity());
    case MAX_BUY_LIMIT:
      return new Integer(getMaxBuyLimit());
    case CURR_BUY:
      return new Integer(getCurrBuy());
    case IS_OUT_OF_GAUGE:
      return new Boolean(isIsOutOfGauge());
    case IS_OUT_OF_STOCK:
      return new Boolean(isIsOutOfStock());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case SKU_NUM:
      return isSetSkuNum();
    case SKU_COUNT:
      return isSetSkuCount();
    case CURR_QUANTITY:
      return isSetCurrQuantity();
    case MAX_BUY_LIMIT:
      return isSetMaxBuyLimit();
    case CURR_BUY:
      return isSetCurrBuy();
    case IS_OUT_OF_GAUGE:
      return isSetIsOutOfGauge();
    case IS_OUT_OF_STOCK:
      return isSetIsOutOfStock();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CheckItemInfo)
      return this.equals((CheckItemInfo)that);
    return false;
  }

  public boolean equals(CheckItemInfo that) {
    if (that == null)
      return false;
    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }
    boolean this_present_skuNum = true && this.isSetSkuNum();
    boolean that_present_skuNum = true && that.isSetSkuNum();
    if (this_present_skuNum || that_present_skuNum) {
      if (!(this_present_skuNum && that_present_skuNum))
        return false;
      if (!this.skuNum.equals(that.skuNum))
        return false;
    }
    boolean this_present_skuCount = true;
    boolean that_present_skuCount = true;
    if (this_present_skuCount || that_present_skuCount) {
      if (!(this_present_skuCount && that_present_skuCount))
        return false;
      if (this.skuCount != that.skuCount)
        return false;
    }
    boolean this_present_currQuantity = true;
    boolean that_present_currQuantity = true;
    if (this_present_currQuantity || that_present_currQuantity) {
      if (!(this_present_currQuantity && that_present_currQuantity))
        return false;
      if (this.currQuantity != that.currQuantity)
        return false;
    }
    boolean this_present_maxBuyLimit = true;
    boolean that_present_maxBuyLimit = true;
    if (this_present_maxBuyLimit || that_present_maxBuyLimit) {
      if (!(this_present_maxBuyLimit && that_present_maxBuyLimit))
        return false;
      if (this.maxBuyLimit != that.maxBuyLimit)
        return false;
    }
    boolean this_present_currBuy = true;
    boolean that_present_currBuy = true;
    if (this_present_currBuy || that_present_currBuy) {
      if (!(this_present_currBuy && that_present_currBuy))
        return false;
      if (this.currBuy != that.currBuy)
        return false;
    }
    boolean this_present_isOutOfGauge = true;
    boolean that_present_isOutOfGauge = true;
    if (this_present_isOutOfGauge || that_present_isOutOfGauge) {
      if (!(this_present_isOutOfGauge && that_present_isOutOfGauge))
        return false;
      if (this.isOutOfGauge != that.isOutOfGauge)
        return false;
    }
    boolean this_present_isOutOfStock = true;
    boolean that_present_isOutOfStock = true;
    if (this_present_isOutOfStock || that_present_isOutOfStock) {
      if (!(this_present_isOutOfStock && that_present_isOutOfStock))
        return false;
      if (this.isOutOfStock != that.isOutOfStock)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_productId = true && (isSetProductId());
    builder.append(present_productId);
    if (present_productId)
      builder.append(productId);
    boolean present_skuNum = true && (isSetSkuNum());
    builder.append(present_skuNum);
    if (present_skuNum)
      builder.append(skuNum);
    boolean present_skuCount = true;
    builder.append(present_skuCount);
    if (present_skuCount)
      builder.append(skuCount);
    boolean present_currQuantity = true;
    builder.append(present_currQuantity);
    if (present_currQuantity)
      builder.append(currQuantity);
    boolean present_maxBuyLimit = true;
    builder.append(present_maxBuyLimit);
    if (present_maxBuyLimit)
      builder.append(maxBuyLimit);
    boolean present_currBuy = true;
    builder.append(present_currBuy);
    if (present_currBuy)
      builder.append(currBuy);
    boolean present_isOutOfGauge = true;
    builder.append(present_isOutOfGauge);
    if (present_isOutOfGauge)
      builder.append(isOutOfGauge);
    boolean present_isOutOfStock = true;
    builder.append(present_isOutOfStock);
    if (present_isOutOfStock)
      builder.append(isOutOfStock);
    return builder.toHashCode();
  }

  public int compareTo(CheckItemInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CheckItemInfo typedOther = (CheckItemInfo)other;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = TBaseHelper.compareTo(this.productId, typedOther.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkuNum()).compareTo(typedOther.isSetSkuNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkuNum()) {
      lastComparison = TBaseHelper.compareTo(this.skuNum, typedOther.skuNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkuCount()).compareTo(typedOther.isSetSkuCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkuCount()) {
      lastComparison = TBaseHelper.compareTo(this.skuCount, typedOther.skuCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrQuantity()).compareTo(typedOther.isSetCurrQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrQuantity()) {
      lastComparison = TBaseHelper.compareTo(this.currQuantity, typedOther.currQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxBuyLimit()).compareTo(typedOther.isSetMaxBuyLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxBuyLimit()) {
      lastComparison = TBaseHelper.compareTo(this.maxBuyLimit, typedOther.maxBuyLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrBuy()).compareTo(typedOther.isSetCurrBuy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrBuy()) {
      lastComparison = TBaseHelper.compareTo(this.currBuy, typedOther.currBuy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOutOfGauge()).compareTo(typedOther.isSetIsOutOfGauge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOutOfGauge()) {
      lastComparison = TBaseHelper.compareTo(this.isOutOfGauge, typedOther.isOutOfGauge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOutOfStock()).compareTo(typedOther.isSetIsOutOfStock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOutOfStock()) {
      lastComparison = TBaseHelper.compareTo(this.isOutOfStock, typedOther.isOutOfStock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PRODUCT_ID
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SKU_NUM
          if (field.type == TType.STRING) {
            this.skuNum = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SKU_COUNT
          if (field.type == TType.I32) {
            this.skuCount = iprot.readI32();
            setSkuCountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CURR_QUANTITY
          if (field.type == TType.I32) {
            this.currQuantity = iprot.readI32();
            setCurrQuantityIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // MAX_BUY_LIMIT
          if (field.type == TType.I32) {
            this.maxBuyLimit = iprot.readI32();
            setMaxBuyLimitIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // CURR_BUY
          if (field.type == TType.I32) {
            this.currBuy = iprot.readI32();
            setCurrBuyIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // IS_OUT_OF_GAUGE
          if (field.type == TType.BOOL) {
            this.isOutOfGauge = iprot.readBool();
            setIsOutOfGaugeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // IS_OUT_OF_STOCK
          if (field.type == TType.BOOL) {
            this.isOutOfStock = iprot.readBool();
            setIsOutOfStockIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.productId != null) {
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    if (this.skuNum != null) {
      oprot.writeFieldBegin(SKU_NUM_FIELD_DESC);
      oprot.writeString(this.skuNum);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SKU_COUNT_FIELD_DESC);
    oprot.writeI32(this.skuCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CURR_QUANTITY_FIELD_DESC);
    oprot.writeI32(this.currQuantity);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MAX_BUY_LIMIT_FIELD_DESC);
    oprot.writeI32(this.maxBuyLimit);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CURR_BUY_FIELD_DESC);
    oprot.writeI32(this.currBuy);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(IS_OUT_OF_GAUGE_FIELD_DESC);
    oprot.writeBool(this.isOutOfGauge);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(IS_OUT_OF_STOCK_FIELD_DESC);
    oprot.writeBool(this.isOutOfStock);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CheckItemInfo(");
    boolean first = true;
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("skuNum:");
    if (this.skuNum == null) {
      sb.append("null");
    } else {
      sb.append(this.skuNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("skuCount:");
    sb.append(this.skuCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currQuantity:");
    sb.append(this.currQuantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxBuyLimit:");
    sb.append(this.maxBuyLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currBuy:");
    sb.append(this.currBuy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOutOfGauge:");
    sb.append(this.isOutOfGauge);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOutOfStock:");
    sb.append(this.isOutOfStock);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
