/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.cart;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

import com.twitter.util.Future;
import com.twitter.util.Function;
import com.twitter.util.Function2;
import com.twitter.util.Try;
import com.twitter.util.Return;
import com.twitter.util.Throw;
import com.twitter.finagle.thrift.ThriftClientRequest;

public class CartServ {
  public interface Iface {
    public com.jfshare.finagle.thrift.result.StringResult countItem(String userKey, int source) throws TException;
    public CheckCartResult addItem(String userKey, Item item, int source) throws TException;
    public CheckCartResult updateItem(String userKey, List<CartKey> cartKeyList, CartKey cartKey, Item item, int source) throws TException;
    public com.jfshare.finagle.thrift.result.Result deleteItem(String userKey, List<CartKey> cartKeyList, int source) throws TException;
    public com.jfshare.finagle.thrift.result.Result mergeItem(String sessionId, String userId, int source) throws TException;
    public CartResult listItem(String userKey, int source) throws TException;
    public MiniCartResult listMiniItem(String userKey, int source) throws TException;
    public CartResult findListByCartKey(String userKey, List<CartKey> cartKeyList, int source) throws TException;
    public CheckCartResult checkItem(String userKey, List<CartKey> cartKeyList, int source) throws TException;
    public com.jfshare.finagle.thrift.result.StringResult getTimeStamp(String userKey, int source) throws TException;
  }

  public interface AsyncIface {
    public void countItem(String userKey, int source, AsyncMethodCallback<AsyncClient.countItem_call> resultHandler) throws TException;
    public void addItem(String userKey, Item item, int source, AsyncMethodCallback<AsyncClient.addItem_call> resultHandler) throws TException;
    public void updateItem(String userKey, List<CartKey> cartKeyList, CartKey cartKey, Item item, int source, AsyncMethodCallback<AsyncClient.updateItem_call> resultHandler) throws TException;
    public void deleteItem(String userKey, List<CartKey> cartKeyList, int source, AsyncMethodCallback<AsyncClient.deleteItem_call> resultHandler) throws TException;
    public void mergeItem(String sessionId, String userId, int source, AsyncMethodCallback<AsyncClient.mergeItem_call> resultHandler) throws TException;
    public void listItem(String userKey, int source, AsyncMethodCallback<AsyncClient.listItem_call> resultHandler) throws TException;
    public void listMiniItem(String userKey, int source, AsyncMethodCallback<AsyncClient.listMiniItem_call> resultHandler) throws TException;
    public void findListByCartKey(String userKey, List<CartKey> cartKeyList, int source, AsyncMethodCallback<AsyncClient.findListByCartKey_call> resultHandler) throws TException;
    public void checkItem(String userKey, List<CartKey> cartKeyList, int source, AsyncMethodCallback<AsyncClient.checkItem_call> resultHandler) throws TException;
    public void getTimeStamp(String userKey, int source, AsyncMethodCallback<AsyncClient.getTimeStamp_call> resultHandler) throws TException;
  }

  public interface ServiceIface {
    public Future<com.jfshare.finagle.thrift.result.StringResult> countItem(String userKey, int source);
    public Future<CheckCartResult> addItem(String userKey, Item item, int source);
    public Future<CheckCartResult> updateItem(String userKey, List<CartKey> cartKeyList, CartKey cartKey, Item item, int source);
    public Future<com.jfshare.finagle.thrift.result.Result> deleteItem(String userKey, List<CartKey> cartKeyList, int source);
    public Future<com.jfshare.finagle.thrift.result.Result> mergeItem(String sessionId, String userId, int source);
    public Future<CartResult> listItem(String userKey, int source);
    public Future<MiniCartResult> listMiniItem(String userKey, int source);
    public Future<CartResult> findListByCartKey(String userKey, List<CartKey> cartKeyList, int source);
    public Future<CheckCartResult> checkItem(String userKey, List<CartKey> cartKeyList, int source);
    public Future<com.jfshare.finagle.thrift.result.StringResult> getTimeStamp(String userKey, int source);
  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public com.jfshare.finagle.thrift.result.StringResult countItem(String userKey, int source) throws TException
    {
      send_countItem(userKey, source);
      return recv_countItem();
    }

    public void send_countItem(String userKey, int source) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("countItem", TMessageType.CALL, ++seqid_));
      countItem_args args = new countItem_args();
      args.setUserKey(userKey);
      args.setSource(source);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.StringResult recv_countItem() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "countItem failed: out of sequence response");
      }
      countItem_result result = new countItem_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "countItem failed: unknown result");
    }
    public CheckCartResult addItem(String userKey, Item item, int source) throws TException
    {
      send_addItem(userKey, item, source);
      return recv_addItem();
    }

    public void send_addItem(String userKey, Item item, int source) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("addItem", TMessageType.CALL, ++seqid_));
      addItem_args args = new addItem_args();
      args.setUserKey(userKey);
      args.setItem(item);
      args.setSource(source);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public CheckCartResult recv_addItem() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "addItem failed: out of sequence response");
      }
      addItem_result result = new addItem_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "addItem failed: unknown result");
    }
    public CheckCartResult updateItem(String userKey, List<CartKey> cartKeyList, CartKey cartKey, Item item, int source) throws TException
    {
      send_updateItem(userKey, cartKeyList, cartKey, item, source);
      return recv_updateItem();
    }

    public void send_updateItem(String userKey, List<CartKey> cartKeyList, CartKey cartKey, Item item, int source) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateItem", TMessageType.CALL, ++seqid_));
      updateItem_args args = new updateItem_args();
      args.setUserKey(userKey);
      args.setCartKeyList(cartKeyList);
      args.setCartKey(cartKey);
      args.setItem(item);
      args.setSource(source);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public CheckCartResult recv_updateItem() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateItem failed: out of sequence response");
      }
      updateItem_result result = new updateItem_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateItem failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.Result deleteItem(String userKey, List<CartKey> cartKeyList, int source) throws TException
    {
      send_deleteItem(userKey, cartKeyList, source);
      return recv_deleteItem();
    }

    public void send_deleteItem(String userKey, List<CartKey> cartKeyList, int source) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("deleteItem", TMessageType.CALL, ++seqid_));
      deleteItem_args args = new deleteItem_args();
      args.setUserKey(userKey);
      args.setCartKeyList(cartKeyList);
      args.setSource(source);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_deleteItem() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "deleteItem failed: out of sequence response");
      }
      deleteItem_result result = new deleteItem_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "deleteItem failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.Result mergeItem(String sessionId, String userId, int source) throws TException
    {
      send_mergeItem(sessionId, userId, source);
      return recv_mergeItem();
    }

    public void send_mergeItem(String sessionId, String userId, int source) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("mergeItem", TMessageType.CALL, ++seqid_));
      mergeItem_args args = new mergeItem_args();
      args.setSessionId(sessionId);
      args.setUserId(userId);
      args.setSource(source);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_mergeItem() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "mergeItem failed: out of sequence response");
      }
      mergeItem_result result = new mergeItem_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "mergeItem failed: unknown result");
    }
    public CartResult listItem(String userKey, int source) throws TException
    {
      send_listItem(userKey, source);
      return recv_listItem();
    }

    public void send_listItem(String userKey, int source) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listItem", TMessageType.CALL, ++seqid_));
      listItem_args args = new listItem_args();
      args.setUserKey(userKey);
      args.setSource(source);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public CartResult recv_listItem() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listItem failed: out of sequence response");
      }
      listItem_result result = new listItem_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listItem failed: unknown result");
    }
    public MiniCartResult listMiniItem(String userKey, int source) throws TException
    {
      send_listMiniItem(userKey, source);
      return recv_listMiniItem();
    }

    public void send_listMiniItem(String userKey, int source) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listMiniItem", TMessageType.CALL, ++seqid_));
      listMiniItem_args args = new listMiniItem_args();
      args.setUserKey(userKey);
      args.setSource(source);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public MiniCartResult recv_listMiniItem() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listMiniItem failed: out of sequence response");
      }
      listMiniItem_result result = new listMiniItem_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listMiniItem failed: unknown result");
    }
    public CartResult findListByCartKey(String userKey, List<CartKey> cartKeyList, int source) throws TException
    {
      send_findListByCartKey(userKey, cartKeyList, source);
      return recv_findListByCartKey();
    }

    public void send_findListByCartKey(String userKey, List<CartKey> cartKeyList, int source) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findListByCartKey", TMessageType.CALL, ++seqid_));
      findListByCartKey_args args = new findListByCartKey_args();
      args.setUserKey(userKey);
      args.setCartKeyList(cartKeyList);
      args.setSource(source);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public CartResult recv_findListByCartKey() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findListByCartKey failed: out of sequence response");
      }
      findListByCartKey_result result = new findListByCartKey_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findListByCartKey failed: unknown result");
    }
    public CheckCartResult checkItem(String userKey, List<CartKey> cartKeyList, int source) throws TException
    {
      send_checkItem(userKey, cartKeyList, source);
      return recv_checkItem();
    }

    public void send_checkItem(String userKey, List<CartKey> cartKeyList, int source) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("checkItem", TMessageType.CALL, ++seqid_));
      checkItem_args args = new checkItem_args();
      args.setUserKey(userKey);
      args.setCartKeyList(cartKeyList);
      args.setSource(source);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public CheckCartResult recv_checkItem() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "checkItem failed: out of sequence response");
      }
      checkItem_result result = new checkItem_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "checkItem failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.StringResult getTimeStamp(String userKey, int source) throws TException
    {
      send_getTimeStamp(userKey, source);
      return recv_getTimeStamp();
    }

    public void send_getTimeStamp(String userKey, int source) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getTimeStamp", TMessageType.CALL, ++seqid_));
      getTimeStamp_args args = new getTimeStamp_args();
      args.setUserKey(userKey);
      args.setSource(source);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.StringResult recv_getTimeStamp() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getTimeStamp failed: out of sequence response");
      }
      getTimeStamp_result result = new getTimeStamp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getTimeStamp failed: unknown result");
    }
  }

  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void countItem(String userKey, int source, AsyncMethodCallback<countItem_call> resultHandler) throws TException {
      checkReady();
      countItem_call method_call = new countItem_call(userKey, source, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class countItem_call extends TAsyncMethodCall {
      private String userKey;
      private int source;

      public countItem_call(String userKey, int source, AsyncMethodCallback<countItem_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userKey = userKey;
        this.source = source;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("countItem", TMessageType.CALL, 0));
        countItem_args args = new countItem_args();
        args.setUserKey(userKey);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.StringResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countItem();
      }
     }
    public void addItem(String userKey, Item item, int source, AsyncMethodCallback<addItem_call> resultHandler) throws TException {
      checkReady();
      addItem_call method_call = new addItem_call(userKey, item, source, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class addItem_call extends TAsyncMethodCall {
      private String userKey;
      private Item item;
      private int source;

      public addItem_call(String userKey, Item item, int source, AsyncMethodCallback<addItem_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userKey = userKey;
        this.item = item;
        this.source = source;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("addItem", TMessageType.CALL, 0));
        addItem_args args = new addItem_args();
        args.setUserKey(userKey);
        args.setItem(item);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CheckCartResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addItem();
      }
     }
    public void updateItem(String userKey, List<CartKey> cartKeyList, CartKey cartKey, Item item, int source, AsyncMethodCallback<updateItem_call> resultHandler) throws TException {
      checkReady();
      updateItem_call method_call = new updateItem_call(userKey, cartKeyList, cartKey, item, source, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class updateItem_call extends TAsyncMethodCall {
      private String userKey;
      private List<CartKey> cartKeyList;
      private CartKey cartKey;
      private Item item;
      private int source;

      public updateItem_call(String userKey, List<CartKey> cartKeyList, CartKey cartKey, Item item, int source, AsyncMethodCallback<updateItem_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userKey = userKey;
        this.cartKeyList = cartKeyList;
        this.cartKey = cartKey;
        this.item = item;
        this.source = source;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("updateItem", TMessageType.CALL, 0));
        updateItem_args args = new updateItem_args();
        args.setUserKey(userKey);
        args.setCartKeyList(cartKeyList);
        args.setCartKey(cartKey);
        args.setItem(item);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CheckCartResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateItem();
      }
     }
    public void deleteItem(String userKey, List<CartKey> cartKeyList, int source, AsyncMethodCallback<deleteItem_call> resultHandler) throws TException {
      checkReady();
      deleteItem_call method_call = new deleteItem_call(userKey, cartKeyList, source, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class deleteItem_call extends TAsyncMethodCall {
      private String userKey;
      private List<CartKey> cartKeyList;
      private int source;

      public deleteItem_call(String userKey, List<CartKey> cartKeyList, int source, AsyncMethodCallback<deleteItem_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userKey = userKey;
        this.cartKeyList = cartKeyList;
        this.source = source;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("deleteItem", TMessageType.CALL, 0));
        deleteItem_args args = new deleteItem_args();
        args.setUserKey(userKey);
        args.setCartKeyList(cartKeyList);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteItem();
      }
     }
    public void mergeItem(String sessionId, String userId, int source, AsyncMethodCallback<mergeItem_call> resultHandler) throws TException {
      checkReady();
      mergeItem_call method_call = new mergeItem_call(sessionId, userId, source, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class mergeItem_call extends TAsyncMethodCall {
      private String sessionId;
      private String userId;
      private int source;

      public mergeItem_call(String sessionId, String userId, int source, AsyncMethodCallback<mergeItem_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.userId = userId;
        this.source = source;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("mergeItem", TMessageType.CALL, 0));
        mergeItem_args args = new mergeItem_args();
        args.setSessionId(sessionId);
        args.setUserId(userId);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mergeItem();
      }
     }
    public void listItem(String userKey, int source, AsyncMethodCallback<listItem_call> resultHandler) throws TException {
      checkReady();
      listItem_call method_call = new listItem_call(userKey, source, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class listItem_call extends TAsyncMethodCall {
      private String userKey;
      private int source;

      public listItem_call(String userKey, int source, AsyncMethodCallback<listItem_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userKey = userKey;
        this.source = source;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("listItem", TMessageType.CALL, 0));
        listItem_args args = new listItem_args();
        args.setUserKey(userKey);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CartResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listItem();
      }
     }
    public void listMiniItem(String userKey, int source, AsyncMethodCallback<listMiniItem_call> resultHandler) throws TException {
      checkReady();
      listMiniItem_call method_call = new listMiniItem_call(userKey, source, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class listMiniItem_call extends TAsyncMethodCall {
      private String userKey;
      private int source;

      public listMiniItem_call(String userKey, int source, AsyncMethodCallback<listMiniItem_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userKey = userKey;
        this.source = source;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("listMiniItem", TMessageType.CALL, 0));
        listMiniItem_args args = new listMiniItem_args();
        args.setUserKey(userKey);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MiniCartResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listMiniItem();
      }
     }
    public void findListByCartKey(String userKey, List<CartKey> cartKeyList, int source, AsyncMethodCallback<findListByCartKey_call> resultHandler) throws TException {
      checkReady();
      findListByCartKey_call method_call = new findListByCartKey_call(userKey, cartKeyList, source, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class findListByCartKey_call extends TAsyncMethodCall {
      private String userKey;
      private List<CartKey> cartKeyList;
      private int source;

      public findListByCartKey_call(String userKey, List<CartKey> cartKeyList, int source, AsyncMethodCallback<findListByCartKey_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userKey = userKey;
        this.cartKeyList = cartKeyList;
        this.source = source;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("findListByCartKey", TMessageType.CALL, 0));
        findListByCartKey_args args = new findListByCartKey_args();
        args.setUserKey(userKey);
        args.setCartKeyList(cartKeyList);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CartResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findListByCartKey();
      }
     }
    public void checkItem(String userKey, List<CartKey> cartKeyList, int source, AsyncMethodCallback<checkItem_call> resultHandler) throws TException {
      checkReady();
      checkItem_call method_call = new checkItem_call(userKey, cartKeyList, source, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class checkItem_call extends TAsyncMethodCall {
      private String userKey;
      private List<CartKey> cartKeyList;
      private int source;

      public checkItem_call(String userKey, List<CartKey> cartKeyList, int source, AsyncMethodCallback<checkItem_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userKey = userKey;
        this.cartKeyList = cartKeyList;
        this.source = source;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("checkItem", TMessageType.CALL, 0));
        checkItem_args args = new checkItem_args();
        args.setUserKey(userKey);
        args.setCartKeyList(cartKeyList);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CheckCartResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkItem();
      }
     }
    public void getTimeStamp(String userKey, int source, AsyncMethodCallback<getTimeStamp_call> resultHandler) throws TException {
      checkReady();
      getTimeStamp_call method_call = new getTimeStamp_call(userKey, source, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getTimeStamp_call extends TAsyncMethodCall {
      private String userKey;
      private int source;

      public getTimeStamp_call(String userKey, int source, AsyncMethodCallback<getTimeStamp_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userKey = userKey;
        this.source = source;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getTimeStamp", TMessageType.CALL, 0));
        getTimeStamp_args args = new getTimeStamp_args();
        args.setUserKey(userKey);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.StringResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTimeStamp();
      }
     }
   }


  public static class ServiceToClient implements ServiceIface {
    private com.twitter.finagle.Service<ThriftClientRequest, byte[]> service;
    private TProtocolFactory protocolFactory;
    public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service, TProtocolFactory protocolFactory) {
      
      this.service = service;
      this.protocolFactory = protocolFactory;
    }

    public Future<com.jfshare.finagle.thrift.result.StringResult> countItem(String userKey, int source) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("countItem", TMessageType.CALL, 0));
        countItem_args __args__ = new countItem_args();
        __args__.setUserKey(userKey);
        __args__.setSource(source);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.StringResult>>() {
          public Future<com.jfshare.finagle.thrift.result.StringResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_countItem());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<CheckCartResult> addItem(String userKey, Item item, int source) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("addItem", TMessageType.CALL, 0));
        addItem_args __args__ = new addItem_args();
        __args__.setUserKey(userKey);
        __args__.setItem(item);
        __args__.setSource(source);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<CheckCartResult>>() {
          public Future<CheckCartResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_addItem());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<CheckCartResult> updateItem(String userKey, List<CartKey> cartKeyList, CartKey cartKey, Item item, int source) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("updateItem", TMessageType.CALL, 0));
        updateItem_args __args__ = new updateItem_args();
        __args__.setUserKey(userKey);
        __args__.setCartKeyList(cartKeyList);
        __args__.setCartKey(cartKey);
        __args__.setItem(item);
        __args__.setSource(source);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<CheckCartResult>>() {
          public Future<CheckCartResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_updateItem());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.Result> deleteItem(String userKey, List<CartKey> cartKeyList, int source) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("deleteItem", TMessageType.CALL, 0));
        deleteItem_args __args__ = new deleteItem_args();
        __args__.setUserKey(userKey);
        __args__.setCartKeyList(cartKeyList);
        __args__.setSource(source);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_deleteItem());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.Result> mergeItem(String sessionId, String userId, int source) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("mergeItem", TMessageType.CALL, 0));
        mergeItem_args __args__ = new mergeItem_args();
        __args__.setSessionId(sessionId);
        __args__.setUserId(userId);
        __args__.setSource(source);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_mergeItem());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<CartResult> listItem(String userKey, int source) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("listItem", TMessageType.CALL, 0));
        listItem_args __args__ = new listItem_args();
        __args__.setUserKey(userKey);
        __args__.setSource(source);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<CartResult>>() {
          public Future<CartResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_listItem());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<MiniCartResult> listMiniItem(String userKey, int source) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("listMiniItem", TMessageType.CALL, 0));
        listMiniItem_args __args__ = new listMiniItem_args();
        __args__.setUserKey(userKey);
        __args__.setSource(source);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<MiniCartResult>>() {
          public Future<MiniCartResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_listMiniItem());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<CartResult> findListByCartKey(String userKey, List<CartKey> cartKeyList, int source) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("findListByCartKey", TMessageType.CALL, 0));
        findListByCartKey_args __args__ = new findListByCartKey_args();
        __args__.setUserKey(userKey);
        __args__.setCartKeyList(cartKeyList);
        __args__.setSource(source);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<CartResult>>() {
          public Future<CartResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_findListByCartKey());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<CheckCartResult> checkItem(String userKey, List<CartKey> cartKeyList, int source) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("checkItem", TMessageType.CALL, 0));
        checkItem_args __args__ = new checkItem_args();
        __args__.setUserKey(userKey);
        __args__.setCartKeyList(cartKeyList);
        __args__.setSource(source);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<CheckCartResult>>() {
          public Future<CheckCartResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_checkItem());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.StringResult> getTimeStamp(String userKey, int source) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("getTimeStamp", TMessageType.CALL, 0));
        getTimeStamp_args __args__ = new getTimeStamp_args();
        __args__.setUserKey(userKey);
        __args__.setSource(source);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.StringResult>>() {
          public Future<com.jfshare.finagle.thrift.result.StringResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_getTimeStamp());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("countItem", new countItem());
      processMap_.put("addItem", new addItem());
      processMap_.put("updateItem", new updateItem());
      processMap_.put("deleteItem", new deleteItem());
      processMap_.put("mergeItem", new mergeItem());
      processMap_.put("listItem", new listItem());
      processMap_.put("listMiniItem", new listMiniItem());
      processMap_.put("findListByCartKey", new findListByCartKey());
      processMap_.put("checkItem", new checkItem());
      processMap_.put("getTimeStamp", new getTimeStamp());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class countItem implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        countItem_args args = new countItem_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("countItem", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        countItem_result result = new countItem_result();
        result.success = iface_.countItem(args.userKey, args.source);
        
        oprot.writeMessageBegin(new TMessage("countItem", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class addItem implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        addItem_args args = new addItem_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("addItem", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addItem_result result = new addItem_result();
        result.success = iface_.addItem(args.userKey, args.item, args.source);
        
        oprot.writeMessageBegin(new TMessage("addItem", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class updateItem implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateItem_args args = new updateItem_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateItem", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateItem_result result = new updateItem_result();
        result.success = iface_.updateItem(args.userKey, args.cartKeyList, args.cartKey, args.item, args.source);
        
        oprot.writeMessageBegin(new TMessage("updateItem", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class deleteItem implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        deleteItem_args args = new deleteItem_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("deleteItem", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        deleteItem_result result = new deleteItem_result();
        result.success = iface_.deleteItem(args.userKey, args.cartKeyList, args.source);
        
        oprot.writeMessageBegin(new TMessage("deleteItem", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class mergeItem implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        mergeItem_args args = new mergeItem_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("mergeItem", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        mergeItem_result result = new mergeItem_result();
        result.success = iface_.mergeItem(args.sessionId, args.userId, args.source);
        
        oprot.writeMessageBegin(new TMessage("mergeItem", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class listItem implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listItem_args args = new listItem_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listItem", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listItem_result result = new listItem_result();
        result.success = iface_.listItem(args.userKey, args.source);
        
        oprot.writeMessageBegin(new TMessage("listItem", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class listMiniItem implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listMiniItem_args args = new listMiniItem_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listMiniItem", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listMiniItem_result result = new listMiniItem_result();
        result.success = iface_.listMiniItem(args.userKey, args.source);
        
        oprot.writeMessageBegin(new TMessage("listMiniItem", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class findListByCartKey implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findListByCartKey_args args = new findListByCartKey_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findListByCartKey", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findListByCartKey_result result = new findListByCartKey_result();
        result.success = iface_.findListByCartKey(args.userKey, args.cartKeyList, args.source);
        
        oprot.writeMessageBegin(new TMessage("findListByCartKey", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class checkItem implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        checkItem_args args = new checkItem_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("checkItem", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        checkItem_result result = new checkItem_result();
        result.success = iface_.checkItem(args.userKey, args.cartKeyList, args.source);
        
        oprot.writeMessageBegin(new TMessage("checkItem", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class getTimeStamp implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getTimeStamp_args args = new getTimeStamp_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getTimeStamp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getTimeStamp_result result = new getTimeStamp_result();
        result.success = iface_.getTimeStamp(args.userKey, args.source);
        
        oprot.writeMessageBegin(new TMessage("getTimeStamp", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
  }

  public static class Service extends com.twitter.finagle.Service<byte[], byte[]> {
    private final ServiceIface iface;
    private final TProtocolFactory protocolFactory;
    protected HashMap<String, Function2<TProtocol, Integer, Future<byte[]>>> functionMap = new HashMap<String, Function2<TProtocol, Integer, Future<byte[]>>>();
    public Service(final ServiceIface iface, final TProtocolFactory protocolFactory) {
      this.iface = iface;
      this.protocolFactory = protocolFactory;
      functionMap.put("countItem", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          countItem_args args = new countItem_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("countItem", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.StringResult> future;
          try {
            future = iface.countItem(args.userKey, args.source);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.StringResult, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.StringResult value) {
                countItem_result result = new countItem_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("countItem", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("addItem", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          addItem_args args = new addItem_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("addItem", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<CheckCartResult> future;
          try {
            future = iface.addItem(args.userKey, args.item, args.source);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<CheckCartResult, Future<byte[]>>() {
              public Future<byte[]> apply(CheckCartResult value) {
                addItem_result result = new addItem_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("addItem", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("updateItem", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          updateItem_args args = new updateItem_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("updateItem", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<CheckCartResult> future;
          try {
            future = iface.updateItem(args.userKey, args.cartKeyList, args.cartKey, args.item, args.source);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<CheckCartResult, Future<byte[]>>() {
              public Future<byte[]> apply(CheckCartResult value) {
                updateItem_result result = new updateItem_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("updateItem", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("deleteItem", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          deleteItem_args args = new deleteItem_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("deleteItem", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.deleteItem(args.userKey, args.cartKeyList, args.source);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                deleteItem_result result = new deleteItem_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("deleteItem", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("mergeItem", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          mergeItem_args args = new mergeItem_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("mergeItem", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.mergeItem(args.sessionId, args.userId, args.source);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                mergeItem_result result = new mergeItem_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("mergeItem", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("listItem", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          listItem_args args = new listItem_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("listItem", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<CartResult> future;
          try {
            future = iface.listItem(args.userKey, args.source);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<CartResult, Future<byte[]>>() {
              public Future<byte[]> apply(CartResult value) {
                listItem_result result = new listItem_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("listItem", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("listMiniItem", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          listMiniItem_args args = new listMiniItem_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("listMiniItem", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<MiniCartResult> future;
          try {
            future = iface.listMiniItem(args.userKey, args.source);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<MiniCartResult, Future<byte[]>>() {
              public Future<byte[]> apply(MiniCartResult value) {
                listMiniItem_result result = new listMiniItem_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("listMiniItem", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("findListByCartKey", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          findListByCartKey_args args = new findListByCartKey_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("findListByCartKey", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<CartResult> future;
          try {
            future = iface.findListByCartKey(args.userKey, args.cartKeyList, args.source);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<CartResult, Future<byte[]>>() {
              public Future<byte[]> apply(CartResult value) {
                findListByCartKey_result result = new findListByCartKey_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("findListByCartKey", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("checkItem", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          checkItem_args args = new checkItem_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("checkItem", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<CheckCartResult> future;
          try {
            future = iface.checkItem(args.userKey, args.cartKeyList, args.source);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<CheckCartResult, Future<byte[]>>() {
              public Future<byte[]> apply(CheckCartResult value) {
                checkItem_result result = new checkItem_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("checkItem", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("getTimeStamp", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          getTimeStamp_args args = new getTimeStamp_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("getTimeStamp", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.StringResult> future;
          try {
            future = iface.getTimeStamp(args.userKey, args.source);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.StringResult, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.StringResult value) {
                getTimeStamp_result result = new getTimeStamp_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("getTimeStamp", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
    }

    public Future<byte[]> apply(byte[] request) {
      TTransport inputTransport = new TMemoryInputTransport(request);
      TProtocol iprot = protocolFactory.getProtocol(inputTransport);

      TMessage msg;
      try {
        msg = iprot.readMessageBegin();
      } catch (Exception e) {
        return Future.exception(e);
      }

      Function2<TProtocol, Integer, Future<byte[]>> fn = functionMap.get(msg.name);
      if (fn == null) {
        try {
          TProtocolUtil.skip(iprot, TType.STRUCT);
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
          TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
          TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
          oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
        } catch (Exception e) {
          return Future.exception(e);
        }
      }

      return fn.apply(iprot, msg.seqid);
    }
  }

  public static class countItem_args implements TBase<countItem_args, countItem_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("countItem_args");

  private static final TField USER_KEY_FIELD_DESC = new TField("userKey", TType.STRING, (short)1);
  private static final TField SOURCE_FIELD_DESC = new TField("source", TType.I32, (short)2);


  public String userKey;
  public int source;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_KEY((short)1, "userKey"),
    SOURCE((short)2, "source");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_KEY
  	return USER_KEY;
        case 2: // SOURCE
  	return SOURCE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SOURCE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_KEY, new FieldMetaData("userKey", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new FieldMetaData("source", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(countItem_args.class, metaDataMap);
  }


  public countItem_args() {
  }

  public countItem_args(
    String userKey,
    int source)
  {
    this();
    this.userKey = userKey;
    this.source = source;
    setSourceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public countItem_args(countItem_args other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUserKey()) {
      this.userKey = other.userKey;
    }
    this.source = other.source;
  }

  public countItem_args deepCopy() {
    return new countItem_args(this);
  }

  @Override
  public void clear() {
    this.userKey = null;
    setSourceIsSet(false);
    this.source = 0;
  }

  public String getUserKey() {
    return this.userKey;
  }

  public countItem_args setUserKey(String userKey) {
    this.userKey = userKey;
    
    return this;
  }

  public void unsetUserKey() {
    this.userKey = null;
  }

  /** Returns true if field userKey is set (has been asigned a value) and false otherwise */
  public boolean isSetUserKey() {
    return this.userKey != null;
  }

  public void setUserKeyIsSet(boolean value) {
    if (!value) {
      this.userKey = null;
    }
  }

  public int getSource() {
    return this.source;
  }

  public countItem_args setSource(int source) {
    this.source = source;
    setSourceIsSet(true);

    return this;
  }

  public void unsetSource() {
  __isset_bit_vector.clear(__SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been asigned a value) and false otherwise */
  public boolean isSetSource() {
    return __isset_bit_vector.get(__SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_KEY:
      if (value == null) {
        unsetUserKey();
      } else {
        setUserKey((String)value);
      }
      break;
    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_KEY:
      return getUserKey();
    case SOURCE:
      return new Integer(getSource());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_KEY:
      return isSetUserKey();
    case SOURCE:
      return isSetSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof countItem_args)
      return this.equals((countItem_args)that);
    return false;
  }

  public boolean equals(countItem_args that) {
    if (that == null)
      return false;
    boolean this_present_userKey = true && this.isSetUserKey();
    boolean that_present_userKey = true && that.isSetUserKey();
    if (this_present_userKey || that_present_userKey) {
      if (!(this_present_userKey && that_present_userKey))
        return false;
      if (!this.userKey.equals(that.userKey))
        return false;
    }
    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_userKey = true && (isSetUserKey());
    builder.append(present_userKey);
    if (present_userKey)
      builder.append(userKey);
    boolean present_source = true;
    builder.append(present_source);
    if (present_source)
      builder.append(source);
    return builder.toHashCode();
  }

  public int compareTo(countItem_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    countItem_args typedOther = (countItem_args)other;

    lastComparison = Boolean.valueOf(isSetUserKey()).compareTo(typedOther.isSetUserKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserKey()) {
      lastComparison = TBaseHelper.compareTo(this.userKey, typedOther.userKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // USER_KEY
          if (field.type == TType.STRING) {
            this.userKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SOURCE
          if (field.type == TType.I32) {
            this.source = iprot.readI32();
            setSourceIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.userKey != null) {
      oprot.writeFieldBegin(USER_KEY_FIELD_DESC);
      oprot.writeString(this.userKey);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
    oprot.writeI32(this.source);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("countItem_args(");
    boolean first = true;
    sb.append("userKey:");
    if (this.userKey == null) {
      sb.append("null");
    } else {
      sb.append(this.userKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class countItem_result implements TBase<countItem_result, countItem_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("countItem_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.StringResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.StringResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(countItem_result.class, metaDataMap);
  }


  public countItem_result() {
  }

  public countItem_result(
    com.jfshare.finagle.thrift.result.StringResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public countItem_result(countItem_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.StringResult(other.success);
    }
  }

  public countItem_result deepCopy() {
    return new countItem_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.StringResult getSuccess() {
    return this.success;
  }

  public countItem_result setSuccess(com.jfshare.finagle.thrift.result.StringResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.StringResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof countItem_result)
      return this.equals((countItem_result)that);
    return false;
  }

  public boolean equals(countItem_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(countItem_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    countItem_result typedOther = (countItem_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.StringResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("countItem_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class addItem_args implements TBase<addItem_args, addItem_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("addItem_args");

  private static final TField USER_KEY_FIELD_DESC = new TField("userKey", TType.STRING, (short)1);
  private static final TField ITEM_FIELD_DESC = new TField("item", TType.STRUCT, (short)2);
  private static final TField SOURCE_FIELD_DESC = new TField("source", TType.I32, (short)3);


  public String userKey;
  public Item item;
  public int source;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_KEY((short)1, "userKey"),
    ITEM((short)2, "item"),
    SOURCE((short)3, "source");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_KEY
  	return USER_KEY;
        case 2: // ITEM
  	return ITEM;
        case 3: // SOURCE
  	return SOURCE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SOURCE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_KEY, new FieldMetaData("userKey", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ITEM, new FieldMetaData("item", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, Item.class)));
    tmpMap.put(_Fields.SOURCE, new FieldMetaData("source", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(addItem_args.class, metaDataMap);
  }


  public addItem_args() {
  }

  public addItem_args(
    String userKey,
    Item item,
    int source)
  {
    this();
    this.userKey = userKey;
    this.item = item;
    this.source = source;
    setSourceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public addItem_args(addItem_args other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUserKey()) {
      this.userKey = other.userKey;
    }
    if (other.isSetItem()) {
      this.item = new Item(other.item);
    }
    this.source = other.source;
  }

  public addItem_args deepCopy() {
    return new addItem_args(this);
  }

  @Override
  public void clear() {
    this.userKey = null;
    this.item = null;
    setSourceIsSet(false);
    this.source = 0;
  }

  public String getUserKey() {
    return this.userKey;
  }

  public addItem_args setUserKey(String userKey) {
    this.userKey = userKey;
    
    return this;
  }

  public void unsetUserKey() {
    this.userKey = null;
  }

  /** Returns true if field userKey is set (has been asigned a value) and false otherwise */
  public boolean isSetUserKey() {
    return this.userKey != null;
  }

  public void setUserKeyIsSet(boolean value) {
    if (!value) {
      this.userKey = null;
    }
  }

  public Item getItem() {
    return this.item;
  }

  public addItem_args setItem(Item item) {
    this.item = item;
    
    return this;
  }

  public void unsetItem() {
    this.item = null;
  }

  /** Returns true if field item is set (has been asigned a value) and false otherwise */
  public boolean isSetItem() {
    return this.item != null;
  }

  public void setItemIsSet(boolean value) {
    if (!value) {
      this.item = null;
    }
  }

  public int getSource() {
    return this.source;
  }

  public addItem_args setSource(int source) {
    this.source = source;
    setSourceIsSet(true);

    return this;
  }

  public void unsetSource() {
  __isset_bit_vector.clear(__SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been asigned a value) and false otherwise */
  public boolean isSetSource() {
    return __isset_bit_vector.get(__SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_KEY:
      if (value == null) {
        unsetUserKey();
      } else {
        setUserKey((String)value);
      }
      break;
    case ITEM:
      if (value == null) {
        unsetItem();
      } else {
        setItem((Item)value);
      }
      break;
    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_KEY:
      return getUserKey();
    case ITEM:
      return getItem();
    case SOURCE:
      return new Integer(getSource());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_KEY:
      return isSetUserKey();
    case ITEM:
      return isSetItem();
    case SOURCE:
      return isSetSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof addItem_args)
      return this.equals((addItem_args)that);
    return false;
  }

  public boolean equals(addItem_args that) {
    if (that == null)
      return false;
    boolean this_present_userKey = true && this.isSetUserKey();
    boolean that_present_userKey = true && that.isSetUserKey();
    if (this_present_userKey || that_present_userKey) {
      if (!(this_present_userKey && that_present_userKey))
        return false;
      if (!this.userKey.equals(that.userKey))
        return false;
    }
    boolean this_present_item = true && this.isSetItem();
    boolean that_present_item = true && that.isSetItem();
    if (this_present_item || that_present_item) {
      if (!(this_present_item && that_present_item))
        return false;
      if (!this.item.equals(that.item))
        return false;
    }
    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_userKey = true && (isSetUserKey());
    builder.append(present_userKey);
    if (present_userKey)
      builder.append(userKey);
    boolean present_item = true && (isSetItem());
    builder.append(present_item);
    if (present_item)
      builder.append(item);
    boolean present_source = true;
    builder.append(present_source);
    if (present_source)
      builder.append(source);
    return builder.toHashCode();
  }

  public int compareTo(addItem_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    addItem_args typedOther = (addItem_args)other;

    lastComparison = Boolean.valueOf(isSetUserKey()).compareTo(typedOther.isSetUserKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserKey()) {
      lastComparison = TBaseHelper.compareTo(this.userKey, typedOther.userKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItem()).compareTo(typedOther.isSetItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItem()) {
      lastComparison = TBaseHelper.compareTo(this.item, typedOther.item);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // USER_KEY
          if (field.type == TType.STRING) {
            this.userKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ITEM
          if (field.type == TType.STRUCT) {
            this.item = new Item();
            this.item.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SOURCE
          if (field.type == TType.I32) {
            this.source = iprot.readI32();
            setSourceIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.userKey != null) {
      oprot.writeFieldBegin(USER_KEY_FIELD_DESC);
      oprot.writeString(this.userKey);
      oprot.writeFieldEnd();
    }
    if (this.item != null) {
      oprot.writeFieldBegin(ITEM_FIELD_DESC);
      this.item.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
    oprot.writeI32(this.source);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("addItem_args(");
    boolean first = true;
    sb.append("userKey:");
    if (this.userKey == null) {
      sb.append("null");
    } else {
      sb.append(this.userKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("item:");
    if (this.item == null) {
      sb.append("null");
    } else {
      sb.append(this.item);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class addItem_result implements TBase<addItem_result, addItem_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("addItem_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public CheckCartResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, CheckCartResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(addItem_result.class, metaDataMap);
  }


  public addItem_result() {
  }

  public addItem_result(
    CheckCartResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public addItem_result(addItem_result other) {
    if (other.isSetSuccess()) {
      this.success = new CheckCartResult(other.success);
    }
  }

  public addItem_result deepCopy() {
    return new addItem_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public CheckCartResult getSuccess() {
    return this.success;
  }

  public addItem_result setSuccess(CheckCartResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((CheckCartResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof addItem_result)
      return this.equals((addItem_result)that);
    return false;
  }

  public boolean equals(addItem_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(addItem_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    addItem_result typedOther = (addItem_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new CheckCartResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("addItem_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class updateItem_args implements TBase<updateItem_args, updateItem_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("updateItem_args");

  private static final TField USER_KEY_FIELD_DESC = new TField("userKey", TType.STRING, (short)1);
  private static final TField CART_KEY_LIST_FIELD_DESC = new TField("cartKeyList", TType.LIST, (short)2);
  private static final TField CART_KEY_FIELD_DESC = new TField("cartKey", TType.STRUCT, (short)3);
  private static final TField ITEM_FIELD_DESC = new TField("item", TType.STRUCT, (short)4);
  private static final TField SOURCE_FIELD_DESC = new TField("source", TType.I32, (short)5);


  public String userKey;
  public List<CartKey> cartKeyList;
  public CartKey cartKey;
  public Item item;
  public int source;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_KEY((short)1, "userKey"),
    CART_KEY_LIST((short)2, "cartKeyList"),
    CART_KEY((short)3, "cartKey"),
    ITEM((short)4, "item"),
    SOURCE((short)5, "source");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_KEY
  	return USER_KEY;
        case 2: // CART_KEY_LIST
  	return CART_KEY_LIST;
        case 3: // CART_KEY
  	return CART_KEY;
        case 4: // ITEM
  	return ITEM;
        case 5: // SOURCE
  	return SOURCE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SOURCE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_KEY, new FieldMetaData("userKey", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CART_KEY_LIST, new FieldMetaData("cartKeyList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, CartKey.class))));
    tmpMap.put(_Fields.CART_KEY, new FieldMetaData("cartKey", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, CartKey.class)));
    tmpMap.put(_Fields.ITEM, new FieldMetaData("item", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, Item.class)));
    tmpMap.put(_Fields.SOURCE, new FieldMetaData("source", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(updateItem_args.class, metaDataMap);
  }


  public updateItem_args() {
  }

  public updateItem_args(
    String userKey,
    List<CartKey> cartKeyList,
    CartKey cartKey,
    Item item,
    int source)
  {
    this();
    this.userKey = userKey;
    this.cartKeyList = cartKeyList;
    this.cartKey = cartKey;
    this.item = item;
    this.source = source;
    setSourceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public updateItem_args(updateItem_args other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUserKey()) {
      this.userKey = other.userKey;
    }
    if (other.isSetCartKeyList()) {
      List<CartKey> __this__cartKeyList = new ArrayList<CartKey>();
      for (CartKey other_element : other.cartKeyList) {
        __this__cartKeyList.add(new CartKey(other_element));
      }
      this.cartKeyList = __this__cartKeyList;
    }
    if (other.isSetCartKey()) {
      this.cartKey = new CartKey(other.cartKey);
    }
    if (other.isSetItem()) {
      this.item = new Item(other.item);
    }
    this.source = other.source;
  }

  public updateItem_args deepCopy() {
    return new updateItem_args(this);
  }

  @Override
  public void clear() {
    this.userKey = null;
    this.cartKeyList = null;
    this.cartKey = null;
    this.item = null;
    setSourceIsSet(false);
    this.source = 0;
  }

  public String getUserKey() {
    return this.userKey;
  }

  public updateItem_args setUserKey(String userKey) {
    this.userKey = userKey;
    
    return this;
  }

  public void unsetUserKey() {
    this.userKey = null;
  }

  /** Returns true if field userKey is set (has been asigned a value) and false otherwise */
  public boolean isSetUserKey() {
    return this.userKey != null;
  }

  public void setUserKeyIsSet(boolean value) {
    if (!value) {
      this.userKey = null;
    }
  }

  public int getCartKeyListSize() {
    return (this.cartKeyList == null) ? 0 : this.cartKeyList.size();
  }

  public java.util.Iterator<CartKey> getCartKeyListIterator() {
    return (this.cartKeyList == null) ? null : this.cartKeyList.iterator();
  }

  public void addToCartKeyList(CartKey elem) {
    if (this.cartKeyList == null) {
      this.cartKeyList = new ArrayList<CartKey>();
    }
    this.cartKeyList.add(elem);
  }

  public List<CartKey> getCartKeyList() {
    return this.cartKeyList;
  }

  public updateItem_args setCartKeyList(List<CartKey> cartKeyList) {
    this.cartKeyList = cartKeyList;
    
    return this;
  }

  public void unsetCartKeyList() {
    this.cartKeyList = null;
  }

  /** Returns true if field cartKeyList is set (has been asigned a value) and false otherwise */
  public boolean isSetCartKeyList() {
    return this.cartKeyList != null;
  }

  public void setCartKeyListIsSet(boolean value) {
    if (!value) {
      this.cartKeyList = null;
    }
  }

  public CartKey getCartKey() {
    return this.cartKey;
  }

  public updateItem_args setCartKey(CartKey cartKey) {
    this.cartKey = cartKey;
    
    return this;
  }

  public void unsetCartKey() {
    this.cartKey = null;
  }

  /** Returns true if field cartKey is set (has been asigned a value) and false otherwise */
  public boolean isSetCartKey() {
    return this.cartKey != null;
  }

  public void setCartKeyIsSet(boolean value) {
    if (!value) {
      this.cartKey = null;
    }
  }

  public Item getItem() {
    return this.item;
  }

  public updateItem_args setItem(Item item) {
    this.item = item;
    
    return this;
  }

  public void unsetItem() {
    this.item = null;
  }

  /** Returns true if field item is set (has been asigned a value) and false otherwise */
  public boolean isSetItem() {
    return this.item != null;
  }

  public void setItemIsSet(boolean value) {
    if (!value) {
      this.item = null;
    }
  }

  public int getSource() {
    return this.source;
  }

  public updateItem_args setSource(int source) {
    this.source = source;
    setSourceIsSet(true);

    return this;
  }

  public void unsetSource() {
  __isset_bit_vector.clear(__SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been asigned a value) and false otherwise */
  public boolean isSetSource() {
    return __isset_bit_vector.get(__SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_KEY:
      if (value == null) {
        unsetUserKey();
      } else {
        setUserKey((String)value);
      }
      break;
    case CART_KEY_LIST:
      if (value == null) {
        unsetCartKeyList();
      } else {
        setCartKeyList((List<CartKey>)value);
      }
      break;
    case CART_KEY:
      if (value == null) {
        unsetCartKey();
      } else {
        setCartKey((CartKey)value);
      }
      break;
    case ITEM:
      if (value == null) {
        unsetItem();
      } else {
        setItem((Item)value);
      }
      break;
    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_KEY:
      return getUserKey();
    case CART_KEY_LIST:
      return getCartKeyList();
    case CART_KEY:
      return getCartKey();
    case ITEM:
      return getItem();
    case SOURCE:
      return new Integer(getSource());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_KEY:
      return isSetUserKey();
    case CART_KEY_LIST:
      return isSetCartKeyList();
    case CART_KEY:
      return isSetCartKey();
    case ITEM:
      return isSetItem();
    case SOURCE:
      return isSetSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof updateItem_args)
      return this.equals((updateItem_args)that);
    return false;
  }

  public boolean equals(updateItem_args that) {
    if (that == null)
      return false;
    boolean this_present_userKey = true && this.isSetUserKey();
    boolean that_present_userKey = true && that.isSetUserKey();
    if (this_present_userKey || that_present_userKey) {
      if (!(this_present_userKey && that_present_userKey))
        return false;
      if (!this.userKey.equals(that.userKey))
        return false;
    }
    boolean this_present_cartKeyList = true && this.isSetCartKeyList();
    boolean that_present_cartKeyList = true && that.isSetCartKeyList();
    if (this_present_cartKeyList || that_present_cartKeyList) {
      if (!(this_present_cartKeyList && that_present_cartKeyList))
        return false;
      if (!this.cartKeyList.equals(that.cartKeyList))
        return false;
    }
    boolean this_present_cartKey = true && this.isSetCartKey();
    boolean that_present_cartKey = true && that.isSetCartKey();
    if (this_present_cartKey || that_present_cartKey) {
      if (!(this_present_cartKey && that_present_cartKey))
        return false;
      if (!this.cartKey.equals(that.cartKey))
        return false;
    }
    boolean this_present_item = true && this.isSetItem();
    boolean that_present_item = true && that.isSetItem();
    if (this_present_item || that_present_item) {
      if (!(this_present_item && that_present_item))
        return false;
      if (!this.item.equals(that.item))
        return false;
    }
    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_userKey = true && (isSetUserKey());
    builder.append(present_userKey);
    if (present_userKey)
      builder.append(userKey);
    boolean present_cartKeyList = true && (isSetCartKeyList());
    builder.append(present_cartKeyList);
    if (present_cartKeyList)
      builder.append(cartKeyList);
    boolean present_cartKey = true && (isSetCartKey());
    builder.append(present_cartKey);
    if (present_cartKey)
      builder.append(cartKey);
    boolean present_item = true && (isSetItem());
    builder.append(present_item);
    if (present_item)
      builder.append(item);
    boolean present_source = true;
    builder.append(present_source);
    if (present_source)
      builder.append(source);
    return builder.toHashCode();
  }

  public int compareTo(updateItem_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    updateItem_args typedOther = (updateItem_args)other;

    lastComparison = Boolean.valueOf(isSetUserKey()).compareTo(typedOther.isSetUserKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserKey()) {
      lastComparison = TBaseHelper.compareTo(this.userKey, typedOther.userKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCartKeyList()).compareTo(typedOther.isSetCartKeyList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartKeyList()) {
      lastComparison = TBaseHelper.compareTo(this.cartKeyList, typedOther.cartKeyList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCartKey()).compareTo(typedOther.isSetCartKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartKey()) {
      lastComparison = TBaseHelper.compareTo(this.cartKey, typedOther.cartKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItem()).compareTo(typedOther.isSetItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItem()) {
      lastComparison = TBaseHelper.compareTo(this.item, typedOther.item);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // USER_KEY
          if (field.type == TType.STRING) {
            this.userKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CART_KEY_LIST
          if (field.type == TType.LIST) {
            {
            TList _list20 = iprot.readListBegin();
            this.cartKeyList = new ArrayList<CartKey>(_list20.size);
            for (int _i21 = 0; _i21 < _list20.size; ++_i21)
            {
              CartKey _elem22;
              _elem22 = new CartKey();
              _elem22.read(iprot);
              this.cartKeyList.add(_elem22);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CART_KEY
          if (field.type == TType.STRUCT) {
            this.cartKey = new CartKey();
            this.cartKey.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ITEM
          if (field.type == TType.STRUCT) {
            this.item = new Item();
            this.item.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SOURCE
          if (field.type == TType.I32) {
            this.source = iprot.readI32();
            setSourceIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.userKey != null) {
      oprot.writeFieldBegin(USER_KEY_FIELD_DESC);
      oprot.writeString(this.userKey);
      oprot.writeFieldEnd();
    }
    if (this.cartKeyList != null) {
      oprot.writeFieldBegin(CART_KEY_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.cartKeyList.size()));
        for (CartKey _iter23 : this.cartKeyList)
        {
          _iter23.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.cartKey != null) {
      oprot.writeFieldBegin(CART_KEY_FIELD_DESC);
      this.cartKey.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.item != null) {
      oprot.writeFieldBegin(ITEM_FIELD_DESC);
      this.item.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
    oprot.writeI32(this.source);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("updateItem_args(");
    boolean first = true;
    sb.append("userKey:");
    if (this.userKey == null) {
      sb.append("null");
    } else {
      sb.append(this.userKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cartKeyList:");
    if (this.cartKeyList == null) {
      sb.append("null");
    } else {
      sb.append(this.cartKeyList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cartKey:");
    if (this.cartKey == null) {
      sb.append("null");
    } else {
      sb.append(this.cartKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("item:");
    if (this.item == null) {
      sb.append("null");
    } else {
      sb.append(this.item);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class updateItem_result implements TBase<updateItem_result, updateItem_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("updateItem_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public CheckCartResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, CheckCartResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(updateItem_result.class, metaDataMap);
  }


  public updateItem_result() {
  }

  public updateItem_result(
    CheckCartResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public updateItem_result(updateItem_result other) {
    if (other.isSetSuccess()) {
      this.success = new CheckCartResult(other.success);
    }
  }

  public updateItem_result deepCopy() {
    return new updateItem_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public CheckCartResult getSuccess() {
    return this.success;
  }

  public updateItem_result setSuccess(CheckCartResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((CheckCartResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof updateItem_result)
      return this.equals((updateItem_result)that);
    return false;
  }

  public boolean equals(updateItem_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(updateItem_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    updateItem_result typedOther = (updateItem_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new CheckCartResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("updateItem_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class deleteItem_args implements TBase<deleteItem_args, deleteItem_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("deleteItem_args");

  private static final TField USER_KEY_FIELD_DESC = new TField("userKey", TType.STRING, (short)1);
  private static final TField CART_KEY_LIST_FIELD_DESC = new TField("cartKeyList", TType.LIST, (short)2);
  private static final TField SOURCE_FIELD_DESC = new TField("source", TType.I32, (short)3);


  public String userKey;
  public List<CartKey> cartKeyList;
  public int source;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_KEY((short)1, "userKey"),
    CART_KEY_LIST((short)2, "cartKeyList"),
    SOURCE((short)3, "source");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_KEY
  	return USER_KEY;
        case 2: // CART_KEY_LIST
  	return CART_KEY_LIST;
        case 3: // SOURCE
  	return SOURCE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SOURCE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_KEY, new FieldMetaData("userKey", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CART_KEY_LIST, new FieldMetaData("cartKeyList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, CartKey.class))));
    tmpMap.put(_Fields.SOURCE, new FieldMetaData("source", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(deleteItem_args.class, metaDataMap);
  }


  public deleteItem_args() {
  }

  public deleteItem_args(
    String userKey,
    List<CartKey> cartKeyList,
    int source)
  {
    this();
    this.userKey = userKey;
    this.cartKeyList = cartKeyList;
    this.source = source;
    setSourceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public deleteItem_args(deleteItem_args other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUserKey()) {
      this.userKey = other.userKey;
    }
    if (other.isSetCartKeyList()) {
      List<CartKey> __this__cartKeyList = new ArrayList<CartKey>();
      for (CartKey other_element : other.cartKeyList) {
        __this__cartKeyList.add(new CartKey(other_element));
      }
      this.cartKeyList = __this__cartKeyList;
    }
    this.source = other.source;
  }

  public deleteItem_args deepCopy() {
    return new deleteItem_args(this);
  }

  @Override
  public void clear() {
    this.userKey = null;
    this.cartKeyList = null;
    setSourceIsSet(false);
    this.source = 0;
  }

  public String getUserKey() {
    return this.userKey;
  }

  public deleteItem_args setUserKey(String userKey) {
    this.userKey = userKey;
    
    return this;
  }

  public void unsetUserKey() {
    this.userKey = null;
  }

  /** Returns true if field userKey is set (has been asigned a value) and false otherwise */
  public boolean isSetUserKey() {
    return this.userKey != null;
  }

  public void setUserKeyIsSet(boolean value) {
    if (!value) {
      this.userKey = null;
    }
  }

  public int getCartKeyListSize() {
    return (this.cartKeyList == null) ? 0 : this.cartKeyList.size();
  }

  public java.util.Iterator<CartKey> getCartKeyListIterator() {
    return (this.cartKeyList == null) ? null : this.cartKeyList.iterator();
  }

  public void addToCartKeyList(CartKey elem) {
    if (this.cartKeyList == null) {
      this.cartKeyList = new ArrayList<CartKey>();
    }
    this.cartKeyList.add(elem);
  }

  public List<CartKey> getCartKeyList() {
    return this.cartKeyList;
  }

  public deleteItem_args setCartKeyList(List<CartKey> cartKeyList) {
    this.cartKeyList = cartKeyList;
    
    return this;
  }

  public void unsetCartKeyList() {
    this.cartKeyList = null;
  }

  /** Returns true if field cartKeyList is set (has been asigned a value) and false otherwise */
  public boolean isSetCartKeyList() {
    return this.cartKeyList != null;
  }

  public void setCartKeyListIsSet(boolean value) {
    if (!value) {
      this.cartKeyList = null;
    }
  }

  public int getSource() {
    return this.source;
  }

  public deleteItem_args setSource(int source) {
    this.source = source;
    setSourceIsSet(true);

    return this;
  }

  public void unsetSource() {
  __isset_bit_vector.clear(__SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been asigned a value) and false otherwise */
  public boolean isSetSource() {
    return __isset_bit_vector.get(__SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_KEY:
      if (value == null) {
        unsetUserKey();
      } else {
        setUserKey((String)value);
      }
      break;
    case CART_KEY_LIST:
      if (value == null) {
        unsetCartKeyList();
      } else {
        setCartKeyList((List<CartKey>)value);
      }
      break;
    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_KEY:
      return getUserKey();
    case CART_KEY_LIST:
      return getCartKeyList();
    case SOURCE:
      return new Integer(getSource());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_KEY:
      return isSetUserKey();
    case CART_KEY_LIST:
      return isSetCartKeyList();
    case SOURCE:
      return isSetSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof deleteItem_args)
      return this.equals((deleteItem_args)that);
    return false;
  }

  public boolean equals(deleteItem_args that) {
    if (that == null)
      return false;
    boolean this_present_userKey = true && this.isSetUserKey();
    boolean that_present_userKey = true && that.isSetUserKey();
    if (this_present_userKey || that_present_userKey) {
      if (!(this_present_userKey && that_present_userKey))
        return false;
      if (!this.userKey.equals(that.userKey))
        return false;
    }
    boolean this_present_cartKeyList = true && this.isSetCartKeyList();
    boolean that_present_cartKeyList = true && that.isSetCartKeyList();
    if (this_present_cartKeyList || that_present_cartKeyList) {
      if (!(this_present_cartKeyList && that_present_cartKeyList))
        return false;
      if (!this.cartKeyList.equals(that.cartKeyList))
        return false;
    }
    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_userKey = true && (isSetUserKey());
    builder.append(present_userKey);
    if (present_userKey)
      builder.append(userKey);
    boolean present_cartKeyList = true && (isSetCartKeyList());
    builder.append(present_cartKeyList);
    if (present_cartKeyList)
      builder.append(cartKeyList);
    boolean present_source = true;
    builder.append(present_source);
    if (present_source)
      builder.append(source);
    return builder.toHashCode();
  }

  public int compareTo(deleteItem_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    deleteItem_args typedOther = (deleteItem_args)other;

    lastComparison = Boolean.valueOf(isSetUserKey()).compareTo(typedOther.isSetUserKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserKey()) {
      lastComparison = TBaseHelper.compareTo(this.userKey, typedOther.userKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCartKeyList()).compareTo(typedOther.isSetCartKeyList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartKeyList()) {
      lastComparison = TBaseHelper.compareTo(this.cartKeyList, typedOther.cartKeyList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // USER_KEY
          if (field.type == TType.STRING) {
            this.userKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CART_KEY_LIST
          if (field.type == TType.LIST) {
            {
            TList _list24 = iprot.readListBegin();
            this.cartKeyList = new ArrayList<CartKey>(_list24.size);
            for (int _i25 = 0; _i25 < _list24.size; ++_i25)
            {
              CartKey _elem26;
              _elem26 = new CartKey();
              _elem26.read(iprot);
              this.cartKeyList.add(_elem26);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SOURCE
          if (field.type == TType.I32) {
            this.source = iprot.readI32();
            setSourceIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.userKey != null) {
      oprot.writeFieldBegin(USER_KEY_FIELD_DESC);
      oprot.writeString(this.userKey);
      oprot.writeFieldEnd();
    }
    if (this.cartKeyList != null) {
      oprot.writeFieldBegin(CART_KEY_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.cartKeyList.size()));
        for (CartKey _iter27 : this.cartKeyList)
        {
          _iter27.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
    oprot.writeI32(this.source);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("deleteItem_args(");
    boolean first = true;
    sb.append("userKey:");
    if (this.userKey == null) {
      sb.append("null");
    } else {
      sb.append(this.userKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cartKeyList:");
    if (this.cartKeyList == null) {
      sb.append("null");
    } else {
      sb.append(this.cartKeyList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class deleteItem_result implements TBase<deleteItem_result, deleteItem_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("deleteItem_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(deleteItem_result.class, metaDataMap);
  }


  public deleteItem_result() {
  }

  public deleteItem_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public deleteItem_result(deleteItem_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public deleteItem_result deepCopy() {
    return new deleteItem_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public deleteItem_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof deleteItem_result)
      return this.equals((deleteItem_result)that);
    return false;
  }

  public boolean equals(deleteItem_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(deleteItem_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    deleteItem_result typedOther = (deleteItem_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("deleteItem_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class mergeItem_args implements TBase<mergeItem_args, mergeItem_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("mergeItem_args");

  private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)1);
  private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.STRING, (short)2);
  private static final TField SOURCE_FIELD_DESC = new TField("source", TType.I32, (short)3);


  public String sessionId;
  public String userId;
  public int source;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SESSION_ID((short)1, "sessionId"),
    USER_ID((short)2, "userId"),
    SOURCE((short)3, "source");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_ID
  	return SESSION_ID;
        case 2: // USER_ID
  	return USER_ID;
        case 3: // SOURCE
  	return SOURCE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SOURCE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_ID, new FieldMetaData("sessionId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new FieldMetaData("source", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(mergeItem_args.class, metaDataMap);
  }


  public mergeItem_args() {
  }

  public mergeItem_args(
    String sessionId,
    String userId,
    int source)
  {
    this();
    this.sessionId = sessionId;
    this.userId = userId;
    this.source = source;
    setSourceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public mergeItem_args(mergeItem_args other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSessionId()) {
      this.sessionId = other.sessionId;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    this.source = other.source;
  }

  public mergeItem_args deepCopy() {
    return new mergeItem_args(this);
  }

  @Override
  public void clear() {
    this.sessionId = null;
    this.userId = null;
    setSourceIsSet(false);
    this.source = 0;
  }

  public String getSessionId() {
    return this.sessionId;
  }

  public mergeItem_args setSessionId(String sessionId) {
    this.sessionId = sessionId;
    
    return this;
  }

  public void unsetSessionId() {
    this.sessionId = null;
  }

  /** Returns true if field sessionId is set (has been asigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return this.sessionId != null;
  }

  public void setSessionIdIsSet(boolean value) {
    if (!value) {
      this.sessionId = null;
    }
  }

  public String getUserId() {
    return this.userId;
  }

  public mergeItem_args setUserId(String userId) {
    this.userId = userId;
    
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been asigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public int getSource() {
    return this.source;
  }

  public mergeItem_args setSource(int source) {
    this.source = source;
    setSourceIsSet(true);

    return this;
  }

  public void unsetSource() {
  __isset_bit_vector.clear(__SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been asigned a value) and false otherwise */
  public boolean isSetSource() {
    return __isset_bit_vector.get(__SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((String)value);
      }
      break;
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;
    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_ID:
      return getSessionId();
    case USER_ID:
      return getUserId();
    case SOURCE:
      return new Integer(getSource());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SESSION_ID:
      return isSetSessionId();
    case USER_ID:
      return isSetUserId();
    case SOURCE:
      return isSetSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof mergeItem_args)
      return this.equals((mergeItem_args)that);
    return false;
  }

  public boolean equals(mergeItem_args that) {
    if (that == null)
      return false;
    boolean this_present_sessionId = true && this.isSetSessionId();
    boolean that_present_sessionId = true && that.isSetSessionId();
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (!this.sessionId.equals(that.sessionId))
        return false;
    }
    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }
    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_sessionId = true && (isSetSessionId());
    builder.append(present_sessionId);
    if (present_sessionId)
      builder.append(sessionId);
    boolean present_userId = true && (isSetUserId());
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);
    boolean present_source = true;
    builder.append(present_source);
    if (present_source)
      builder.append(source);
    return builder.toHashCode();
  }

  public int compareTo(mergeItem_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    mergeItem_args typedOther = (mergeItem_args)other;

    lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // SESSION_ID
          if (field.type == TType.STRING) {
            this.sessionId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // USER_ID
          if (field.type == TType.STRING) {
            this.userId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SOURCE
          if (field.type == TType.I32) {
            this.source = iprot.readI32();
            setSourceIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.sessionId != null) {
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeString(this.sessionId);
      oprot.writeFieldEnd();
    }
    if (this.userId != null) {
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeString(this.userId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
    oprot.writeI32(this.source);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("mergeItem_args(");
    boolean first = true;
    sb.append("sessionId:");
    if (this.sessionId == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class mergeItem_result implements TBase<mergeItem_result, mergeItem_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("mergeItem_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(mergeItem_result.class, metaDataMap);
  }


  public mergeItem_result() {
  }

  public mergeItem_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public mergeItem_result(mergeItem_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public mergeItem_result deepCopy() {
    return new mergeItem_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public mergeItem_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof mergeItem_result)
      return this.equals((mergeItem_result)that);
    return false;
  }

  public boolean equals(mergeItem_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(mergeItem_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    mergeItem_result typedOther = (mergeItem_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("mergeItem_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class listItem_args implements TBase<listItem_args, listItem_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("listItem_args");

  private static final TField USER_KEY_FIELD_DESC = new TField("userKey", TType.STRING, (short)1);
  private static final TField SOURCE_FIELD_DESC = new TField("source", TType.I32, (short)3);


  public String userKey;
  public int source;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_KEY((short)1, "userKey"),
    SOURCE((short)3, "source");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_KEY
  	return USER_KEY;
        case 3: // SOURCE
  	return SOURCE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SOURCE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_KEY, new FieldMetaData("userKey", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new FieldMetaData("source", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(listItem_args.class, metaDataMap);
  }


  public listItem_args() {
  }

  public listItem_args(
    String userKey,
    int source)
  {
    this();
    this.userKey = userKey;
    this.source = source;
    setSourceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public listItem_args(listItem_args other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUserKey()) {
      this.userKey = other.userKey;
    }
    this.source = other.source;
  }

  public listItem_args deepCopy() {
    return new listItem_args(this);
  }

  @Override
  public void clear() {
    this.userKey = null;
    setSourceIsSet(false);
    this.source = 0;
  }

  public String getUserKey() {
    return this.userKey;
  }

  public listItem_args setUserKey(String userKey) {
    this.userKey = userKey;
    
    return this;
  }

  public void unsetUserKey() {
    this.userKey = null;
  }

  /** Returns true if field userKey is set (has been asigned a value) and false otherwise */
  public boolean isSetUserKey() {
    return this.userKey != null;
  }

  public void setUserKeyIsSet(boolean value) {
    if (!value) {
      this.userKey = null;
    }
  }

  public int getSource() {
    return this.source;
  }

  public listItem_args setSource(int source) {
    this.source = source;
    setSourceIsSet(true);

    return this;
  }

  public void unsetSource() {
  __isset_bit_vector.clear(__SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been asigned a value) and false otherwise */
  public boolean isSetSource() {
    return __isset_bit_vector.get(__SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_KEY:
      if (value == null) {
        unsetUserKey();
      } else {
        setUserKey((String)value);
      }
      break;
    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_KEY:
      return getUserKey();
    case SOURCE:
      return new Integer(getSource());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_KEY:
      return isSetUserKey();
    case SOURCE:
      return isSetSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof listItem_args)
      return this.equals((listItem_args)that);
    return false;
  }

  public boolean equals(listItem_args that) {
    if (that == null)
      return false;
    boolean this_present_userKey = true && this.isSetUserKey();
    boolean that_present_userKey = true && that.isSetUserKey();
    if (this_present_userKey || that_present_userKey) {
      if (!(this_present_userKey && that_present_userKey))
        return false;
      if (!this.userKey.equals(that.userKey))
        return false;
    }
    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_userKey = true && (isSetUserKey());
    builder.append(present_userKey);
    if (present_userKey)
      builder.append(userKey);
    boolean present_source = true;
    builder.append(present_source);
    if (present_source)
      builder.append(source);
    return builder.toHashCode();
  }

  public int compareTo(listItem_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    listItem_args typedOther = (listItem_args)other;

    lastComparison = Boolean.valueOf(isSetUserKey()).compareTo(typedOther.isSetUserKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserKey()) {
      lastComparison = TBaseHelper.compareTo(this.userKey, typedOther.userKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // USER_KEY
          if (field.type == TType.STRING) {
            this.userKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SOURCE
          if (field.type == TType.I32) {
            this.source = iprot.readI32();
            setSourceIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.userKey != null) {
      oprot.writeFieldBegin(USER_KEY_FIELD_DESC);
      oprot.writeString(this.userKey);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
    oprot.writeI32(this.source);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("listItem_args(");
    boolean first = true;
    sb.append("userKey:");
    if (this.userKey == null) {
      sb.append("null");
    } else {
      sb.append(this.userKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class listItem_result implements TBase<listItem_result, listItem_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("listItem_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public CartResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, CartResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(listItem_result.class, metaDataMap);
  }


  public listItem_result() {
  }

  public listItem_result(
    CartResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public listItem_result(listItem_result other) {
    if (other.isSetSuccess()) {
      this.success = new CartResult(other.success);
    }
  }

  public listItem_result deepCopy() {
    return new listItem_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public CartResult getSuccess() {
    return this.success;
  }

  public listItem_result setSuccess(CartResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((CartResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof listItem_result)
      return this.equals((listItem_result)that);
    return false;
  }

  public boolean equals(listItem_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(listItem_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    listItem_result typedOther = (listItem_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new CartResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("listItem_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class listMiniItem_args implements TBase<listMiniItem_args, listMiniItem_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("listMiniItem_args");

  private static final TField USER_KEY_FIELD_DESC = new TField("userKey", TType.STRING, (short)1);
  private static final TField SOURCE_FIELD_DESC = new TField("source", TType.I32, (short)2);


  public String userKey;
  public int source;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_KEY((short)1, "userKey"),
    SOURCE((short)2, "source");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_KEY
  	return USER_KEY;
        case 2: // SOURCE
  	return SOURCE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SOURCE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_KEY, new FieldMetaData("userKey", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new FieldMetaData("source", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(listMiniItem_args.class, metaDataMap);
  }


  public listMiniItem_args() {
  }

  public listMiniItem_args(
    String userKey,
    int source)
  {
    this();
    this.userKey = userKey;
    this.source = source;
    setSourceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public listMiniItem_args(listMiniItem_args other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUserKey()) {
      this.userKey = other.userKey;
    }
    this.source = other.source;
  }

  public listMiniItem_args deepCopy() {
    return new listMiniItem_args(this);
  }

  @Override
  public void clear() {
    this.userKey = null;
    setSourceIsSet(false);
    this.source = 0;
  }

  public String getUserKey() {
    return this.userKey;
  }

  public listMiniItem_args setUserKey(String userKey) {
    this.userKey = userKey;
    
    return this;
  }

  public void unsetUserKey() {
    this.userKey = null;
  }

  /** Returns true if field userKey is set (has been asigned a value) and false otherwise */
  public boolean isSetUserKey() {
    return this.userKey != null;
  }

  public void setUserKeyIsSet(boolean value) {
    if (!value) {
      this.userKey = null;
    }
  }

  public int getSource() {
    return this.source;
  }

  public listMiniItem_args setSource(int source) {
    this.source = source;
    setSourceIsSet(true);

    return this;
  }

  public void unsetSource() {
  __isset_bit_vector.clear(__SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been asigned a value) and false otherwise */
  public boolean isSetSource() {
    return __isset_bit_vector.get(__SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_KEY:
      if (value == null) {
        unsetUserKey();
      } else {
        setUserKey((String)value);
      }
      break;
    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_KEY:
      return getUserKey();
    case SOURCE:
      return new Integer(getSource());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_KEY:
      return isSetUserKey();
    case SOURCE:
      return isSetSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof listMiniItem_args)
      return this.equals((listMiniItem_args)that);
    return false;
  }

  public boolean equals(listMiniItem_args that) {
    if (that == null)
      return false;
    boolean this_present_userKey = true && this.isSetUserKey();
    boolean that_present_userKey = true && that.isSetUserKey();
    if (this_present_userKey || that_present_userKey) {
      if (!(this_present_userKey && that_present_userKey))
        return false;
      if (!this.userKey.equals(that.userKey))
        return false;
    }
    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_userKey = true && (isSetUserKey());
    builder.append(present_userKey);
    if (present_userKey)
      builder.append(userKey);
    boolean present_source = true;
    builder.append(present_source);
    if (present_source)
      builder.append(source);
    return builder.toHashCode();
  }

  public int compareTo(listMiniItem_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    listMiniItem_args typedOther = (listMiniItem_args)other;

    lastComparison = Boolean.valueOf(isSetUserKey()).compareTo(typedOther.isSetUserKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserKey()) {
      lastComparison = TBaseHelper.compareTo(this.userKey, typedOther.userKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // USER_KEY
          if (field.type == TType.STRING) {
            this.userKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SOURCE
          if (field.type == TType.I32) {
            this.source = iprot.readI32();
            setSourceIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.userKey != null) {
      oprot.writeFieldBegin(USER_KEY_FIELD_DESC);
      oprot.writeString(this.userKey);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
    oprot.writeI32(this.source);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("listMiniItem_args(");
    boolean first = true;
    sb.append("userKey:");
    if (this.userKey == null) {
      sb.append("null");
    } else {
      sb.append(this.userKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class listMiniItem_result implements TBase<listMiniItem_result, listMiniItem_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("listMiniItem_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public MiniCartResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, MiniCartResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(listMiniItem_result.class, metaDataMap);
  }


  public listMiniItem_result() {
  }

  public listMiniItem_result(
    MiniCartResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public listMiniItem_result(listMiniItem_result other) {
    if (other.isSetSuccess()) {
      this.success = new MiniCartResult(other.success);
    }
  }

  public listMiniItem_result deepCopy() {
    return new listMiniItem_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public MiniCartResult getSuccess() {
    return this.success;
  }

  public listMiniItem_result setSuccess(MiniCartResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((MiniCartResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof listMiniItem_result)
      return this.equals((listMiniItem_result)that);
    return false;
  }

  public boolean equals(listMiniItem_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(listMiniItem_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    listMiniItem_result typedOther = (listMiniItem_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new MiniCartResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("listMiniItem_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class findListByCartKey_args implements TBase<findListByCartKey_args, findListByCartKey_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("findListByCartKey_args");

  private static final TField USER_KEY_FIELD_DESC = new TField("userKey", TType.STRING, (short)1);
  private static final TField CART_KEY_LIST_FIELD_DESC = new TField("cartKeyList", TType.LIST, (short)2);
  private static final TField SOURCE_FIELD_DESC = new TField("source", TType.I32, (short)3);


  public String userKey;
  public List<CartKey> cartKeyList;
  public int source;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_KEY((short)1, "userKey"),
    CART_KEY_LIST((short)2, "cartKeyList"),
    SOURCE((short)3, "source");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_KEY
  	return USER_KEY;
        case 2: // CART_KEY_LIST
  	return CART_KEY_LIST;
        case 3: // SOURCE
  	return SOURCE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SOURCE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_KEY, new FieldMetaData("userKey", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CART_KEY_LIST, new FieldMetaData("cartKeyList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, CartKey.class))));
    tmpMap.put(_Fields.SOURCE, new FieldMetaData("source", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(findListByCartKey_args.class, metaDataMap);
  }


  public findListByCartKey_args() {
  }

  public findListByCartKey_args(
    String userKey,
    List<CartKey> cartKeyList,
    int source)
  {
    this();
    this.userKey = userKey;
    this.cartKeyList = cartKeyList;
    this.source = source;
    setSourceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public findListByCartKey_args(findListByCartKey_args other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUserKey()) {
      this.userKey = other.userKey;
    }
    if (other.isSetCartKeyList()) {
      List<CartKey> __this__cartKeyList = new ArrayList<CartKey>();
      for (CartKey other_element : other.cartKeyList) {
        __this__cartKeyList.add(new CartKey(other_element));
      }
      this.cartKeyList = __this__cartKeyList;
    }
    this.source = other.source;
  }

  public findListByCartKey_args deepCopy() {
    return new findListByCartKey_args(this);
  }

  @Override
  public void clear() {
    this.userKey = null;
    this.cartKeyList = null;
    setSourceIsSet(false);
    this.source = 0;
  }

  public String getUserKey() {
    return this.userKey;
  }

  public findListByCartKey_args setUserKey(String userKey) {
    this.userKey = userKey;
    
    return this;
  }

  public void unsetUserKey() {
    this.userKey = null;
  }

  /** Returns true if field userKey is set (has been asigned a value) and false otherwise */
  public boolean isSetUserKey() {
    return this.userKey != null;
  }

  public void setUserKeyIsSet(boolean value) {
    if (!value) {
      this.userKey = null;
    }
  }

  public int getCartKeyListSize() {
    return (this.cartKeyList == null) ? 0 : this.cartKeyList.size();
  }

  public java.util.Iterator<CartKey> getCartKeyListIterator() {
    return (this.cartKeyList == null) ? null : this.cartKeyList.iterator();
  }

  public void addToCartKeyList(CartKey elem) {
    if (this.cartKeyList == null) {
      this.cartKeyList = new ArrayList<CartKey>();
    }
    this.cartKeyList.add(elem);
  }

  public List<CartKey> getCartKeyList() {
    return this.cartKeyList;
  }

  public findListByCartKey_args setCartKeyList(List<CartKey> cartKeyList) {
    this.cartKeyList = cartKeyList;
    
    return this;
  }

  public void unsetCartKeyList() {
    this.cartKeyList = null;
  }

  /** Returns true if field cartKeyList is set (has been asigned a value) and false otherwise */
  public boolean isSetCartKeyList() {
    return this.cartKeyList != null;
  }

  public void setCartKeyListIsSet(boolean value) {
    if (!value) {
      this.cartKeyList = null;
    }
  }

  public int getSource() {
    return this.source;
  }

  public findListByCartKey_args setSource(int source) {
    this.source = source;
    setSourceIsSet(true);

    return this;
  }

  public void unsetSource() {
  __isset_bit_vector.clear(__SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been asigned a value) and false otherwise */
  public boolean isSetSource() {
    return __isset_bit_vector.get(__SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_KEY:
      if (value == null) {
        unsetUserKey();
      } else {
        setUserKey((String)value);
      }
      break;
    case CART_KEY_LIST:
      if (value == null) {
        unsetCartKeyList();
      } else {
        setCartKeyList((List<CartKey>)value);
      }
      break;
    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_KEY:
      return getUserKey();
    case CART_KEY_LIST:
      return getCartKeyList();
    case SOURCE:
      return new Integer(getSource());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_KEY:
      return isSetUserKey();
    case CART_KEY_LIST:
      return isSetCartKeyList();
    case SOURCE:
      return isSetSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof findListByCartKey_args)
      return this.equals((findListByCartKey_args)that);
    return false;
  }

  public boolean equals(findListByCartKey_args that) {
    if (that == null)
      return false;
    boolean this_present_userKey = true && this.isSetUserKey();
    boolean that_present_userKey = true && that.isSetUserKey();
    if (this_present_userKey || that_present_userKey) {
      if (!(this_present_userKey && that_present_userKey))
        return false;
      if (!this.userKey.equals(that.userKey))
        return false;
    }
    boolean this_present_cartKeyList = true && this.isSetCartKeyList();
    boolean that_present_cartKeyList = true && that.isSetCartKeyList();
    if (this_present_cartKeyList || that_present_cartKeyList) {
      if (!(this_present_cartKeyList && that_present_cartKeyList))
        return false;
      if (!this.cartKeyList.equals(that.cartKeyList))
        return false;
    }
    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_userKey = true && (isSetUserKey());
    builder.append(present_userKey);
    if (present_userKey)
      builder.append(userKey);
    boolean present_cartKeyList = true && (isSetCartKeyList());
    builder.append(present_cartKeyList);
    if (present_cartKeyList)
      builder.append(cartKeyList);
    boolean present_source = true;
    builder.append(present_source);
    if (present_source)
      builder.append(source);
    return builder.toHashCode();
  }

  public int compareTo(findListByCartKey_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    findListByCartKey_args typedOther = (findListByCartKey_args)other;

    lastComparison = Boolean.valueOf(isSetUserKey()).compareTo(typedOther.isSetUserKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserKey()) {
      lastComparison = TBaseHelper.compareTo(this.userKey, typedOther.userKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCartKeyList()).compareTo(typedOther.isSetCartKeyList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartKeyList()) {
      lastComparison = TBaseHelper.compareTo(this.cartKeyList, typedOther.cartKeyList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // USER_KEY
          if (field.type == TType.STRING) {
            this.userKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CART_KEY_LIST
          if (field.type == TType.LIST) {
            {
            TList _list28 = iprot.readListBegin();
            this.cartKeyList = new ArrayList<CartKey>(_list28.size);
            for (int _i29 = 0; _i29 < _list28.size; ++_i29)
            {
              CartKey _elem30;
              _elem30 = new CartKey();
              _elem30.read(iprot);
              this.cartKeyList.add(_elem30);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SOURCE
          if (field.type == TType.I32) {
            this.source = iprot.readI32();
            setSourceIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.userKey != null) {
      oprot.writeFieldBegin(USER_KEY_FIELD_DESC);
      oprot.writeString(this.userKey);
      oprot.writeFieldEnd();
    }
    if (this.cartKeyList != null) {
      oprot.writeFieldBegin(CART_KEY_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.cartKeyList.size()));
        for (CartKey _iter31 : this.cartKeyList)
        {
          _iter31.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
    oprot.writeI32(this.source);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("findListByCartKey_args(");
    boolean first = true;
    sb.append("userKey:");
    if (this.userKey == null) {
      sb.append("null");
    } else {
      sb.append(this.userKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cartKeyList:");
    if (this.cartKeyList == null) {
      sb.append("null");
    } else {
      sb.append(this.cartKeyList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class findListByCartKey_result implements TBase<findListByCartKey_result, findListByCartKey_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("findListByCartKey_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public CartResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, CartResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(findListByCartKey_result.class, metaDataMap);
  }


  public findListByCartKey_result() {
  }

  public findListByCartKey_result(
    CartResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public findListByCartKey_result(findListByCartKey_result other) {
    if (other.isSetSuccess()) {
      this.success = new CartResult(other.success);
    }
  }

  public findListByCartKey_result deepCopy() {
    return new findListByCartKey_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public CartResult getSuccess() {
    return this.success;
  }

  public findListByCartKey_result setSuccess(CartResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((CartResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof findListByCartKey_result)
      return this.equals((findListByCartKey_result)that);
    return false;
  }

  public boolean equals(findListByCartKey_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(findListByCartKey_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    findListByCartKey_result typedOther = (findListByCartKey_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new CartResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("findListByCartKey_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class checkItem_args implements TBase<checkItem_args, checkItem_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("checkItem_args");

  private static final TField USER_KEY_FIELD_DESC = new TField("userKey", TType.STRING, (short)1);
  private static final TField CART_KEY_LIST_FIELD_DESC = new TField("cartKeyList", TType.LIST, (short)2);
  private static final TField SOURCE_FIELD_DESC = new TField("source", TType.I32, (short)3);


  public String userKey;
  public List<CartKey> cartKeyList;
  public int source;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_KEY((short)1, "userKey"),
    CART_KEY_LIST((short)2, "cartKeyList"),
    SOURCE((short)3, "source");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_KEY
  	return USER_KEY;
        case 2: // CART_KEY_LIST
  	return CART_KEY_LIST;
        case 3: // SOURCE
  	return SOURCE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SOURCE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_KEY, new FieldMetaData("userKey", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CART_KEY_LIST, new FieldMetaData("cartKeyList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, CartKey.class))));
    tmpMap.put(_Fields.SOURCE, new FieldMetaData("source", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(checkItem_args.class, metaDataMap);
  }


  public checkItem_args() {
  }

  public checkItem_args(
    String userKey,
    List<CartKey> cartKeyList,
    int source)
  {
    this();
    this.userKey = userKey;
    this.cartKeyList = cartKeyList;
    this.source = source;
    setSourceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public checkItem_args(checkItem_args other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUserKey()) {
      this.userKey = other.userKey;
    }
    if (other.isSetCartKeyList()) {
      List<CartKey> __this__cartKeyList = new ArrayList<CartKey>();
      for (CartKey other_element : other.cartKeyList) {
        __this__cartKeyList.add(new CartKey(other_element));
      }
      this.cartKeyList = __this__cartKeyList;
    }
    this.source = other.source;
  }

  public checkItem_args deepCopy() {
    return new checkItem_args(this);
  }

  @Override
  public void clear() {
    this.userKey = null;
    this.cartKeyList = null;
    setSourceIsSet(false);
    this.source = 0;
  }

  public String getUserKey() {
    return this.userKey;
  }

  public checkItem_args setUserKey(String userKey) {
    this.userKey = userKey;
    
    return this;
  }

  public void unsetUserKey() {
    this.userKey = null;
  }

  /** Returns true if field userKey is set (has been asigned a value) and false otherwise */
  public boolean isSetUserKey() {
    return this.userKey != null;
  }

  public void setUserKeyIsSet(boolean value) {
    if (!value) {
      this.userKey = null;
    }
  }

  public int getCartKeyListSize() {
    return (this.cartKeyList == null) ? 0 : this.cartKeyList.size();
  }

  public java.util.Iterator<CartKey> getCartKeyListIterator() {
    return (this.cartKeyList == null) ? null : this.cartKeyList.iterator();
  }

  public void addToCartKeyList(CartKey elem) {
    if (this.cartKeyList == null) {
      this.cartKeyList = new ArrayList<CartKey>();
    }
    this.cartKeyList.add(elem);
  }

  public List<CartKey> getCartKeyList() {
    return this.cartKeyList;
  }

  public checkItem_args setCartKeyList(List<CartKey> cartKeyList) {
    this.cartKeyList = cartKeyList;
    
    return this;
  }

  public void unsetCartKeyList() {
    this.cartKeyList = null;
  }

  /** Returns true if field cartKeyList is set (has been asigned a value) and false otherwise */
  public boolean isSetCartKeyList() {
    return this.cartKeyList != null;
  }

  public void setCartKeyListIsSet(boolean value) {
    if (!value) {
      this.cartKeyList = null;
    }
  }

  public int getSource() {
    return this.source;
  }

  public checkItem_args setSource(int source) {
    this.source = source;
    setSourceIsSet(true);

    return this;
  }

  public void unsetSource() {
  __isset_bit_vector.clear(__SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been asigned a value) and false otherwise */
  public boolean isSetSource() {
    return __isset_bit_vector.get(__SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_KEY:
      if (value == null) {
        unsetUserKey();
      } else {
        setUserKey((String)value);
      }
      break;
    case CART_KEY_LIST:
      if (value == null) {
        unsetCartKeyList();
      } else {
        setCartKeyList((List<CartKey>)value);
      }
      break;
    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_KEY:
      return getUserKey();
    case CART_KEY_LIST:
      return getCartKeyList();
    case SOURCE:
      return new Integer(getSource());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_KEY:
      return isSetUserKey();
    case CART_KEY_LIST:
      return isSetCartKeyList();
    case SOURCE:
      return isSetSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof checkItem_args)
      return this.equals((checkItem_args)that);
    return false;
  }

  public boolean equals(checkItem_args that) {
    if (that == null)
      return false;
    boolean this_present_userKey = true && this.isSetUserKey();
    boolean that_present_userKey = true && that.isSetUserKey();
    if (this_present_userKey || that_present_userKey) {
      if (!(this_present_userKey && that_present_userKey))
        return false;
      if (!this.userKey.equals(that.userKey))
        return false;
    }
    boolean this_present_cartKeyList = true && this.isSetCartKeyList();
    boolean that_present_cartKeyList = true && that.isSetCartKeyList();
    if (this_present_cartKeyList || that_present_cartKeyList) {
      if (!(this_present_cartKeyList && that_present_cartKeyList))
        return false;
      if (!this.cartKeyList.equals(that.cartKeyList))
        return false;
    }
    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_userKey = true && (isSetUserKey());
    builder.append(present_userKey);
    if (present_userKey)
      builder.append(userKey);
    boolean present_cartKeyList = true && (isSetCartKeyList());
    builder.append(present_cartKeyList);
    if (present_cartKeyList)
      builder.append(cartKeyList);
    boolean present_source = true;
    builder.append(present_source);
    if (present_source)
      builder.append(source);
    return builder.toHashCode();
  }

  public int compareTo(checkItem_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    checkItem_args typedOther = (checkItem_args)other;

    lastComparison = Boolean.valueOf(isSetUserKey()).compareTo(typedOther.isSetUserKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserKey()) {
      lastComparison = TBaseHelper.compareTo(this.userKey, typedOther.userKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCartKeyList()).compareTo(typedOther.isSetCartKeyList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartKeyList()) {
      lastComparison = TBaseHelper.compareTo(this.cartKeyList, typedOther.cartKeyList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // USER_KEY
          if (field.type == TType.STRING) {
            this.userKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CART_KEY_LIST
          if (field.type == TType.LIST) {
            {
            TList _list32 = iprot.readListBegin();
            this.cartKeyList = new ArrayList<CartKey>(_list32.size);
            for (int _i33 = 0; _i33 < _list32.size; ++_i33)
            {
              CartKey _elem34;
              _elem34 = new CartKey();
              _elem34.read(iprot);
              this.cartKeyList.add(_elem34);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SOURCE
          if (field.type == TType.I32) {
            this.source = iprot.readI32();
            setSourceIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.userKey != null) {
      oprot.writeFieldBegin(USER_KEY_FIELD_DESC);
      oprot.writeString(this.userKey);
      oprot.writeFieldEnd();
    }
    if (this.cartKeyList != null) {
      oprot.writeFieldBegin(CART_KEY_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.cartKeyList.size()));
        for (CartKey _iter35 : this.cartKeyList)
        {
          _iter35.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
    oprot.writeI32(this.source);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("checkItem_args(");
    boolean first = true;
    sb.append("userKey:");
    if (this.userKey == null) {
      sb.append("null");
    } else {
      sb.append(this.userKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cartKeyList:");
    if (this.cartKeyList == null) {
      sb.append("null");
    } else {
      sb.append(this.cartKeyList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class checkItem_result implements TBase<checkItem_result, checkItem_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("checkItem_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public CheckCartResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, CheckCartResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(checkItem_result.class, metaDataMap);
  }


  public checkItem_result() {
  }

  public checkItem_result(
    CheckCartResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public checkItem_result(checkItem_result other) {
    if (other.isSetSuccess()) {
      this.success = new CheckCartResult(other.success);
    }
  }

  public checkItem_result deepCopy() {
    return new checkItem_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public CheckCartResult getSuccess() {
    return this.success;
  }

  public checkItem_result setSuccess(CheckCartResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((CheckCartResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof checkItem_result)
      return this.equals((checkItem_result)that);
    return false;
  }

  public boolean equals(checkItem_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(checkItem_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    checkItem_result typedOther = (checkItem_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new CheckCartResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("checkItem_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class getTimeStamp_args implements TBase<getTimeStamp_args, getTimeStamp_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("getTimeStamp_args");

  private static final TField USER_KEY_FIELD_DESC = new TField("userKey", TType.STRING, (short)1);
  private static final TField SOURCE_FIELD_DESC = new TField("source", TType.I32, (short)2);


  public String userKey;
  public int source;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_KEY((short)1, "userKey"),
    SOURCE((short)2, "source");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_KEY
  	return USER_KEY;
        case 2: // SOURCE
  	return SOURCE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SOURCE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_KEY, new FieldMetaData("userKey", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new FieldMetaData("source", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(getTimeStamp_args.class, metaDataMap);
  }


  public getTimeStamp_args() {
  }

  public getTimeStamp_args(
    String userKey,
    int source)
  {
    this();
    this.userKey = userKey;
    this.source = source;
    setSourceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public getTimeStamp_args(getTimeStamp_args other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUserKey()) {
      this.userKey = other.userKey;
    }
    this.source = other.source;
  }

  public getTimeStamp_args deepCopy() {
    return new getTimeStamp_args(this);
  }

  @Override
  public void clear() {
    this.userKey = null;
    setSourceIsSet(false);
    this.source = 0;
  }

  public String getUserKey() {
    return this.userKey;
  }

  public getTimeStamp_args setUserKey(String userKey) {
    this.userKey = userKey;
    
    return this;
  }

  public void unsetUserKey() {
    this.userKey = null;
  }

  /** Returns true if field userKey is set (has been asigned a value) and false otherwise */
  public boolean isSetUserKey() {
    return this.userKey != null;
  }

  public void setUserKeyIsSet(boolean value) {
    if (!value) {
      this.userKey = null;
    }
  }

  public int getSource() {
    return this.source;
  }

  public getTimeStamp_args setSource(int source) {
    this.source = source;
    setSourceIsSet(true);

    return this;
  }

  public void unsetSource() {
  __isset_bit_vector.clear(__SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been asigned a value) and false otherwise */
  public boolean isSetSource() {
    return __isset_bit_vector.get(__SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_KEY:
      if (value == null) {
        unsetUserKey();
      } else {
        setUserKey((String)value);
      }
      break;
    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_KEY:
      return getUserKey();
    case SOURCE:
      return new Integer(getSource());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_KEY:
      return isSetUserKey();
    case SOURCE:
      return isSetSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof getTimeStamp_args)
      return this.equals((getTimeStamp_args)that);
    return false;
  }

  public boolean equals(getTimeStamp_args that) {
    if (that == null)
      return false;
    boolean this_present_userKey = true && this.isSetUserKey();
    boolean that_present_userKey = true && that.isSetUserKey();
    if (this_present_userKey || that_present_userKey) {
      if (!(this_present_userKey && that_present_userKey))
        return false;
      if (!this.userKey.equals(that.userKey))
        return false;
    }
    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_userKey = true && (isSetUserKey());
    builder.append(present_userKey);
    if (present_userKey)
      builder.append(userKey);
    boolean present_source = true;
    builder.append(present_source);
    if (present_source)
      builder.append(source);
    return builder.toHashCode();
  }

  public int compareTo(getTimeStamp_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    getTimeStamp_args typedOther = (getTimeStamp_args)other;

    lastComparison = Boolean.valueOf(isSetUserKey()).compareTo(typedOther.isSetUserKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserKey()) {
      lastComparison = TBaseHelper.compareTo(this.userKey, typedOther.userKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // USER_KEY
          if (field.type == TType.STRING) {
            this.userKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SOURCE
          if (field.type == TType.I32) {
            this.source = iprot.readI32();
            setSourceIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.userKey != null) {
      oprot.writeFieldBegin(USER_KEY_FIELD_DESC);
      oprot.writeString(this.userKey);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
    oprot.writeI32(this.source);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("getTimeStamp_args(");
    boolean first = true;
    sb.append("userKey:");
    if (this.userKey == null) {
      sb.append("null");
    } else {
      sb.append(this.userKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class getTimeStamp_result implements TBase<getTimeStamp_result, getTimeStamp_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("getTimeStamp_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.StringResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.StringResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(getTimeStamp_result.class, metaDataMap);
  }


  public getTimeStamp_result() {
  }

  public getTimeStamp_result(
    com.jfshare.finagle.thrift.result.StringResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public getTimeStamp_result(getTimeStamp_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.StringResult(other.success);
    }
  }

  public getTimeStamp_result deepCopy() {
    return new getTimeStamp_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.StringResult getSuccess() {
    return this.success;
  }

  public getTimeStamp_result setSuccess(com.jfshare.finagle.thrift.result.StringResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.StringResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof getTimeStamp_result)
      return this.equals((getTimeStamp_result)that);
    return false;
  }

  public boolean equals(getTimeStamp_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(getTimeStamp_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    getTimeStamp_result typedOther = (getTimeStamp_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.StringResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("getTimeStamp_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


}