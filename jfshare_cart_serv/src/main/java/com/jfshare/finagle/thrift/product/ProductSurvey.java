/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.product;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ProductSurvey implements TBase<ProductSurvey, ProductSurvey._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ProductSurvey");

  private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, (short)1);
  private static final TField PRODUCT_NAME_FIELD_DESC = new TField("productName", TType.STRING, (short)2);
  private static final TField SUBJECT_ID_FIELD_DESC = new TField("subjectId", TType.I32, (short)3);
  private static final TField BRAND_ID_FIELD_DESC = new TField("brandId", TType.I32, (short)4);
  private static final TField ORG_PRICE_FIELD_DESC = new TField("orgPrice", TType.STRING, (short)5);
  private static final TField CUR_PRICE_FIELD_DESC = new TField("curPrice", TType.STRING, (short)6);
  private static final TField ACTIVE_STOCK_FIELD_DESC = new TField("activeStock", TType.I32, (short)7);
  private static final TField TOTAL_SALES_FIELD_DESC = new TField("totalSales", TType.I32, (short)8);
  private static final TField ACTIVE_STATE_FIELD_DESC = new TField("activeState", TType.I32, (short)9);
  private static final TField IMG_URL_FIELD_DESC = new TField("imgUrl", TType.STRING, (short)10);
  private static final TField VICE_NAME_FIELD_DESC = new TField("viceName", TType.STRING, (short)11);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.STRING, (short)12);
  private static final TField SELLER_ID_FIELD_DESC = new TField("sellerId", TType.I32, (short)13);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)14);
  private static final TField CLICK_RATE_FIELD_DESC = new TField("clickRate", TType.I64, (short)15);
  private static final TField STOREHOUSE_IDS_FIELD_DESC = new TField("storehouseIds", TType.STRING, (short)16);
  private static final TField POSTAGE_ID_FIELD_DESC = new TField("postageId", TType.I32, (short)17);


  public String productId;
  public String productName;
  public int subjectId;
  public int brandId;
  public String orgPrice;
  public String curPrice;
  public int activeStock;
  public int totalSales;
  public int activeState;
  public String imgUrl;
  public String viceName;
  public String createTime;
  public int sellerId;
  public int type;
  public long clickRate;
  public String storehouseIds;
  public int postageId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PRODUCT_ID((short)1, "productId"),
    PRODUCT_NAME((short)2, "productName"),
    SUBJECT_ID((short)3, "subjectId"),
    BRAND_ID((short)4, "brandId"),
    ORG_PRICE((short)5, "orgPrice"),
    CUR_PRICE((short)6, "curPrice"),
    ACTIVE_STOCK((short)7, "activeStock"),
    TOTAL_SALES((short)8, "totalSales"),
    ACTIVE_STATE((short)9, "activeState"),
    IMG_URL((short)10, "imgUrl"),
    VICE_NAME((short)11, "viceName"),
    CREATE_TIME((short)12, "createTime"),
    SELLER_ID((short)13, "sellerId"),
    TYPE((short)14, "type"),
    CLICK_RATE((short)15, "clickRate"),
    STOREHOUSE_IDS((short)16, "storehouseIds"),
    POSTAGE_ID((short)17, "postageId");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
  	return PRODUCT_ID;
        case 2: // PRODUCT_NAME
  	return PRODUCT_NAME;
        case 3: // SUBJECT_ID
  	return SUBJECT_ID;
        case 4: // BRAND_ID
  	return BRAND_ID;
        case 5: // ORG_PRICE
  	return ORG_PRICE;
        case 6: // CUR_PRICE
  	return CUR_PRICE;
        case 7: // ACTIVE_STOCK
  	return ACTIVE_STOCK;
        case 8: // TOTAL_SALES
  	return TOTAL_SALES;
        case 9: // ACTIVE_STATE
  	return ACTIVE_STATE;
        case 10: // IMG_URL
  	return IMG_URL;
        case 11: // VICE_NAME
  	return VICE_NAME;
        case 12: // CREATE_TIME
  	return CREATE_TIME;
        case 13: // SELLER_ID
  	return SELLER_ID;
        case 14: // TYPE
  	return TYPE;
        case 15: // CLICK_RATE
  	return CLICK_RATE;
        case 16: // STOREHOUSE_IDS
  	return STOREHOUSE_IDS;
        case 17: // POSTAGE_ID
  	return POSTAGE_ID;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SUBJECTID_ISSET_ID = 0;
  private static final int __BRANDID_ISSET_ID = 1;
  private static final int __ACTIVESTOCK_ISSET_ID = 2;
  private static final int __TOTALSALES_ISSET_ID = 3;
  private static final int __ACTIVESTATE_ISSET_ID = 4;
  private static final int __SELLERID_ISSET_ID = 5;
  private static final int __TYPE_ISSET_ID = 6;
  private static final int __CLICKRATE_ISSET_ID = 7;
  private static final int __POSTAGEID_ISSET_ID = 8;
  private BitSet __isset_bit_vector = new BitSet(9);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new FieldMetaData("productId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new FieldMetaData("productName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SUBJECT_ID, new FieldMetaData("subjectId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.BRAND_ID, new FieldMetaData("brandId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ORG_PRICE, new FieldMetaData("orgPrice", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CUR_PRICE, new FieldMetaData("curPrice", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_STOCK, new FieldMetaData("activeStock", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TOTAL_SALES, new FieldMetaData("totalSales", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ACTIVE_STATE, new FieldMetaData("activeState", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.IMG_URL, new FieldMetaData("imgUrl", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.VICE_NAME, new FieldMetaData("viceName", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SELLER_ID, new FieldMetaData("sellerId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TYPE, new FieldMetaData("type", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CLICK_RATE, new FieldMetaData("clickRate", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.STOREHOUSE_IDS, new FieldMetaData("storehouseIds", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.POSTAGE_ID, new FieldMetaData("postageId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ProductSurvey.class, metaDataMap);
  }


  public ProductSurvey() {
  }

  public ProductSurvey(
    String productId,
    String productName,
    int subjectId,
    int brandId,
    String orgPrice,
    String curPrice,
    int activeStock,
    int totalSales,
    int activeState,
    String imgUrl)
  {
    this();
    this.productId = productId;
    this.productName = productName;
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);
    this.brandId = brandId;
    setBrandIdIsSet(true);
    this.orgPrice = orgPrice;
    this.curPrice = curPrice;
    this.activeStock = activeStock;
    setActiveStockIsSet(true);
    this.totalSales = totalSales;
    setTotalSalesIsSet(true);
    this.activeState = activeState;
    setActiveStateIsSet(true);
    this.imgUrl = imgUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductSurvey(ProductSurvey other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.subjectId = other.subjectId;
    this.brandId = other.brandId;
    if (other.isSetOrgPrice()) {
      this.orgPrice = other.orgPrice;
    }
    if (other.isSetCurPrice()) {
      this.curPrice = other.curPrice;
    }
    this.activeStock = other.activeStock;
    this.totalSales = other.totalSales;
    this.activeState = other.activeState;
    if (other.isSetImgUrl()) {
      this.imgUrl = other.imgUrl;
    }
    if (other.isSetViceName()) {
      this.viceName = other.viceName;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.sellerId = other.sellerId;
    this.type = other.type;
    this.clickRate = other.clickRate;
    if (other.isSetStorehouseIds()) {
      this.storehouseIds = other.storehouseIds;
    }
    this.postageId = other.postageId;
  }

  public ProductSurvey deepCopy() {
    return new ProductSurvey(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    this.productName = null;
    setSubjectIdIsSet(false);
    this.subjectId = 0;
    setBrandIdIsSet(false);
    this.brandId = 0;
    this.orgPrice = null;
    this.curPrice = null;
    setActiveStockIsSet(false);
    this.activeStock = 0;
    setTotalSalesIsSet(false);
    this.totalSales = 0;
    setActiveStateIsSet(false);
    this.activeState = 0;
    this.imgUrl = null;
    this.viceName = null;
    this.createTime = null;
    setSellerIdIsSet(false);
    this.sellerId = 0;
    setTypeIsSet(false);
    this.type = 0;
    setClickRateIsSet(false);
    this.clickRate = 0;
    this.storehouseIds = null;
    setPostageIdIsSet(false);
    this.postageId = 0;
  }

  public String getProductId() {
    return this.productId;
  }

  public ProductSurvey setProductId(String productId) {
    this.productId = productId;
    
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been asigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public ProductSurvey setProductName(String productName) {
    this.productName = productName;
    
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been asigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public int getSubjectId() {
    return this.subjectId;
  }

  public ProductSurvey setSubjectId(int subjectId) {
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);

    return this;
  }

  public void unsetSubjectId() {
  __isset_bit_vector.clear(__SUBJECTID_ISSET_ID);
  }

  /** Returns true if field subjectId is set (has been asigned a value) and false otherwise */
  public boolean isSetSubjectId() {
    return __isset_bit_vector.get(__SUBJECTID_ISSET_ID);
  }

  public void setSubjectIdIsSet(boolean value) {
    __isset_bit_vector.set(__SUBJECTID_ISSET_ID, value);
  }

  public int getBrandId() {
    return this.brandId;
  }

  public ProductSurvey setBrandId(int brandId) {
    this.brandId = brandId;
    setBrandIdIsSet(true);

    return this;
  }

  public void unsetBrandId() {
  __isset_bit_vector.clear(__BRANDID_ISSET_ID);
  }

  /** Returns true if field brandId is set (has been asigned a value) and false otherwise */
  public boolean isSetBrandId() {
    return __isset_bit_vector.get(__BRANDID_ISSET_ID);
  }

  public void setBrandIdIsSet(boolean value) {
    __isset_bit_vector.set(__BRANDID_ISSET_ID, value);
  }

  public String getOrgPrice() {
    return this.orgPrice;
  }

  public ProductSurvey setOrgPrice(String orgPrice) {
    this.orgPrice = orgPrice;
    
    return this;
  }

  public void unsetOrgPrice() {
    this.orgPrice = null;
  }

  /** Returns true if field orgPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetOrgPrice() {
    return this.orgPrice != null;
  }

  public void setOrgPriceIsSet(boolean value) {
    if (!value) {
      this.orgPrice = null;
    }
  }

  public String getCurPrice() {
    return this.curPrice;
  }

  public ProductSurvey setCurPrice(String curPrice) {
    this.curPrice = curPrice;
    
    return this;
  }

  public void unsetCurPrice() {
    this.curPrice = null;
  }

  /** Returns true if field curPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetCurPrice() {
    return this.curPrice != null;
  }

  public void setCurPriceIsSet(boolean value) {
    if (!value) {
      this.curPrice = null;
    }
  }

  public int getActiveStock() {
    return this.activeStock;
  }

  public ProductSurvey setActiveStock(int activeStock) {
    this.activeStock = activeStock;
    setActiveStockIsSet(true);

    return this;
  }

  public void unsetActiveStock() {
  __isset_bit_vector.clear(__ACTIVESTOCK_ISSET_ID);
  }

  /** Returns true if field activeStock is set (has been asigned a value) and false otherwise */
  public boolean isSetActiveStock() {
    return __isset_bit_vector.get(__ACTIVESTOCK_ISSET_ID);
  }

  public void setActiveStockIsSet(boolean value) {
    __isset_bit_vector.set(__ACTIVESTOCK_ISSET_ID, value);
  }

  public int getTotalSales() {
    return this.totalSales;
  }

  public ProductSurvey setTotalSales(int totalSales) {
    this.totalSales = totalSales;
    setTotalSalesIsSet(true);

    return this;
  }

  public void unsetTotalSales() {
  __isset_bit_vector.clear(__TOTALSALES_ISSET_ID);
  }

  /** Returns true if field totalSales is set (has been asigned a value) and false otherwise */
  public boolean isSetTotalSales() {
    return __isset_bit_vector.get(__TOTALSALES_ISSET_ID);
  }

  public void setTotalSalesIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALSALES_ISSET_ID, value);
  }

  public int getActiveState() {
    return this.activeState;
  }

  public ProductSurvey setActiveState(int activeState) {
    this.activeState = activeState;
    setActiveStateIsSet(true);

    return this;
  }

  public void unsetActiveState() {
  __isset_bit_vector.clear(__ACTIVESTATE_ISSET_ID);
  }

  /** Returns true if field activeState is set (has been asigned a value) and false otherwise */
  public boolean isSetActiveState() {
    return __isset_bit_vector.get(__ACTIVESTATE_ISSET_ID);
  }

  public void setActiveStateIsSet(boolean value) {
    __isset_bit_vector.set(__ACTIVESTATE_ISSET_ID, value);
  }

  public String getImgUrl() {
    return this.imgUrl;
  }

  public ProductSurvey setImgUrl(String imgUrl) {
    this.imgUrl = imgUrl;
    
    return this;
  }

  public void unsetImgUrl() {
    this.imgUrl = null;
  }

  /** Returns true if field imgUrl is set (has been asigned a value) and false otherwise */
  public boolean isSetImgUrl() {
    return this.imgUrl != null;
  }

  public void setImgUrlIsSet(boolean value) {
    if (!value) {
      this.imgUrl = null;
    }
  }

  public String getViceName() {
    return this.viceName;
  }

  public ProductSurvey setViceName(String viceName) {
    this.viceName = viceName;
    
    return this;
  }

  public void unsetViceName() {
    this.viceName = null;
  }

  /** Returns true if field viceName is set (has been asigned a value) and false otherwise */
  public boolean isSetViceName() {
    return this.viceName != null;
  }

  public void setViceNameIsSet(boolean value) {
    if (!value) {
      this.viceName = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public ProductSurvey setCreateTime(String createTime) {
    this.createTime = createTime;
    
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getSellerId() {
    return this.sellerId;
  }

  public ProductSurvey setSellerId(int sellerId) {
    this.sellerId = sellerId;
    setSellerIdIsSet(true);

    return this;
  }

  public void unsetSellerId() {
  __isset_bit_vector.clear(__SELLERID_ISSET_ID);
  }

  /** Returns true if field sellerId is set (has been asigned a value) and false otherwise */
  public boolean isSetSellerId() {
    return __isset_bit_vector.get(__SELLERID_ISSET_ID);
  }

  public void setSellerIdIsSet(boolean value) {
    __isset_bit_vector.set(__SELLERID_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public ProductSurvey setType(int type) {
    this.type = type;
    setTypeIsSet(true);

    return this;
  }

  public void unsetType() {
  __isset_bit_vector.clear(__TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been asigned a value) and false otherwise */
  public boolean isSetType() {
    return __isset_bit_vector.get(__TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bit_vector.set(__TYPE_ISSET_ID, value);
  }

  public long getClickRate() {
    return this.clickRate;
  }

  public ProductSurvey setClickRate(long clickRate) {
    this.clickRate = clickRate;
    setClickRateIsSet(true);

    return this;
  }

  public void unsetClickRate() {
  __isset_bit_vector.clear(__CLICKRATE_ISSET_ID);
  }

  /** Returns true if field clickRate is set (has been asigned a value) and false otherwise */
  public boolean isSetClickRate() {
    return __isset_bit_vector.get(__CLICKRATE_ISSET_ID);
  }

  public void setClickRateIsSet(boolean value) {
    __isset_bit_vector.set(__CLICKRATE_ISSET_ID, value);
  }

  public String getStorehouseIds() {
    return this.storehouseIds;
  }

  public ProductSurvey setStorehouseIds(String storehouseIds) {
    this.storehouseIds = storehouseIds;
    
    return this;
  }

  public void unsetStorehouseIds() {
    this.storehouseIds = null;
  }

  /** Returns true if field storehouseIds is set (has been asigned a value) and false otherwise */
  public boolean isSetStorehouseIds() {
    return this.storehouseIds != null;
  }

  public void setStorehouseIdsIsSet(boolean value) {
    if (!value) {
      this.storehouseIds = null;
    }
  }

  public int getPostageId() {
    return this.postageId;
  }

  public ProductSurvey setPostageId(int postageId) {
    this.postageId = postageId;
    setPostageIdIsSet(true);

    return this;
  }

  public void unsetPostageId() {
  __isset_bit_vector.clear(__POSTAGEID_ISSET_ID);
  }

  /** Returns true if field postageId is set (has been asigned a value) and false otherwise */
  public boolean isSetPostageId() {
    return __isset_bit_vector.get(__POSTAGEID_ISSET_ID);
  }

  public void setPostageIdIsSet(boolean value) {
    __isset_bit_vector.set(__POSTAGEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;
    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;
    case SUBJECT_ID:
      if (value == null) {
        unsetSubjectId();
      } else {
        setSubjectId((Integer)value);
      }
      break;
    case BRAND_ID:
      if (value == null) {
        unsetBrandId();
      } else {
        setBrandId((Integer)value);
      }
      break;
    case ORG_PRICE:
      if (value == null) {
        unsetOrgPrice();
      } else {
        setOrgPrice((String)value);
      }
      break;
    case CUR_PRICE:
      if (value == null) {
        unsetCurPrice();
      } else {
        setCurPrice((String)value);
      }
      break;
    case ACTIVE_STOCK:
      if (value == null) {
        unsetActiveStock();
      } else {
        setActiveStock((Integer)value);
      }
      break;
    case TOTAL_SALES:
      if (value == null) {
        unsetTotalSales();
      } else {
        setTotalSales((Integer)value);
      }
      break;
    case ACTIVE_STATE:
      if (value == null) {
        unsetActiveState();
      } else {
        setActiveState((Integer)value);
      }
      break;
    case IMG_URL:
      if (value == null) {
        unsetImgUrl();
      } else {
        setImgUrl((String)value);
      }
      break;
    case VICE_NAME:
      if (value == null) {
        unsetViceName();
      } else {
        setViceName((String)value);
      }
      break;
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;
    case SELLER_ID:
      if (value == null) {
        unsetSellerId();
      } else {
        setSellerId((Integer)value);
      }
      break;
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;
    case CLICK_RATE:
      if (value == null) {
        unsetClickRate();
      } else {
        setClickRate((Long)value);
      }
      break;
    case STOREHOUSE_IDS:
      if (value == null) {
        unsetStorehouseIds();
      } else {
        setStorehouseIds((String)value);
      }
      break;
    case POSTAGE_ID:
      if (value == null) {
        unsetPostageId();
      } else {
        setPostageId((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();
    case PRODUCT_NAME:
      return getProductName();
    case SUBJECT_ID:
      return new Integer(getSubjectId());
    case BRAND_ID:
      return new Integer(getBrandId());
    case ORG_PRICE:
      return getOrgPrice();
    case CUR_PRICE:
      return getCurPrice();
    case ACTIVE_STOCK:
      return new Integer(getActiveStock());
    case TOTAL_SALES:
      return new Integer(getTotalSales());
    case ACTIVE_STATE:
      return new Integer(getActiveState());
    case IMG_URL:
      return getImgUrl();
    case VICE_NAME:
      return getViceName();
    case CREATE_TIME:
      return getCreateTime();
    case SELLER_ID:
      return new Integer(getSellerId());
    case TYPE:
      return new Integer(getType());
    case CLICK_RATE:
      return new Long(getClickRate());
    case STOREHOUSE_IDS:
      return getStorehouseIds();
    case POSTAGE_ID:
      return new Integer(getPostageId());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_NAME:
      return isSetProductName();
    case SUBJECT_ID:
      return isSetSubjectId();
    case BRAND_ID:
      return isSetBrandId();
    case ORG_PRICE:
      return isSetOrgPrice();
    case CUR_PRICE:
      return isSetCurPrice();
    case ACTIVE_STOCK:
      return isSetActiveStock();
    case TOTAL_SALES:
      return isSetTotalSales();
    case ACTIVE_STATE:
      return isSetActiveState();
    case IMG_URL:
      return isSetImgUrl();
    case VICE_NAME:
      return isSetViceName();
    case CREATE_TIME:
      return isSetCreateTime();
    case SELLER_ID:
      return isSetSellerId();
    case TYPE:
      return isSetType();
    case CLICK_RATE:
      return isSetClickRate();
    case STOREHOUSE_IDS:
      return isSetStorehouseIds();
    case POSTAGE_ID:
      return isSetPostageId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductSurvey)
      return this.equals((ProductSurvey)that);
    return false;
  }

  public boolean equals(ProductSurvey that) {
    if (that == null)
      return false;
    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }
    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }
    boolean this_present_subjectId = true;
    boolean that_present_subjectId = true;
    if (this_present_subjectId || that_present_subjectId) {
      if (!(this_present_subjectId && that_present_subjectId))
        return false;
      if (this.subjectId != that.subjectId)
        return false;
    }
    boolean this_present_brandId = true;
    boolean that_present_brandId = true;
    if (this_present_brandId || that_present_brandId) {
      if (!(this_present_brandId && that_present_brandId))
        return false;
      if (this.brandId != that.brandId)
        return false;
    }
    boolean this_present_orgPrice = true && this.isSetOrgPrice();
    boolean that_present_orgPrice = true && that.isSetOrgPrice();
    if (this_present_orgPrice || that_present_orgPrice) {
      if (!(this_present_orgPrice && that_present_orgPrice))
        return false;
      if (!this.orgPrice.equals(that.orgPrice))
        return false;
    }
    boolean this_present_curPrice = true && this.isSetCurPrice();
    boolean that_present_curPrice = true && that.isSetCurPrice();
    if (this_present_curPrice || that_present_curPrice) {
      if (!(this_present_curPrice && that_present_curPrice))
        return false;
      if (!this.curPrice.equals(that.curPrice))
        return false;
    }
    boolean this_present_activeStock = true;
    boolean that_present_activeStock = true;
    if (this_present_activeStock || that_present_activeStock) {
      if (!(this_present_activeStock && that_present_activeStock))
        return false;
      if (this.activeStock != that.activeStock)
        return false;
    }
    boolean this_present_totalSales = true;
    boolean that_present_totalSales = true;
    if (this_present_totalSales || that_present_totalSales) {
      if (!(this_present_totalSales && that_present_totalSales))
        return false;
      if (this.totalSales != that.totalSales)
        return false;
    }
    boolean this_present_activeState = true;
    boolean that_present_activeState = true;
    if (this_present_activeState || that_present_activeState) {
      if (!(this_present_activeState && that_present_activeState))
        return false;
      if (this.activeState != that.activeState)
        return false;
    }
    boolean this_present_imgUrl = true && this.isSetImgUrl();
    boolean that_present_imgUrl = true && that.isSetImgUrl();
    if (this_present_imgUrl || that_present_imgUrl) {
      if (!(this_present_imgUrl && that_present_imgUrl))
        return false;
      if (!this.imgUrl.equals(that.imgUrl))
        return false;
    }
    boolean this_present_viceName = true && this.isSetViceName();
    boolean that_present_viceName = true && that.isSetViceName();
    if (this_present_viceName || that_present_viceName) {
      if (!(this_present_viceName && that_present_viceName))
        return false;
      if (!this.viceName.equals(that.viceName))
        return false;
    }
    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }
    boolean this_present_sellerId = true && this.isSetSellerId();
    boolean that_present_sellerId = true && that.isSetSellerId();
    if (this_present_sellerId || that_present_sellerId) {
      if (!(this_present_sellerId && that_present_sellerId))
        return false;
      if (this.sellerId != that.sellerId)
        return false;
    }
    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }
    boolean this_present_clickRate = true && this.isSetClickRate();
    boolean that_present_clickRate = true && that.isSetClickRate();
    if (this_present_clickRate || that_present_clickRate) {
      if (!(this_present_clickRate && that_present_clickRate))
        return false;
      if (this.clickRate != that.clickRate)
        return false;
    }
    boolean this_present_storehouseIds = true && this.isSetStorehouseIds();
    boolean that_present_storehouseIds = true && that.isSetStorehouseIds();
    if (this_present_storehouseIds || that_present_storehouseIds) {
      if (!(this_present_storehouseIds && that_present_storehouseIds))
        return false;
      if (!this.storehouseIds.equals(that.storehouseIds))
        return false;
    }
    boolean this_present_postageId = true && this.isSetPostageId();
    boolean that_present_postageId = true && that.isSetPostageId();
    if (this_present_postageId || that_present_postageId) {
      if (!(this_present_postageId && that_present_postageId))
        return false;
      if (this.postageId != that.postageId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_productId = true && (isSetProductId());
    builder.append(present_productId);
    if (present_productId)
      builder.append(productId);
    boolean present_productName = true && (isSetProductName());
    builder.append(present_productName);
    if (present_productName)
      builder.append(productName);
    boolean present_subjectId = true;
    builder.append(present_subjectId);
    if (present_subjectId)
      builder.append(subjectId);
    boolean present_brandId = true;
    builder.append(present_brandId);
    if (present_brandId)
      builder.append(brandId);
    boolean present_orgPrice = true && (isSetOrgPrice());
    builder.append(present_orgPrice);
    if (present_orgPrice)
      builder.append(orgPrice);
    boolean present_curPrice = true && (isSetCurPrice());
    builder.append(present_curPrice);
    if (present_curPrice)
      builder.append(curPrice);
    boolean present_activeStock = true;
    builder.append(present_activeStock);
    if (present_activeStock)
      builder.append(activeStock);
    boolean present_totalSales = true;
    builder.append(present_totalSales);
    if (present_totalSales)
      builder.append(totalSales);
    boolean present_activeState = true;
    builder.append(present_activeState);
    if (present_activeState)
      builder.append(activeState);
    boolean present_imgUrl = true && (isSetImgUrl());
    builder.append(present_imgUrl);
    if (present_imgUrl)
      builder.append(imgUrl);
    boolean present_viceName = true && (isSetViceName());
    builder.append(present_viceName);
    if (present_viceName)
      builder.append(viceName);
    boolean present_createTime = true && (isSetCreateTime());
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);
    boolean present_sellerId = true && (isSetSellerId());
    builder.append(present_sellerId);
    if (present_sellerId)
      builder.append(sellerId);
    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type);
    boolean present_clickRate = true && (isSetClickRate());
    builder.append(present_clickRate);
    if (present_clickRate)
      builder.append(clickRate);
    boolean present_storehouseIds = true && (isSetStorehouseIds());
    builder.append(present_storehouseIds);
    if (present_storehouseIds)
      builder.append(storehouseIds);
    boolean present_postageId = true && (isSetPostageId());
    builder.append(present_postageId);
    if (present_postageId)
      builder.append(postageId);
    return builder.toHashCode();
  }

  public int compareTo(ProductSurvey other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ProductSurvey typedOther = (ProductSurvey)other;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = TBaseHelper.compareTo(this.productId, typedOther.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(typedOther.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = TBaseHelper.compareTo(this.productName, typedOther.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubjectId()).compareTo(typedOther.isSetSubjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectId()) {
      lastComparison = TBaseHelper.compareTo(this.subjectId, typedOther.subjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandId()).compareTo(typedOther.isSetBrandId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandId()) {
      lastComparison = TBaseHelper.compareTo(this.brandId, typedOther.brandId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgPrice()).compareTo(typedOther.isSetOrgPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgPrice()) {
      lastComparison = TBaseHelper.compareTo(this.orgPrice, typedOther.orgPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurPrice()).compareTo(typedOther.isSetCurPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurPrice()) {
      lastComparison = TBaseHelper.compareTo(this.curPrice, typedOther.curPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveStock()).compareTo(typedOther.isSetActiveStock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveStock()) {
      lastComparison = TBaseHelper.compareTo(this.activeStock, typedOther.activeStock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalSales()).compareTo(typedOther.isSetTotalSales());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalSales()) {
      lastComparison = TBaseHelper.compareTo(this.totalSales, typedOther.totalSales);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveState()).compareTo(typedOther.isSetActiveState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveState()) {
      lastComparison = TBaseHelper.compareTo(this.activeState, typedOther.activeState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgUrl()).compareTo(typedOther.isSetImgUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgUrl()) {
      lastComparison = TBaseHelper.compareTo(this.imgUrl, typedOther.imgUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViceName()).compareTo(typedOther.isSetViceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViceName()) {
      lastComparison = TBaseHelper.compareTo(this.viceName, typedOther.viceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerId()).compareTo(typedOther.isSetSellerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerId()) {
      lastComparison = TBaseHelper.compareTo(this.sellerId, typedOther.sellerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClickRate()).compareTo(typedOther.isSetClickRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClickRate()) {
      lastComparison = TBaseHelper.compareTo(this.clickRate, typedOther.clickRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStorehouseIds()).compareTo(typedOther.isSetStorehouseIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorehouseIds()) {
      lastComparison = TBaseHelper.compareTo(this.storehouseIds, typedOther.storehouseIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostageId()).compareTo(typedOther.isSetPostageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostageId()) {
      lastComparison = TBaseHelper.compareTo(this.postageId, typedOther.postageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PRODUCT_ID
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PRODUCT_NAME
          if (field.type == TType.STRING) {
            this.productName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SUBJECT_ID
          if (field.type == TType.I32) {
            this.subjectId = iprot.readI32();
            setSubjectIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // BRAND_ID
          if (field.type == TType.I32) {
            this.brandId = iprot.readI32();
            setBrandIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ORG_PRICE
          if (field.type == TType.STRING) {
            this.orgPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // CUR_PRICE
          if (field.type == TType.STRING) {
            this.curPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // ACTIVE_STOCK
          if (field.type == TType.I32) {
            this.activeStock = iprot.readI32();
            setActiveStockIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // TOTAL_SALES
          if (field.type == TType.I32) {
            this.totalSales = iprot.readI32();
            setTotalSalesIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // ACTIVE_STATE
          if (field.type == TType.I32) {
            this.activeState = iprot.readI32();
            setActiveStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // IMG_URL
          if (field.type == TType.STRING) {
            this.imgUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // VICE_NAME
          if (field.type == TType.STRING) {
            this.viceName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // CREATE_TIME
          if (field.type == TType.STRING) {
            this.createTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // SELLER_ID
          if (field.type == TType.I32) {
            this.sellerId = iprot.readI32();
            setSellerIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // TYPE
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            setTypeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // CLICK_RATE
          if (field.type == TType.I64) {
            this.clickRate = iprot.readI64();
            setClickRateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // STOREHOUSE_IDS
          if (field.type == TType.STRING) {
            this.storehouseIds = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // POSTAGE_ID
          if (field.type == TType.I32) {
            this.postageId = iprot.readI32();
            setPostageIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.productId != null) {
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    if (this.productName != null) {
      oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
      oprot.writeString(this.productName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SUBJECT_ID_FIELD_DESC);
    oprot.writeI32(this.subjectId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BRAND_ID_FIELD_DESC);
    oprot.writeI32(this.brandId);
    oprot.writeFieldEnd();
    if (this.orgPrice != null) {
      oprot.writeFieldBegin(ORG_PRICE_FIELD_DESC);
      oprot.writeString(this.orgPrice);
      oprot.writeFieldEnd();
    }
    if (this.curPrice != null) {
      oprot.writeFieldBegin(CUR_PRICE_FIELD_DESC);
      oprot.writeString(this.curPrice);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ACTIVE_STOCK_FIELD_DESC);
    oprot.writeI32(this.activeStock);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TOTAL_SALES_FIELD_DESC);
    oprot.writeI32(this.totalSales);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ACTIVE_STATE_FIELD_DESC);
    oprot.writeI32(this.activeState);
    oprot.writeFieldEnd();
    if (this.imgUrl != null) {
      oprot.writeFieldBegin(IMG_URL_FIELD_DESC);
      oprot.writeString(this.imgUrl);
      oprot.writeFieldEnd();
    }
    if (this.viceName != null) {
      if (isSetViceName()) {
        oprot.writeFieldBegin(VICE_NAME_FIELD_DESC);
        oprot.writeString(this.viceName);
        oprot.writeFieldEnd();
      }
    }
    if (this.createTime != null) {
      if (isSetCreateTime()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(this.createTime);
        oprot.writeFieldEnd();
      }
    }
    if (isSetSellerId()) {
      oprot.writeFieldBegin(SELLER_ID_FIELD_DESC);
      oprot.writeI32(this.sellerId);
      oprot.writeFieldEnd();
    }
    if (isSetType()) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type);
      oprot.writeFieldEnd();
    }
    if (isSetClickRate()) {
      oprot.writeFieldBegin(CLICK_RATE_FIELD_DESC);
      oprot.writeI64(this.clickRate);
      oprot.writeFieldEnd();
    }
    if (this.storehouseIds != null) {
      if (isSetStorehouseIds()) {
        oprot.writeFieldBegin(STOREHOUSE_IDS_FIELD_DESC);
        oprot.writeString(this.storehouseIds);
        oprot.writeFieldEnd();
      }
    }
    if (isSetPostageId()) {
      oprot.writeFieldBegin(POSTAGE_ID_FIELD_DESC);
      oprot.writeI32(this.postageId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductSurvey(");
    boolean first = true;
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectId:");
    sb.append(this.subjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandId:");
    sb.append(this.brandId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgPrice:");
    if (this.orgPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.orgPrice);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("curPrice:");
    if (this.curPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.curPrice);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeStock:");
    sb.append(this.activeStock);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalSales:");
    sb.append(this.totalSales);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeState:");
    sb.append(this.activeState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imgUrl:");
    if (this.imgUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.imgUrl);
    }
    first = false;
    if (isSetViceName()) {
      if (!first) sb.append(", ");
      sb.append("viceName:");
      if (this.viceName == null) {
        sb.append("null");
      } else {
        sb.append(this.viceName);
      }
      first = false;
      }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
      }
    if (isSetSellerId()) {
      if (!first) sb.append(", ");
      sb.append("sellerId:");
      sb.append(this.sellerId);
      first = false;
      }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      }
    if (isSetClickRate()) {
      if (!first) sb.append(", ");
      sb.append("clickRate:");
      sb.append(this.clickRate);
      first = false;
      }
    if (isSetStorehouseIds()) {
      if (!first) sb.append(", ");
      sb.append("storehouseIds:");
      if (this.storehouseIds == null) {
        sb.append("null");
      } else {
        sb.append(this.storehouseIds);
      }
      first = false;
      }
    if (isSetPostageId()) {
      if (!first) sb.append(", ");
      sb.append("postageId:");
      sb.append(this.postageId);
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
