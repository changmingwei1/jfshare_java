/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.order;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class OrderInfo implements TBase<OrderInfo, OrderInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("OrderInfo");

  private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short)1);
  private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, (short)2);
  private static final TField PRODUCT_NAME_FIELD_DESC = new TField("productName", TType.STRING, (short)3);
  private static final TField VICE_NAME_FIELD_DESC = new TField("viceName", TType.STRING, (short)4);
  private static final TField SUBJECT_ID_FIELD_DESC = new TField("subjectId", TType.STRING, (short)5);
  private static final TField BRAND_ID_FIELD_DESC = new TField("brandId", TType.STRING, (short)6);
  private static final TField PRODUCT_SNAPSHOOT_ID_FIELD_DESC = new TField("productSnapshootId", TType.STRING, (short)7);
  private static final TField SKU_NUM_FIELD_DESC = new TField("skuNum", TType.STRING, (short)8);
  private static final TField SKU_DESC_FIELD_DESC = new TField("skuDesc", TType.STRING, (short)9);
  private static final TField CUR_PRICE_FIELD_DESC = new TField("curPrice", TType.STRING, (short)10);
  private static final TField ORG_PRICE_FIELD_DESC = new TField("orgPrice", TType.STRING, (short)11);
  private static final TField IMAGES_URL_FIELD_DESC = new TField("imagesUrl", TType.STRING, (short)12);
  private static final TField SHELF_FIELD_DESC = new TField("shelf", TType.STRING, (short)13);
  private static final TField SELLER_CLASS_NUM_FIELD_DESC = new TField("sellerClassNum", TType.STRING, (short)14);
  private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)15);
  private static final TField LAST_UPDATE_TIME_FIELD_DESC = new TField("lastUpdateTime", TType.STRING, (short)16);
  private static final TField LAST_UPDATE_USER_ID_FIELD_DESC = new TField("lastUpdateUserId", TType.I32, (short)17);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.STRING, (short)18);
  private static final TField CREATE_USER_ID_FIELD_DESC = new TField("createUserId", TType.I32, (short)19);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.STRING, (short)20);
  private static final TField WI_FIELD_DESC = new TField("wi", TType.STRING, (short)21);
  private static final TField EXCHANGE_SCORE_FIELD_DESC = new TField("exchangeScore", TType.I32, (short)22);
  private static final TField EXCHANGE_CASH_FIELD_DESC = new TField("exchangeCash", TType.STRING, (short)23);


  public String orderId;
  public String productId;
  public String productName;
  public String viceName;
  public String subjectId;
  public String brandId;
  public String productSnapshootId;
  public String skuNum;
  public String skuDesc;
  public String curPrice;
  public String orgPrice;
  public String imagesUrl;
  public String shelf;
  public String sellerClassNum;
  public int count;
  public String lastUpdateTime;
  public int lastUpdateUserId;
  public String createTime;
  public int createUserId;
  public String type;
  public String wi;
  public int exchangeScore;
  public String exchangeCash;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    PRODUCT_ID((short)2, "productId"),
    PRODUCT_NAME((short)3, "productName"),
    VICE_NAME((short)4, "viceName"),
    SUBJECT_ID((short)5, "subjectId"),
    BRAND_ID((short)6, "brandId"),
    PRODUCT_SNAPSHOOT_ID((short)7, "productSnapshootId"),
    SKU_NUM((short)8, "skuNum"),
    SKU_DESC((short)9, "skuDesc"),
    CUR_PRICE((short)10, "curPrice"),
    ORG_PRICE((short)11, "orgPrice"),
    IMAGES_URL((short)12, "imagesUrl"),
    SHELF((short)13, "shelf"),
    SELLER_CLASS_NUM((short)14, "sellerClassNum"),
    COUNT((short)15, "count"),
    LAST_UPDATE_TIME((short)16, "lastUpdateTime"),
    LAST_UPDATE_USER_ID((short)17, "lastUpdateUserId"),
    CREATE_TIME((short)18, "createTime"),
    CREATE_USER_ID((short)19, "createUserId"),
    TYPE((short)20, "type"),
    WI((short)21, "wi"),
    EXCHANGE_SCORE((short)22, "exchangeScore"),
    EXCHANGE_CASH((short)23, "exchangeCash");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
  	return ORDER_ID;
        case 2: // PRODUCT_ID
  	return PRODUCT_ID;
        case 3: // PRODUCT_NAME
  	return PRODUCT_NAME;
        case 4: // VICE_NAME
  	return VICE_NAME;
        case 5: // SUBJECT_ID
  	return SUBJECT_ID;
        case 6: // BRAND_ID
  	return BRAND_ID;
        case 7: // PRODUCT_SNAPSHOOT_ID
  	return PRODUCT_SNAPSHOOT_ID;
        case 8: // SKU_NUM
  	return SKU_NUM;
        case 9: // SKU_DESC
  	return SKU_DESC;
        case 10: // CUR_PRICE
  	return CUR_PRICE;
        case 11: // ORG_PRICE
  	return ORG_PRICE;
        case 12: // IMAGES_URL
  	return IMAGES_URL;
        case 13: // SHELF
  	return SHELF;
        case 14: // SELLER_CLASS_NUM
  	return SELLER_CLASS_NUM;
        case 15: // COUNT
  	return COUNT;
        case 16: // LAST_UPDATE_TIME
  	return LAST_UPDATE_TIME;
        case 17: // LAST_UPDATE_USER_ID
  	return LAST_UPDATE_USER_ID;
        case 18: // CREATE_TIME
  	return CREATE_TIME;
        case 19: // CREATE_USER_ID
  	return CREATE_USER_ID;
        case 20: // TYPE
  	return TYPE;
        case 21: // WI
  	return WI;
        case 22: // EXCHANGE_SCORE
  	return EXCHANGE_SCORE;
        case 23: // EXCHANGE_CASH
  	return EXCHANGE_CASH;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __COUNT_ISSET_ID = 0;
  private static final int __LASTUPDATEUSERID_ISSET_ID = 1;
  private static final int __CREATEUSERID_ISSET_ID = 2;
  private static final int __EXCHANGESCORE_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new FieldMetaData("productId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new FieldMetaData("productName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.VICE_NAME, new FieldMetaData("viceName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SUBJECT_ID, new FieldMetaData("subjectId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.BRAND_ID, new FieldMetaData("brandId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_SNAPSHOOT_ID, new FieldMetaData("productSnapshootId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SKU_NUM, new FieldMetaData("skuNum", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SKU_DESC, new FieldMetaData("skuDesc", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CUR_PRICE, new FieldMetaData("curPrice", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ORG_PRICE, new FieldMetaData("orgPrice", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.IMAGES_URL, new FieldMetaData("imagesUrl", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SHELF, new FieldMetaData("shelf", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SELLER_CLASS_NUM, new FieldMetaData("sellerClassNum", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new FieldMetaData("lastUpdateTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_USER_ID, new FieldMetaData("lastUpdateUserId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_USER_ID, new FieldMetaData("createUserId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.WI, new FieldMetaData("wi", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXCHANGE_SCORE, new FieldMetaData("exchangeScore", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.EXCHANGE_CASH, new FieldMetaData("exchangeCash", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(OrderInfo.class, metaDataMap);
  }


  public OrderInfo() {
  }

  public OrderInfo(
    String orderId,
    String productId,
    String productName,
    String viceName,
    String subjectId,
    String brandId,
    String productSnapshootId,
    String skuNum,
    String skuDesc,
    String curPrice,
    String orgPrice,
    String imagesUrl,
    String shelf,
    String sellerClassNum,
    int count,
    String lastUpdateTime,
    int lastUpdateUserId,
    String createTime,
    int createUserId,
    String type,
    String wi)
  {
    this();
    this.orderId = orderId;
    this.productId = productId;
    this.productName = productName;
    this.viceName = viceName;
    this.subjectId = subjectId;
    this.brandId = brandId;
    this.productSnapshootId = productSnapshootId;
    this.skuNum = skuNum;
    this.skuDesc = skuDesc;
    this.curPrice = curPrice;
    this.orgPrice = orgPrice;
    this.imagesUrl = imagesUrl;
    this.shelf = shelf;
    this.sellerClassNum = sellerClassNum;
    this.count = count;
    setCountIsSet(true);
    this.lastUpdateTime = lastUpdateTime;
    this.lastUpdateUserId = lastUpdateUserId;
    setLastUpdateUserIdIsSet(true);
    this.createTime = createTime;
    this.createUserId = createUserId;
    setCreateUserIdIsSet(true);
    this.type = type;
    this.wi = wi;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderInfo(OrderInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetViceName()) {
      this.viceName = other.viceName;
    }
    if (other.isSetSubjectId()) {
      this.subjectId = other.subjectId;
    }
    if (other.isSetBrandId()) {
      this.brandId = other.brandId;
    }
    if (other.isSetProductSnapshootId()) {
      this.productSnapshootId = other.productSnapshootId;
    }
    if (other.isSetSkuNum()) {
      this.skuNum = other.skuNum;
    }
    if (other.isSetSkuDesc()) {
      this.skuDesc = other.skuDesc;
    }
    if (other.isSetCurPrice()) {
      this.curPrice = other.curPrice;
    }
    if (other.isSetOrgPrice()) {
      this.orgPrice = other.orgPrice;
    }
    if (other.isSetImagesUrl()) {
      this.imagesUrl = other.imagesUrl;
    }
    if (other.isSetShelf()) {
      this.shelf = other.shelf;
    }
    if (other.isSetSellerClassNum()) {
      this.sellerClassNum = other.sellerClassNum;
    }
    this.count = other.count;
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
    this.lastUpdateUserId = other.lastUpdateUserId;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.createUserId = other.createUserId;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetWi()) {
      this.wi = other.wi;
    }
    this.exchangeScore = other.exchangeScore;
    if (other.isSetExchangeCash()) {
      this.exchangeCash = other.exchangeCash;
    }
  }

  public OrderInfo deepCopy() {
    return new OrderInfo(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.productId = null;
    this.productName = null;
    this.viceName = null;
    this.subjectId = null;
    this.brandId = null;
    this.productSnapshootId = null;
    this.skuNum = null;
    this.skuDesc = null;
    this.curPrice = null;
    this.orgPrice = null;
    this.imagesUrl = null;
    this.shelf = null;
    this.sellerClassNum = null;
    setCountIsSet(false);
    this.count = 0;
    this.lastUpdateTime = null;
    setLastUpdateUserIdIsSet(false);
    this.lastUpdateUserId = 0;
    this.createTime = null;
    setCreateUserIdIsSet(false);
    this.createUserId = 0;
    this.type = null;
    this.wi = null;
    setExchangeScoreIsSet(false);
    this.exchangeScore = 0;
    this.exchangeCash = null;
  }

  public String getOrderId() {
    return this.orderId;
  }

  public OrderInfo setOrderId(String orderId) {
    this.orderId = orderId;
    
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public String getProductId() {
    return this.productId;
  }

  public OrderInfo setProductId(String productId) {
    this.productId = productId;
    
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been asigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public OrderInfo setProductName(String productName) {
    this.productName = productName;
    
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been asigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getViceName() {
    return this.viceName;
  }

  public OrderInfo setViceName(String viceName) {
    this.viceName = viceName;
    
    return this;
  }

  public void unsetViceName() {
    this.viceName = null;
  }

  /** Returns true if field viceName is set (has been asigned a value) and false otherwise */
  public boolean isSetViceName() {
    return this.viceName != null;
  }

  public void setViceNameIsSet(boolean value) {
    if (!value) {
      this.viceName = null;
    }
  }

  public String getSubjectId() {
    return this.subjectId;
  }

  public OrderInfo setSubjectId(String subjectId) {
    this.subjectId = subjectId;
    
    return this;
  }

  public void unsetSubjectId() {
    this.subjectId = null;
  }

  /** Returns true if field subjectId is set (has been asigned a value) and false otherwise */
  public boolean isSetSubjectId() {
    return this.subjectId != null;
  }

  public void setSubjectIdIsSet(boolean value) {
    if (!value) {
      this.subjectId = null;
    }
  }

  public String getBrandId() {
    return this.brandId;
  }

  public OrderInfo setBrandId(String brandId) {
    this.brandId = brandId;
    
    return this;
  }

  public void unsetBrandId() {
    this.brandId = null;
  }

  /** Returns true if field brandId is set (has been asigned a value) and false otherwise */
  public boolean isSetBrandId() {
    return this.brandId != null;
  }

  public void setBrandIdIsSet(boolean value) {
    if (!value) {
      this.brandId = null;
    }
  }

  public String getProductSnapshootId() {
    return this.productSnapshootId;
  }

  public OrderInfo setProductSnapshootId(String productSnapshootId) {
    this.productSnapshootId = productSnapshootId;
    
    return this;
  }

  public void unsetProductSnapshootId() {
    this.productSnapshootId = null;
  }

  /** Returns true if field productSnapshootId is set (has been asigned a value) and false otherwise */
  public boolean isSetProductSnapshootId() {
    return this.productSnapshootId != null;
  }

  public void setProductSnapshootIdIsSet(boolean value) {
    if (!value) {
      this.productSnapshootId = null;
    }
  }

  public String getSkuNum() {
    return this.skuNum;
  }

  public OrderInfo setSkuNum(String skuNum) {
    this.skuNum = skuNum;
    
    return this;
  }

  public void unsetSkuNum() {
    this.skuNum = null;
  }

  /** Returns true if field skuNum is set (has been asigned a value) and false otherwise */
  public boolean isSetSkuNum() {
    return this.skuNum != null;
  }

  public void setSkuNumIsSet(boolean value) {
    if (!value) {
      this.skuNum = null;
    }
  }

  public String getSkuDesc() {
    return this.skuDesc;
  }

  public OrderInfo setSkuDesc(String skuDesc) {
    this.skuDesc = skuDesc;
    
    return this;
  }

  public void unsetSkuDesc() {
    this.skuDesc = null;
  }

  /** Returns true if field skuDesc is set (has been asigned a value) and false otherwise */
  public boolean isSetSkuDesc() {
    return this.skuDesc != null;
  }

  public void setSkuDescIsSet(boolean value) {
    if (!value) {
      this.skuDesc = null;
    }
  }

  public String getCurPrice() {
    return this.curPrice;
  }

  public OrderInfo setCurPrice(String curPrice) {
    this.curPrice = curPrice;
    
    return this;
  }

  public void unsetCurPrice() {
    this.curPrice = null;
  }

  /** Returns true if field curPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetCurPrice() {
    return this.curPrice != null;
  }

  public void setCurPriceIsSet(boolean value) {
    if (!value) {
      this.curPrice = null;
    }
  }

  public String getOrgPrice() {
    return this.orgPrice;
  }

  public OrderInfo setOrgPrice(String orgPrice) {
    this.orgPrice = orgPrice;
    
    return this;
  }

  public void unsetOrgPrice() {
    this.orgPrice = null;
  }

  /** Returns true if field orgPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetOrgPrice() {
    return this.orgPrice != null;
  }

  public void setOrgPriceIsSet(boolean value) {
    if (!value) {
      this.orgPrice = null;
    }
  }

  public String getImagesUrl() {
    return this.imagesUrl;
  }

  public OrderInfo setImagesUrl(String imagesUrl) {
    this.imagesUrl = imagesUrl;
    
    return this;
  }

  public void unsetImagesUrl() {
    this.imagesUrl = null;
  }

  /** Returns true if field imagesUrl is set (has been asigned a value) and false otherwise */
  public boolean isSetImagesUrl() {
    return this.imagesUrl != null;
  }

  public void setImagesUrlIsSet(boolean value) {
    if (!value) {
      this.imagesUrl = null;
    }
  }

  public String getShelf() {
    return this.shelf;
  }

  public OrderInfo setShelf(String shelf) {
    this.shelf = shelf;
    
    return this;
  }

  public void unsetShelf() {
    this.shelf = null;
  }

  /** Returns true if field shelf is set (has been asigned a value) and false otherwise */
  public boolean isSetShelf() {
    return this.shelf != null;
  }

  public void setShelfIsSet(boolean value) {
    if (!value) {
      this.shelf = null;
    }
  }

  public String getSellerClassNum() {
    return this.sellerClassNum;
  }

  public OrderInfo setSellerClassNum(String sellerClassNum) {
    this.sellerClassNum = sellerClassNum;
    
    return this;
  }

  public void unsetSellerClassNum() {
    this.sellerClassNum = null;
  }

  /** Returns true if field sellerClassNum is set (has been asigned a value) and false otherwise */
  public boolean isSetSellerClassNum() {
    return this.sellerClassNum != null;
  }

  public void setSellerClassNumIsSet(boolean value) {
    if (!value) {
      this.sellerClassNum = null;
    }
  }

  public int getCount() {
    return this.count;
  }

  public OrderInfo setCount(int count) {
    this.count = count;
    setCountIsSet(true);

    return this;
  }

  public void unsetCount() {
  __isset_bit_vector.clear(__COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been asigned a value) and false otherwise */
  public boolean isSetCount() {
    return __isset_bit_vector.get(__COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bit_vector.set(__COUNT_ISSET_ID, value);
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public OrderInfo setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been asigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public int getLastUpdateUserId() {
    return this.lastUpdateUserId;
  }

  public OrderInfo setLastUpdateUserId(int lastUpdateUserId) {
    this.lastUpdateUserId = lastUpdateUserId;
    setLastUpdateUserIdIsSet(true);

    return this;
  }

  public void unsetLastUpdateUserId() {
  __isset_bit_vector.clear(__LASTUPDATEUSERID_ISSET_ID);
  }

  /** Returns true if field lastUpdateUserId is set (has been asigned a value) and false otherwise */
  public boolean isSetLastUpdateUserId() {
    return __isset_bit_vector.get(__LASTUPDATEUSERID_ISSET_ID);
  }

  public void setLastUpdateUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__LASTUPDATEUSERID_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public OrderInfo setCreateTime(String createTime) {
    this.createTime = createTime;
    
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getCreateUserId() {
    return this.createUserId;
  }

  public OrderInfo setCreateUserId(int createUserId) {
    this.createUserId = createUserId;
    setCreateUserIdIsSet(true);

    return this;
  }

  public void unsetCreateUserId() {
  __isset_bit_vector.clear(__CREATEUSERID_ISSET_ID);
  }

  /** Returns true if field createUserId is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateUserId() {
    return __isset_bit_vector.get(__CREATEUSERID_ISSET_ID);
  }

  public void setCreateUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__CREATEUSERID_ISSET_ID, value);
  }

  public String getType() {
    return this.type;
  }

  public OrderInfo setType(String type) {
    this.type = type;
    
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been asigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getWi() {
    return this.wi;
  }

  public OrderInfo setWi(String wi) {
    this.wi = wi;
    
    return this;
  }

  public void unsetWi() {
    this.wi = null;
  }

  /** Returns true if field wi is set (has been asigned a value) and false otherwise */
  public boolean isSetWi() {
    return this.wi != null;
  }

  public void setWiIsSet(boolean value) {
    if (!value) {
      this.wi = null;
    }
  }

  public int getExchangeScore() {
    return this.exchangeScore;
  }

  public OrderInfo setExchangeScore(int exchangeScore) {
    this.exchangeScore = exchangeScore;
    setExchangeScoreIsSet(true);

    return this;
  }

  public void unsetExchangeScore() {
  __isset_bit_vector.clear(__EXCHANGESCORE_ISSET_ID);
  }

  /** Returns true if field exchangeScore is set (has been asigned a value) and false otherwise */
  public boolean isSetExchangeScore() {
    return __isset_bit_vector.get(__EXCHANGESCORE_ISSET_ID);
  }

  public void setExchangeScoreIsSet(boolean value) {
    __isset_bit_vector.set(__EXCHANGESCORE_ISSET_ID, value);
  }

  public String getExchangeCash() {
    return this.exchangeCash;
  }

  public OrderInfo setExchangeCash(String exchangeCash) {
    this.exchangeCash = exchangeCash;
    
    return this;
  }

  public void unsetExchangeCash() {
    this.exchangeCash = null;
  }

  /** Returns true if field exchangeCash is set (has been asigned a value) and false otherwise */
  public boolean isSetExchangeCash() {
    return this.exchangeCash != null;
  }

  public void setExchangeCashIsSet(boolean value) {
    if (!value) {
      this.exchangeCash = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;
    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;
    case VICE_NAME:
      if (value == null) {
        unsetViceName();
      } else {
        setViceName((String)value);
      }
      break;
    case SUBJECT_ID:
      if (value == null) {
        unsetSubjectId();
      } else {
        setSubjectId((String)value);
      }
      break;
    case BRAND_ID:
      if (value == null) {
        unsetBrandId();
      } else {
        setBrandId((String)value);
      }
      break;
    case PRODUCT_SNAPSHOOT_ID:
      if (value == null) {
        unsetProductSnapshootId();
      } else {
        setProductSnapshootId((String)value);
      }
      break;
    case SKU_NUM:
      if (value == null) {
        unsetSkuNum();
      } else {
        setSkuNum((String)value);
      }
      break;
    case SKU_DESC:
      if (value == null) {
        unsetSkuDesc();
      } else {
        setSkuDesc((String)value);
      }
      break;
    case CUR_PRICE:
      if (value == null) {
        unsetCurPrice();
      } else {
        setCurPrice((String)value);
      }
      break;
    case ORG_PRICE:
      if (value == null) {
        unsetOrgPrice();
      } else {
        setOrgPrice((String)value);
      }
      break;
    case IMAGES_URL:
      if (value == null) {
        unsetImagesUrl();
      } else {
        setImagesUrl((String)value);
      }
      break;
    case SHELF:
      if (value == null) {
        unsetShelf();
      } else {
        setShelf((String)value);
      }
      break;
    case SELLER_CLASS_NUM:
      if (value == null) {
        unsetSellerClassNum();
      } else {
        setSellerClassNum((String)value);
      }
      break;
    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;
    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;
    case LAST_UPDATE_USER_ID:
      if (value == null) {
        unsetLastUpdateUserId();
      } else {
        setLastUpdateUserId((Integer)value);
      }
      break;
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;
    case CREATE_USER_ID:
      if (value == null) {
        unsetCreateUserId();
      } else {
        setCreateUserId((Integer)value);
      }
      break;
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;
    case WI:
      if (value == null) {
        unsetWi();
      } else {
        setWi((String)value);
      }
      break;
    case EXCHANGE_SCORE:
      if (value == null) {
        unsetExchangeScore();
      } else {
        setExchangeScore((Integer)value);
      }
      break;
    case EXCHANGE_CASH:
      if (value == null) {
        unsetExchangeCash();
      } else {
        setExchangeCash((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();
    case PRODUCT_ID:
      return getProductId();
    case PRODUCT_NAME:
      return getProductName();
    case VICE_NAME:
      return getViceName();
    case SUBJECT_ID:
      return getSubjectId();
    case BRAND_ID:
      return getBrandId();
    case PRODUCT_SNAPSHOOT_ID:
      return getProductSnapshootId();
    case SKU_NUM:
      return getSkuNum();
    case SKU_DESC:
      return getSkuDesc();
    case CUR_PRICE:
      return getCurPrice();
    case ORG_PRICE:
      return getOrgPrice();
    case IMAGES_URL:
      return getImagesUrl();
    case SHELF:
      return getShelf();
    case SELLER_CLASS_NUM:
      return getSellerClassNum();
    case COUNT:
      return new Integer(getCount());
    case LAST_UPDATE_TIME:
      return getLastUpdateTime();
    case LAST_UPDATE_USER_ID:
      return new Integer(getLastUpdateUserId());
    case CREATE_TIME:
      return getCreateTime();
    case CREATE_USER_ID:
      return new Integer(getCreateUserId());
    case TYPE:
      return getType();
    case WI:
      return getWi();
    case EXCHANGE_SCORE:
      return new Integer(getExchangeScore());
    case EXCHANGE_CASH:
      return getExchangeCash();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_NAME:
      return isSetProductName();
    case VICE_NAME:
      return isSetViceName();
    case SUBJECT_ID:
      return isSetSubjectId();
    case BRAND_ID:
      return isSetBrandId();
    case PRODUCT_SNAPSHOOT_ID:
      return isSetProductSnapshootId();
    case SKU_NUM:
      return isSetSkuNum();
    case SKU_DESC:
      return isSetSkuDesc();
    case CUR_PRICE:
      return isSetCurPrice();
    case ORG_PRICE:
      return isSetOrgPrice();
    case IMAGES_URL:
      return isSetImagesUrl();
    case SHELF:
      return isSetShelf();
    case SELLER_CLASS_NUM:
      return isSetSellerClassNum();
    case COUNT:
      return isSetCount();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case LAST_UPDATE_USER_ID:
      return isSetLastUpdateUserId();
    case CREATE_TIME:
      return isSetCreateTime();
    case CREATE_USER_ID:
      return isSetCreateUserId();
    case TYPE:
      return isSetType();
    case WI:
      return isSetWi();
    case EXCHANGE_SCORE:
      return isSetExchangeScore();
    case EXCHANGE_CASH:
      return isSetExchangeCash();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderInfo)
      return this.equals((OrderInfo)that);
    return false;
  }

  public boolean equals(OrderInfo that) {
    if (that == null)
      return false;
    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }
    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }
    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }
    boolean this_present_viceName = true && this.isSetViceName();
    boolean that_present_viceName = true && that.isSetViceName();
    if (this_present_viceName || that_present_viceName) {
      if (!(this_present_viceName && that_present_viceName))
        return false;
      if (!this.viceName.equals(that.viceName))
        return false;
    }
    boolean this_present_subjectId = true && this.isSetSubjectId();
    boolean that_present_subjectId = true && that.isSetSubjectId();
    if (this_present_subjectId || that_present_subjectId) {
      if (!(this_present_subjectId && that_present_subjectId))
        return false;
      if (!this.subjectId.equals(that.subjectId))
        return false;
    }
    boolean this_present_brandId = true && this.isSetBrandId();
    boolean that_present_brandId = true && that.isSetBrandId();
    if (this_present_brandId || that_present_brandId) {
      if (!(this_present_brandId && that_present_brandId))
        return false;
      if (!this.brandId.equals(that.brandId))
        return false;
    }
    boolean this_present_productSnapshootId = true && this.isSetProductSnapshootId();
    boolean that_present_productSnapshootId = true && that.isSetProductSnapshootId();
    if (this_present_productSnapshootId || that_present_productSnapshootId) {
      if (!(this_present_productSnapshootId && that_present_productSnapshootId))
        return false;
      if (!this.productSnapshootId.equals(that.productSnapshootId))
        return false;
    }
    boolean this_present_skuNum = true && this.isSetSkuNum();
    boolean that_present_skuNum = true && that.isSetSkuNum();
    if (this_present_skuNum || that_present_skuNum) {
      if (!(this_present_skuNum && that_present_skuNum))
        return false;
      if (!this.skuNum.equals(that.skuNum))
        return false;
    }
    boolean this_present_skuDesc = true && this.isSetSkuDesc();
    boolean that_present_skuDesc = true && that.isSetSkuDesc();
    if (this_present_skuDesc || that_present_skuDesc) {
      if (!(this_present_skuDesc && that_present_skuDesc))
        return false;
      if (!this.skuDesc.equals(that.skuDesc))
        return false;
    }
    boolean this_present_curPrice = true && this.isSetCurPrice();
    boolean that_present_curPrice = true && that.isSetCurPrice();
    if (this_present_curPrice || that_present_curPrice) {
      if (!(this_present_curPrice && that_present_curPrice))
        return false;
      if (!this.curPrice.equals(that.curPrice))
        return false;
    }
    boolean this_present_orgPrice = true && this.isSetOrgPrice();
    boolean that_present_orgPrice = true && that.isSetOrgPrice();
    if (this_present_orgPrice || that_present_orgPrice) {
      if (!(this_present_orgPrice && that_present_orgPrice))
        return false;
      if (!this.orgPrice.equals(that.orgPrice))
        return false;
    }
    boolean this_present_imagesUrl = true && this.isSetImagesUrl();
    boolean that_present_imagesUrl = true && that.isSetImagesUrl();
    if (this_present_imagesUrl || that_present_imagesUrl) {
      if (!(this_present_imagesUrl && that_present_imagesUrl))
        return false;
      if (!this.imagesUrl.equals(that.imagesUrl))
        return false;
    }
    boolean this_present_shelf = true && this.isSetShelf();
    boolean that_present_shelf = true && that.isSetShelf();
    if (this_present_shelf || that_present_shelf) {
      if (!(this_present_shelf && that_present_shelf))
        return false;
      if (!this.shelf.equals(that.shelf))
        return false;
    }
    boolean this_present_sellerClassNum = true && this.isSetSellerClassNum();
    boolean that_present_sellerClassNum = true && that.isSetSellerClassNum();
    if (this_present_sellerClassNum || that_present_sellerClassNum) {
      if (!(this_present_sellerClassNum && that_present_sellerClassNum))
        return false;
      if (!this.sellerClassNum.equals(that.sellerClassNum))
        return false;
    }
    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }
    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }
    boolean this_present_lastUpdateUserId = true;
    boolean that_present_lastUpdateUserId = true;
    if (this_present_lastUpdateUserId || that_present_lastUpdateUserId) {
      if (!(this_present_lastUpdateUserId && that_present_lastUpdateUserId))
        return false;
      if (this.lastUpdateUserId != that.lastUpdateUserId)
        return false;
    }
    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }
    boolean this_present_createUserId = true;
    boolean that_present_createUserId = true;
    if (this_present_createUserId || that_present_createUserId) {
      if (!(this_present_createUserId && that_present_createUserId))
        return false;
      if (this.createUserId != that.createUserId)
        return false;
    }
    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }
    boolean this_present_wi = true && this.isSetWi();
    boolean that_present_wi = true && that.isSetWi();
    if (this_present_wi || that_present_wi) {
      if (!(this_present_wi && that_present_wi))
        return false;
      if (!this.wi.equals(that.wi))
        return false;
    }
    boolean this_present_exchangeScore = true && this.isSetExchangeScore();
    boolean that_present_exchangeScore = true && that.isSetExchangeScore();
    if (this_present_exchangeScore || that_present_exchangeScore) {
      if (!(this_present_exchangeScore && that_present_exchangeScore))
        return false;
      if (this.exchangeScore != that.exchangeScore)
        return false;
    }
    boolean this_present_exchangeCash = true && this.isSetExchangeCash();
    boolean that_present_exchangeCash = true && that.isSetExchangeCash();
    if (this_present_exchangeCash || that_present_exchangeCash) {
      if (!(this_present_exchangeCash && that_present_exchangeCash))
        return false;
      if (!this.exchangeCash.equals(that.exchangeCash))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_orderId = true && (isSetOrderId());
    builder.append(present_orderId);
    if (present_orderId)
      builder.append(orderId);
    boolean present_productId = true && (isSetProductId());
    builder.append(present_productId);
    if (present_productId)
      builder.append(productId);
    boolean present_productName = true && (isSetProductName());
    builder.append(present_productName);
    if (present_productName)
      builder.append(productName);
    boolean present_viceName = true && (isSetViceName());
    builder.append(present_viceName);
    if (present_viceName)
      builder.append(viceName);
    boolean present_subjectId = true && (isSetSubjectId());
    builder.append(present_subjectId);
    if (present_subjectId)
      builder.append(subjectId);
    boolean present_brandId = true && (isSetBrandId());
    builder.append(present_brandId);
    if (present_brandId)
      builder.append(brandId);
    boolean present_productSnapshootId = true && (isSetProductSnapshootId());
    builder.append(present_productSnapshootId);
    if (present_productSnapshootId)
      builder.append(productSnapshootId);
    boolean present_skuNum = true && (isSetSkuNum());
    builder.append(present_skuNum);
    if (present_skuNum)
      builder.append(skuNum);
    boolean present_skuDesc = true && (isSetSkuDesc());
    builder.append(present_skuDesc);
    if (present_skuDesc)
      builder.append(skuDesc);
    boolean present_curPrice = true && (isSetCurPrice());
    builder.append(present_curPrice);
    if (present_curPrice)
      builder.append(curPrice);
    boolean present_orgPrice = true && (isSetOrgPrice());
    builder.append(present_orgPrice);
    if (present_orgPrice)
      builder.append(orgPrice);
    boolean present_imagesUrl = true && (isSetImagesUrl());
    builder.append(present_imagesUrl);
    if (present_imagesUrl)
      builder.append(imagesUrl);
    boolean present_shelf = true && (isSetShelf());
    builder.append(present_shelf);
    if (present_shelf)
      builder.append(shelf);
    boolean present_sellerClassNum = true && (isSetSellerClassNum());
    builder.append(present_sellerClassNum);
    if (present_sellerClassNum)
      builder.append(sellerClassNum);
    boolean present_count = true;
    builder.append(present_count);
    if (present_count)
      builder.append(count);
    boolean present_lastUpdateTime = true && (isSetLastUpdateTime());
    builder.append(present_lastUpdateTime);
    if (present_lastUpdateTime)
      builder.append(lastUpdateTime);
    boolean present_lastUpdateUserId = true;
    builder.append(present_lastUpdateUserId);
    if (present_lastUpdateUserId)
      builder.append(lastUpdateUserId);
    boolean present_createTime = true && (isSetCreateTime());
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);
    boolean present_createUserId = true;
    builder.append(present_createUserId);
    if (present_createUserId)
      builder.append(createUserId);
    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type);
    boolean present_wi = true && (isSetWi());
    builder.append(present_wi);
    if (present_wi)
      builder.append(wi);
    boolean present_exchangeScore = true && (isSetExchangeScore());
    builder.append(present_exchangeScore);
    if (present_exchangeScore)
      builder.append(exchangeScore);
    boolean present_exchangeCash = true && (isSetExchangeCash());
    builder.append(present_exchangeCash);
    if (present_exchangeCash)
      builder.append(exchangeCash);
    return builder.toHashCode();
  }

  public int compareTo(OrderInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    OrderInfo typedOther = (OrderInfo)other;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = TBaseHelper.compareTo(this.productId, typedOther.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(typedOther.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = TBaseHelper.compareTo(this.productName, typedOther.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViceName()).compareTo(typedOther.isSetViceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViceName()) {
      lastComparison = TBaseHelper.compareTo(this.viceName, typedOther.viceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubjectId()).compareTo(typedOther.isSetSubjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectId()) {
      lastComparison = TBaseHelper.compareTo(this.subjectId, typedOther.subjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandId()).compareTo(typedOther.isSetBrandId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandId()) {
      lastComparison = TBaseHelper.compareTo(this.brandId, typedOther.brandId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductSnapshootId()).compareTo(typedOther.isSetProductSnapshootId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductSnapshootId()) {
      lastComparison = TBaseHelper.compareTo(this.productSnapshootId, typedOther.productSnapshootId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkuNum()).compareTo(typedOther.isSetSkuNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkuNum()) {
      lastComparison = TBaseHelper.compareTo(this.skuNum, typedOther.skuNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkuDesc()).compareTo(typedOther.isSetSkuDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkuDesc()) {
      lastComparison = TBaseHelper.compareTo(this.skuDesc, typedOther.skuDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurPrice()).compareTo(typedOther.isSetCurPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurPrice()) {
      lastComparison = TBaseHelper.compareTo(this.curPrice, typedOther.curPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgPrice()).compareTo(typedOther.isSetOrgPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgPrice()) {
      lastComparison = TBaseHelper.compareTo(this.orgPrice, typedOther.orgPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImagesUrl()).compareTo(typedOther.isSetImagesUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImagesUrl()) {
      lastComparison = TBaseHelper.compareTo(this.imagesUrl, typedOther.imagesUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShelf()).compareTo(typedOther.isSetShelf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShelf()) {
      lastComparison = TBaseHelper.compareTo(this.shelf, typedOther.shelf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerClassNum()).compareTo(typedOther.isSetSellerClassNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerClassNum()) {
      lastComparison = TBaseHelper.compareTo(this.sellerClassNum, typedOther.sellerClassNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(typedOther.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = TBaseHelper.compareTo(this.lastUpdateTime, typedOther.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateUserId()).compareTo(typedOther.isSetLastUpdateUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateUserId()) {
      lastComparison = TBaseHelper.compareTo(this.lastUpdateUserId, typedOther.lastUpdateUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateUserId()).compareTo(typedOther.isSetCreateUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateUserId()) {
      lastComparison = TBaseHelper.compareTo(this.createUserId, typedOther.createUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWi()).compareTo(typedOther.isSetWi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWi()) {
      lastComparison = TBaseHelper.compareTo(this.wi, typedOther.wi);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeScore()).compareTo(typedOther.isSetExchangeScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeScore()) {
      lastComparison = TBaseHelper.compareTo(this.exchangeScore, typedOther.exchangeScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeCash()).compareTo(typedOther.isSetExchangeCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeCash()) {
      lastComparison = TBaseHelper.compareTo(this.exchangeCash, typedOther.exchangeCash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ORDER_ID
          if (field.type == TType.STRING) {
            this.orderId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PRODUCT_ID
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PRODUCT_NAME
          if (field.type == TType.STRING) {
            this.productName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // VICE_NAME
          if (field.type == TType.STRING) {
            this.viceName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SUBJECT_ID
          if (field.type == TType.STRING) {
            this.subjectId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // BRAND_ID
          if (field.type == TType.STRING) {
            this.brandId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // PRODUCT_SNAPSHOOT_ID
          if (field.type == TType.STRING) {
            this.productSnapshootId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // SKU_NUM
          if (field.type == TType.STRING) {
            this.skuNum = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // SKU_DESC
          if (field.type == TType.STRING) {
            this.skuDesc = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // CUR_PRICE
          if (field.type == TType.STRING) {
            this.curPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // ORG_PRICE
          if (field.type == TType.STRING) {
            this.orgPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // IMAGES_URL
          if (field.type == TType.STRING) {
            this.imagesUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // SHELF
          if (field.type == TType.STRING) {
            this.shelf = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // SELLER_CLASS_NUM
          if (field.type == TType.STRING) {
            this.sellerClassNum = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // COUNT
          if (field.type == TType.I32) {
            this.count = iprot.readI32();
            setCountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // LAST_UPDATE_TIME
          if (field.type == TType.STRING) {
            this.lastUpdateTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // LAST_UPDATE_USER_ID
          if (field.type == TType.I32) {
            this.lastUpdateUserId = iprot.readI32();
            setLastUpdateUserIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // CREATE_TIME
          if (field.type == TType.STRING) {
            this.createTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 19: // CREATE_USER_ID
          if (field.type == TType.I32) {
            this.createUserId = iprot.readI32();
            setCreateUserIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // TYPE
          if (field.type == TType.STRING) {
            this.type = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 21: // WI
          if (field.type == TType.STRING) {
            this.wi = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 22: // EXCHANGE_SCORE
          if (field.type == TType.I32) {
            this.exchangeScore = iprot.readI32();
            setExchangeScoreIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 23: // EXCHANGE_CASH
          if (field.type == TType.STRING) {
            this.exchangeCash = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.orderId != null) {
      oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
      oprot.writeString(this.orderId);
      oprot.writeFieldEnd();
    }
    if (this.productId != null) {
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    if (this.productName != null) {
      oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
      oprot.writeString(this.productName);
      oprot.writeFieldEnd();
    }
    if (this.viceName != null) {
      oprot.writeFieldBegin(VICE_NAME_FIELD_DESC);
      oprot.writeString(this.viceName);
      oprot.writeFieldEnd();
    }
    if (this.subjectId != null) {
      oprot.writeFieldBegin(SUBJECT_ID_FIELD_DESC);
      oprot.writeString(this.subjectId);
      oprot.writeFieldEnd();
    }
    if (this.brandId != null) {
      oprot.writeFieldBegin(BRAND_ID_FIELD_DESC);
      oprot.writeString(this.brandId);
      oprot.writeFieldEnd();
    }
    if (this.productSnapshootId != null) {
      oprot.writeFieldBegin(PRODUCT_SNAPSHOOT_ID_FIELD_DESC);
      oprot.writeString(this.productSnapshootId);
      oprot.writeFieldEnd();
    }
    if (this.skuNum != null) {
      oprot.writeFieldBegin(SKU_NUM_FIELD_DESC);
      oprot.writeString(this.skuNum);
      oprot.writeFieldEnd();
    }
    if (this.skuDesc != null) {
      oprot.writeFieldBegin(SKU_DESC_FIELD_DESC);
      oprot.writeString(this.skuDesc);
      oprot.writeFieldEnd();
    }
    if (this.curPrice != null) {
      oprot.writeFieldBegin(CUR_PRICE_FIELD_DESC);
      oprot.writeString(this.curPrice);
      oprot.writeFieldEnd();
    }
    if (this.orgPrice != null) {
      oprot.writeFieldBegin(ORG_PRICE_FIELD_DESC);
      oprot.writeString(this.orgPrice);
      oprot.writeFieldEnd();
    }
    if (this.imagesUrl != null) {
      oprot.writeFieldBegin(IMAGES_URL_FIELD_DESC);
      oprot.writeString(this.imagesUrl);
      oprot.writeFieldEnd();
    }
    if (this.shelf != null) {
      oprot.writeFieldBegin(SHELF_FIELD_DESC);
      oprot.writeString(this.shelf);
      oprot.writeFieldEnd();
    }
    if (this.sellerClassNum != null) {
      oprot.writeFieldBegin(SELLER_CLASS_NUM_FIELD_DESC);
      oprot.writeString(this.sellerClassNum);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(COUNT_FIELD_DESC);
    oprot.writeI32(this.count);
    oprot.writeFieldEnd();
    if (this.lastUpdateTime != null) {
      oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
      oprot.writeString(this.lastUpdateTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(LAST_UPDATE_USER_ID_FIELD_DESC);
    oprot.writeI32(this.lastUpdateUserId);
    oprot.writeFieldEnd();
    if (this.createTime != null) {
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeString(this.createTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CREATE_USER_ID_FIELD_DESC);
    oprot.writeI32(this.createUserId);
    oprot.writeFieldEnd();
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeString(this.type);
      oprot.writeFieldEnd();
    }
    if (this.wi != null) {
      oprot.writeFieldBegin(WI_FIELD_DESC);
      oprot.writeString(this.wi);
      oprot.writeFieldEnd();
    }
    if (isSetExchangeScore()) {
      oprot.writeFieldBegin(EXCHANGE_SCORE_FIELD_DESC);
      oprot.writeI32(this.exchangeScore);
      oprot.writeFieldEnd();
    }
    if (this.exchangeCash != null) {
      if (isSetExchangeCash()) {
        oprot.writeFieldBegin(EXCHANGE_CASH_FIELD_DESC);
        oprot.writeString(this.exchangeCash);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderInfo(");
    boolean first = true;
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("viceName:");
    if (this.viceName == null) {
      sb.append("null");
    } else {
      sb.append(this.viceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectId:");
    if (this.subjectId == null) {
      sb.append("null");
    } else {
      sb.append(this.subjectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandId:");
    if (this.brandId == null) {
      sb.append("null");
    } else {
      sb.append(this.brandId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productSnapshootId:");
    if (this.productSnapshootId == null) {
      sb.append("null");
    } else {
      sb.append(this.productSnapshootId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("skuNum:");
    if (this.skuNum == null) {
      sb.append("null");
    } else {
      sb.append(this.skuNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("skuDesc:");
    if (this.skuDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.skuDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("curPrice:");
    if (this.curPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.curPrice);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgPrice:");
    if (this.orgPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.orgPrice);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imagesUrl:");
    if (this.imagesUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.imagesUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shelf:");
    if (this.shelf == null) {
      sb.append("null");
    } else {
      sb.append(this.shelf);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerClassNum:");
    if (this.sellerClassNum == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerClassNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateUserId:");
    sb.append(this.lastUpdateUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createUserId:");
    sb.append(this.createUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wi:");
    if (this.wi == null) {
      sb.append("null");
    } else {
      sb.append(this.wi);
    }
    first = false;
    if (isSetExchangeScore()) {
      if (!first) sb.append(", ");
      sb.append("exchangeScore:");
      sb.append(this.exchangeScore);
      first = false;
      }
    if (isSetExchangeCash()) {
      if (!first) sb.append(", ");
      sb.append("exchangeCash:");
      if (this.exchangeCash == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeCash);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
