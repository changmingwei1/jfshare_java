/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.message;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class SystemMessage implements TBase<SystemMessage, SystemMessage._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SystemMessage");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short)1);
  private static final TField TITLE_FIELD_DESC = new TField("title", TType.STRING, (short)2);
  private static final TField CONTENT_FIELD_DESC = new TField("content", TType.STRING, (short)3);
  private static final TField BEGIN_DATE_FIELD_DESC = new TField("beginDate", TType.STRING, (short)4);
  private static final TField END_DATE_FIELD_DESC = new TField("endDate", TType.STRING, (short)5);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)6);
  private static final TField PUSH_TARGET_FIELD_DESC = new TField("pushTarget", TType.I32, (short)7);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.STRING, (short)8);
  private static final TField MSG_TYPE_FIELD_DESC = new TField("msgType", TType.I32, (short)9);
  private static final TField ALERT_FIELD_DESC = new TField("alert", TType.STRING, (short)10);


  public int id;
  public String title;
  public String content;
  public String beginDate;
  public String endDate;
  public int status;
  public int pushTarget;
  public String createTime;
  public int msgType;
  public String alert;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    CONTENT((short)3, "content"),
    BEGIN_DATE((short)4, "beginDate"),
    END_DATE((short)5, "endDate"),
    STATUS((short)6, "status"),
    PUSH_TARGET((short)7, "pushTarget"),
    CREATE_TIME((short)8, "createTime"),
    MSG_TYPE((short)9, "msgType"),
    ALERT((short)10, "alert");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
  	return ID;
        case 2: // TITLE
  	return TITLE;
        case 3: // CONTENT
  	return CONTENT;
        case 4: // BEGIN_DATE
  	return BEGIN_DATE;
        case 5: // END_DATE
  	return END_DATE;
        case 6: // STATUS
  	return STATUS;
        case 7: // PUSH_TARGET
  	return PUSH_TARGET;
        case 8: // CREATE_TIME
  	return CREATE_TIME;
        case 9: // MSG_TYPE
  	return MSG_TYPE;
        case 10: // ALERT
  	return ALERT;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __PUSHTARGET_ISSET_ID = 2;
  private static final int __MSGTYPE_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TITLE, new FieldMetaData("title", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new FieldMetaData("content", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.BEGIN_DATE, new FieldMetaData("beginDate", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.END_DATE, new FieldMetaData("endDate", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.STATUS, new FieldMetaData("status", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PUSH_TARGET, new FieldMetaData("pushTarget", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MSG_TYPE, new FieldMetaData("msgType", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ALERT, new FieldMetaData("alert", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(SystemMessage.class, metaDataMap);
  }


  public SystemMessage() {
  }

  public SystemMessage(
    int id,
    String alert)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.alert = alert;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SystemMessage(SystemMessage other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetBeginDate()) {
      this.beginDate = other.beginDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    this.status = other.status;
    this.pushTarget = other.pushTarget;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.msgType = other.msgType;
    if (other.isSetAlert()) {
      this.alert = other.alert;
    }
  }

  public SystemMessage deepCopy() {
    return new SystemMessage(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.title = null;
    this.content = null;
    this.beginDate = null;
    this.endDate = null;
    setStatusIsSet(false);
    this.status = 0;
    setPushTargetIsSet(false);
    this.pushTarget = 0;
    this.createTime = null;
    setMsgTypeIsSet(false);
    this.msgType = 0;
    this.alert = null;
  }

  public int getId() {
    return this.id;
  }

  public SystemMessage setId(int id) {
    this.id = id;
    setIdIsSet(true);

    return this;
  }

  public void unsetId() {
  __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public SystemMessage setTitle(String title) {
    this.title = title;
    
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been asigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public SystemMessage setContent(String content) {
    this.content = content;
    
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been asigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getBeginDate() {
    return this.beginDate;
  }

  public SystemMessage setBeginDate(String beginDate) {
    this.beginDate = beginDate;
    
    return this;
  }

  public void unsetBeginDate() {
    this.beginDate = null;
  }

  /** Returns true if field beginDate is set (has been asigned a value) and false otherwise */
  public boolean isSetBeginDate() {
    return this.beginDate != null;
  }

  public void setBeginDateIsSet(boolean value) {
    if (!value) {
      this.beginDate = null;
    }
  }

  public String getEndDate() {
    return this.endDate;
  }

  public SystemMessage setEndDate(String endDate) {
    this.endDate = endDate;
    
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been asigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public SystemMessage setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);

    return this;
  }

  public void unsetStatus() {
  __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been asigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public int getPushTarget() {
    return this.pushTarget;
  }

  public SystemMessage setPushTarget(int pushTarget) {
    this.pushTarget = pushTarget;
    setPushTargetIsSet(true);

    return this;
  }

  public void unsetPushTarget() {
  __isset_bit_vector.clear(__PUSHTARGET_ISSET_ID);
  }

  /** Returns true if field pushTarget is set (has been asigned a value) and false otherwise */
  public boolean isSetPushTarget() {
    return __isset_bit_vector.get(__PUSHTARGET_ISSET_ID);
  }

  public void setPushTargetIsSet(boolean value) {
    __isset_bit_vector.set(__PUSHTARGET_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public SystemMessage setCreateTime(String createTime) {
    this.createTime = createTime;
    
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getMsgType() {
    return this.msgType;
  }

  public SystemMessage setMsgType(int msgType) {
    this.msgType = msgType;
    setMsgTypeIsSet(true);

    return this;
  }

  public void unsetMsgType() {
  __isset_bit_vector.clear(__MSGTYPE_ISSET_ID);
  }

  /** Returns true if field msgType is set (has been asigned a value) and false otherwise */
  public boolean isSetMsgType() {
    return __isset_bit_vector.get(__MSGTYPE_ISSET_ID);
  }

  public void setMsgTypeIsSet(boolean value) {
    __isset_bit_vector.set(__MSGTYPE_ISSET_ID, value);
  }

  public String getAlert() {
    return this.alert;
  }

  public SystemMessage setAlert(String alert) {
    this.alert = alert;
    
    return this;
  }

  public void unsetAlert() {
    this.alert = null;
  }

  /** Returns true if field alert is set (has been asigned a value) and false otherwise */
  public boolean isSetAlert() {
    return this.alert != null;
  }

  public void setAlertIsSet(boolean value) {
    if (!value) {
      this.alert = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;
    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;
    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;
    case BEGIN_DATE:
      if (value == null) {
        unsetBeginDate();
      } else {
        setBeginDate((String)value);
      }
      break;
    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;
    case PUSH_TARGET:
      if (value == null) {
        unsetPushTarget();
      } else {
        setPushTarget((Integer)value);
      }
      break;
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;
    case MSG_TYPE:
      if (value == null) {
        unsetMsgType();
      } else {
        setMsgType((Integer)value);
      }
      break;
    case ALERT:
      if (value == null) {
        unsetAlert();
      } else {
        setAlert((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Integer(getId());
    case TITLE:
      return getTitle();
    case CONTENT:
      return getContent();
    case BEGIN_DATE:
      return getBeginDate();
    case END_DATE:
      return getEndDate();
    case STATUS:
      return new Integer(getStatus());
    case PUSH_TARGET:
      return new Integer(getPushTarget());
    case CREATE_TIME:
      return getCreateTime();
    case MSG_TYPE:
      return new Integer(getMsgType());
    case ALERT:
      return getAlert();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case CONTENT:
      return isSetContent();
    case BEGIN_DATE:
      return isSetBeginDate();
    case END_DATE:
      return isSetEndDate();
    case STATUS:
      return isSetStatus();
    case PUSH_TARGET:
      return isSetPushTarget();
    case CREATE_TIME:
      return isSetCreateTime();
    case MSG_TYPE:
      return isSetMsgType();
    case ALERT:
      return isSetAlert();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SystemMessage)
      return this.equals((SystemMessage)that);
    return false;
  }

  public boolean equals(SystemMessage that) {
    if (that == null)
      return false;
    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }
    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }
    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }
    boolean this_present_beginDate = true && this.isSetBeginDate();
    boolean that_present_beginDate = true && that.isSetBeginDate();
    if (this_present_beginDate || that_present_beginDate) {
      if (!(this_present_beginDate && that_present_beginDate))
        return false;
      if (!this.beginDate.equals(that.beginDate))
        return false;
    }
    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }
    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }
    boolean this_present_pushTarget = true && this.isSetPushTarget();
    boolean that_present_pushTarget = true && that.isSetPushTarget();
    if (this_present_pushTarget || that_present_pushTarget) {
      if (!(this_present_pushTarget && that_present_pushTarget))
        return false;
      if (this.pushTarget != that.pushTarget)
        return false;
    }
    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }
    boolean this_present_msgType = true && this.isSetMsgType();
    boolean that_present_msgType = true && that.isSetMsgType();
    if (this_present_msgType || that_present_msgType) {
      if (!(this_present_msgType && that_present_msgType))
        return false;
      if (this.msgType != that.msgType)
        return false;
    }
    boolean this_present_alert = true && this.isSetAlert();
    boolean that_present_alert = true && that.isSetAlert();
    if (this_present_alert || that_present_alert) {
      if (!(this_present_alert && that_present_alert))
        return false;
      if (!this.alert.equals(that.alert))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);
    boolean present_title = true && (isSetTitle());
    builder.append(present_title);
    if (present_title)
      builder.append(title);
    boolean present_content = true && (isSetContent());
    builder.append(present_content);
    if (present_content)
      builder.append(content);
    boolean present_beginDate = true && (isSetBeginDate());
    builder.append(present_beginDate);
    if (present_beginDate)
      builder.append(beginDate);
    boolean present_endDate = true && (isSetEndDate());
    builder.append(present_endDate);
    if (present_endDate)
      builder.append(endDate);
    boolean present_status = true && (isSetStatus());
    builder.append(present_status);
    if (present_status)
      builder.append(status);
    boolean present_pushTarget = true && (isSetPushTarget());
    builder.append(present_pushTarget);
    if (present_pushTarget)
      builder.append(pushTarget);
    boolean present_createTime = true && (isSetCreateTime());
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);
    boolean present_msgType = true && (isSetMsgType());
    builder.append(present_msgType);
    if (present_msgType)
      builder.append(msgType);
    boolean present_alert = true && (isSetAlert());
    builder.append(present_alert);
    if (present_alert)
      builder.append(alert);
    return builder.toHashCode();
  }

  public int compareTo(SystemMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SystemMessage typedOther = (SystemMessage)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginDate()).compareTo(typedOther.isSetBeginDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginDate()) {
      lastComparison = TBaseHelper.compareTo(this.beginDate, typedOther.beginDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(typedOther.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = TBaseHelper.compareTo(this.endDate, typedOther.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPushTarget()).compareTo(typedOther.isSetPushTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushTarget()) {
      lastComparison = TBaseHelper.compareTo(this.pushTarget, typedOther.pushTarget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgType()).compareTo(typedOther.isSetMsgType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgType()) {
      lastComparison = TBaseHelper.compareTo(this.msgType, typedOther.msgType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlert()).compareTo(typedOther.isSetAlert());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlert()) {
      lastComparison = TBaseHelper.compareTo(this.alert, typedOther.alert);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TITLE
          if (field.type == TType.STRING) {
            this.title = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CONTENT
          if (field.type == TType.STRING) {
            this.content = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // BEGIN_DATE
          if (field.type == TType.STRING) {
            this.beginDate = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // END_DATE
          if (field.type == TType.STRING) {
            this.endDate = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // STATUS
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            setStatusIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // PUSH_TARGET
          if (field.type == TType.I32) {
            this.pushTarget = iprot.readI32();
            setPushTargetIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // CREATE_TIME
          if (field.type == TType.STRING) {
            this.createTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // MSG_TYPE
          if (field.type == TType.I32) {
            this.msgType = iprot.readI32();
            setMsgTypeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // ALERT
          if (field.type == TType.STRING) {
            this.alert = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    if (this.title != null) {
      if (isSetTitle()) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(this.title);
        oprot.writeFieldEnd();
      }
    }
    if (this.content != null) {
      if (isSetContent()) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(this.content);
        oprot.writeFieldEnd();
      }
    }
    if (this.beginDate != null) {
      if (isSetBeginDate()) {
        oprot.writeFieldBegin(BEGIN_DATE_FIELD_DESC);
        oprot.writeString(this.beginDate);
        oprot.writeFieldEnd();
      }
    }
    if (this.endDate != null) {
      if (isSetEndDate()) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(this.endDate);
        oprot.writeFieldEnd();
      }
    }
    if (isSetStatus()) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(this.status);
      oprot.writeFieldEnd();
    }
    if (isSetPushTarget()) {
      oprot.writeFieldBegin(PUSH_TARGET_FIELD_DESC);
      oprot.writeI32(this.pushTarget);
      oprot.writeFieldEnd();
    }
    if (this.createTime != null) {
      if (isSetCreateTime()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(this.createTime);
        oprot.writeFieldEnd();
      }
    }
    if (isSetMsgType()) {
      oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
      oprot.writeI32(this.msgType);
      oprot.writeFieldEnd();
    }
    if (this.alert != null) {
      oprot.writeFieldBegin(ALERT_FIELD_DESC);
      oprot.writeString(this.alert);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SystemMessage(");
    boolean first = true;
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      }
    if (isSetBeginDate()) {
      if (!first) sb.append(", ");
      sb.append("beginDate:");
      if (this.beginDate == null) {
        sb.append("null");
      } else {
        sb.append(this.beginDate);
      }
      first = false;
      }
    if (isSetEndDate()) {
      if (!first) sb.append(", ");
      sb.append("endDate:");
      if (this.endDate == null) {
        sb.append("null");
      } else {
        sb.append(this.endDate);
      }
      first = false;
      }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      }
    if (isSetPushTarget()) {
      if (!first) sb.append(", ");
      sb.append("pushTarget:");
      sb.append(this.pushTarget);
      first = false;
      }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
      }
    if (isSetMsgType()) {
      if (!first) sb.append(", ");
      sb.append("msgType:");
      sb.append(this.msgType);
      first = false;
      }
    if (!first) sb.append(", ");
    sb.append("alert:");
    if (this.alert == null) {
      sb.append("null");
    } else {
      sb.append(this.alert);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
