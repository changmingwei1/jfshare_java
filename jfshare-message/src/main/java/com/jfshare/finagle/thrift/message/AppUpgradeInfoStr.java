/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.message;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class AppUpgradeInfoStr implements TBase<AppUpgradeInfoStr, AppUpgradeInfoStr._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("AppUpgradeInfoStr");

  private static final TField APP_TYPE_FIELD_DESC = new TField("appType", TType.I32, (short)1);
  private static final TField VERSION_FIELD_DESC = new TField("version", TType.STRING, (short)2);
  private static final TField MIN_VERSION_FIELD_DESC = new TField("minVersion", TType.STRING, (short)3);
  private static final TField MAX_VERSION_FIELD_DESC = new TField("maxVersion", TType.STRING, (short)4);
  private static final TField UPGRADE_TYPE_FIELD_DESC = new TField("upgradeType", TType.I32, (short)5);
  private static final TField URL_FIELD_DESC = new TField("url", TType.STRING, (short)6);
  private static final TField UPGRADE_DESC_FIELD_DESC = new TField("upgradeDesc", TType.STRING, (short)7);


  public int appType;
  public String version;
  public String minVersion;
  public String maxVersion;
  public int upgradeType;
  public String url;
  public String upgradeDesc;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    APP_TYPE((short)1, "appType"),
    VERSION((short)2, "version"),
    MIN_VERSION((short)3, "minVersion"),
    MAX_VERSION((short)4, "maxVersion"),
    UPGRADE_TYPE((short)5, "upgradeType"),
    URL((short)6, "url"),
    UPGRADE_DESC((short)7, "upgradeDesc");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_TYPE
  	return APP_TYPE;
        case 2: // VERSION
  	return VERSION;
        case 3: // MIN_VERSION
  	return MIN_VERSION;
        case 4: // MAX_VERSION
  	return MAX_VERSION;
        case 5: // UPGRADE_TYPE
  	return UPGRADE_TYPE;
        case 6: // URL
  	return URL;
        case 7: // UPGRADE_DESC
  	return UPGRADE_DESC;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __APPTYPE_ISSET_ID = 0;
  private static final int __UPGRADETYPE_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_TYPE, new FieldMetaData("appType", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.VERSION, new FieldMetaData("version", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MIN_VERSION, new FieldMetaData("minVersion", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MAX_VERSION, new FieldMetaData("maxVersion", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.UPGRADE_TYPE, new FieldMetaData("upgradeType", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.URL, new FieldMetaData("url", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.UPGRADE_DESC, new FieldMetaData("upgradeDesc", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(AppUpgradeInfoStr.class, metaDataMap);
  }


  public AppUpgradeInfoStr() {
  }

  public AppUpgradeInfoStr(
    int appType,
    String version,
    String minVersion,
    String maxVersion,
    int upgradeType,
    String url,
    String upgradeDesc)
  {
    this();
    this.appType = appType;
    setAppTypeIsSet(true);
    this.version = version;
    this.minVersion = minVersion;
    this.maxVersion = maxVersion;
    this.upgradeType = upgradeType;
    setUpgradeTypeIsSet(true);
    this.url = url;
    this.upgradeDesc = upgradeDesc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppUpgradeInfoStr(AppUpgradeInfoStr other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.appType = other.appType;
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetMinVersion()) {
      this.minVersion = other.minVersion;
    }
    if (other.isSetMaxVersion()) {
      this.maxVersion = other.maxVersion;
    }
    this.upgradeType = other.upgradeType;
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetUpgradeDesc()) {
      this.upgradeDesc = other.upgradeDesc;
    }
  }

  public AppUpgradeInfoStr deepCopy() {
    return new AppUpgradeInfoStr(this);
  }

  @Override
  public void clear() {
    setAppTypeIsSet(false);
    this.appType = 0;
    this.version = null;
    this.minVersion = null;
    this.maxVersion = null;
    setUpgradeTypeIsSet(false);
    this.upgradeType = 0;
    this.url = null;
    this.upgradeDesc = null;
  }

  public int getAppType() {
    return this.appType;
  }

  public AppUpgradeInfoStr setAppType(int appType) {
    this.appType = appType;
    setAppTypeIsSet(true);

    return this;
  }

  public void unsetAppType() {
  __isset_bit_vector.clear(__APPTYPE_ISSET_ID);
  }

  /** Returns true if field appType is set (has been asigned a value) and false otherwise */
  public boolean isSetAppType() {
    return __isset_bit_vector.get(__APPTYPE_ISSET_ID);
  }

  public void setAppTypeIsSet(boolean value) {
    __isset_bit_vector.set(__APPTYPE_ISSET_ID, value);
  }

  public String getVersion() {
    return this.version;
  }

  public AppUpgradeInfoStr setVersion(String version) {
    this.version = version;
    
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been asigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public String getMinVersion() {
    return this.minVersion;
  }

  public AppUpgradeInfoStr setMinVersion(String minVersion) {
    this.minVersion = minVersion;
    
    return this;
  }

  public void unsetMinVersion() {
    this.minVersion = null;
  }

  /** Returns true if field minVersion is set (has been asigned a value) and false otherwise */
  public boolean isSetMinVersion() {
    return this.minVersion != null;
  }

  public void setMinVersionIsSet(boolean value) {
    if (!value) {
      this.minVersion = null;
    }
  }

  public String getMaxVersion() {
    return this.maxVersion;
  }

  public AppUpgradeInfoStr setMaxVersion(String maxVersion) {
    this.maxVersion = maxVersion;
    
    return this;
  }

  public void unsetMaxVersion() {
    this.maxVersion = null;
  }

  /** Returns true if field maxVersion is set (has been asigned a value) and false otherwise */
  public boolean isSetMaxVersion() {
    return this.maxVersion != null;
  }

  public void setMaxVersionIsSet(boolean value) {
    if (!value) {
      this.maxVersion = null;
    }
  }

  public int getUpgradeType() {
    return this.upgradeType;
  }

  public AppUpgradeInfoStr setUpgradeType(int upgradeType) {
    this.upgradeType = upgradeType;
    setUpgradeTypeIsSet(true);

    return this;
  }

  public void unsetUpgradeType() {
  __isset_bit_vector.clear(__UPGRADETYPE_ISSET_ID);
  }

  /** Returns true if field upgradeType is set (has been asigned a value) and false otherwise */
  public boolean isSetUpgradeType() {
    return __isset_bit_vector.get(__UPGRADETYPE_ISSET_ID);
  }

  public void setUpgradeTypeIsSet(boolean value) {
    __isset_bit_vector.set(__UPGRADETYPE_ISSET_ID, value);
  }

  public String getUrl() {
    return this.url;
  }

  public AppUpgradeInfoStr setUrl(String url) {
    this.url = url;
    
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been asigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getUpgradeDesc() {
    return this.upgradeDesc;
  }

  public AppUpgradeInfoStr setUpgradeDesc(String upgradeDesc) {
    this.upgradeDesc = upgradeDesc;
    
    return this;
  }

  public void unsetUpgradeDesc() {
    this.upgradeDesc = null;
  }

  /** Returns true if field upgradeDesc is set (has been asigned a value) and false otherwise */
  public boolean isSetUpgradeDesc() {
    return this.upgradeDesc != null;
  }

  public void setUpgradeDescIsSet(boolean value) {
    if (!value) {
      this.upgradeDesc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_TYPE:
      if (value == null) {
        unsetAppType();
      } else {
        setAppType((Integer)value);
      }
      break;
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;
    case MIN_VERSION:
      if (value == null) {
        unsetMinVersion();
      } else {
        setMinVersion((String)value);
      }
      break;
    case MAX_VERSION:
      if (value == null) {
        unsetMaxVersion();
      } else {
        setMaxVersion((String)value);
      }
      break;
    case UPGRADE_TYPE:
      if (value == null) {
        unsetUpgradeType();
      } else {
        setUpgradeType((Integer)value);
      }
      break;
    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;
    case UPGRADE_DESC:
      if (value == null) {
        unsetUpgradeDesc();
      } else {
        setUpgradeDesc((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_TYPE:
      return new Integer(getAppType());
    case VERSION:
      return getVersion();
    case MIN_VERSION:
      return getMinVersion();
    case MAX_VERSION:
      return getMaxVersion();
    case UPGRADE_TYPE:
      return new Integer(getUpgradeType());
    case URL:
      return getUrl();
    case UPGRADE_DESC:
      return getUpgradeDesc();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_TYPE:
      return isSetAppType();
    case VERSION:
      return isSetVersion();
    case MIN_VERSION:
      return isSetMinVersion();
    case MAX_VERSION:
      return isSetMaxVersion();
    case UPGRADE_TYPE:
      return isSetUpgradeType();
    case URL:
      return isSetUrl();
    case UPGRADE_DESC:
      return isSetUpgradeDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppUpgradeInfoStr)
      return this.equals((AppUpgradeInfoStr)that);
    return false;
  }

  public boolean equals(AppUpgradeInfoStr that) {
    if (that == null)
      return false;
    boolean this_present_appType = true;
    boolean that_present_appType = true;
    if (this_present_appType || that_present_appType) {
      if (!(this_present_appType && that_present_appType))
        return false;
      if (this.appType != that.appType)
        return false;
    }
    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }
    boolean this_present_minVersion = true && this.isSetMinVersion();
    boolean that_present_minVersion = true && that.isSetMinVersion();
    if (this_present_minVersion || that_present_minVersion) {
      if (!(this_present_minVersion && that_present_minVersion))
        return false;
      if (!this.minVersion.equals(that.minVersion))
        return false;
    }
    boolean this_present_maxVersion = true && this.isSetMaxVersion();
    boolean that_present_maxVersion = true && that.isSetMaxVersion();
    if (this_present_maxVersion || that_present_maxVersion) {
      if (!(this_present_maxVersion && that_present_maxVersion))
        return false;
      if (!this.maxVersion.equals(that.maxVersion))
        return false;
    }
    boolean this_present_upgradeType = true;
    boolean that_present_upgradeType = true;
    if (this_present_upgradeType || that_present_upgradeType) {
      if (!(this_present_upgradeType && that_present_upgradeType))
        return false;
      if (this.upgradeType != that.upgradeType)
        return false;
    }
    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }
    boolean this_present_upgradeDesc = true && this.isSetUpgradeDesc();
    boolean that_present_upgradeDesc = true && that.isSetUpgradeDesc();
    if (this_present_upgradeDesc || that_present_upgradeDesc) {
      if (!(this_present_upgradeDesc && that_present_upgradeDesc))
        return false;
      if (!this.upgradeDesc.equals(that.upgradeDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_appType = true;
    builder.append(present_appType);
    if (present_appType)
      builder.append(appType);
    boolean present_version = true && (isSetVersion());
    builder.append(present_version);
    if (present_version)
      builder.append(version);
    boolean present_minVersion = true && (isSetMinVersion());
    builder.append(present_minVersion);
    if (present_minVersion)
      builder.append(minVersion);
    boolean present_maxVersion = true && (isSetMaxVersion());
    builder.append(present_maxVersion);
    if (present_maxVersion)
      builder.append(maxVersion);
    boolean present_upgradeType = true;
    builder.append(present_upgradeType);
    if (present_upgradeType)
      builder.append(upgradeType);
    boolean present_url = true && (isSetUrl());
    builder.append(present_url);
    if (present_url)
      builder.append(url);
    boolean present_upgradeDesc = true && (isSetUpgradeDesc());
    builder.append(present_upgradeDesc);
    if (present_upgradeDesc)
      builder.append(upgradeDesc);
    return builder.toHashCode();
  }

  public int compareTo(AppUpgradeInfoStr other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AppUpgradeInfoStr typedOther = (AppUpgradeInfoStr)other;

    lastComparison = Boolean.valueOf(isSetAppType()).compareTo(typedOther.isSetAppType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppType()) {
      lastComparison = TBaseHelper.compareTo(this.appType, typedOther.appType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinVersion()).compareTo(typedOther.isSetMinVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinVersion()) {
      lastComparison = TBaseHelper.compareTo(this.minVersion, typedOther.minVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxVersion()).compareTo(typedOther.isSetMaxVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxVersion()) {
      lastComparison = TBaseHelper.compareTo(this.maxVersion, typedOther.maxVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpgradeType()).compareTo(typedOther.isSetUpgradeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpgradeType()) {
      lastComparison = TBaseHelper.compareTo(this.upgradeType, typedOther.upgradeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpgradeDesc()).compareTo(typedOther.isSetUpgradeDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpgradeDesc()) {
      lastComparison = TBaseHelper.compareTo(this.upgradeDesc, typedOther.upgradeDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // APP_TYPE
          if (field.type == TType.I32) {
            this.appType = iprot.readI32();
            setAppTypeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // VERSION
          if (field.type == TType.STRING) {
            this.version = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MIN_VERSION
          if (field.type == TType.STRING) {
            this.minVersion = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // MAX_VERSION
          if (field.type == TType.STRING) {
            this.maxVersion = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // UPGRADE_TYPE
          if (field.type == TType.I32) {
            this.upgradeType = iprot.readI32();
            setUpgradeTypeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // URL
          if (field.type == TType.STRING) {
            this.url = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // UPGRADE_DESC
          if (field.type == TType.STRING) {
            this.upgradeDesc = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
    oprot.writeI32(this.appType);
    oprot.writeFieldEnd();
    if (this.version != null) {
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeString(this.version);
      oprot.writeFieldEnd();
    }
    if (this.minVersion != null) {
      oprot.writeFieldBegin(MIN_VERSION_FIELD_DESC);
      oprot.writeString(this.minVersion);
      oprot.writeFieldEnd();
    }
    if (this.maxVersion != null) {
      oprot.writeFieldBegin(MAX_VERSION_FIELD_DESC);
      oprot.writeString(this.maxVersion);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(UPGRADE_TYPE_FIELD_DESC);
    oprot.writeI32(this.upgradeType);
    oprot.writeFieldEnd();
    if (this.url != null) {
      oprot.writeFieldBegin(URL_FIELD_DESC);
      oprot.writeString(this.url);
      oprot.writeFieldEnd();
    }
    if (this.upgradeDesc != null) {
      oprot.writeFieldBegin(UPGRADE_DESC_FIELD_DESC);
      oprot.writeString(this.upgradeDesc);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppUpgradeInfoStr(");
    boolean first = true;
    sb.append("appType:");
    sb.append(this.appType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minVersion:");
    if (this.minVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.minVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxVersion:");
    if (this.maxVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.maxVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("upgradeType:");
    sb.append(this.upgradeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("upgradeDesc:");
    if (this.upgradeDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.upgradeDesc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
