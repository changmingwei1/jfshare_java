/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.common;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class Attribution implements TBase<Attribution, Attribution._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Attribution");

  private static final TField PROVINCE_ID_FIELD_DESC = new TField("provinceId", TType.I32, (short)1);
  private static final TField PROVINCE_NAME_FIELD_DESC = new TField("provinceName", TType.STRING, (short)2);
  private static final TField CITY_ID_FIELD_DESC = new TField("cityId", TType.I32, (short)3);
  private static final TField CITY_NAME_FIELD_DESC = new TField("cityName", TType.STRING, (short)4);
  private static final TField COUNTY_ID_FIELD_DESC = new TField("countyId", TType.I32, (short)5);
  private static final TField COUNTY_NAME_FIELD_DESC = new TField("countyName", TType.STRING, (short)6);
  private static final TField SHORT_PROVINCE_NAME_FIELD_DESC = new TField("shortProvinceName", TType.STRING, (short)7);
  private static final TField SHORT_CITY_NAME_FIELD_DESC = new TField("shortCityName", TType.STRING, (short)8);
  private static final TField SHORT_COUNTY_NAME_FIELD_DESC = new TField("shortCountyName", TType.STRING, (short)9);


  public int provinceId;
  public String provinceName;
  public int cityId;
  public String cityName;
  public int countyId;
  public String countyName;
  public String shortProvinceName;
  public String shortCityName;
  public String shortCountyName;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PROVINCE_ID((short)1, "provinceId"),
    PROVINCE_NAME((short)2, "provinceName"),
    CITY_ID((short)3, "cityId"),
    CITY_NAME((short)4, "cityName"),
    COUNTY_ID((short)5, "countyId"),
    COUNTY_NAME((short)6, "countyName"),
    SHORT_PROVINCE_NAME((short)7, "shortProvinceName"),
    SHORT_CITY_NAME((short)8, "shortCityName"),
    SHORT_COUNTY_NAME((short)9, "shortCountyName");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROVINCE_ID
  	return PROVINCE_ID;
        case 2: // PROVINCE_NAME
  	return PROVINCE_NAME;
        case 3: // CITY_ID
  	return CITY_ID;
        case 4: // CITY_NAME
  	return CITY_NAME;
        case 5: // COUNTY_ID
  	return COUNTY_ID;
        case 6: // COUNTY_NAME
  	return COUNTY_NAME;
        case 7: // SHORT_PROVINCE_NAME
  	return SHORT_PROVINCE_NAME;
        case 8: // SHORT_CITY_NAME
  	return SHORT_CITY_NAME;
        case 9: // SHORT_COUNTY_NAME
  	return SHORT_COUNTY_NAME;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __PROVINCEID_ISSET_ID = 0;
  private static final int __CITYID_ISSET_ID = 1;
  private static final int __COUNTYID_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROVINCE_ID, new FieldMetaData("provinceId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PROVINCE_NAME, new FieldMetaData("provinceName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CITY_ID, new FieldMetaData("cityId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CITY_NAME, new FieldMetaData("cityName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.COUNTY_ID, new FieldMetaData("countyId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.COUNTY_NAME, new FieldMetaData("countyName", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SHORT_PROVINCE_NAME, new FieldMetaData("shortProvinceName", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SHORT_CITY_NAME, new FieldMetaData("shortCityName", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SHORT_COUNTY_NAME, new FieldMetaData("shortCountyName", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Attribution.class, metaDataMap);
  }


  public Attribution() {
  }

  public Attribution(
    int provinceId,
    String provinceName,
    int cityId,
    String cityName)
  {
    this();
    this.provinceId = provinceId;
    setProvinceIdIsSet(true);
    this.provinceName = provinceName;
    this.cityId = cityId;
    setCityIdIsSet(true);
    this.cityName = cityName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Attribution(Attribution other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.provinceId = other.provinceId;
    if (other.isSetProvinceName()) {
      this.provinceName = other.provinceName;
    }
    this.cityId = other.cityId;
    if (other.isSetCityName()) {
      this.cityName = other.cityName;
    }
    this.countyId = other.countyId;
    if (other.isSetCountyName()) {
      this.countyName = other.countyName;
    }
    if (other.isSetShortProvinceName()) {
      this.shortProvinceName = other.shortProvinceName;
    }
    if (other.isSetShortCityName()) {
      this.shortCityName = other.shortCityName;
    }
    if (other.isSetShortCountyName()) {
      this.shortCountyName = other.shortCountyName;
    }
  }

  public Attribution deepCopy() {
    return new Attribution(this);
  }

  @Override
  public void clear() {
    setProvinceIdIsSet(false);
    this.provinceId = 0;
    this.provinceName = null;
    setCityIdIsSet(false);
    this.cityId = 0;
    this.cityName = null;
    setCountyIdIsSet(false);
    this.countyId = 0;
    this.countyName = null;
    this.shortProvinceName = null;
    this.shortCityName = null;
    this.shortCountyName = null;
  }

  public int getProvinceId() {
    return this.provinceId;
  }

  public Attribution setProvinceId(int provinceId) {
    this.provinceId = provinceId;
    setProvinceIdIsSet(true);

    return this;
  }

  public void unsetProvinceId() {
  __isset_bit_vector.clear(__PROVINCEID_ISSET_ID);
  }

  /** Returns true if field provinceId is set (has been asigned a value) and false otherwise */
  public boolean isSetProvinceId() {
    return __isset_bit_vector.get(__PROVINCEID_ISSET_ID);
  }

  public void setProvinceIdIsSet(boolean value) {
    __isset_bit_vector.set(__PROVINCEID_ISSET_ID, value);
  }

  public String getProvinceName() {
    return this.provinceName;
  }

  public Attribution setProvinceName(String provinceName) {
    this.provinceName = provinceName;
    
    return this;
  }

  public void unsetProvinceName() {
    this.provinceName = null;
  }

  /** Returns true if field provinceName is set (has been asigned a value) and false otherwise */
  public boolean isSetProvinceName() {
    return this.provinceName != null;
  }

  public void setProvinceNameIsSet(boolean value) {
    if (!value) {
      this.provinceName = null;
    }
  }

  public int getCityId() {
    return this.cityId;
  }

  public Attribution setCityId(int cityId) {
    this.cityId = cityId;
    setCityIdIsSet(true);

    return this;
  }

  public void unsetCityId() {
  __isset_bit_vector.clear(__CITYID_ISSET_ID);
  }

  /** Returns true if field cityId is set (has been asigned a value) and false otherwise */
  public boolean isSetCityId() {
    return __isset_bit_vector.get(__CITYID_ISSET_ID);
  }

  public void setCityIdIsSet(boolean value) {
    __isset_bit_vector.set(__CITYID_ISSET_ID, value);
  }

  public String getCityName() {
    return this.cityName;
  }

  public Attribution setCityName(String cityName) {
    this.cityName = cityName;
    
    return this;
  }

  public void unsetCityName() {
    this.cityName = null;
  }

  /** Returns true if field cityName is set (has been asigned a value) and false otherwise */
  public boolean isSetCityName() {
    return this.cityName != null;
  }

  public void setCityNameIsSet(boolean value) {
    if (!value) {
      this.cityName = null;
    }
  }

  public int getCountyId() {
    return this.countyId;
  }

  public Attribution setCountyId(int countyId) {
    this.countyId = countyId;
    setCountyIdIsSet(true);

    return this;
  }

  public void unsetCountyId() {
  __isset_bit_vector.clear(__COUNTYID_ISSET_ID);
  }

  /** Returns true if field countyId is set (has been asigned a value) and false otherwise */
  public boolean isSetCountyId() {
    return __isset_bit_vector.get(__COUNTYID_ISSET_ID);
  }

  public void setCountyIdIsSet(boolean value) {
    __isset_bit_vector.set(__COUNTYID_ISSET_ID, value);
  }

  public String getCountyName() {
    return this.countyName;
  }

  public Attribution setCountyName(String countyName) {
    this.countyName = countyName;
    
    return this;
  }

  public void unsetCountyName() {
    this.countyName = null;
  }

  /** Returns true if field countyName is set (has been asigned a value) and false otherwise */
  public boolean isSetCountyName() {
    return this.countyName != null;
  }

  public void setCountyNameIsSet(boolean value) {
    if (!value) {
      this.countyName = null;
    }
  }

  public String getShortProvinceName() {
    return this.shortProvinceName;
  }

  public Attribution setShortProvinceName(String shortProvinceName) {
    this.shortProvinceName = shortProvinceName;
    
    return this;
  }

  public void unsetShortProvinceName() {
    this.shortProvinceName = null;
  }

  /** Returns true if field shortProvinceName is set (has been asigned a value) and false otherwise */
  public boolean isSetShortProvinceName() {
    return this.shortProvinceName != null;
  }

  public void setShortProvinceNameIsSet(boolean value) {
    if (!value) {
      this.shortProvinceName = null;
    }
  }

  public String getShortCityName() {
    return this.shortCityName;
  }

  public Attribution setShortCityName(String shortCityName) {
    this.shortCityName = shortCityName;
    
    return this;
  }

  public void unsetShortCityName() {
    this.shortCityName = null;
  }

  /** Returns true if field shortCityName is set (has been asigned a value) and false otherwise */
  public boolean isSetShortCityName() {
    return this.shortCityName != null;
  }

  public void setShortCityNameIsSet(boolean value) {
    if (!value) {
      this.shortCityName = null;
    }
  }

  public String getShortCountyName() {
    return this.shortCountyName;
  }

  public Attribution setShortCountyName(String shortCountyName) {
    this.shortCountyName = shortCountyName;
    
    return this;
  }

  public void unsetShortCountyName() {
    this.shortCountyName = null;
  }

  /** Returns true if field shortCountyName is set (has been asigned a value) and false otherwise */
  public boolean isSetShortCountyName() {
    return this.shortCountyName != null;
  }

  public void setShortCountyNameIsSet(boolean value) {
    if (!value) {
      this.shortCountyName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROVINCE_ID:
      if (value == null) {
        unsetProvinceId();
      } else {
        setProvinceId((Integer)value);
      }
      break;
    case PROVINCE_NAME:
      if (value == null) {
        unsetProvinceName();
      } else {
        setProvinceName((String)value);
      }
      break;
    case CITY_ID:
      if (value == null) {
        unsetCityId();
      } else {
        setCityId((Integer)value);
      }
      break;
    case CITY_NAME:
      if (value == null) {
        unsetCityName();
      } else {
        setCityName((String)value);
      }
      break;
    case COUNTY_ID:
      if (value == null) {
        unsetCountyId();
      } else {
        setCountyId((Integer)value);
      }
      break;
    case COUNTY_NAME:
      if (value == null) {
        unsetCountyName();
      } else {
        setCountyName((String)value);
      }
      break;
    case SHORT_PROVINCE_NAME:
      if (value == null) {
        unsetShortProvinceName();
      } else {
        setShortProvinceName((String)value);
      }
      break;
    case SHORT_CITY_NAME:
      if (value == null) {
        unsetShortCityName();
      } else {
        setShortCityName((String)value);
      }
      break;
    case SHORT_COUNTY_NAME:
      if (value == null) {
        unsetShortCountyName();
      } else {
        setShortCountyName((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROVINCE_ID:
      return new Integer(getProvinceId());
    case PROVINCE_NAME:
      return getProvinceName();
    case CITY_ID:
      return new Integer(getCityId());
    case CITY_NAME:
      return getCityName();
    case COUNTY_ID:
      return new Integer(getCountyId());
    case COUNTY_NAME:
      return getCountyName();
    case SHORT_PROVINCE_NAME:
      return getShortProvinceName();
    case SHORT_CITY_NAME:
      return getShortCityName();
    case SHORT_COUNTY_NAME:
      return getShortCountyName();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROVINCE_ID:
      return isSetProvinceId();
    case PROVINCE_NAME:
      return isSetProvinceName();
    case CITY_ID:
      return isSetCityId();
    case CITY_NAME:
      return isSetCityName();
    case COUNTY_ID:
      return isSetCountyId();
    case COUNTY_NAME:
      return isSetCountyName();
    case SHORT_PROVINCE_NAME:
      return isSetShortProvinceName();
    case SHORT_CITY_NAME:
      return isSetShortCityName();
    case SHORT_COUNTY_NAME:
      return isSetShortCountyName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Attribution)
      return this.equals((Attribution)that);
    return false;
  }

  public boolean equals(Attribution that) {
    if (that == null)
      return false;
    boolean this_present_provinceId = true;
    boolean that_present_provinceId = true;
    if (this_present_provinceId || that_present_provinceId) {
      if (!(this_present_provinceId && that_present_provinceId))
        return false;
      if (this.provinceId != that.provinceId)
        return false;
    }
    boolean this_present_provinceName = true && this.isSetProvinceName();
    boolean that_present_provinceName = true && that.isSetProvinceName();
    if (this_present_provinceName || that_present_provinceName) {
      if (!(this_present_provinceName && that_present_provinceName))
        return false;
      if (!this.provinceName.equals(that.provinceName))
        return false;
    }
    boolean this_present_cityId = true;
    boolean that_present_cityId = true;
    if (this_present_cityId || that_present_cityId) {
      if (!(this_present_cityId && that_present_cityId))
        return false;
      if (this.cityId != that.cityId)
        return false;
    }
    boolean this_present_cityName = true && this.isSetCityName();
    boolean that_present_cityName = true && that.isSetCityName();
    if (this_present_cityName || that_present_cityName) {
      if (!(this_present_cityName && that_present_cityName))
        return false;
      if (!this.cityName.equals(that.cityName))
        return false;
    }
    boolean this_present_countyId = true && this.isSetCountyId();
    boolean that_present_countyId = true && that.isSetCountyId();
    if (this_present_countyId || that_present_countyId) {
      if (!(this_present_countyId && that_present_countyId))
        return false;
      if (this.countyId != that.countyId)
        return false;
    }
    boolean this_present_countyName = true && this.isSetCountyName();
    boolean that_present_countyName = true && that.isSetCountyName();
    if (this_present_countyName || that_present_countyName) {
      if (!(this_present_countyName && that_present_countyName))
        return false;
      if (!this.countyName.equals(that.countyName))
        return false;
    }
    boolean this_present_shortProvinceName = true && this.isSetShortProvinceName();
    boolean that_present_shortProvinceName = true && that.isSetShortProvinceName();
    if (this_present_shortProvinceName || that_present_shortProvinceName) {
      if (!(this_present_shortProvinceName && that_present_shortProvinceName))
        return false;
      if (!this.shortProvinceName.equals(that.shortProvinceName))
        return false;
    }
    boolean this_present_shortCityName = true && this.isSetShortCityName();
    boolean that_present_shortCityName = true && that.isSetShortCityName();
    if (this_present_shortCityName || that_present_shortCityName) {
      if (!(this_present_shortCityName && that_present_shortCityName))
        return false;
      if (!this.shortCityName.equals(that.shortCityName))
        return false;
    }
    boolean this_present_shortCountyName = true && this.isSetShortCountyName();
    boolean that_present_shortCountyName = true && that.isSetShortCountyName();
    if (this_present_shortCountyName || that_present_shortCountyName) {
      if (!(this_present_shortCountyName && that_present_shortCountyName))
        return false;
      if (!this.shortCountyName.equals(that.shortCountyName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_provinceId = true;
    builder.append(present_provinceId);
    if (present_provinceId)
      builder.append(provinceId);
    boolean present_provinceName = true && (isSetProvinceName());
    builder.append(present_provinceName);
    if (present_provinceName)
      builder.append(provinceName);
    boolean present_cityId = true;
    builder.append(present_cityId);
    if (present_cityId)
      builder.append(cityId);
    boolean present_cityName = true && (isSetCityName());
    builder.append(present_cityName);
    if (present_cityName)
      builder.append(cityName);
    boolean present_countyId = true && (isSetCountyId());
    builder.append(present_countyId);
    if (present_countyId)
      builder.append(countyId);
    boolean present_countyName = true && (isSetCountyName());
    builder.append(present_countyName);
    if (present_countyName)
      builder.append(countyName);
    boolean present_shortProvinceName = true && (isSetShortProvinceName());
    builder.append(present_shortProvinceName);
    if (present_shortProvinceName)
      builder.append(shortProvinceName);
    boolean present_shortCityName = true && (isSetShortCityName());
    builder.append(present_shortCityName);
    if (present_shortCityName)
      builder.append(shortCityName);
    boolean present_shortCountyName = true && (isSetShortCountyName());
    builder.append(present_shortCountyName);
    if (present_shortCountyName)
      builder.append(shortCountyName);
    return builder.toHashCode();
  }

  public int compareTo(Attribution other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Attribution typedOther = (Attribution)other;

    lastComparison = Boolean.valueOf(isSetProvinceId()).compareTo(typedOther.isSetProvinceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceId()) {
      lastComparison = TBaseHelper.compareTo(this.provinceId, typedOther.provinceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceName()).compareTo(typedOther.isSetProvinceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceName()) {
      lastComparison = TBaseHelper.compareTo(this.provinceName, typedOther.provinceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityId()).compareTo(typedOther.isSetCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityId()) {
      lastComparison = TBaseHelper.compareTo(this.cityId, typedOther.cityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityName()).compareTo(typedOther.isSetCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityName()) {
      lastComparison = TBaseHelper.compareTo(this.cityName, typedOther.cityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountyId()).compareTo(typedOther.isSetCountyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountyId()) {
      lastComparison = TBaseHelper.compareTo(this.countyId, typedOther.countyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountyName()).compareTo(typedOther.isSetCountyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountyName()) {
      lastComparison = TBaseHelper.compareTo(this.countyName, typedOther.countyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortProvinceName()).compareTo(typedOther.isSetShortProvinceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortProvinceName()) {
      lastComparison = TBaseHelper.compareTo(this.shortProvinceName, typedOther.shortProvinceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortCityName()).compareTo(typedOther.isSetShortCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortCityName()) {
      lastComparison = TBaseHelper.compareTo(this.shortCityName, typedOther.shortCityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortCountyName()).compareTo(typedOther.isSetShortCountyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortCountyName()) {
      lastComparison = TBaseHelper.compareTo(this.shortCountyName, typedOther.shortCountyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PROVINCE_ID
          if (field.type == TType.I32) {
            this.provinceId = iprot.readI32();
            setProvinceIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PROVINCE_NAME
          if (field.type == TType.STRING) {
            this.provinceName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CITY_ID
          if (field.type == TType.I32) {
            this.cityId = iprot.readI32();
            setCityIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CITY_NAME
          if (field.type == TType.STRING) {
            this.cityName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // COUNTY_ID
          if (field.type == TType.I32) {
            this.countyId = iprot.readI32();
            setCountyIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // COUNTY_NAME
          if (field.type == TType.STRING) {
            this.countyName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // SHORT_PROVINCE_NAME
          if (field.type == TType.STRING) {
            this.shortProvinceName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // SHORT_CITY_NAME
          if (field.type == TType.STRING) {
            this.shortCityName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // SHORT_COUNTY_NAME
          if (field.type == TType.STRING) {
            this.shortCountyName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(PROVINCE_ID_FIELD_DESC);
    oprot.writeI32(this.provinceId);
    oprot.writeFieldEnd();
    if (this.provinceName != null) {
      oprot.writeFieldBegin(PROVINCE_NAME_FIELD_DESC);
      oprot.writeString(this.provinceName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CITY_ID_FIELD_DESC);
    oprot.writeI32(this.cityId);
    oprot.writeFieldEnd();
    if (this.cityName != null) {
      oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
      oprot.writeString(this.cityName);
      oprot.writeFieldEnd();
    }
    if (isSetCountyId()) {
      oprot.writeFieldBegin(COUNTY_ID_FIELD_DESC);
      oprot.writeI32(this.countyId);
      oprot.writeFieldEnd();
    }
    if (this.countyName != null) {
      if (isSetCountyName()) {
        oprot.writeFieldBegin(COUNTY_NAME_FIELD_DESC);
        oprot.writeString(this.countyName);
        oprot.writeFieldEnd();
      }
    }
    if (this.shortProvinceName != null) {
      if (isSetShortProvinceName()) {
        oprot.writeFieldBegin(SHORT_PROVINCE_NAME_FIELD_DESC);
        oprot.writeString(this.shortProvinceName);
        oprot.writeFieldEnd();
      }
    }
    if (this.shortCityName != null) {
      if (isSetShortCityName()) {
        oprot.writeFieldBegin(SHORT_CITY_NAME_FIELD_DESC);
        oprot.writeString(this.shortCityName);
        oprot.writeFieldEnd();
      }
    }
    if (this.shortCountyName != null) {
      if (isSetShortCountyName()) {
        oprot.writeFieldBegin(SHORT_COUNTY_NAME_FIELD_DESC);
        oprot.writeString(this.shortCountyName);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Attribution(");
    boolean first = true;
    sb.append("provinceId:");
    sb.append(this.provinceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceName:");
    if (this.provinceName == null) {
      sb.append("null");
    } else {
      sb.append(this.provinceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityId:");
    sb.append(this.cityId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityName:");
    if (this.cityName == null) {
      sb.append("null");
    } else {
      sb.append(this.cityName);
    }
    first = false;
    if (isSetCountyId()) {
      if (!first) sb.append(", ");
      sb.append("countyId:");
      sb.append(this.countyId);
      first = false;
      }
    if (isSetCountyName()) {
      if (!first) sb.append(", ");
      sb.append("countyName:");
      if (this.countyName == null) {
        sb.append("null");
      } else {
        sb.append(this.countyName);
      }
      first = false;
      }
    if (isSetShortProvinceName()) {
      if (!first) sb.append(", ");
      sb.append("shortProvinceName:");
      if (this.shortProvinceName == null) {
        sb.append("null");
      } else {
        sb.append(this.shortProvinceName);
      }
      first = false;
      }
    if (isSetShortCityName()) {
      if (!first) sb.append(", ");
      sb.append("shortCityName:");
      if (this.shortCityName == null) {
        sb.append("null");
      } else {
        sb.append(this.shortCityName);
      }
      first = false;
      }
    if (isSetShortCountyName()) {
      if (!first) sb.append(", ");
      sb.append("shortCountyName:");
      if (this.shortCountyName == null) {
        sb.append("null");
      } else {
        sb.append(this.shortCountyName);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
