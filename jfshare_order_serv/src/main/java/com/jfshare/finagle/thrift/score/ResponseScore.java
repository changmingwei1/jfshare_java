/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.score;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class ResponseScore implements TBase<ResponseScore, ResponseScore._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ResponseScore");

  private static final TField APP_CODE_FIELD_DESC = new TField("AppCode", TType.STRING, (short)1);
  private static final TField RESPONSE_DATE_FIELD_DESC = new TField("ResponseDate", TType.STRING, (short)2);
  private static final TField SIGN_FIELD_DESC = new TField("Sign", TType.STRING, (short)3);
  private static final TField ERR_CODE_FIELD_DESC = new TField("ErrCode", TType.STRING, (short)4);
  private static final TField ERR_MSG_FIELD_DESC = new TField("ErrMsg", TType.STRING, (short)5);


  public String AppCode;
  public String ResponseDate;
  public String Sign;
  public String ErrCode;
  public String ErrMsg;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    APP_CODE((short)1, "AppCode"),
    RESPONSE_DATE((short)2, "ResponseDate"),
    SIGN((short)3, "Sign"),
    ERR_CODE((short)4, "ErrCode"),
    ERR_MSG((short)5, "ErrMsg");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_CODE
  	return APP_CODE;
        case 2: // RESPONSE_DATE
  	return RESPONSE_DATE;
        case 3: // SIGN
  	return SIGN;
        case 4: // ERR_CODE
  	return ERR_CODE;
        case 5: // ERR_MSG
  	return ERR_MSG;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_CODE, new FieldMetaData("AppCode", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.RESPONSE_DATE, new FieldMetaData("ResponseDate", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SIGN, new FieldMetaData("Sign", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ERR_CODE, new FieldMetaData("ErrCode", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ERR_MSG, new FieldMetaData("ErrMsg", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ResponseScore.class, metaDataMap);
  }


  public ResponseScore() {
  }

  public ResponseScore(
    String AppCode,
    String ResponseDate,
    String Sign,
    String ErrCode,
    String ErrMsg)
  {
    this();
    this.AppCode = AppCode;
    this.ResponseDate = ResponseDate;
    this.Sign = Sign;
    this.ErrCode = ErrCode;
    this.ErrMsg = ErrMsg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResponseScore(ResponseScore other) {
    if (other.isSetAppCode()) {
      this.AppCode = other.AppCode;
    }
    if (other.isSetResponseDate()) {
      this.ResponseDate = other.ResponseDate;
    }
    if (other.isSetSign()) {
      this.Sign = other.Sign;
    }
    if (other.isSetErrCode()) {
      this.ErrCode = other.ErrCode;
    }
    if (other.isSetErrMsg()) {
      this.ErrMsg = other.ErrMsg;
    }
  }

  public ResponseScore deepCopy() {
    return new ResponseScore(this);
  }

  @Override
  public void clear() {
    this.AppCode = null;
    this.ResponseDate = null;
    this.Sign = null;
    this.ErrCode = null;
    this.ErrMsg = null;
  }

  public String getAppCode() {
    return this.AppCode;
  }

  public ResponseScore setAppCode(String AppCode) {
    this.AppCode = AppCode;
    
    return this;
  }

  public void unsetAppCode() {
    this.AppCode = null;
  }

  /** Returns true if field AppCode is set (has been asigned a value) and false otherwise */
  public boolean isSetAppCode() {
    return this.AppCode != null;
  }

  public void setAppCodeIsSet(boolean value) {
    if (!value) {
      this.AppCode = null;
    }
  }

  public String getResponseDate() {
    return this.ResponseDate;
  }

  public ResponseScore setResponseDate(String ResponseDate) {
    this.ResponseDate = ResponseDate;
    
    return this;
  }

  public void unsetResponseDate() {
    this.ResponseDate = null;
  }

  /** Returns true if field ResponseDate is set (has been asigned a value) and false otherwise */
  public boolean isSetResponseDate() {
    return this.ResponseDate != null;
  }

  public void setResponseDateIsSet(boolean value) {
    if (!value) {
      this.ResponseDate = null;
    }
  }

  public String getSign() {
    return this.Sign;
  }

  public ResponseScore setSign(String Sign) {
    this.Sign = Sign;
    
    return this;
  }

  public void unsetSign() {
    this.Sign = null;
  }

  /** Returns true if field Sign is set (has been asigned a value) and false otherwise */
  public boolean isSetSign() {
    return this.Sign != null;
  }

  public void setSignIsSet(boolean value) {
    if (!value) {
      this.Sign = null;
    }
  }

  public String getErrCode() {
    return this.ErrCode;
  }

  public ResponseScore setErrCode(String ErrCode) {
    this.ErrCode = ErrCode;
    
    return this;
  }

  public void unsetErrCode() {
    this.ErrCode = null;
  }

  /** Returns true if field ErrCode is set (has been asigned a value) and false otherwise */
  public boolean isSetErrCode() {
    return this.ErrCode != null;
  }

  public void setErrCodeIsSet(boolean value) {
    if (!value) {
      this.ErrCode = null;
    }
  }

  public String getErrMsg() {
    return this.ErrMsg;
  }

  public ResponseScore setErrMsg(String ErrMsg) {
    this.ErrMsg = ErrMsg;
    
    return this;
  }

  public void unsetErrMsg() {
    this.ErrMsg = null;
  }

  /** Returns true if field ErrMsg is set (has been asigned a value) and false otherwise */
  public boolean isSetErrMsg() {
    return this.ErrMsg != null;
  }

  public void setErrMsgIsSet(boolean value) {
    if (!value) {
      this.ErrMsg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_CODE:
      if (value == null) {
        unsetAppCode();
      } else {
        setAppCode((String)value);
      }
      break;
    case RESPONSE_DATE:
      if (value == null) {
        unsetResponseDate();
      } else {
        setResponseDate((String)value);
      }
      break;
    case SIGN:
      if (value == null) {
        unsetSign();
      } else {
        setSign((String)value);
      }
      break;
    case ERR_CODE:
      if (value == null) {
        unsetErrCode();
      } else {
        setErrCode((String)value);
      }
      break;
    case ERR_MSG:
      if (value == null) {
        unsetErrMsg();
      } else {
        setErrMsg((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_CODE:
      return getAppCode();
    case RESPONSE_DATE:
      return getResponseDate();
    case SIGN:
      return getSign();
    case ERR_CODE:
      return getErrCode();
    case ERR_MSG:
      return getErrMsg();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_CODE:
      return isSetAppCode();
    case RESPONSE_DATE:
      return isSetResponseDate();
    case SIGN:
      return isSetSign();
    case ERR_CODE:
      return isSetErrCode();
    case ERR_MSG:
      return isSetErrMsg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResponseScore)
      return this.equals((ResponseScore)that);
    return false;
  }

  public boolean equals(ResponseScore that) {
    if (that == null)
      return false;
    boolean this_present_AppCode = true && this.isSetAppCode();
    boolean that_present_AppCode = true && that.isSetAppCode();
    if (this_present_AppCode || that_present_AppCode) {
      if (!(this_present_AppCode && that_present_AppCode))
        return false;
      if (!this.AppCode.equals(that.AppCode))
        return false;
    }
    boolean this_present_ResponseDate = true && this.isSetResponseDate();
    boolean that_present_ResponseDate = true && that.isSetResponseDate();
    if (this_present_ResponseDate || that_present_ResponseDate) {
      if (!(this_present_ResponseDate && that_present_ResponseDate))
        return false;
      if (!this.ResponseDate.equals(that.ResponseDate))
        return false;
    }
    boolean this_present_Sign = true && this.isSetSign();
    boolean that_present_Sign = true && that.isSetSign();
    if (this_present_Sign || that_present_Sign) {
      if (!(this_present_Sign && that_present_Sign))
        return false;
      if (!this.Sign.equals(that.Sign))
        return false;
    }
    boolean this_present_ErrCode = true && this.isSetErrCode();
    boolean that_present_ErrCode = true && that.isSetErrCode();
    if (this_present_ErrCode || that_present_ErrCode) {
      if (!(this_present_ErrCode && that_present_ErrCode))
        return false;
      if (!this.ErrCode.equals(that.ErrCode))
        return false;
    }
    boolean this_present_ErrMsg = true && this.isSetErrMsg();
    boolean that_present_ErrMsg = true && that.isSetErrMsg();
    if (this_present_ErrMsg || that_present_ErrMsg) {
      if (!(this_present_ErrMsg && that_present_ErrMsg))
        return false;
      if (!this.ErrMsg.equals(that.ErrMsg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_AppCode = true && (isSetAppCode());
    builder.append(present_AppCode);
    if (present_AppCode)
      builder.append(AppCode);
    boolean present_ResponseDate = true && (isSetResponseDate());
    builder.append(present_ResponseDate);
    if (present_ResponseDate)
      builder.append(ResponseDate);
    boolean present_Sign = true && (isSetSign());
    builder.append(present_Sign);
    if (present_Sign)
      builder.append(Sign);
    boolean present_ErrCode = true && (isSetErrCode());
    builder.append(present_ErrCode);
    if (present_ErrCode)
      builder.append(ErrCode);
    boolean present_ErrMsg = true && (isSetErrMsg());
    builder.append(present_ErrMsg);
    if (present_ErrMsg)
      builder.append(ErrMsg);
    return builder.toHashCode();
  }

  public int compareTo(ResponseScore other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ResponseScore typedOther = (ResponseScore)other;

    lastComparison = Boolean.valueOf(isSetAppCode()).compareTo(typedOther.isSetAppCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppCode()) {
      lastComparison = TBaseHelper.compareTo(this.AppCode, typedOther.AppCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseDate()).compareTo(typedOther.isSetResponseDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseDate()) {
      lastComparison = TBaseHelper.compareTo(this.ResponseDate, typedOther.ResponseDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSign()) {
      lastComparison = TBaseHelper.compareTo(this.Sign, typedOther.Sign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrCode()).compareTo(typedOther.isSetErrCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrCode()) {
      lastComparison = TBaseHelper.compareTo(this.ErrCode, typedOther.ErrCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrMsg()).compareTo(typedOther.isSetErrMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrMsg()) {
      lastComparison = TBaseHelper.compareTo(this.ErrMsg, typedOther.ErrMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // APP_CODE
          if (field.type == TType.STRING) {
            this.AppCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // RESPONSE_DATE
          if (field.type == TType.STRING) {
            this.ResponseDate = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SIGN
          if (field.type == TType.STRING) {
            this.Sign = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ERR_CODE
          if (field.type == TType.STRING) {
            this.ErrCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ERR_MSG
          if (field.type == TType.STRING) {
            this.ErrMsg = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.AppCode != null) {
      oprot.writeFieldBegin(APP_CODE_FIELD_DESC);
      oprot.writeString(this.AppCode);
      oprot.writeFieldEnd();
    }
    if (this.ResponseDate != null) {
      oprot.writeFieldBegin(RESPONSE_DATE_FIELD_DESC);
      oprot.writeString(this.ResponseDate);
      oprot.writeFieldEnd();
    }
    if (this.Sign != null) {
      oprot.writeFieldBegin(SIGN_FIELD_DESC);
      oprot.writeString(this.Sign);
      oprot.writeFieldEnd();
    }
    if (this.ErrCode != null) {
      oprot.writeFieldBegin(ERR_CODE_FIELD_DESC);
      oprot.writeString(this.ErrCode);
      oprot.writeFieldEnd();
    }
    if (this.ErrMsg != null) {
      oprot.writeFieldBegin(ERR_MSG_FIELD_DESC);
      oprot.writeString(this.ErrMsg);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResponseScore(");
    boolean first = true;
    sb.append("AppCode:");
    if (this.AppCode == null) {
      sb.append("null");
    } else {
      sb.append(this.AppCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ResponseDate:");
    if (this.ResponseDate == null) {
      sb.append("null");
    } else {
      sb.append(this.ResponseDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Sign:");
    if (this.Sign == null) {
      sb.append("null");
    } else {
      sb.append(this.Sign);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ErrCode:");
    if (this.ErrCode == null) {
      sb.append("null");
    } else {
      sb.append(this.ErrCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ErrMsg:");
    if (this.ErrMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.ErrMsg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
