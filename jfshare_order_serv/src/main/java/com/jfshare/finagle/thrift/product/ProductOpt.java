/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.product;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class ProductOpt implements TBase<ProductOpt, ProductOpt._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ProductOpt");

  private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, (short)1);
  private static final TField CUR_STATE_FIELD_DESC = new TField("curState", TType.I32, (short)2);
  private static final TField ACTIVE_STATE_FIELD_DESC = new TField("activeState", TType.I32, (short)3);
  private static final TField DESC_FIELD_DESC = new TField("desc", TType.STRING, (short)4);
  private static final TField OPERATOR_ID_FIELD_DESC = new TField("operatorId", TType.STRING, (short)5);
  private static final TField OPERATOR_TYPE_FIELD_DESC = new TField("operatorType", TType.I32, (short)6);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.STRING, (short)7);


  public String productId;
  public int curState;
  public int activeState;
  public String desc;
  public String operatorId;
  public int operatorType;
  public String createTime;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PRODUCT_ID((short)1, "productId"),
    CUR_STATE((short)2, "curState"),
    ACTIVE_STATE((short)3, "activeState"),
    DESC((short)4, "desc"),
    OPERATOR_ID((short)5, "operatorId"),
    OPERATOR_TYPE((short)6, "operatorType"),
    CREATE_TIME((short)7, "createTime");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
  	return PRODUCT_ID;
        case 2: // CUR_STATE
  	return CUR_STATE;
        case 3: // ACTIVE_STATE
  	return ACTIVE_STATE;
        case 4: // DESC
  	return DESC;
        case 5: // OPERATOR_ID
  	return OPERATOR_ID;
        case 6: // OPERATOR_TYPE
  	return OPERATOR_TYPE;
        case 7: // CREATE_TIME
  	return CREATE_TIME;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __CURSTATE_ISSET_ID = 0;
  private static final int __ACTIVESTATE_ISSET_ID = 1;
  private static final int __OPERATORTYPE_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new FieldMetaData("productId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CUR_STATE, new FieldMetaData("curState", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ACTIVE_STATE, new FieldMetaData("activeState", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.DESC, new FieldMetaData("desc", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.OPERATOR_ID, new FieldMetaData("operatorId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.OPERATOR_TYPE, new FieldMetaData("operatorType", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ProductOpt.class, metaDataMap);
  }


  public ProductOpt() {
  }

  public ProductOpt(
    String productId,
    int curState,
    int activeState,
    String operatorId,
    int operatorType)
  {
    this();
    this.productId = productId;
    this.curState = curState;
    setCurStateIsSet(true);
    this.activeState = activeState;
    setActiveStateIsSet(true);
    this.operatorId = operatorId;
    this.operatorType = operatorType;
    setOperatorTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductOpt(ProductOpt other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    this.curState = other.curState;
    this.activeState = other.activeState;
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetOperatorId()) {
      this.operatorId = other.operatorId;
    }
    this.operatorType = other.operatorType;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
  }

  public ProductOpt deepCopy() {
    return new ProductOpt(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    setCurStateIsSet(false);
    this.curState = 0;
    setActiveStateIsSet(false);
    this.activeState = 0;
    this.desc = null;
    this.operatorId = null;
    setOperatorTypeIsSet(false);
    this.operatorType = 0;
    this.createTime = null;
  }

  public String getProductId() {
    return this.productId;
  }

  public ProductOpt setProductId(String productId) {
    this.productId = productId;
    
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been asigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public int getCurState() {
    return this.curState;
  }

  public ProductOpt setCurState(int curState) {
    this.curState = curState;
    setCurStateIsSet(true);

    return this;
  }

  public void unsetCurState() {
  __isset_bit_vector.clear(__CURSTATE_ISSET_ID);
  }

  /** Returns true if field curState is set (has been asigned a value) and false otherwise */
  public boolean isSetCurState() {
    return __isset_bit_vector.get(__CURSTATE_ISSET_ID);
  }

  public void setCurStateIsSet(boolean value) {
    __isset_bit_vector.set(__CURSTATE_ISSET_ID, value);
  }

  public int getActiveState() {
    return this.activeState;
  }

  public ProductOpt setActiveState(int activeState) {
    this.activeState = activeState;
    setActiveStateIsSet(true);

    return this;
  }

  public void unsetActiveState() {
  __isset_bit_vector.clear(__ACTIVESTATE_ISSET_ID);
  }

  /** Returns true if field activeState is set (has been asigned a value) and false otherwise */
  public boolean isSetActiveState() {
    return __isset_bit_vector.get(__ACTIVESTATE_ISSET_ID);
  }

  public void setActiveStateIsSet(boolean value) {
    __isset_bit_vector.set(__ACTIVESTATE_ISSET_ID, value);
  }

  public String getDesc() {
    return this.desc;
  }

  public ProductOpt setDesc(String desc) {
    this.desc = desc;
    
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been asigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getOperatorId() {
    return this.operatorId;
  }

  public ProductOpt setOperatorId(String operatorId) {
    this.operatorId = operatorId;
    
    return this;
  }

  public void unsetOperatorId() {
    this.operatorId = null;
  }

  /** Returns true if field operatorId is set (has been asigned a value) and false otherwise */
  public boolean isSetOperatorId() {
    return this.operatorId != null;
  }

  public void setOperatorIdIsSet(boolean value) {
    if (!value) {
      this.operatorId = null;
    }
  }

  public int getOperatorType() {
    return this.operatorType;
  }

  public ProductOpt setOperatorType(int operatorType) {
    this.operatorType = operatorType;
    setOperatorTypeIsSet(true);

    return this;
  }

  public void unsetOperatorType() {
  __isset_bit_vector.clear(__OPERATORTYPE_ISSET_ID);
  }

  /** Returns true if field operatorType is set (has been asigned a value) and false otherwise */
  public boolean isSetOperatorType() {
    return __isset_bit_vector.get(__OPERATORTYPE_ISSET_ID);
  }

  public void setOperatorTypeIsSet(boolean value) {
    __isset_bit_vector.set(__OPERATORTYPE_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public ProductOpt setCreateTime(String createTime) {
    this.createTime = createTime;
    
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;
    case CUR_STATE:
      if (value == null) {
        unsetCurState();
      } else {
        setCurState((Integer)value);
      }
      break;
    case ACTIVE_STATE:
      if (value == null) {
        unsetActiveState();
      } else {
        setActiveState((Integer)value);
      }
      break;
    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;
    case OPERATOR_ID:
      if (value == null) {
        unsetOperatorId();
      } else {
        setOperatorId((String)value);
      }
      break;
    case OPERATOR_TYPE:
      if (value == null) {
        unsetOperatorType();
      } else {
        setOperatorType((Integer)value);
      }
      break;
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();
    case CUR_STATE:
      return new Integer(getCurState());
    case ACTIVE_STATE:
      return new Integer(getActiveState());
    case DESC:
      return getDesc();
    case OPERATOR_ID:
      return getOperatorId();
    case OPERATOR_TYPE:
      return new Integer(getOperatorType());
    case CREATE_TIME:
      return getCreateTime();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case CUR_STATE:
      return isSetCurState();
    case ACTIVE_STATE:
      return isSetActiveState();
    case DESC:
      return isSetDesc();
    case OPERATOR_ID:
      return isSetOperatorId();
    case OPERATOR_TYPE:
      return isSetOperatorType();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductOpt)
      return this.equals((ProductOpt)that);
    return false;
  }

  public boolean equals(ProductOpt that) {
    if (that == null)
      return false;
    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }
    boolean this_present_curState = true;
    boolean that_present_curState = true;
    if (this_present_curState || that_present_curState) {
      if (!(this_present_curState && that_present_curState))
        return false;
      if (this.curState != that.curState)
        return false;
    }
    boolean this_present_activeState = true;
    boolean that_present_activeState = true;
    if (this_present_activeState || that_present_activeState) {
      if (!(this_present_activeState && that_present_activeState))
        return false;
      if (this.activeState != that.activeState)
        return false;
    }
    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }
    boolean this_present_operatorId = true && this.isSetOperatorId();
    boolean that_present_operatorId = true && that.isSetOperatorId();
    if (this_present_operatorId || that_present_operatorId) {
      if (!(this_present_operatorId && that_present_operatorId))
        return false;
      if (!this.operatorId.equals(that.operatorId))
        return false;
    }
    boolean this_present_operatorType = true;
    boolean that_present_operatorType = true;
    if (this_present_operatorType || that_present_operatorType) {
      if (!(this_present_operatorType && that_present_operatorType))
        return false;
      if (this.operatorType != that.operatorType)
        return false;
    }
    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_productId = true && (isSetProductId());
    builder.append(present_productId);
    if (present_productId)
      builder.append(productId);
    boolean present_curState = true;
    builder.append(present_curState);
    if (present_curState)
      builder.append(curState);
    boolean present_activeState = true;
    builder.append(present_activeState);
    if (present_activeState)
      builder.append(activeState);
    boolean present_desc = true && (isSetDesc());
    builder.append(present_desc);
    if (present_desc)
      builder.append(desc);
    boolean present_operatorId = true && (isSetOperatorId());
    builder.append(present_operatorId);
    if (present_operatorId)
      builder.append(operatorId);
    boolean present_operatorType = true;
    builder.append(present_operatorType);
    if (present_operatorType)
      builder.append(operatorType);
    boolean present_createTime = true && (isSetCreateTime());
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);
    return builder.toHashCode();
  }

  public int compareTo(ProductOpt other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ProductOpt typedOther = (ProductOpt)other;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = TBaseHelper.compareTo(this.productId, typedOther.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurState()).compareTo(typedOther.isSetCurState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurState()) {
      lastComparison = TBaseHelper.compareTo(this.curState, typedOther.curState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveState()).compareTo(typedOther.isSetActiveState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveState()) {
      lastComparison = TBaseHelper.compareTo(this.activeState, typedOther.activeState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(typedOther.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = TBaseHelper.compareTo(this.desc, typedOther.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(typedOther.isSetOperatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorId()) {
      lastComparison = TBaseHelper.compareTo(this.operatorId, typedOther.operatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorType()).compareTo(typedOther.isSetOperatorType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorType()) {
      lastComparison = TBaseHelper.compareTo(this.operatorType, typedOther.operatorType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PRODUCT_ID
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CUR_STATE
          if (field.type == TType.I32) {
            this.curState = iprot.readI32();
            setCurStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ACTIVE_STATE
          if (field.type == TType.I32) {
            this.activeState = iprot.readI32();
            setActiveStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // DESC
          if (field.type == TType.STRING) {
            this.desc = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // OPERATOR_ID
          if (field.type == TType.STRING) {
            this.operatorId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // OPERATOR_TYPE
          if (field.type == TType.I32) {
            this.operatorType = iprot.readI32();
            setOperatorTypeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // CREATE_TIME
          if (field.type == TType.STRING) {
            this.createTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.productId != null) {
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CUR_STATE_FIELD_DESC);
    oprot.writeI32(this.curState);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ACTIVE_STATE_FIELD_DESC);
    oprot.writeI32(this.activeState);
    oprot.writeFieldEnd();
    if (this.desc != null) {
      if (isSetDesc()) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(this.desc);
        oprot.writeFieldEnd();
      }
    }
    if (this.operatorId != null) {
      oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
      oprot.writeString(this.operatorId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(OPERATOR_TYPE_FIELD_DESC);
    oprot.writeI32(this.operatorType);
    oprot.writeFieldEnd();
    if (this.createTime != null) {
      if (isSetCreateTime()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(this.createTime);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductOpt(");
    boolean first = true;
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("curState:");
    sb.append(this.curState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeState:");
    sb.append(this.activeState);
    first = false;
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
      }
    if (!first) sb.append(", ");
    sb.append("operatorId:");
    if (this.operatorId == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorType:");
    sb.append(this.operatorType);
    first = false;
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
