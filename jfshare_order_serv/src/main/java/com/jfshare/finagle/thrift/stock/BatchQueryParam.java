/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.stock;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.meta_data.ListMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class BatchQueryParam implements TBase<BatchQueryParam, BatchQueryParam._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BatchQueryParam");

  private static final TField QUERY_CONTENTS_FIELD_DESC = new TField("queryContents", TType.LIST, (short)1);
  private static final TField QUERY_TYPE_FIELD_DESC = new TField("queryType", TType.STRING, (short)2);


  public List<String> queryContents;
  public String queryType;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    QUERY_CONTENTS((short)1, "queryContents"),
    QUERY_TYPE((short)2, "queryType");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_CONTENTS
  	return QUERY_CONTENTS;
        case 2: // QUERY_TYPE
  	return QUERY_TYPE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_CONTENTS, new FieldMetaData("queryContents", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.QUERY_TYPE, new FieldMetaData("queryType", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BatchQueryParam.class, metaDataMap);
  }


  public BatchQueryParam() {
  }

  public BatchQueryParam(
    List<String> queryContents,
    String queryType)
  {
    this();
    this.queryContents = queryContents;
    this.queryType = queryType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BatchQueryParam(BatchQueryParam other) {
    if (other.isSetQueryContents()) {
      List<String> __this__queryContents = new ArrayList<String>();
      for (String other_element : other.queryContents) {
        __this__queryContents.add(other_element);
      }
      this.queryContents = __this__queryContents;
    }
    if (other.isSetQueryType()) {
      this.queryType = other.queryType;
    }
  }

  public BatchQueryParam deepCopy() {
    return new BatchQueryParam(this);
  }

  @Override
  public void clear() {
    this.queryContents = null;
    this.queryType = null;
  }

  public int getQueryContentsSize() {
    return (this.queryContents == null) ? 0 : this.queryContents.size();
  }

  public java.util.Iterator<String> getQueryContentsIterator() {
    return (this.queryContents == null) ? null : this.queryContents.iterator();
  }

  public void addToQueryContents(String elem) {
    if (this.queryContents == null) {
      this.queryContents = new ArrayList<String>();
    }
    this.queryContents.add(elem);
  }

  public List<String> getQueryContents() {
    return this.queryContents;
  }

  public BatchQueryParam setQueryContents(List<String> queryContents) {
    this.queryContents = queryContents;
    
    return this;
  }

  public void unsetQueryContents() {
    this.queryContents = null;
  }

  /** Returns true if field queryContents is set (has been asigned a value) and false otherwise */
  public boolean isSetQueryContents() {
    return this.queryContents != null;
  }

  public void setQueryContentsIsSet(boolean value) {
    if (!value) {
      this.queryContents = null;
    }
  }

  public String getQueryType() {
    return this.queryType;
  }

  public BatchQueryParam setQueryType(String queryType) {
    this.queryType = queryType;
    
    return this;
  }

  public void unsetQueryType() {
    this.queryType = null;
  }

  /** Returns true if field queryType is set (has been asigned a value) and false otherwise */
  public boolean isSetQueryType() {
    return this.queryType != null;
  }

  public void setQueryTypeIsSet(boolean value) {
    if (!value) {
      this.queryType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY_CONTENTS:
      if (value == null) {
        unsetQueryContents();
      } else {
        setQueryContents((List<String>)value);
      }
      break;
    case QUERY_TYPE:
      if (value == null) {
        unsetQueryType();
      } else {
        setQueryType((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_CONTENTS:
      return getQueryContents();
    case QUERY_TYPE:
      return getQueryType();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY_CONTENTS:
      return isSetQueryContents();
    case QUERY_TYPE:
      return isSetQueryType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BatchQueryParam)
      return this.equals((BatchQueryParam)that);
    return false;
  }

  public boolean equals(BatchQueryParam that) {
    if (that == null)
      return false;
    boolean this_present_queryContents = true && this.isSetQueryContents();
    boolean that_present_queryContents = true && that.isSetQueryContents();
    if (this_present_queryContents || that_present_queryContents) {
      if (!(this_present_queryContents && that_present_queryContents))
        return false;
      if (!this.queryContents.equals(that.queryContents))
        return false;
    }
    boolean this_present_queryType = true && this.isSetQueryType();
    boolean that_present_queryType = true && that.isSetQueryType();
    if (this_present_queryType || that_present_queryType) {
      if (!(this_present_queryType && that_present_queryType))
        return false;
      if (!this.queryType.equals(that.queryType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_queryContents = true && (isSetQueryContents());
    builder.append(present_queryContents);
    if (present_queryContents)
      builder.append(queryContents);
    boolean present_queryType = true && (isSetQueryType());
    builder.append(present_queryType);
    if (present_queryType)
      builder.append(queryType);
    return builder.toHashCode();
  }

  public int compareTo(BatchQueryParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BatchQueryParam typedOther = (BatchQueryParam)other;

    lastComparison = Boolean.valueOf(isSetQueryContents()).compareTo(typedOther.isSetQueryContents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryContents()) {
      lastComparison = TBaseHelper.compareTo(this.queryContents, typedOther.queryContents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryType()).compareTo(typedOther.isSetQueryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryType()) {
      lastComparison = TBaseHelper.compareTo(this.queryType, typedOther.queryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // QUERY_CONTENTS
          if (field.type == TType.LIST) {
            {
            TList _list12 = iprot.readListBegin();
            this.queryContents = new ArrayList<String>(_list12.size);
            for (int _i13 = 0; _i13 < _list12.size; ++_i13)
            {
              String _elem14;
              _elem14 = iprot.readString();
              this.queryContents.add(_elem14);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // QUERY_TYPE
          if (field.type == TType.STRING) {
            this.queryType = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.queryContents != null) {
      oprot.writeFieldBegin(QUERY_CONTENTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.queryContents.size()));
        for (String _iter15 : this.queryContents)
        {
          oprot.writeString(_iter15);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.queryType != null) {
      oprot.writeFieldBegin(QUERY_TYPE_FIELD_DESC);
      oprot.writeString(this.queryType);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BatchQueryParam(");
    boolean first = true;
    sb.append("queryContents:");
    if (this.queryContents == null) {
      sb.append("null");
    } else {
      sb.append(this.queryContents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryType:");
    if (this.queryType == null) {
      sb.append("null");
    } else {
      sb.append(this.queryType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
