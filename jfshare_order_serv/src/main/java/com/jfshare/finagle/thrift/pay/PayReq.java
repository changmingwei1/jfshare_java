/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.pay;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class PayReq implements TBase<PayReq, PayReq._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("PayReq");

  private static final TField TOKEN_ID_FIELD_DESC = new TField("tokenId", TType.STRING, (short)1);
  private static final TField ORDER_NO_FIELD_DESC = new TField("orderNo", TType.STRING, (short)2);
  private static final TField EXTRA_PARAM_FIELD_DESC = new TField("extraParam", TType.STRING, (short)3);
  private static final TField TITLE_FIELD_DESC = new TField("title", TType.STRING, (short)4);
  private static final TField PRICE_FIELD_DESC = new TField("price", TType.I32, (short)5);
  private static final TField SCORE_FIELD_DESC = new TField("score", TType.I32, (short)6);
  private static final TField PAY_CHANNEL_FIELD_DESC = new TField("payChannel", TType.I32, (short)7);
  private static final TField PAY_IP_FIELD_DESC = new TField("payIp", TType.STRING, (short)8);
  private static final TField RETURN_URL_FIELD_DESC = new TField("returnUrl", TType.STRING, (short)9);
  private static final TField REMARK_FIELD_DESC = new TField("remark", TType.STRING, (short)10);
  private static final TField CUST_ID_FIELD_DESC = new TField("custId", TType.STRING, (short)11);
  private static final TField CUST_TYPE_FIELD_DESC = new TField("custType", TType.STRING, (short)12);
  private static final TField PROCUST_ID_FIELD_DESC = new TField("procustID", TType.STRING, (short)13);
  private static final TField SCORE2CASH_AMOUNT_FIELD_DESC = new TField("score2cashAmount", TType.I32, (short)14);


  public String tokenId;
  public String orderNo;
  public String extraParam;
  public String title;
  public int price;
  public int score;
  public int payChannel;
  public String payIp;
  public String returnUrl;
  public String remark;
  public String custId;
  public String custType;
  public String procustID;
  public int score2cashAmount;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TOKEN_ID((short)1, "tokenId"),
    ORDER_NO((short)2, "orderNo"),
    EXTRA_PARAM((short)3, "extraParam"),
    TITLE((short)4, "title"),
    PRICE((short)5, "price"),
    SCORE((short)6, "score"),
    PAY_CHANNEL((short)7, "payChannel"),
    PAY_IP((short)8, "payIp"),
    RETURN_URL((short)9, "returnUrl"),
    REMARK((short)10, "remark"),
    CUST_ID((short)11, "custId"),
    CUST_TYPE((short)12, "custType"),
    PROCUST_ID((short)13, "procustID"),
    SCORE2CASH_AMOUNT((short)14, "score2cashAmount");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOKEN_ID
  	return TOKEN_ID;
        case 2: // ORDER_NO
  	return ORDER_NO;
        case 3: // EXTRA_PARAM
  	return EXTRA_PARAM;
        case 4: // TITLE
  	return TITLE;
        case 5: // PRICE
  	return PRICE;
        case 6: // SCORE
  	return SCORE;
        case 7: // PAY_CHANNEL
  	return PAY_CHANNEL;
        case 8: // PAY_IP
  	return PAY_IP;
        case 9: // RETURN_URL
  	return RETURN_URL;
        case 10: // REMARK
  	return REMARK;
        case 11: // CUST_ID
  	return CUST_ID;
        case 12: // CUST_TYPE
  	return CUST_TYPE;
        case 13: // PROCUST_ID
  	return PROCUST_ID;
        case 14: // SCORE2CASH_AMOUNT
  	return SCORE2CASH_AMOUNT;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __PRICE_ISSET_ID = 0;
  private static final int __SCORE_ISSET_ID = 1;
  private static final int __PAYCHANNEL_ISSET_ID = 2;
  private static final int __SCORE2CASHAMOUNT_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOKEN_ID, new FieldMetaData("tokenId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ORDER_NO, new FieldMetaData("orderNo", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXTRA_PARAM, new FieldMetaData("extraParam", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TITLE, new FieldMetaData("title", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PRICE, new FieldMetaData("price", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.SCORE, new FieldMetaData("score", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PAY_CHANNEL, new FieldMetaData("payChannel", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PAY_IP, new FieldMetaData("payIp", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.RETURN_URL, new FieldMetaData("returnUrl", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.REMARK, new FieldMetaData("remark", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CUST_ID, new FieldMetaData("custId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CUST_TYPE, new FieldMetaData("custType", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PROCUST_ID, new FieldMetaData("procustID", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SCORE2CASH_AMOUNT, new FieldMetaData("score2cashAmount", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(PayReq.class, metaDataMap);
  }


  public PayReq() {
  }

  public PayReq(
    String tokenId,
    String orderNo,
    String extraParam,
    String title,
    int price,
    int score,
    int payChannel,
    String payIp,
    String returnUrl,
    String remark,
    String custId,
    String custType)
  {
    this();
    this.tokenId = tokenId;
    this.orderNo = orderNo;
    this.extraParam = extraParam;
    this.title = title;
    this.price = price;
    setPriceIsSet(true);
    this.score = score;
    setScoreIsSet(true);
    this.payChannel = payChannel;
    setPayChannelIsSet(true);
    this.payIp = payIp;
    this.returnUrl = returnUrl;
    this.remark = remark;
    this.custId = custId;
    this.custType = custType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PayReq(PayReq other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetTokenId()) {
      this.tokenId = other.tokenId;
    }
    if (other.isSetOrderNo()) {
      this.orderNo = other.orderNo;
    }
    if (other.isSetExtraParam()) {
      this.extraParam = other.extraParam;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.price = other.price;
    this.score = other.score;
    this.payChannel = other.payChannel;
    if (other.isSetPayIp()) {
      this.payIp = other.payIp;
    }
    if (other.isSetReturnUrl()) {
      this.returnUrl = other.returnUrl;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCustId()) {
      this.custId = other.custId;
    }
    if (other.isSetCustType()) {
      this.custType = other.custType;
    }
    if (other.isSetProcustID()) {
      this.procustID = other.procustID;
    }
    this.score2cashAmount = other.score2cashAmount;
  }

  public PayReq deepCopy() {
    return new PayReq(this);
  }

  @Override
  public void clear() {
    this.tokenId = null;
    this.orderNo = null;
    this.extraParam = null;
    this.title = null;
    setPriceIsSet(false);
    this.price = 0;
    setScoreIsSet(false);
    this.score = 0;
    setPayChannelIsSet(false);
    this.payChannel = 0;
    this.payIp = null;
    this.returnUrl = null;
    this.remark = null;
    this.custId = null;
    this.custType = null;
    this.procustID = null;
    setScore2cashAmountIsSet(false);
    this.score2cashAmount = 0;
  }

  public String getTokenId() {
    return this.tokenId;
  }

  public PayReq setTokenId(String tokenId) {
    this.tokenId = tokenId;
    
    return this;
  }

  public void unsetTokenId() {
    this.tokenId = null;
  }

  /** Returns true if field tokenId is set (has been asigned a value) and false otherwise */
  public boolean isSetTokenId() {
    return this.tokenId != null;
  }

  public void setTokenIdIsSet(boolean value) {
    if (!value) {
      this.tokenId = null;
    }
  }

  public String getOrderNo() {
    return this.orderNo;
  }

  public PayReq setOrderNo(String orderNo) {
    this.orderNo = orderNo;
    
    return this;
  }

  public void unsetOrderNo() {
    this.orderNo = null;
  }

  /** Returns true if field orderNo is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderNo() {
    return this.orderNo != null;
  }

  public void setOrderNoIsSet(boolean value) {
    if (!value) {
      this.orderNo = null;
    }
  }

  public String getExtraParam() {
    return this.extraParam;
  }

  public PayReq setExtraParam(String extraParam) {
    this.extraParam = extraParam;
    
    return this;
  }

  public void unsetExtraParam() {
    this.extraParam = null;
  }

  /** Returns true if field extraParam is set (has been asigned a value) and false otherwise */
  public boolean isSetExtraParam() {
    return this.extraParam != null;
  }

  public void setExtraParamIsSet(boolean value) {
    if (!value) {
      this.extraParam = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public PayReq setTitle(String title) {
    this.title = title;
    
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been asigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getPrice() {
    return this.price;
  }

  public PayReq setPrice(int price) {
    this.price = price;
    setPriceIsSet(true);

    return this;
  }

  public void unsetPrice() {
  __isset_bit_vector.clear(__PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been asigned a value) and false otherwise */
  public boolean isSetPrice() {
    return __isset_bit_vector.get(__PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bit_vector.set(__PRICE_ISSET_ID, value);
  }

  public int getScore() {
    return this.score;
  }

  public PayReq setScore(int score) {
    this.score = score;
    setScoreIsSet(true);

    return this;
  }

  public void unsetScore() {
  __isset_bit_vector.clear(__SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been asigned a value) and false otherwise */
  public boolean isSetScore() {
    return __isset_bit_vector.get(__SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bit_vector.set(__SCORE_ISSET_ID, value);
  }

  public int getPayChannel() {
    return this.payChannel;
  }

  public PayReq setPayChannel(int payChannel) {
    this.payChannel = payChannel;
    setPayChannelIsSet(true);

    return this;
  }

  public void unsetPayChannel() {
  __isset_bit_vector.clear(__PAYCHANNEL_ISSET_ID);
  }

  /** Returns true if field payChannel is set (has been asigned a value) and false otherwise */
  public boolean isSetPayChannel() {
    return __isset_bit_vector.get(__PAYCHANNEL_ISSET_ID);
  }

  public void setPayChannelIsSet(boolean value) {
    __isset_bit_vector.set(__PAYCHANNEL_ISSET_ID, value);
  }

  public String getPayIp() {
    return this.payIp;
  }

  public PayReq setPayIp(String payIp) {
    this.payIp = payIp;
    
    return this;
  }

  public void unsetPayIp() {
    this.payIp = null;
  }

  /** Returns true if field payIp is set (has been asigned a value) and false otherwise */
  public boolean isSetPayIp() {
    return this.payIp != null;
  }

  public void setPayIpIsSet(boolean value) {
    if (!value) {
      this.payIp = null;
    }
  }

  public String getReturnUrl() {
    return this.returnUrl;
  }

  public PayReq setReturnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
    
    return this;
  }

  public void unsetReturnUrl() {
    this.returnUrl = null;
  }

  /** Returns true if field returnUrl is set (has been asigned a value) and false otherwise */
  public boolean isSetReturnUrl() {
    return this.returnUrl != null;
  }

  public void setReturnUrlIsSet(boolean value) {
    if (!value) {
      this.returnUrl = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public PayReq setRemark(String remark) {
    this.remark = remark;
    
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been asigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getCustId() {
    return this.custId;
  }

  public PayReq setCustId(String custId) {
    this.custId = custId;
    
    return this;
  }

  public void unsetCustId() {
    this.custId = null;
  }

  /** Returns true if field custId is set (has been asigned a value) and false otherwise */
  public boolean isSetCustId() {
    return this.custId != null;
  }

  public void setCustIdIsSet(boolean value) {
    if (!value) {
      this.custId = null;
    }
  }

  public String getCustType() {
    return this.custType;
  }

  public PayReq setCustType(String custType) {
    this.custType = custType;
    
    return this;
  }

  public void unsetCustType() {
    this.custType = null;
  }

  /** Returns true if field custType is set (has been asigned a value) and false otherwise */
  public boolean isSetCustType() {
    return this.custType != null;
  }

  public void setCustTypeIsSet(boolean value) {
    if (!value) {
      this.custType = null;
    }
  }

  public String getProcustID() {
    return this.procustID;
  }

  public PayReq setProcustID(String procustID) {
    this.procustID = procustID;
    
    return this;
  }

  public void unsetProcustID() {
    this.procustID = null;
  }

  /** Returns true if field procustID is set (has been asigned a value) and false otherwise */
  public boolean isSetProcustID() {
    return this.procustID != null;
  }

  public void setProcustIDIsSet(boolean value) {
    if (!value) {
      this.procustID = null;
    }
  }

  public int getScore2cashAmount() {
    return this.score2cashAmount;
  }

  public PayReq setScore2cashAmount(int score2cashAmount) {
    this.score2cashAmount = score2cashAmount;
    setScore2cashAmountIsSet(true);

    return this;
  }

  public void unsetScore2cashAmount() {
  __isset_bit_vector.clear(__SCORE2CASHAMOUNT_ISSET_ID);
  }

  /** Returns true if field score2cashAmount is set (has been asigned a value) and false otherwise */
  public boolean isSetScore2cashAmount() {
    return __isset_bit_vector.get(__SCORE2CASHAMOUNT_ISSET_ID);
  }

  public void setScore2cashAmountIsSet(boolean value) {
    __isset_bit_vector.set(__SCORE2CASHAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOKEN_ID:
      if (value == null) {
        unsetTokenId();
      } else {
        setTokenId((String)value);
      }
      break;
    case ORDER_NO:
      if (value == null) {
        unsetOrderNo();
      } else {
        setOrderNo((String)value);
      }
      break;
    case EXTRA_PARAM:
      if (value == null) {
        unsetExtraParam();
      } else {
        setExtraParam((String)value);
      }
      break;
    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;
    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Integer)value);
      }
      break;
    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Integer)value);
      }
      break;
    case PAY_CHANNEL:
      if (value == null) {
        unsetPayChannel();
      } else {
        setPayChannel((Integer)value);
      }
      break;
    case PAY_IP:
      if (value == null) {
        unsetPayIp();
      } else {
        setPayIp((String)value);
      }
      break;
    case RETURN_URL:
      if (value == null) {
        unsetReturnUrl();
      } else {
        setReturnUrl((String)value);
      }
      break;
    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;
    case CUST_ID:
      if (value == null) {
        unsetCustId();
      } else {
        setCustId((String)value);
      }
      break;
    case CUST_TYPE:
      if (value == null) {
        unsetCustType();
      } else {
        setCustType((String)value);
      }
      break;
    case PROCUST_ID:
      if (value == null) {
        unsetProcustID();
      } else {
        setProcustID((String)value);
      }
      break;
    case SCORE2CASH_AMOUNT:
      if (value == null) {
        unsetScore2cashAmount();
      } else {
        setScore2cashAmount((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOKEN_ID:
      return getTokenId();
    case ORDER_NO:
      return getOrderNo();
    case EXTRA_PARAM:
      return getExtraParam();
    case TITLE:
      return getTitle();
    case PRICE:
      return new Integer(getPrice());
    case SCORE:
      return new Integer(getScore());
    case PAY_CHANNEL:
      return new Integer(getPayChannel());
    case PAY_IP:
      return getPayIp();
    case RETURN_URL:
      return getReturnUrl();
    case REMARK:
      return getRemark();
    case CUST_ID:
      return getCustId();
    case CUST_TYPE:
      return getCustType();
    case PROCUST_ID:
      return getProcustID();
    case SCORE2CASH_AMOUNT:
      return new Integer(getScore2cashAmount());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOKEN_ID:
      return isSetTokenId();
    case ORDER_NO:
      return isSetOrderNo();
    case EXTRA_PARAM:
      return isSetExtraParam();
    case TITLE:
      return isSetTitle();
    case PRICE:
      return isSetPrice();
    case SCORE:
      return isSetScore();
    case PAY_CHANNEL:
      return isSetPayChannel();
    case PAY_IP:
      return isSetPayIp();
    case RETURN_URL:
      return isSetReturnUrl();
    case REMARK:
      return isSetRemark();
    case CUST_ID:
      return isSetCustId();
    case CUST_TYPE:
      return isSetCustType();
    case PROCUST_ID:
      return isSetProcustID();
    case SCORE2CASH_AMOUNT:
      return isSetScore2cashAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PayReq)
      return this.equals((PayReq)that);
    return false;
  }

  public boolean equals(PayReq that) {
    if (that == null)
      return false;
    boolean this_present_tokenId = true && this.isSetTokenId();
    boolean that_present_tokenId = true && that.isSetTokenId();
    if (this_present_tokenId || that_present_tokenId) {
      if (!(this_present_tokenId && that_present_tokenId))
        return false;
      if (!this.tokenId.equals(that.tokenId))
        return false;
    }
    boolean this_present_orderNo = true && this.isSetOrderNo();
    boolean that_present_orderNo = true && that.isSetOrderNo();
    if (this_present_orderNo || that_present_orderNo) {
      if (!(this_present_orderNo && that_present_orderNo))
        return false;
      if (!this.orderNo.equals(that.orderNo))
        return false;
    }
    boolean this_present_extraParam = true && this.isSetExtraParam();
    boolean that_present_extraParam = true && that.isSetExtraParam();
    if (this_present_extraParam || that_present_extraParam) {
      if (!(this_present_extraParam && that_present_extraParam))
        return false;
      if (!this.extraParam.equals(that.extraParam))
        return false;
    }
    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }
    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }
    boolean this_present_score = true;
    boolean that_present_score = true;
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }
    boolean this_present_payChannel = true;
    boolean that_present_payChannel = true;
    if (this_present_payChannel || that_present_payChannel) {
      if (!(this_present_payChannel && that_present_payChannel))
        return false;
      if (this.payChannel != that.payChannel)
        return false;
    }
    boolean this_present_payIp = true && this.isSetPayIp();
    boolean that_present_payIp = true && that.isSetPayIp();
    if (this_present_payIp || that_present_payIp) {
      if (!(this_present_payIp && that_present_payIp))
        return false;
      if (!this.payIp.equals(that.payIp))
        return false;
    }
    boolean this_present_returnUrl = true && this.isSetReturnUrl();
    boolean that_present_returnUrl = true && that.isSetReturnUrl();
    if (this_present_returnUrl || that_present_returnUrl) {
      if (!(this_present_returnUrl && that_present_returnUrl))
        return false;
      if (!this.returnUrl.equals(that.returnUrl))
        return false;
    }
    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }
    boolean this_present_custId = true && this.isSetCustId();
    boolean that_present_custId = true && that.isSetCustId();
    if (this_present_custId || that_present_custId) {
      if (!(this_present_custId && that_present_custId))
        return false;
      if (!this.custId.equals(that.custId))
        return false;
    }
    boolean this_present_custType = true && this.isSetCustType();
    boolean that_present_custType = true && that.isSetCustType();
    if (this_present_custType || that_present_custType) {
      if (!(this_present_custType && that_present_custType))
        return false;
      if (!this.custType.equals(that.custType))
        return false;
    }
    boolean this_present_procustID = true && this.isSetProcustID();
    boolean that_present_procustID = true && that.isSetProcustID();
    if (this_present_procustID || that_present_procustID) {
      if (!(this_present_procustID && that_present_procustID))
        return false;
      if (!this.procustID.equals(that.procustID))
        return false;
    }
    boolean this_present_score2cashAmount = true && this.isSetScore2cashAmount();
    boolean that_present_score2cashAmount = true && that.isSetScore2cashAmount();
    if (this_present_score2cashAmount || that_present_score2cashAmount) {
      if (!(this_present_score2cashAmount && that_present_score2cashAmount))
        return false;
      if (this.score2cashAmount != that.score2cashAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_tokenId = true && (isSetTokenId());
    builder.append(present_tokenId);
    if (present_tokenId)
      builder.append(tokenId);
    boolean present_orderNo = true && (isSetOrderNo());
    builder.append(present_orderNo);
    if (present_orderNo)
      builder.append(orderNo);
    boolean present_extraParam = true && (isSetExtraParam());
    builder.append(present_extraParam);
    if (present_extraParam)
      builder.append(extraParam);
    boolean present_title = true && (isSetTitle());
    builder.append(present_title);
    if (present_title)
      builder.append(title);
    boolean present_price = true;
    builder.append(present_price);
    if (present_price)
      builder.append(price);
    boolean present_score = true;
    builder.append(present_score);
    if (present_score)
      builder.append(score);
    boolean present_payChannel = true;
    builder.append(present_payChannel);
    if (present_payChannel)
      builder.append(payChannel);
    boolean present_payIp = true && (isSetPayIp());
    builder.append(present_payIp);
    if (present_payIp)
      builder.append(payIp);
    boolean present_returnUrl = true && (isSetReturnUrl());
    builder.append(present_returnUrl);
    if (present_returnUrl)
      builder.append(returnUrl);
    boolean present_remark = true && (isSetRemark());
    builder.append(present_remark);
    if (present_remark)
      builder.append(remark);
    boolean present_custId = true && (isSetCustId());
    builder.append(present_custId);
    if (present_custId)
      builder.append(custId);
    boolean present_custType = true && (isSetCustType());
    builder.append(present_custType);
    if (present_custType)
      builder.append(custType);
    boolean present_procustID = true && (isSetProcustID());
    builder.append(present_procustID);
    if (present_procustID)
      builder.append(procustID);
    boolean present_score2cashAmount = true && (isSetScore2cashAmount());
    builder.append(present_score2cashAmount);
    if (present_score2cashAmount)
      builder.append(score2cashAmount);
    return builder.toHashCode();
  }

  public int compareTo(PayReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PayReq typedOther = (PayReq)other;

    lastComparison = Boolean.valueOf(isSetTokenId()).compareTo(typedOther.isSetTokenId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenId()) {
      lastComparison = TBaseHelper.compareTo(this.tokenId, typedOther.tokenId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderNo()).compareTo(typedOther.isSetOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNo()) {
      lastComparison = TBaseHelper.compareTo(this.orderNo, typedOther.orderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraParam()).compareTo(typedOther.isSetExtraParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraParam()) {
      lastComparison = TBaseHelper.compareTo(this.extraParam, typedOther.extraParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(typedOther.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = TBaseHelper.compareTo(this.score, typedOther.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayChannel()).compareTo(typedOther.isSetPayChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayChannel()) {
      lastComparison = TBaseHelper.compareTo(this.payChannel, typedOther.payChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayIp()).compareTo(typedOther.isSetPayIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayIp()) {
      lastComparison = TBaseHelper.compareTo(this.payIp, typedOther.payIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnUrl()).compareTo(typedOther.isSetReturnUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnUrl()) {
      lastComparison = TBaseHelper.compareTo(this.returnUrl, typedOther.returnUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(typedOther.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = TBaseHelper.compareTo(this.remark, typedOther.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustId()).compareTo(typedOther.isSetCustId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustId()) {
      lastComparison = TBaseHelper.compareTo(this.custId, typedOther.custId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustType()).compareTo(typedOther.isSetCustType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustType()) {
      lastComparison = TBaseHelper.compareTo(this.custType, typedOther.custType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcustID()).compareTo(typedOther.isSetProcustID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcustID()) {
      lastComparison = TBaseHelper.compareTo(this.procustID, typedOther.procustID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore2cashAmount()).compareTo(typedOther.isSetScore2cashAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore2cashAmount()) {
      lastComparison = TBaseHelper.compareTo(this.score2cashAmount, typedOther.score2cashAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // TOKEN_ID
          if (field.type == TType.STRING) {
            this.tokenId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ORDER_NO
          if (field.type == TType.STRING) {
            this.orderNo = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // EXTRA_PARAM
          if (field.type == TType.STRING) {
            this.extraParam = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TITLE
          if (field.type == TType.STRING) {
            this.title = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // PRICE
          if (field.type == TType.I32) {
            this.price = iprot.readI32();
            setPriceIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // SCORE
          if (field.type == TType.I32) {
            this.score = iprot.readI32();
            setScoreIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // PAY_CHANNEL
          if (field.type == TType.I32) {
            this.payChannel = iprot.readI32();
            setPayChannelIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // PAY_IP
          if (field.type == TType.STRING) {
            this.payIp = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // RETURN_URL
          if (field.type == TType.STRING) {
            this.returnUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // REMARK
          if (field.type == TType.STRING) {
            this.remark = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // CUST_ID
          if (field.type == TType.STRING) {
            this.custId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // CUST_TYPE
          if (field.type == TType.STRING) {
            this.custType = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // PROCUST_ID
          if (field.type == TType.STRING) {
            this.procustID = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // SCORE2CASH_AMOUNT
          if (field.type == TType.I32) {
            this.score2cashAmount = iprot.readI32();
            setScore2cashAmountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.tokenId != null) {
      oprot.writeFieldBegin(TOKEN_ID_FIELD_DESC);
      oprot.writeString(this.tokenId);
      oprot.writeFieldEnd();
    }
    if (this.orderNo != null) {
      oprot.writeFieldBegin(ORDER_NO_FIELD_DESC);
      oprot.writeString(this.orderNo);
      oprot.writeFieldEnd();
    }
    if (this.extraParam != null) {
      oprot.writeFieldBegin(EXTRA_PARAM_FIELD_DESC);
      oprot.writeString(this.extraParam);
      oprot.writeFieldEnd();
    }
    if (this.title != null) {
      oprot.writeFieldBegin(TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PRICE_FIELD_DESC);
    oprot.writeI32(this.price);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SCORE_FIELD_DESC);
    oprot.writeI32(this.score);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PAY_CHANNEL_FIELD_DESC);
    oprot.writeI32(this.payChannel);
    oprot.writeFieldEnd();
    if (this.payIp != null) {
      oprot.writeFieldBegin(PAY_IP_FIELD_DESC);
      oprot.writeString(this.payIp);
      oprot.writeFieldEnd();
    }
    if (this.returnUrl != null) {
      oprot.writeFieldBegin(RETURN_URL_FIELD_DESC);
      oprot.writeString(this.returnUrl);
      oprot.writeFieldEnd();
    }
    if (this.remark != null) {
      oprot.writeFieldBegin(REMARK_FIELD_DESC);
      oprot.writeString(this.remark);
      oprot.writeFieldEnd();
    }
    if (this.custId != null) {
      oprot.writeFieldBegin(CUST_ID_FIELD_DESC);
      oprot.writeString(this.custId);
      oprot.writeFieldEnd();
    }
    if (this.custType != null) {
      oprot.writeFieldBegin(CUST_TYPE_FIELD_DESC);
      oprot.writeString(this.custType);
      oprot.writeFieldEnd();
    }
    if (this.procustID != null) {
      if (isSetProcustID()) {
        oprot.writeFieldBegin(PROCUST_ID_FIELD_DESC);
        oprot.writeString(this.procustID);
        oprot.writeFieldEnd();
      }
    }
    if (isSetScore2cashAmount()) {
      oprot.writeFieldBegin(SCORE2CASH_AMOUNT_FIELD_DESC);
      oprot.writeI32(this.score2cashAmount);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PayReq(");
    boolean first = true;
    sb.append("tokenId:");
    if (this.tokenId == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderNo:");
    if (this.orderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.orderNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extraParam:");
    if (this.extraParam == null) {
      sb.append("null");
    } else {
      sb.append(this.extraParam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("score:");
    sb.append(this.score);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payChannel:");
    sb.append(this.payChannel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payIp:");
    if (this.payIp == null) {
      sb.append("null");
    } else {
      sb.append(this.payIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnUrl:");
    if (this.returnUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.returnUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("custId:");
    if (this.custId == null) {
      sb.append("null");
    } else {
      sb.append(this.custId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("custType:");
    if (this.custType == null) {
      sb.append("null");
    } else {
      sb.append(this.custType);
    }
    first = false;
    if (isSetProcustID()) {
      if (!first) sb.append(", ");
      sb.append("procustID:");
      if (this.procustID == null) {
        sb.append("null");
      } else {
        sb.append(this.procustID);
      }
      first = false;
      }
    if (isSetScore2cashAmount()) {
      if (!first) sb.append(", ");
      sb.append("score2cashAmount:");
      sb.append(this.score2cashAmount);
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
