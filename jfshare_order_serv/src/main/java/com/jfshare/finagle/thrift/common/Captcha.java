/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.common;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class Captcha implements TBase<Captcha, Captcha._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Captcha");

  private static final TField ID_FIELD_DESC = new TField("id", TType.STRING, (short)1);
  private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)2);
  private static final TField CAPTCHA_BYTES_FIELD_DESC = new TField("captchaBytes", TType.STRING, (short)3);


  public String id;
  public String value;
  public ByteBuffer captchaBytes;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    VALUE((short)2, "value"),
    CAPTCHA_BYTES((short)3, "captchaBytes");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
  	return ID;
        case 2: // VALUE
  	return VALUE;
        case 3: // CAPTCHA_BYTES
  	return CAPTCHA_BYTES;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CAPTCHA_BYTES, new FieldMetaData("captchaBytes", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Captcha.class, metaDataMap);
  }


  public Captcha() {
  }

  public Captcha(
    String id,
    String value,
    ByteBuffer captchaBytes)
  {
    this();
    this.id = id;
    this.value = value;
    this.captchaBytes = captchaBytes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Captcha(Captcha other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetCaptchaBytes()) {
      this.captchaBytes = TBaseHelper.copyBinary(other.captchaBytes);
    }
  }

  public Captcha deepCopy() {
    return new Captcha(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.value = null;
    this.captchaBytes = null;
  }

  public String getId() {
    return this.id;
  }

  public Captcha setId(String id) {
    this.id = id;
    
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getValue() {
    return this.value;
  }

  public Captcha setValue(String value) {
    this.value = value;
    
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been asigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public byte[] getCaptchaBytes() {
    setCaptchaBytes(TBaseHelper.rightSize(captchaBytes));
    return captchaBytes.array();
  }

  public ByteBuffer BufferForCaptchaBytes() {
    return captchaBytes;
  }

  public Captcha setCaptchaBytes(byte[] captchaBytes) {
    setCaptchaBytes(ByteBuffer.wrap(captchaBytes));
    return this;
  }

  public Captcha setCaptchaBytes(ByteBuffer captchaBytes) {
    this.captchaBytes = captchaBytes;
    
    return this;
  }

  public void unsetCaptchaBytes() {
    this.captchaBytes = null;
  }

  /** Returns true if field captchaBytes is set (has been asigned a value) and false otherwise */
  public boolean isSetCaptchaBytes() {
    return this.captchaBytes != null;
  }

  public void setCaptchaBytesIsSet(boolean value) {
    if (!value) {
      this.captchaBytes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;
    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;
    case CAPTCHA_BYTES:
      if (value == null) {
        unsetCaptchaBytes();
      } else {
        setCaptchaBytes((ByteBuffer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();
    case VALUE:
      return getValue();
    case CAPTCHA_BYTES:
      return getCaptchaBytes();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case VALUE:
      return isSetValue();
    case CAPTCHA_BYTES:
      return isSetCaptchaBytes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Captcha)
      return this.equals((Captcha)that);
    return false;
  }

  public boolean equals(Captcha that) {
    if (that == null)
      return false;
    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }
    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }
    boolean this_present_captchaBytes = true && this.isSetCaptchaBytes();
    boolean that_present_captchaBytes = true && that.isSetCaptchaBytes();
    if (this_present_captchaBytes || that_present_captchaBytes) {
      if (!(this_present_captchaBytes && that_present_captchaBytes))
        return false;
      if (!this.captchaBytes.equals(that.captchaBytes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_id = true && (isSetId());
    builder.append(present_id);
    if (present_id)
      builder.append(id);
    boolean present_value = true && (isSetValue());
    builder.append(present_value);
    if (present_value)
      builder.append(value);
    boolean present_captchaBytes = true && (isSetCaptchaBytes());
    builder.append(present_captchaBytes);
    if (present_captchaBytes)
      builder.append(captchaBytes);
    return builder.toHashCode();
  }

  public int compareTo(Captcha other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Captcha typedOther = (Captcha)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCaptchaBytes()).compareTo(typedOther.isSetCaptchaBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaptchaBytes()) {
      lastComparison = TBaseHelper.compareTo(this.captchaBytes, typedOther.captchaBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // VALUE
          if (field.type == TType.STRING) {
            this.value = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CAPTCHA_BYTES
          if (field.type == TType.STRING) {
            this.captchaBytes = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.value != null) {
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeString(this.value);
      oprot.writeFieldEnd();
    }
    if (this.captchaBytes != null) {
      oprot.writeFieldBegin(CAPTCHA_BYTES_FIELD_DESC);
      oprot.writeBinary(this.captchaBytes);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Captcha(");
    boolean first = true;
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("captchaBytes:");
    if (this.captchaBytes == null) {
      sb.append("null");
    } else {
      TBaseHelper.toString(this.captchaBytes, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
