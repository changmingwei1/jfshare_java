/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.trade;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.meta_data.ListMetaData;
import org.apache.thrift.meta_data.StructMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class BuyInfo implements TBase<BuyInfo, BuyInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BuyInfo");

  private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I32, (short)1);
  private static final TField USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, (short)2);
  private static final TField AMOUNT_FIELD_DESC = new TField("amount", TType.STRING, (short)3);
  private static final TField PAY_CHANNEL_FIELD_DESC = new TField("payChannel", TType.STRUCT, (short)4);
  private static final TField DELIVER_INFO_FIELD_DESC = new TField("deliverInfo", TType.STRUCT, (short)5);
  private static final TField SELLER_DETAIL_LIST_FIELD_DESC = new TField("sellerDetailList", TType.LIST, (short)6);
  private static final TField FROM_SOURCE_FIELD_DESC = new TField("fromSource", TType.I32, (short)7);
  private static final TField WI_FIELD_DESC = new TField("wi", TType.STRING, (short)8);
  private static final TField EXCHANGE_SCORE_FIELD_DESC = new TField("exchangeScore", TType.I32, (short)9);
  private static final TField EXCHANGE_CASH_FIELD_DESC = new TField("exchangeCash", TType.STRING, (short)10);
  private static final TField TRADE_CODE_FIELD_DESC = new TField("tradeCode", TType.STRING, (short)11);
  private static final TField FROM_BATCH_FIELD_DESC = new TField("fromBatch", TType.I32, (short)12);


  public int userId;
  public String userName;
  public String amount;
  public com.jfshare.finagle.thrift.pay.PayChannel payChannel;
  public com.jfshare.finagle.thrift.order.DeliverInfo deliverInfo;
  public List<BuySellerDetail> sellerDetailList;
  public int fromSource;
  public String wi;
  public int exchangeScore;
  public String exchangeCash;
  public String tradeCode;
  public int fromBatch;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_ID((short)1, "userId"),
    USER_NAME((short)2, "userName"),
    AMOUNT((short)3, "amount"),
    PAY_CHANNEL((short)4, "payChannel"),
    DELIVER_INFO((short)5, "deliverInfo"),
    SELLER_DETAIL_LIST((short)6, "sellerDetailList"),
    FROM_SOURCE((short)7, "fromSource"),
    WI((short)8, "wi"),
    EXCHANGE_SCORE((short)9, "exchangeScore"),
    EXCHANGE_CASH((short)10, "exchangeCash"),
    TRADE_CODE((short)11, "tradeCode"),
    FROM_BATCH((short)12, "fromBatch");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
  	return USER_ID;
        case 2: // USER_NAME
  	return USER_NAME;
        case 3: // AMOUNT
  	return AMOUNT;
        case 4: // PAY_CHANNEL
  	return PAY_CHANNEL;
        case 5: // DELIVER_INFO
  	return DELIVER_INFO;
        case 6: // SELLER_DETAIL_LIST
  	return SELLER_DETAIL_LIST;
        case 7: // FROM_SOURCE
  	return FROM_SOURCE;
        case 8: // WI
  	return WI;
        case 9: // EXCHANGE_SCORE
  	return EXCHANGE_SCORE;
        case 10: // EXCHANGE_CASH
  	return EXCHANGE_CASH;
        case 11: // TRADE_CODE
  	return TRADE_CODE;
        case 12: // FROM_BATCH
  	return FROM_BATCH;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __FROMSOURCE_ISSET_ID = 1;
  private static final int __EXCHANGESCORE_ISSET_ID = 2;
  private static final int __FROMBATCH_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new FieldMetaData("userName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.AMOUNT, new FieldMetaData("amount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PAY_CHANNEL, new FieldMetaData("payChannel", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.pay.PayChannel.class)));
    tmpMap.put(_Fields.DELIVER_INFO, new FieldMetaData("deliverInfo", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.order.DeliverInfo.class)));
    tmpMap.put(_Fields.SELLER_DETAIL_LIST, new FieldMetaData("sellerDetailList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, BuySellerDetail.class))));
    tmpMap.put(_Fields.FROM_SOURCE, new FieldMetaData("fromSource", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.WI, new FieldMetaData("wi", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXCHANGE_SCORE, new FieldMetaData("exchangeScore", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.EXCHANGE_CASH, new FieldMetaData("exchangeCash", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TRADE_CODE, new FieldMetaData("tradeCode", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.FROM_BATCH, new FieldMetaData("fromBatch", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BuyInfo.class, metaDataMap);
  }


  public BuyInfo() {
  }

  public BuyInfo(
    int userId,
    String userName,
    String amount,
    com.jfshare.finagle.thrift.pay.PayChannel payChannel,
    com.jfshare.finagle.thrift.order.DeliverInfo deliverInfo,
    List<BuySellerDetail> sellerDetailList,
    int fromSource,
    String wi)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.userName = userName;
    this.amount = amount;
    this.payChannel = payChannel;
    this.deliverInfo = deliverInfo;
    this.sellerDetailList = sellerDetailList;
    this.fromSource = fromSource;
    setFromSourceIsSet(true);
    this.wi = wi;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BuyInfo(BuyInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.userId = other.userId;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetAmount()) {
      this.amount = other.amount;
    }
    if (other.isSetPayChannel()) {
      this.payChannel = new com.jfshare.finagle.thrift.pay.PayChannel(other.payChannel);
    }
    if (other.isSetDeliverInfo()) {
      this.deliverInfo = new com.jfshare.finagle.thrift.order.DeliverInfo(other.deliverInfo);
    }
    if (other.isSetSellerDetailList()) {
      List<BuySellerDetail> __this__sellerDetailList = new ArrayList<BuySellerDetail>();
      for (BuySellerDetail other_element : other.sellerDetailList) {
        __this__sellerDetailList.add(new BuySellerDetail(other_element));
      }
      this.sellerDetailList = __this__sellerDetailList;
    }
    this.fromSource = other.fromSource;
    if (other.isSetWi()) {
      this.wi = other.wi;
    }
    this.exchangeScore = other.exchangeScore;
    if (other.isSetExchangeCash()) {
      this.exchangeCash = other.exchangeCash;
    }
    if (other.isSetTradeCode()) {
      this.tradeCode = other.tradeCode;
    }
    this.fromBatch = other.fromBatch;
  }

  public BuyInfo deepCopy() {
    return new BuyInfo(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.userName = null;
    this.amount = null;
    this.payChannel = null;
    this.deliverInfo = null;
    this.sellerDetailList = null;
    setFromSourceIsSet(false);
    this.fromSource = 0;
    this.wi = null;
    setExchangeScoreIsSet(false);
    this.exchangeScore = 0;
    this.exchangeCash = null;
    this.tradeCode = null;
    setFromBatchIsSet(false);
    this.fromBatch = 0;
  }

  public int getUserId() {
    return this.userId;
  }

  public BuyInfo setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);

    return this;
  }

  public void unsetUserId() {
  __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been asigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public BuyInfo setUserName(String userName) {
    this.userName = userName;
    
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been asigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getAmount() {
    return this.amount;
  }

  public BuyInfo setAmount(String amount) {
    this.amount = amount;
    
    return this;
  }

  public void unsetAmount() {
    this.amount = null;
  }

  /** Returns true if field amount is set (has been asigned a value) and false otherwise */
  public boolean isSetAmount() {
    return this.amount != null;
  }

  public void setAmountIsSet(boolean value) {
    if (!value) {
      this.amount = null;
    }
  }

  public com.jfshare.finagle.thrift.pay.PayChannel getPayChannel() {
    return this.payChannel;
  }

  public BuyInfo setPayChannel(com.jfshare.finagle.thrift.pay.PayChannel payChannel) {
    this.payChannel = payChannel;
    
    return this;
  }

  public void unsetPayChannel() {
    this.payChannel = null;
  }

  /** Returns true if field payChannel is set (has been asigned a value) and false otherwise */
  public boolean isSetPayChannel() {
    return this.payChannel != null;
  }

  public void setPayChannelIsSet(boolean value) {
    if (!value) {
      this.payChannel = null;
    }
  }

  public com.jfshare.finagle.thrift.order.DeliverInfo getDeliverInfo() {
    return this.deliverInfo;
  }

  public BuyInfo setDeliverInfo(com.jfshare.finagle.thrift.order.DeliverInfo deliverInfo) {
    this.deliverInfo = deliverInfo;
    
    return this;
  }

  public void unsetDeliverInfo() {
    this.deliverInfo = null;
  }

  /** Returns true if field deliverInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetDeliverInfo() {
    return this.deliverInfo != null;
  }

  public void setDeliverInfoIsSet(boolean value) {
    if (!value) {
      this.deliverInfo = null;
    }
  }

  public int getSellerDetailListSize() {
    return (this.sellerDetailList == null) ? 0 : this.sellerDetailList.size();
  }

  public java.util.Iterator<BuySellerDetail> getSellerDetailListIterator() {
    return (this.sellerDetailList == null) ? null : this.sellerDetailList.iterator();
  }

  public void addToSellerDetailList(BuySellerDetail elem) {
    if (this.sellerDetailList == null) {
      this.sellerDetailList = new ArrayList<BuySellerDetail>();
    }
    this.sellerDetailList.add(elem);
  }

  public List<BuySellerDetail> getSellerDetailList() {
    return this.sellerDetailList;
  }

  public BuyInfo setSellerDetailList(List<BuySellerDetail> sellerDetailList) {
    this.sellerDetailList = sellerDetailList;
    
    return this;
  }

  public void unsetSellerDetailList() {
    this.sellerDetailList = null;
  }

  /** Returns true if field sellerDetailList is set (has been asigned a value) and false otherwise */
  public boolean isSetSellerDetailList() {
    return this.sellerDetailList != null;
  }

  public void setSellerDetailListIsSet(boolean value) {
    if (!value) {
      this.sellerDetailList = null;
    }
  }

  public int getFromSource() {
    return this.fromSource;
  }

  public BuyInfo setFromSource(int fromSource) {
    this.fromSource = fromSource;
    setFromSourceIsSet(true);

    return this;
  }

  public void unsetFromSource() {
  __isset_bit_vector.clear(__FROMSOURCE_ISSET_ID);
  }

  /** Returns true if field fromSource is set (has been asigned a value) and false otherwise */
  public boolean isSetFromSource() {
    return __isset_bit_vector.get(__FROMSOURCE_ISSET_ID);
  }

  public void setFromSourceIsSet(boolean value) {
    __isset_bit_vector.set(__FROMSOURCE_ISSET_ID, value);
  }

  public String getWi() {
    return this.wi;
  }

  public BuyInfo setWi(String wi) {
    this.wi = wi;
    
    return this;
  }

  public void unsetWi() {
    this.wi = null;
  }

  /** Returns true if field wi is set (has been asigned a value) and false otherwise */
  public boolean isSetWi() {
    return this.wi != null;
  }

  public void setWiIsSet(boolean value) {
    if (!value) {
      this.wi = null;
    }
  }

  public int getExchangeScore() {
    return this.exchangeScore;
  }

  public BuyInfo setExchangeScore(int exchangeScore) {
    this.exchangeScore = exchangeScore;
    setExchangeScoreIsSet(true);

    return this;
  }

  public void unsetExchangeScore() {
  __isset_bit_vector.clear(__EXCHANGESCORE_ISSET_ID);
  }

  /** Returns true if field exchangeScore is set (has been asigned a value) and false otherwise */
  public boolean isSetExchangeScore() {
    return __isset_bit_vector.get(__EXCHANGESCORE_ISSET_ID);
  }

  public void setExchangeScoreIsSet(boolean value) {
    __isset_bit_vector.set(__EXCHANGESCORE_ISSET_ID, value);
  }

  public String getExchangeCash() {
    return this.exchangeCash;
  }

  public BuyInfo setExchangeCash(String exchangeCash) {
    this.exchangeCash = exchangeCash;
    
    return this;
  }

  public void unsetExchangeCash() {
    this.exchangeCash = null;
  }

  /** Returns true if field exchangeCash is set (has been asigned a value) and false otherwise */
  public boolean isSetExchangeCash() {
    return this.exchangeCash != null;
  }

  public void setExchangeCashIsSet(boolean value) {
    if (!value) {
      this.exchangeCash = null;
    }
  }

  public String getTradeCode() {
    return this.tradeCode;
  }

  public BuyInfo setTradeCode(String tradeCode) {
    this.tradeCode = tradeCode;
    
    return this;
  }

  public void unsetTradeCode() {
    this.tradeCode = null;
  }

  /** Returns true if field tradeCode is set (has been asigned a value) and false otherwise */
  public boolean isSetTradeCode() {
    return this.tradeCode != null;
  }

  public void setTradeCodeIsSet(boolean value) {
    if (!value) {
      this.tradeCode = null;
    }
  }

  public int getFromBatch() {
    return this.fromBatch;
  }

  public BuyInfo setFromBatch(int fromBatch) {
    this.fromBatch = fromBatch;
    setFromBatchIsSet(true);

    return this;
  }

  public void unsetFromBatch() {
  __isset_bit_vector.clear(__FROMBATCH_ISSET_ID);
  }

  /** Returns true if field fromBatch is set (has been asigned a value) and false otherwise */
  public boolean isSetFromBatch() {
    return __isset_bit_vector.get(__FROMBATCH_ISSET_ID);
  }

  public void setFromBatchIsSet(boolean value) {
    __isset_bit_vector.set(__FROMBATCH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;
    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;
    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((String)value);
      }
      break;
    case PAY_CHANNEL:
      if (value == null) {
        unsetPayChannel();
      } else {
        setPayChannel((com.jfshare.finagle.thrift.pay.PayChannel)value);
      }
      break;
    case DELIVER_INFO:
      if (value == null) {
        unsetDeliverInfo();
      } else {
        setDeliverInfo((com.jfshare.finagle.thrift.order.DeliverInfo)value);
      }
      break;
    case SELLER_DETAIL_LIST:
      if (value == null) {
        unsetSellerDetailList();
      } else {
        setSellerDetailList((List<BuySellerDetail>)value);
      }
      break;
    case FROM_SOURCE:
      if (value == null) {
        unsetFromSource();
      } else {
        setFromSource((Integer)value);
      }
      break;
    case WI:
      if (value == null) {
        unsetWi();
      } else {
        setWi((String)value);
      }
      break;
    case EXCHANGE_SCORE:
      if (value == null) {
        unsetExchangeScore();
      } else {
        setExchangeScore((Integer)value);
      }
      break;
    case EXCHANGE_CASH:
      if (value == null) {
        unsetExchangeCash();
      } else {
        setExchangeCash((String)value);
      }
      break;
    case TRADE_CODE:
      if (value == null) {
        unsetTradeCode();
      } else {
        setTradeCode((String)value);
      }
      break;
    case FROM_BATCH:
      if (value == null) {
        unsetFromBatch();
      } else {
        setFromBatch((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return new Integer(getUserId());
    case USER_NAME:
      return getUserName();
    case AMOUNT:
      return getAmount();
    case PAY_CHANNEL:
      return getPayChannel();
    case DELIVER_INFO:
      return getDeliverInfo();
    case SELLER_DETAIL_LIST:
      return getSellerDetailList();
    case FROM_SOURCE:
      return new Integer(getFromSource());
    case WI:
      return getWi();
    case EXCHANGE_SCORE:
      return new Integer(getExchangeScore());
    case EXCHANGE_CASH:
      return getExchangeCash();
    case TRADE_CODE:
      return getTradeCode();
    case FROM_BATCH:
      return new Integer(getFromBatch());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case USER_NAME:
      return isSetUserName();
    case AMOUNT:
      return isSetAmount();
    case PAY_CHANNEL:
      return isSetPayChannel();
    case DELIVER_INFO:
      return isSetDeliverInfo();
    case SELLER_DETAIL_LIST:
      return isSetSellerDetailList();
    case FROM_SOURCE:
      return isSetFromSource();
    case WI:
      return isSetWi();
    case EXCHANGE_SCORE:
      return isSetExchangeScore();
    case EXCHANGE_CASH:
      return isSetExchangeCash();
    case TRADE_CODE:
      return isSetTradeCode();
    case FROM_BATCH:
      return isSetFromBatch();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BuyInfo)
      return this.equals((BuyInfo)that);
    return false;
  }

  public boolean equals(BuyInfo that) {
    if (that == null)
      return false;
    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }
    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }
    boolean this_present_amount = true && this.isSetAmount();
    boolean that_present_amount = true && that.isSetAmount();
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (!this.amount.equals(that.amount))
        return false;
    }
    boolean this_present_payChannel = true && this.isSetPayChannel();
    boolean that_present_payChannel = true && that.isSetPayChannel();
    if (this_present_payChannel || that_present_payChannel) {
      if (!(this_present_payChannel && that_present_payChannel))
        return false;
      if (!this.payChannel.equals(that.payChannel))
        return false;
    }
    boolean this_present_deliverInfo = true && this.isSetDeliverInfo();
    boolean that_present_deliverInfo = true && that.isSetDeliverInfo();
    if (this_present_deliverInfo || that_present_deliverInfo) {
      if (!(this_present_deliverInfo && that_present_deliverInfo))
        return false;
      if (!this.deliverInfo.equals(that.deliverInfo))
        return false;
    }
    boolean this_present_sellerDetailList = true && this.isSetSellerDetailList();
    boolean that_present_sellerDetailList = true && that.isSetSellerDetailList();
    if (this_present_sellerDetailList || that_present_sellerDetailList) {
      if (!(this_present_sellerDetailList && that_present_sellerDetailList))
        return false;
      if (!this.sellerDetailList.equals(that.sellerDetailList))
        return false;
    }
    boolean this_present_fromSource = true;
    boolean that_present_fromSource = true;
    if (this_present_fromSource || that_present_fromSource) {
      if (!(this_present_fromSource && that_present_fromSource))
        return false;
      if (this.fromSource != that.fromSource)
        return false;
    }
    boolean this_present_wi = true && this.isSetWi();
    boolean that_present_wi = true && that.isSetWi();
    if (this_present_wi || that_present_wi) {
      if (!(this_present_wi && that_present_wi))
        return false;
      if (!this.wi.equals(that.wi))
        return false;
    }
    boolean this_present_exchangeScore = true && this.isSetExchangeScore();
    boolean that_present_exchangeScore = true && that.isSetExchangeScore();
    if (this_present_exchangeScore || that_present_exchangeScore) {
      if (!(this_present_exchangeScore && that_present_exchangeScore))
        return false;
      if (this.exchangeScore != that.exchangeScore)
        return false;
    }
    boolean this_present_exchangeCash = true && this.isSetExchangeCash();
    boolean that_present_exchangeCash = true && that.isSetExchangeCash();
    if (this_present_exchangeCash || that_present_exchangeCash) {
      if (!(this_present_exchangeCash && that_present_exchangeCash))
        return false;
      if (!this.exchangeCash.equals(that.exchangeCash))
        return false;
    }
    boolean this_present_tradeCode = true && this.isSetTradeCode();
    boolean that_present_tradeCode = true && that.isSetTradeCode();
    if (this_present_tradeCode || that_present_tradeCode) {
      if (!(this_present_tradeCode && that_present_tradeCode))
        return false;
      if (!this.tradeCode.equals(that.tradeCode))
        return false;
    }
    boolean this_present_fromBatch = true && this.isSetFromBatch();
    boolean that_present_fromBatch = true && that.isSetFromBatch();
    if (this_present_fromBatch || that_present_fromBatch) {
      if (!(this_present_fromBatch && that_present_fromBatch))
        return false;
      if (this.fromBatch != that.fromBatch)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_userId = true;
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);
    boolean present_userName = true && (isSetUserName());
    builder.append(present_userName);
    if (present_userName)
      builder.append(userName);
    boolean present_amount = true && (isSetAmount());
    builder.append(present_amount);
    if (present_amount)
      builder.append(amount);
    boolean present_payChannel = true && (isSetPayChannel());
    builder.append(present_payChannel);
    if (present_payChannel)
      builder.append(payChannel);
    boolean present_deliverInfo = true && (isSetDeliverInfo());
    builder.append(present_deliverInfo);
    if (present_deliverInfo)
      builder.append(deliverInfo);
    boolean present_sellerDetailList = true && (isSetSellerDetailList());
    builder.append(present_sellerDetailList);
    if (present_sellerDetailList)
      builder.append(sellerDetailList);
    boolean present_fromSource = true;
    builder.append(present_fromSource);
    if (present_fromSource)
      builder.append(fromSource);
    boolean present_wi = true && (isSetWi());
    builder.append(present_wi);
    if (present_wi)
      builder.append(wi);
    boolean present_exchangeScore = true && (isSetExchangeScore());
    builder.append(present_exchangeScore);
    if (present_exchangeScore)
      builder.append(exchangeScore);
    boolean present_exchangeCash = true && (isSetExchangeCash());
    builder.append(present_exchangeCash);
    if (present_exchangeCash)
      builder.append(exchangeCash);
    boolean present_tradeCode = true && (isSetTradeCode());
    builder.append(present_tradeCode);
    if (present_tradeCode)
      builder.append(tradeCode);
    boolean present_fromBatch = true && (isSetFromBatch());
    builder.append(present_fromBatch);
    if (present_fromBatch)
      builder.append(fromBatch);
    return builder.toHashCode();
  }

  public int compareTo(BuyInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BuyInfo typedOther = (BuyInfo)other;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = TBaseHelper.compareTo(this.userName, typedOther.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(typedOther.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = TBaseHelper.compareTo(this.amount, typedOther.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayChannel()).compareTo(typedOther.isSetPayChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayChannel()) {
      lastComparison = TBaseHelper.compareTo(this.payChannel, typedOther.payChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliverInfo()).compareTo(typedOther.isSetDeliverInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliverInfo()) {
      lastComparison = TBaseHelper.compareTo(this.deliverInfo, typedOther.deliverInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerDetailList()).compareTo(typedOther.isSetSellerDetailList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerDetailList()) {
      lastComparison = TBaseHelper.compareTo(this.sellerDetailList, typedOther.sellerDetailList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromSource()).compareTo(typedOther.isSetFromSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromSource()) {
      lastComparison = TBaseHelper.compareTo(this.fromSource, typedOther.fromSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWi()).compareTo(typedOther.isSetWi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWi()) {
      lastComparison = TBaseHelper.compareTo(this.wi, typedOther.wi);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeScore()).compareTo(typedOther.isSetExchangeScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeScore()) {
      lastComparison = TBaseHelper.compareTo(this.exchangeScore, typedOther.exchangeScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeCash()).compareTo(typedOther.isSetExchangeCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeCash()) {
      lastComparison = TBaseHelper.compareTo(this.exchangeCash, typedOther.exchangeCash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeCode()).compareTo(typedOther.isSetTradeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeCode()) {
      lastComparison = TBaseHelper.compareTo(this.tradeCode, typedOther.tradeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromBatch()).compareTo(typedOther.isSetFromBatch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromBatch()) {
      lastComparison = TBaseHelper.compareTo(this.fromBatch, typedOther.fromBatch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // USER_ID
          if (field.type == TType.I32) {
            this.userId = iprot.readI32();
            setUserIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // USER_NAME
          if (field.type == TType.STRING) {
            this.userName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // AMOUNT
          if (field.type == TType.STRING) {
            this.amount = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PAY_CHANNEL
          if (field.type == TType.STRUCT) {
            this.payChannel = new com.jfshare.finagle.thrift.pay.PayChannel();
            this.payChannel.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // DELIVER_INFO
          if (field.type == TType.STRUCT) {
            this.deliverInfo = new com.jfshare.finagle.thrift.order.DeliverInfo();
            this.deliverInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // SELLER_DETAIL_LIST
          if (field.type == TType.LIST) {
            {
            TList _list4 = iprot.readListBegin();
            this.sellerDetailList = new ArrayList<BuySellerDetail>(_list4.size);
            for (int _i5 = 0; _i5 < _list4.size; ++_i5)
            {
              BuySellerDetail _elem6;
              _elem6 = new BuySellerDetail();
              _elem6.read(iprot);
              this.sellerDetailList.add(_elem6);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // FROM_SOURCE
          if (field.type == TType.I32) {
            this.fromSource = iprot.readI32();
            setFromSourceIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // WI
          if (field.type == TType.STRING) {
            this.wi = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // EXCHANGE_SCORE
          if (field.type == TType.I32) {
            this.exchangeScore = iprot.readI32();
            setExchangeScoreIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // EXCHANGE_CASH
          if (field.type == TType.STRING) {
            this.exchangeCash = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // TRADE_CODE
          if (field.type == TType.STRING) {
            this.tradeCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // FROM_BATCH
          if (field.type == TType.I32) {
            this.fromBatch = iprot.readI32();
            setFromBatchIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(USER_ID_FIELD_DESC);
    oprot.writeI32(this.userId);
    oprot.writeFieldEnd();
    if (this.userName != null) {
      oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
      oprot.writeString(this.userName);
      oprot.writeFieldEnd();
    }
    if (this.amount != null) {
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeString(this.amount);
      oprot.writeFieldEnd();
    }
    if (this.payChannel != null) {
      oprot.writeFieldBegin(PAY_CHANNEL_FIELD_DESC);
      this.payChannel.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.deliverInfo != null) {
      oprot.writeFieldBegin(DELIVER_INFO_FIELD_DESC);
      this.deliverInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.sellerDetailList != null) {
      oprot.writeFieldBegin(SELLER_DETAIL_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.sellerDetailList.size()));
        for (BuySellerDetail _iter7 : this.sellerDetailList)
        {
          _iter7.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(FROM_SOURCE_FIELD_DESC);
    oprot.writeI32(this.fromSource);
    oprot.writeFieldEnd();
    if (this.wi != null) {
      oprot.writeFieldBegin(WI_FIELD_DESC);
      oprot.writeString(this.wi);
      oprot.writeFieldEnd();
    }
    if (isSetExchangeScore()) {
      oprot.writeFieldBegin(EXCHANGE_SCORE_FIELD_DESC);
      oprot.writeI32(this.exchangeScore);
      oprot.writeFieldEnd();
    }
    if (this.exchangeCash != null) {
      if (isSetExchangeCash()) {
        oprot.writeFieldBegin(EXCHANGE_CASH_FIELD_DESC);
        oprot.writeString(this.exchangeCash);
        oprot.writeFieldEnd();
      }
    }
    if (this.tradeCode != null) {
      if (isSetTradeCode()) {
        oprot.writeFieldBegin(TRADE_CODE_FIELD_DESC);
        oprot.writeString(this.tradeCode);
        oprot.writeFieldEnd();
      }
    }
    if (isSetFromBatch()) {
      oprot.writeFieldBegin(FROM_BATCH_FIELD_DESC);
      oprot.writeI32(this.fromBatch);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BuyInfo(");
    boolean first = true;
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    if (this.amount == null) {
      sb.append("null");
    } else {
      sb.append(this.amount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payChannel:");
    if (this.payChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.payChannel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliverInfo:");
    if (this.deliverInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.deliverInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerDetailList:");
    if (this.sellerDetailList == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerDetailList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromSource:");
    sb.append(this.fromSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wi:");
    if (this.wi == null) {
      sb.append("null");
    } else {
      sb.append(this.wi);
    }
    first = false;
    if (isSetExchangeScore()) {
      if (!first) sb.append(", ");
      sb.append("exchangeScore:");
      sb.append(this.exchangeScore);
      first = false;
      }
    if (isSetExchangeCash()) {
      if (!first) sb.append(", ");
      sb.append("exchangeCash:");
      if (this.exchangeCash == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeCash);
      }
      first = false;
      }
    if (isSetTradeCode()) {
      if (!first) sb.append(", ");
      sb.append("tradeCode:");
      if (this.tradeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeCode);
      }
      first = false;
      }
    if (isSetFromBatch()) {
      if (!first) sb.append(", ");
      sb.append("fromBatch:");
      sb.append(this.fromBatch);
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
