/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.pagination;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class Pagination implements TBase<Pagination, Pagination._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Pagination");

  private static final TField TOTAL_COUNT_FIELD_DESC = new TField("totalCount", TType.I32, (short)1);
  private static final TField PAGE_NUM_COUNT_FIELD_DESC = new TField("pageNumCount", TType.I32, (short)2);
  private static final TField NUM_PER_PAGE_FIELD_DESC = new TField("numPerPage", TType.I32, (short)3);
  private static final TField CURRENT_PAGE_FIELD_DESC = new TField("currentPage", TType.I32, (short)4);


  public int totalCount;
  public int pageNumCount;
  public int numPerPage;
  public int currentPage;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TOTAL_COUNT((short)1, "totalCount"),
    PAGE_NUM_COUNT((short)2, "pageNumCount"),
    NUM_PER_PAGE((short)3, "numPerPage"),
    CURRENT_PAGE((short)4, "currentPage");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_COUNT
  	return TOTAL_COUNT;
        case 2: // PAGE_NUM_COUNT
  	return PAGE_NUM_COUNT;
        case 3: // NUM_PER_PAGE
  	return NUM_PER_PAGE;
        case 4: // CURRENT_PAGE
  	return CURRENT_PAGE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __TOTALCOUNT_ISSET_ID = 0;
  private static final int __PAGENUMCOUNT_ISSET_ID = 1;
  private static final int __NUMPERPAGE_ISSET_ID = 2;
  private static final int __CURRENTPAGE_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_COUNT, new FieldMetaData("totalCount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PAGE_NUM_COUNT, new FieldMetaData("pageNumCount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.NUM_PER_PAGE, new FieldMetaData("numPerPage", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CURRENT_PAGE, new FieldMetaData("currentPage", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Pagination.class, metaDataMap);
  }


  public Pagination() {
  }

  public Pagination(
    int totalCount,
    int pageNumCount,
    int numPerPage,
    int currentPage)
  {
    this();
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.pageNumCount = pageNumCount;
    setPageNumCountIsSet(true);
    this.numPerPage = numPerPage;
    setNumPerPageIsSet(true);
    this.currentPage = currentPage;
    setCurrentPageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Pagination(Pagination other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.totalCount = other.totalCount;
    this.pageNumCount = other.pageNumCount;
    this.numPerPage = other.numPerPage;
    this.currentPage = other.currentPage;
  }

  public Pagination deepCopy() {
    return new Pagination(this);
  }

  @Override
  public void clear() {
    setTotalCountIsSet(false);
    this.totalCount = 0;
    setPageNumCountIsSet(false);
    this.pageNumCount = 0;
    setNumPerPageIsSet(false);
    this.numPerPage = 0;
    setCurrentPageIsSet(false);
    this.currentPage = 0;
  }

  public int getTotalCount() {
    return this.totalCount;
  }

  public Pagination setTotalCount(int totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);

    return this;
  }

  public void unsetTotalCount() {
  __isset_bit_vector.clear(__TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been asigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return __isset_bit_vector.get(__TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALCOUNT_ISSET_ID, value);
  }

  public int getPageNumCount() {
    return this.pageNumCount;
  }

  public Pagination setPageNumCount(int pageNumCount) {
    this.pageNumCount = pageNumCount;
    setPageNumCountIsSet(true);

    return this;
  }

  public void unsetPageNumCount() {
  __isset_bit_vector.clear(__PAGENUMCOUNT_ISSET_ID);
  }

  /** Returns true if field pageNumCount is set (has been asigned a value) and false otherwise */
  public boolean isSetPageNumCount() {
    return __isset_bit_vector.get(__PAGENUMCOUNT_ISSET_ID);
  }

  public void setPageNumCountIsSet(boolean value) {
    __isset_bit_vector.set(__PAGENUMCOUNT_ISSET_ID, value);
  }

  public int getNumPerPage() {
    return this.numPerPage;
  }

  public Pagination setNumPerPage(int numPerPage) {
    this.numPerPage = numPerPage;
    setNumPerPageIsSet(true);

    return this;
  }

  public void unsetNumPerPage() {
  __isset_bit_vector.clear(__NUMPERPAGE_ISSET_ID);
  }

  /** Returns true if field numPerPage is set (has been asigned a value) and false otherwise */
  public boolean isSetNumPerPage() {
    return __isset_bit_vector.get(__NUMPERPAGE_ISSET_ID);
  }

  public void setNumPerPageIsSet(boolean value) {
    __isset_bit_vector.set(__NUMPERPAGE_ISSET_ID, value);
  }

  public int getCurrentPage() {
    return this.currentPage;
  }

  public Pagination setCurrentPage(int currentPage) {
    this.currentPage = currentPage;
    setCurrentPageIsSet(true);

    return this;
  }

  public void unsetCurrentPage() {
  __isset_bit_vector.clear(__CURRENTPAGE_ISSET_ID);
  }

  /** Returns true if field currentPage is set (has been asigned a value) and false otherwise */
  public boolean isSetCurrentPage() {
    return __isset_bit_vector.get(__CURRENTPAGE_ISSET_ID);
  }

  public void setCurrentPageIsSet(boolean value) {
    __isset_bit_vector.set(__CURRENTPAGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Integer)value);
      }
      break;
    case PAGE_NUM_COUNT:
      if (value == null) {
        unsetPageNumCount();
      } else {
        setPageNumCount((Integer)value);
      }
      break;
    case NUM_PER_PAGE:
      if (value == null) {
        unsetNumPerPage();
      } else {
        setNumPerPage((Integer)value);
      }
      break;
    case CURRENT_PAGE:
      if (value == null) {
        unsetCurrentPage();
      } else {
        setCurrentPage((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_COUNT:
      return new Integer(getTotalCount());
    case PAGE_NUM_COUNT:
      return new Integer(getPageNumCount());
    case NUM_PER_PAGE:
      return new Integer(getNumPerPage());
    case CURRENT_PAGE:
      return new Integer(getCurrentPage());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_COUNT:
      return isSetTotalCount();
    case PAGE_NUM_COUNT:
      return isSetPageNumCount();
    case NUM_PER_PAGE:
      return isSetNumPerPage();
    case CURRENT_PAGE:
      return isSetCurrentPage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Pagination)
      return this.equals((Pagination)that);
    return false;
  }

  public boolean equals(Pagination that) {
    if (that == null)
      return false;
    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }
    boolean this_present_pageNumCount = true;
    boolean that_present_pageNumCount = true;
    if (this_present_pageNumCount || that_present_pageNumCount) {
      if (!(this_present_pageNumCount && that_present_pageNumCount))
        return false;
      if (this.pageNumCount != that.pageNumCount)
        return false;
    }
    boolean this_present_numPerPage = true;
    boolean that_present_numPerPage = true;
    if (this_present_numPerPage || that_present_numPerPage) {
      if (!(this_present_numPerPage && that_present_numPerPage))
        return false;
      if (this.numPerPage != that.numPerPage)
        return false;
    }
    boolean this_present_currentPage = true;
    boolean that_present_currentPage = true;
    if (this_present_currentPage || that_present_currentPage) {
      if (!(this_present_currentPage && that_present_currentPage))
        return false;
      if (this.currentPage != that.currentPage)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_totalCount = true;
    builder.append(present_totalCount);
    if (present_totalCount)
      builder.append(totalCount);
    boolean present_pageNumCount = true;
    builder.append(present_pageNumCount);
    if (present_pageNumCount)
      builder.append(pageNumCount);
    boolean present_numPerPage = true;
    builder.append(present_numPerPage);
    if (present_numPerPage)
      builder.append(numPerPage);
    boolean present_currentPage = true;
    builder.append(present_currentPage);
    if (present_currentPage)
      builder.append(currentPage);
    return builder.toHashCode();
  }

  public int compareTo(Pagination other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Pagination typedOther = (Pagination)other;

    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(typedOther.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = TBaseHelper.compareTo(this.totalCount, typedOther.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageNumCount()).compareTo(typedOther.isSetPageNumCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageNumCount()) {
      lastComparison = TBaseHelper.compareTo(this.pageNumCount, typedOther.pageNumCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumPerPage()).compareTo(typedOther.isSetNumPerPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumPerPage()) {
      lastComparison = TBaseHelper.compareTo(this.numPerPage, typedOther.numPerPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentPage()).compareTo(typedOther.isSetCurrentPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentPage()) {
      lastComparison = TBaseHelper.compareTo(this.currentPage, typedOther.currentPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // TOTAL_COUNT
          if (field.type == TType.I32) {
            this.totalCount = iprot.readI32();
            setTotalCountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PAGE_NUM_COUNT
          if (field.type == TType.I32) {
            this.pageNumCount = iprot.readI32();
            setPageNumCountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // NUM_PER_PAGE
          if (field.type == TType.I32) {
            this.numPerPage = iprot.readI32();
            setNumPerPageIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CURRENT_PAGE
          if (field.type == TType.I32) {
            this.currentPage = iprot.readI32();
            setCurrentPageIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
    oprot.writeI32(this.totalCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PAGE_NUM_COUNT_FIELD_DESC);
    oprot.writeI32(this.pageNumCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM_PER_PAGE_FIELD_DESC);
    oprot.writeI32(this.numPerPage);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
    oprot.writeI32(this.currentPage);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Pagination(");
    boolean first = true;
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageNumCount:");
    sb.append(this.pageNumCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numPerPage:");
    sb.append(this.numPerPage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentPage:");
    sb.append(this.currentPage);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
