/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.order;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ScanOrderDetail implements TBase<ScanOrderDetail, ScanOrderDetail._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ScanOrderDetail");

  private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short)1);
  private static final TField PAY_TYPE_DESC_FIELD_DESC = new TField("payTypeDesc", TType.STRING, (short)2);
  private static final TField PAYTIME_FIELD_DESC = new TField("paytime", TType.STRING, (short)3);
  private static final TField AMOUNT_FIELD_DESC = new TField("amount", TType.STRING, (short)4);
  private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.STRING, (short)5);


  public String orderId;
  public String payTypeDesc;
  public String paytime;
  public String amount;
  public String userId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    PAY_TYPE_DESC((short)2, "payTypeDesc"),
    PAYTIME((short)3, "paytime"),
    AMOUNT((short)4, "amount"),
    USER_ID((short)5, "userId");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
  	return ORDER_ID;
        case 2: // PAY_TYPE_DESC
  	return PAY_TYPE_DESC;
        case 3: // PAYTIME
  	return PAYTIME;
        case 4: // AMOUNT
  	return AMOUNT;
        case 5: // USER_ID
  	return USER_ID;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PAY_TYPE_DESC, new FieldMetaData("payTypeDesc", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PAYTIME, new FieldMetaData("paytime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.AMOUNT, new FieldMetaData("amount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ScanOrderDetail.class, metaDataMap);
  }


  public ScanOrderDetail() {
  }

  public ScanOrderDetail(
    String orderId,
    String payTypeDesc,
    String paytime,
    String amount,
    String userId)
  {
    this();
    this.orderId = orderId;
    this.payTypeDesc = payTypeDesc;
    this.paytime = paytime;
    this.amount = amount;
    this.userId = userId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ScanOrderDetail(ScanOrderDetail other) {
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetPayTypeDesc()) {
      this.payTypeDesc = other.payTypeDesc;
    }
    if (other.isSetPaytime()) {
      this.paytime = other.paytime;
    }
    if (other.isSetAmount()) {
      this.amount = other.amount;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
  }

  public ScanOrderDetail deepCopy() {
    return new ScanOrderDetail(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.payTypeDesc = null;
    this.paytime = null;
    this.amount = null;
    this.userId = null;
  }

  public String getOrderId() {
    return this.orderId;
  }

  public ScanOrderDetail setOrderId(String orderId) {
    this.orderId = orderId;
    
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public String getPayTypeDesc() {
    return this.payTypeDesc;
  }

  public ScanOrderDetail setPayTypeDesc(String payTypeDesc) {
    this.payTypeDesc = payTypeDesc;
    
    return this;
  }

  public void unsetPayTypeDesc() {
    this.payTypeDesc = null;
  }

  /** Returns true if field payTypeDesc is set (has been asigned a value) and false otherwise */
  public boolean isSetPayTypeDesc() {
    return this.payTypeDesc != null;
  }

  public void setPayTypeDescIsSet(boolean value) {
    if (!value) {
      this.payTypeDesc = null;
    }
  }

  public String getPaytime() {
    return this.paytime;
  }

  public ScanOrderDetail setPaytime(String paytime) {
    this.paytime = paytime;
    
    return this;
  }

  public void unsetPaytime() {
    this.paytime = null;
  }

  /** Returns true if field paytime is set (has been asigned a value) and false otherwise */
  public boolean isSetPaytime() {
    return this.paytime != null;
  }

  public void setPaytimeIsSet(boolean value) {
    if (!value) {
      this.paytime = null;
    }
  }

  public String getAmount() {
    return this.amount;
  }

  public ScanOrderDetail setAmount(String amount) {
    this.amount = amount;
    
    return this;
  }

  public void unsetAmount() {
    this.amount = null;
  }

  /** Returns true if field amount is set (has been asigned a value) and false otherwise */
  public boolean isSetAmount() {
    return this.amount != null;
  }

  public void setAmountIsSet(boolean value) {
    if (!value) {
      this.amount = null;
    }
  }

  public String getUserId() {
    return this.userId;
  }

  public ScanOrderDetail setUserId(String userId) {
    this.userId = userId;
    
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been asigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;
    case PAY_TYPE_DESC:
      if (value == null) {
        unsetPayTypeDesc();
      } else {
        setPayTypeDesc((String)value);
      }
      break;
    case PAYTIME:
      if (value == null) {
        unsetPaytime();
      } else {
        setPaytime((String)value);
      }
      break;
    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((String)value);
      }
      break;
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();
    case PAY_TYPE_DESC:
      return getPayTypeDesc();
    case PAYTIME:
      return getPaytime();
    case AMOUNT:
      return getAmount();
    case USER_ID:
      return getUserId();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case PAY_TYPE_DESC:
      return isSetPayTypeDesc();
    case PAYTIME:
      return isSetPaytime();
    case AMOUNT:
      return isSetAmount();
    case USER_ID:
      return isSetUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ScanOrderDetail)
      return this.equals((ScanOrderDetail)that);
    return false;
  }

  public boolean equals(ScanOrderDetail that) {
    if (that == null)
      return false;
    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }
    boolean this_present_payTypeDesc = true && this.isSetPayTypeDesc();
    boolean that_present_payTypeDesc = true && that.isSetPayTypeDesc();
    if (this_present_payTypeDesc || that_present_payTypeDesc) {
      if (!(this_present_payTypeDesc && that_present_payTypeDesc))
        return false;
      if (!this.payTypeDesc.equals(that.payTypeDesc))
        return false;
    }
    boolean this_present_paytime = true && this.isSetPaytime();
    boolean that_present_paytime = true && that.isSetPaytime();
    if (this_present_paytime || that_present_paytime) {
      if (!(this_present_paytime && that_present_paytime))
        return false;
      if (!this.paytime.equals(that.paytime))
        return false;
    }
    boolean this_present_amount = true && this.isSetAmount();
    boolean that_present_amount = true && that.isSetAmount();
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (!this.amount.equals(that.amount))
        return false;
    }
    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_orderId = true && (isSetOrderId());
    builder.append(present_orderId);
    if (present_orderId)
      builder.append(orderId);
    boolean present_payTypeDesc = true && (isSetPayTypeDesc());
    builder.append(present_payTypeDesc);
    if (present_payTypeDesc)
      builder.append(payTypeDesc);
    boolean present_paytime = true && (isSetPaytime());
    builder.append(present_paytime);
    if (present_paytime)
      builder.append(paytime);
    boolean present_amount = true && (isSetAmount());
    builder.append(present_amount);
    if (present_amount)
      builder.append(amount);
    boolean present_userId = true && (isSetUserId());
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);
    return builder.toHashCode();
  }

  public int compareTo(ScanOrderDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ScanOrderDetail typedOther = (ScanOrderDetail)other;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayTypeDesc()).compareTo(typedOther.isSetPayTypeDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayTypeDesc()) {
      lastComparison = TBaseHelper.compareTo(this.payTypeDesc, typedOther.payTypeDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaytime()).compareTo(typedOther.isSetPaytime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaytime()) {
      lastComparison = TBaseHelper.compareTo(this.paytime, typedOther.paytime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(typedOther.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = TBaseHelper.compareTo(this.amount, typedOther.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ORDER_ID
          if (field.type == TType.STRING) {
            this.orderId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PAY_TYPE_DESC
          if (field.type == TType.STRING) {
            this.payTypeDesc = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PAYTIME
          if (field.type == TType.STRING) {
            this.paytime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // AMOUNT
          if (field.type == TType.STRING) {
            this.amount = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // USER_ID
          if (field.type == TType.STRING) {
            this.userId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.orderId != null) {
      oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
      oprot.writeString(this.orderId);
      oprot.writeFieldEnd();
    }
    if (this.payTypeDesc != null) {
      oprot.writeFieldBegin(PAY_TYPE_DESC_FIELD_DESC);
      oprot.writeString(this.payTypeDesc);
      oprot.writeFieldEnd();
    }
    if (this.paytime != null) {
      oprot.writeFieldBegin(PAYTIME_FIELD_DESC);
      oprot.writeString(this.paytime);
      oprot.writeFieldEnd();
    }
    if (this.amount != null) {
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeString(this.amount);
      oprot.writeFieldEnd();
    }
    if (this.userId != null) {
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeString(this.userId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ScanOrderDetail(");
    boolean first = true;
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payTypeDesc:");
    if (this.payTypeDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.payTypeDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paytime:");
    if (this.paytime == null) {
      sb.append("null");
    } else {
      sb.append(this.paytime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    if (this.amount == null) {
      sb.append("null");
    } else {
      sb.append(this.amount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
