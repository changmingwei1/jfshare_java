/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.common;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class MsgCaptcha implements TBase<MsgCaptcha, MsgCaptcha._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MsgCaptcha");

  private static final TField TYPE_FIELD_DESC = new TField("type", TType.STRING, (short)1);
  private static final TField MOBILE_FIELD_DESC = new TField("mobile", TType.STRING, (short)2);
  private static final TField CAPTCHA_DESC_FIELD_DESC = new TField("captchaDesc", TType.STRING, (short)3);


  public String type;
  public String mobile;
  public String captchaDesc;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TYPE((short)1, "type"),
    MOBILE((short)2, "mobile"),
    CAPTCHA_DESC((short)3, "captchaDesc");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
  	return TYPE;
        case 2: // MOBILE
  	return MOBILE;
        case 3: // CAPTCHA_DESC
  	return CAPTCHA_DESC;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new FieldMetaData("mobile", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CAPTCHA_DESC, new FieldMetaData("captchaDesc", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(MsgCaptcha.class, metaDataMap);
  }


  public MsgCaptcha() {
  }

  public MsgCaptcha(
    String type,
    String mobile,
    String captchaDesc)
  {
    this();
    this.type = type;
    this.mobile = mobile;
    this.captchaDesc = captchaDesc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MsgCaptcha(MsgCaptcha other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetCaptchaDesc()) {
      this.captchaDesc = other.captchaDesc;
    }
  }

  public MsgCaptcha deepCopy() {
    return new MsgCaptcha(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.mobile = null;
    this.captchaDesc = null;
  }

  public String getType() {
    return this.type;
  }

  public MsgCaptcha setType(String type) {
    this.type = type;
    
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been asigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public MsgCaptcha setMobile(String mobile) {
    this.mobile = mobile;
    
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been asigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getCaptchaDesc() {
    return this.captchaDesc;
  }

  public MsgCaptcha setCaptchaDesc(String captchaDesc) {
    this.captchaDesc = captchaDesc;
    
    return this;
  }

  public void unsetCaptchaDesc() {
    this.captchaDesc = null;
  }

  /** Returns true if field captchaDesc is set (has been asigned a value) and false otherwise */
  public boolean isSetCaptchaDesc() {
    return this.captchaDesc != null;
  }

  public void setCaptchaDescIsSet(boolean value) {
    if (!value) {
      this.captchaDesc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;
    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;
    case CAPTCHA_DESC:
      if (value == null) {
        unsetCaptchaDesc();
      } else {
        setCaptchaDesc((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();
    case MOBILE:
      return getMobile();
    case CAPTCHA_DESC:
      return getCaptchaDesc();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case MOBILE:
      return isSetMobile();
    case CAPTCHA_DESC:
      return isSetCaptchaDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MsgCaptcha)
      return this.equals((MsgCaptcha)that);
    return false;
  }

  public boolean equals(MsgCaptcha that) {
    if (that == null)
      return false;
    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }
    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }
    boolean this_present_captchaDesc = true && this.isSetCaptchaDesc();
    boolean that_present_captchaDesc = true && that.isSetCaptchaDesc();
    if (this_present_captchaDesc || that_present_captchaDesc) {
      if (!(this_present_captchaDesc && that_present_captchaDesc))
        return false;
      if (!this.captchaDesc.equals(that.captchaDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type);
    boolean present_mobile = true && (isSetMobile());
    builder.append(present_mobile);
    if (present_mobile)
      builder.append(mobile);
    boolean present_captchaDesc = true && (isSetCaptchaDesc());
    builder.append(present_captchaDesc);
    if (present_captchaDesc)
      builder.append(captchaDesc);
    return builder.toHashCode();
  }

  public int compareTo(MsgCaptcha other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MsgCaptcha typedOther = (MsgCaptcha)other;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(typedOther.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = TBaseHelper.compareTo(this.mobile, typedOther.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCaptchaDesc()).compareTo(typedOther.isSetCaptchaDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaptchaDesc()) {
      lastComparison = TBaseHelper.compareTo(this.captchaDesc, typedOther.captchaDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // TYPE
          if (field.type == TType.STRING) {
            this.type = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MOBILE
          if (field.type == TType.STRING) {
            this.mobile = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CAPTCHA_DESC
          if (field.type == TType.STRING) {
            this.captchaDesc = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeString(this.type);
      oprot.writeFieldEnd();
    }
    if (this.mobile != null) {
      oprot.writeFieldBegin(MOBILE_FIELD_DESC);
      oprot.writeString(this.mobile);
      oprot.writeFieldEnd();
    }
    if (this.captchaDesc != null) {
      oprot.writeFieldBegin(CAPTCHA_DESC_FIELD_DESC);
      oprot.writeString(this.captchaDesc);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MsgCaptcha(");
    boolean first = true;
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("captchaDesc:");
    if (this.captchaDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.captchaDesc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
