/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.order;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class PayParam implements TBase<PayParam, PayParam._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("PayParam");

  private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I32, (short)1);
  private static final TField ORDER_ID_LIST_FIELD_DESC = new TField("orderIdList", TType.LIST, (short)2);
  private static final TField PAY_CHANNEL_FIELD_DESC = new TField("payChannel", TType.STRUCT, (short)3);


  public int userId;
  public List<String> orderIdList;
  public com.jfshare.finagle.thrift.pay.PayChannel payChannel;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_ID((short)1, "userId"),
    ORDER_ID_LIST((short)2, "orderIdList"),
    PAY_CHANNEL((short)3, "payChannel");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
  	return USER_ID;
        case 2: // ORDER_ID_LIST
  	return ORDER_ID_LIST;
        case 3: // PAY_CHANNEL
  	return PAY_CHANNEL;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ORDER_ID_LIST, new FieldMetaData("orderIdList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.PAY_CHANNEL, new FieldMetaData("payChannel", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.pay.PayChannel.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(PayParam.class, metaDataMap);
  }


  public PayParam() {
  }

  public PayParam(
    int userId,
    List<String> orderIdList,
    com.jfshare.finagle.thrift.pay.PayChannel payChannel)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.orderIdList = orderIdList;
    this.payChannel = payChannel;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PayParam(PayParam other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.userId = other.userId;
    if (other.isSetOrderIdList()) {
      List<String> __this__orderIdList = new ArrayList<String>();
      for (String other_element : other.orderIdList) {
        __this__orderIdList.add(other_element);
      }
      this.orderIdList = __this__orderIdList;
    }
    if (other.isSetPayChannel()) {
      this.payChannel = new com.jfshare.finagle.thrift.pay.PayChannel(other.payChannel);
    }
  }

  public PayParam deepCopy() {
    return new PayParam(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.orderIdList = null;
    this.payChannel = null;
  }

  public int getUserId() {
    return this.userId;
  }

  public PayParam setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);

    return this;
  }

  public void unsetUserId() {
  __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been asigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public int getOrderIdListSize() {
    return (this.orderIdList == null) ? 0 : this.orderIdList.size();
  }

  public java.util.Iterator<String> getOrderIdListIterator() {
    return (this.orderIdList == null) ? null : this.orderIdList.iterator();
  }

  public void addToOrderIdList(String elem) {
    if (this.orderIdList == null) {
      this.orderIdList = new ArrayList<String>();
    }
    this.orderIdList.add(elem);
  }

  public List<String> getOrderIdList() {
    return this.orderIdList;
  }

  public PayParam setOrderIdList(List<String> orderIdList) {
    this.orderIdList = orderIdList;
    
    return this;
  }

  public void unsetOrderIdList() {
    this.orderIdList = null;
  }

  /** Returns true if field orderIdList is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderIdList() {
    return this.orderIdList != null;
  }

  public void setOrderIdListIsSet(boolean value) {
    if (!value) {
      this.orderIdList = null;
    }
  }

  public com.jfshare.finagle.thrift.pay.PayChannel getPayChannel() {
    return this.payChannel;
  }

  public PayParam setPayChannel(com.jfshare.finagle.thrift.pay.PayChannel payChannel) {
    this.payChannel = payChannel;
    
    return this;
  }

  public void unsetPayChannel() {
    this.payChannel = null;
  }

  /** Returns true if field payChannel is set (has been asigned a value) and false otherwise */
  public boolean isSetPayChannel() {
    return this.payChannel != null;
  }

  public void setPayChannelIsSet(boolean value) {
    if (!value) {
      this.payChannel = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;
    case ORDER_ID_LIST:
      if (value == null) {
        unsetOrderIdList();
      } else {
        setOrderIdList((List<String>)value);
      }
      break;
    case PAY_CHANNEL:
      if (value == null) {
        unsetPayChannel();
      } else {
        setPayChannel((com.jfshare.finagle.thrift.pay.PayChannel)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return new Integer(getUserId());
    case ORDER_ID_LIST:
      return getOrderIdList();
    case PAY_CHANNEL:
      return getPayChannel();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case ORDER_ID_LIST:
      return isSetOrderIdList();
    case PAY_CHANNEL:
      return isSetPayChannel();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PayParam)
      return this.equals((PayParam)that);
    return false;
  }

  public boolean equals(PayParam that) {
    if (that == null)
      return false;
    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }
    boolean this_present_orderIdList = true && this.isSetOrderIdList();
    boolean that_present_orderIdList = true && that.isSetOrderIdList();
    if (this_present_orderIdList || that_present_orderIdList) {
      if (!(this_present_orderIdList && that_present_orderIdList))
        return false;
      if (!this.orderIdList.equals(that.orderIdList))
        return false;
    }
    boolean this_present_payChannel = true && this.isSetPayChannel();
    boolean that_present_payChannel = true && that.isSetPayChannel();
    if (this_present_payChannel || that_present_payChannel) {
      if (!(this_present_payChannel && that_present_payChannel))
        return false;
      if (!this.payChannel.equals(that.payChannel))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_userId = true;
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);
    boolean present_orderIdList = true && (isSetOrderIdList());
    builder.append(present_orderIdList);
    if (present_orderIdList)
      builder.append(orderIdList);
    boolean present_payChannel = true && (isSetPayChannel());
    builder.append(present_payChannel);
    if (present_payChannel)
      builder.append(payChannel);
    return builder.toHashCode();
  }

  public int compareTo(PayParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PayParam typedOther = (PayParam)other;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderIdList()).compareTo(typedOther.isSetOrderIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderIdList()) {
      lastComparison = TBaseHelper.compareTo(this.orderIdList, typedOther.orderIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayChannel()).compareTo(typedOther.isSetPayChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayChannel()) {
      lastComparison = TBaseHelper.compareTo(this.payChannel, typedOther.payChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // USER_ID
          if (field.type == TType.I32) {
            this.userId = iprot.readI32();
            setUserIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ORDER_ID_LIST
          if (field.type == TType.LIST) {
            {
            TList _list20 = iprot.readListBegin();
            this.orderIdList = new ArrayList<String>(_list20.size);
            for (int _i21 = 0; _i21 < _list20.size; ++_i21)
            {
              String _elem22;
              _elem22 = iprot.readString();
              this.orderIdList.add(_elem22);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PAY_CHANNEL
          if (field.type == TType.STRUCT) {
            this.payChannel = new com.jfshare.finagle.thrift.pay.PayChannel();
            this.payChannel.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(USER_ID_FIELD_DESC);
    oprot.writeI32(this.userId);
    oprot.writeFieldEnd();
    if (this.orderIdList != null) {
      oprot.writeFieldBegin(ORDER_ID_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.orderIdList.size()));
        for (String _iter23 : this.orderIdList)
        {
          oprot.writeString(_iter23);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.payChannel != null) {
      oprot.writeFieldBegin(PAY_CHANNEL_FIELD_DESC);
      this.payChannel.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PayParam(");
    boolean first = true;
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderIdList:");
    if (this.orderIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.orderIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payChannel:");
    if (this.payChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.payChannel);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
