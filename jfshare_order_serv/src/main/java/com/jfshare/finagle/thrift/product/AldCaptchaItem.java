/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.product;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class AldCaptchaItem implements TBase<AldCaptchaItem, AldCaptchaItem._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("AldCaptchaItem");

  private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, (short)1);
  private static final TField PRODUCT_NAME_FIELD_DESC = new TField("productName", TType.STRING, (short)2);
  private static final TField ALD_SOLD_FIELD_DESC = new TField("aldSold", TType.I32, (short)3);
  private static final TField ALD_CAPTCHA_FIELD_DESC = new TField("aldCaptcha", TType.I32, (short)4);


  public String productId;
  public String productName;
  public int aldSold;
  public int aldCaptcha;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PRODUCT_ID((short)1, "productId"),
    PRODUCT_NAME((short)2, "productName"),
    ALD_SOLD((short)3, "aldSold"),
    ALD_CAPTCHA((short)4, "aldCaptcha");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
  	return PRODUCT_ID;
        case 2: // PRODUCT_NAME
  	return PRODUCT_NAME;
        case 3: // ALD_SOLD
  	return ALD_SOLD;
        case 4: // ALD_CAPTCHA
  	return ALD_CAPTCHA;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __ALDSOLD_ISSET_ID = 0;
  private static final int __ALDCAPTCHA_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new FieldMetaData("productId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new FieldMetaData("productName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ALD_SOLD, new FieldMetaData("aldSold", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ALD_CAPTCHA, new FieldMetaData("aldCaptcha", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(AldCaptchaItem.class, metaDataMap);
  }


  public AldCaptchaItem() {
  }

  public AldCaptchaItem(
    String productId,
    String productName,
    int aldSold,
    int aldCaptcha)
  {
    this();
    this.productId = productId;
    this.productName = productName;
    this.aldSold = aldSold;
    setAldSoldIsSet(true);
    this.aldCaptcha = aldCaptcha;
    setAldCaptchaIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AldCaptchaItem(AldCaptchaItem other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.aldSold = other.aldSold;
    this.aldCaptcha = other.aldCaptcha;
  }

  public AldCaptchaItem deepCopy() {
    return new AldCaptchaItem(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    this.productName = null;
    setAldSoldIsSet(false);
    this.aldSold = 0;
    setAldCaptchaIsSet(false);
    this.aldCaptcha = 0;
  }

  public String getProductId() {
    return this.productId;
  }

  public AldCaptchaItem setProductId(String productId) {
    this.productId = productId;
    
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been asigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public AldCaptchaItem setProductName(String productName) {
    this.productName = productName;
    
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been asigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public int getAldSold() {
    return this.aldSold;
  }

  public AldCaptchaItem setAldSold(int aldSold) {
    this.aldSold = aldSold;
    setAldSoldIsSet(true);

    return this;
  }

  public void unsetAldSold() {
  __isset_bit_vector.clear(__ALDSOLD_ISSET_ID);
  }

  /** Returns true if field aldSold is set (has been asigned a value) and false otherwise */
  public boolean isSetAldSold() {
    return __isset_bit_vector.get(__ALDSOLD_ISSET_ID);
  }

  public void setAldSoldIsSet(boolean value) {
    __isset_bit_vector.set(__ALDSOLD_ISSET_ID, value);
  }

  public int getAldCaptcha() {
    return this.aldCaptcha;
  }

  public AldCaptchaItem setAldCaptcha(int aldCaptcha) {
    this.aldCaptcha = aldCaptcha;
    setAldCaptchaIsSet(true);

    return this;
  }

  public void unsetAldCaptcha() {
  __isset_bit_vector.clear(__ALDCAPTCHA_ISSET_ID);
  }

  /** Returns true if field aldCaptcha is set (has been asigned a value) and false otherwise */
  public boolean isSetAldCaptcha() {
    return __isset_bit_vector.get(__ALDCAPTCHA_ISSET_ID);
  }

  public void setAldCaptchaIsSet(boolean value) {
    __isset_bit_vector.set(__ALDCAPTCHA_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;
    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;
    case ALD_SOLD:
      if (value == null) {
        unsetAldSold();
      } else {
        setAldSold((Integer)value);
      }
      break;
    case ALD_CAPTCHA:
      if (value == null) {
        unsetAldCaptcha();
      } else {
        setAldCaptcha((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();
    case PRODUCT_NAME:
      return getProductName();
    case ALD_SOLD:
      return new Integer(getAldSold());
    case ALD_CAPTCHA:
      return new Integer(getAldCaptcha());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_NAME:
      return isSetProductName();
    case ALD_SOLD:
      return isSetAldSold();
    case ALD_CAPTCHA:
      return isSetAldCaptcha();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AldCaptchaItem)
      return this.equals((AldCaptchaItem)that);
    return false;
  }

  public boolean equals(AldCaptchaItem that) {
    if (that == null)
      return false;
    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }
    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }
    boolean this_present_aldSold = true;
    boolean that_present_aldSold = true;
    if (this_present_aldSold || that_present_aldSold) {
      if (!(this_present_aldSold && that_present_aldSold))
        return false;
      if (this.aldSold != that.aldSold)
        return false;
    }
    boolean this_present_aldCaptcha = true;
    boolean that_present_aldCaptcha = true;
    if (this_present_aldCaptcha || that_present_aldCaptcha) {
      if (!(this_present_aldCaptcha && that_present_aldCaptcha))
        return false;
      if (this.aldCaptcha != that.aldCaptcha)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_productId = true && (isSetProductId());
    builder.append(present_productId);
    if (present_productId)
      builder.append(productId);
    boolean present_productName = true && (isSetProductName());
    builder.append(present_productName);
    if (present_productName)
      builder.append(productName);
    boolean present_aldSold = true;
    builder.append(present_aldSold);
    if (present_aldSold)
      builder.append(aldSold);
    boolean present_aldCaptcha = true;
    builder.append(present_aldCaptcha);
    if (present_aldCaptcha)
      builder.append(aldCaptcha);
    return builder.toHashCode();
  }

  public int compareTo(AldCaptchaItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AldCaptchaItem typedOther = (AldCaptchaItem)other;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = TBaseHelper.compareTo(this.productId, typedOther.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(typedOther.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = TBaseHelper.compareTo(this.productName, typedOther.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAldSold()).compareTo(typedOther.isSetAldSold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAldSold()) {
      lastComparison = TBaseHelper.compareTo(this.aldSold, typedOther.aldSold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAldCaptcha()).compareTo(typedOther.isSetAldCaptcha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAldCaptcha()) {
      lastComparison = TBaseHelper.compareTo(this.aldCaptcha, typedOther.aldCaptcha);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PRODUCT_ID
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PRODUCT_NAME
          if (field.type == TType.STRING) {
            this.productName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ALD_SOLD
          if (field.type == TType.I32) {
            this.aldSold = iprot.readI32();
            setAldSoldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ALD_CAPTCHA
          if (field.type == TType.I32) {
            this.aldCaptcha = iprot.readI32();
            setAldCaptchaIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.productId != null) {
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    if (this.productName != null) {
      oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
      oprot.writeString(this.productName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ALD_SOLD_FIELD_DESC);
    oprot.writeI32(this.aldSold);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ALD_CAPTCHA_FIELD_DESC);
    oprot.writeI32(this.aldCaptcha);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AldCaptchaItem(");
    boolean first = true;
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aldSold:");
    sb.append(this.aldSold);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aldCaptcha:");
    sb.append(this.aldCaptcha);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
