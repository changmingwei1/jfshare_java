/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.trade;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ExchangeRule implements TBase<ExchangeRule, ExchangeRule._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ExchangeRule");

  private static final TField PERCENT_FIELD_DESC = new TField("percent", TType.STRING, (short)1);
  private static final TField SCORE_FIELD_DESC = new TField("score", TType.STRING, (short)2);
  private static final TField CASH_FIELD_DESC = new TField("cash", TType.STRING, (short)3);
  private static final TField MAX_EXCHANGE_CASH_FIELD_DESC = new TField("maxExchangeCash", TType.STRING, (short)4);


  public String percent;
  public String score;
  public String cash;
  public String maxExchangeCash;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PERCENT((short)1, "percent"),
    SCORE((short)2, "score"),
    CASH((short)3, "cash"),
    MAX_EXCHANGE_CASH((short)4, "maxExchangeCash");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PERCENT
  	return PERCENT;
        case 2: // SCORE
  	return SCORE;
        case 3: // CASH
  	return CASH;
        case 4: // MAX_EXCHANGE_CASH
  	return MAX_EXCHANGE_CASH;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PERCENT, new FieldMetaData("percent", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SCORE, new FieldMetaData("score", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CASH, new FieldMetaData("cash", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MAX_EXCHANGE_CASH, new FieldMetaData("maxExchangeCash", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ExchangeRule.class, metaDataMap);
  }


  public ExchangeRule() {
  }

  public ExchangeRule(
    String percent,
    String score,
    String cash)
  {
    this();
    this.percent = percent;
    this.score = score;
    this.cash = cash;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExchangeRule(ExchangeRule other) {
    if (other.isSetPercent()) {
      this.percent = other.percent;
    }
    if (other.isSetScore()) {
      this.score = other.score;
    }
    if (other.isSetCash()) {
      this.cash = other.cash;
    }
    if (other.isSetMaxExchangeCash()) {
      this.maxExchangeCash = other.maxExchangeCash;
    }
  }

  public ExchangeRule deepCopy() {
    return new ExchangeRule(this);
  }

  @Override
  public void clear() {
    this.percent = null;
    this.score = null;
    this.cash = null;
    this.maxExchangeCash = null;
  }

  public String getPercent() {
    return this.percent;
  }

  public ExchangeRule setPercent(String percent) {
    this.percent = percent;
    
    return this;
  }

  public void unsetPercent() {
    this.percent = null;
  }

  /** Returns true if field percent is set (has been asigned a value) and false otherwise */
  public boolean isSetPercent() {
    return this.percent != null;
  }

  public void setPercentIsSet(boolean value) {
    if (!value) {
      this.percent = null;
    }
  }

  public String getScore() {
    return this.score;
  }

  public ExchangeRule setScore(String score) {
    this.score = score;
    
    return this;
  }

  public void unsetScore() {
    this.score = null;
  }

  /** Returns true if field score is set (has been asigned a value) and false otherwise */
  public boolean isSetScore() {
    return this.score != null;
  }

  public void setScoreIsSet(boolean value) {
    if (!value) {
      this.score = null;
    }
  }

  public String getCash() {
    return this.cash;
  }

  public ExchangeRule setCash(String cash) {
    this.cash = cash;
    
    return this;
  }

  public void unsetCash() {
    this.cash = null;
  }

  /** Returns true if field cash is set (has been asigned a value) and false otherwise */
  public boolean isSetCash() {
    return this.cash != null;
  }

  public void setCashIsSet(boolean value) {
    if (!value) {
      this.cash = null;
    }
  }

  public String getMaxExchangeCash() {
    return this.maxExchangeCash;
  }

  public ExchangeRule setMaxExchangeCash(String maxExchangeCash) {
    this.maxExchangeCash = maxExchangeCash;
    
    return this;
  }

  public void unsetMaxExchangeCash() {
    this.maxExchangeCash = null;
  }

  /** Returns true if field maxExchangeCash is set (has been asigned a value) and false otherwise */
  public boolean isSetMaxExchangeCash() {
    return this.maxExchangeCash != null;
  }

  public void setMaxExchangeCashIsSet(boolean value) {
    if (!value) {
      this.maxExchangeCash = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PERCENT:
      if (value == null) {
        unsetPercent();
      } else {
        setPercent((String)value);
      }
      break;
    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((String)value);
      }
      break;
    case CASH:
      if (value == null) {
        unsetCash();
      } else {
        setCash((String)value);
      }
      break;
    case MAX_EXCHANGE_CASH:
      if (value == null) {
        unsetMaxExchangeCash();
      } else {
        setMaxExchangeCash((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PERCENT:
      return getPercent();
    case SCORE:
      return getScore();
    case CASH:
      return getCash();
    case MAX_EXCHANGE_CASH:
      return getMaxExchangeCash();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PERCENT:
      return isSetPercent();
    case SCORE:
      return isSetScore();
    case CASH:
      return isSetCash();
    case MAX_EXCHANGE_CASH:
      return isSetMaxExchangeCash();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExchangeRule)
      return this.equals((ExchangeRule)that);
    return false;
  }

  public boolean equals(ExchangeRule that) {
    if (that == null)
      return false;
    boolean this_present_percent = true && this.isSetPercent();
    boolean that_present_percent = true && that.isSetPercent();
    if (this_present_percent || that_present_percent) {
      if (!(this_present_percent && that_present_percent))
        return false;
      if (!this.percent.equals(that.percent))
        return false;
    }
    boolean this_present_score = true && this.isSetScore();
    boolean that_present_score = true && that.isSetScore();
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (!this.score.equals(that.score))
        return false;
    }
    boolean this_present_cash = true && this.isSetCash();
    boolean that_present_cash = true && that.isSetCash();
    if (this_present_cash || that_present_cash) {
      if (!(this_present_cash && that_present_cash))
        return false;
      if (!this.cash.equals(that.cash))
        return false;
    }
    boolean this_present_maxExchangeCash = true && this.isSetMaxExchangeCash();
    boolean that_present_maxExchangeCash = true && that.isSetMaxExchangeCash();
    if (this_present_maxExchangeCash || that_present_maxExchangeCash) {
      if (!(this_present_maxExchangeCash && that_present_maxExchangeCash))
        return false;
      if (!this.maxExchangeCash.equals(that.maxExchangeCash))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_percent = true && (isSetPercent());
    builder.append(present_percent);
    if (present_percent)
      builder.append(percent);
    boolean present_score = true && (isSetScore());
    builder.append(present_score);
    if (present_score)
      builder.append(score);
    boolean present_cash = true && (isSetCash());
    builder.append(present_cash);
    if (present_cash)
      builder.append(cash);
    boolean present_maxExchangeCash = true && (isSetMaxExchangeCash());
    builder.append(present_maxExchangeCash);
    if (present_maxExchangeCash)
      builder.append(maxExchangeCash);
    return builder.toHashCode();
  }

  public int compareTo(ExchangeRule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ExchangeRule typedOther = (ExchangeRule)other;

    lastComparison = Boolean.valueOf(isSetPercent()).compareTo(typedOther.isSetPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPercent()) {
      lastComparison = TBaseHelper.compareTo(this.percent, typedOther.percent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(typedOther.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = TBaseHelper.compareTo(this.score, typedOther.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCash()).compareTo(typedOther.isSetCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCash()) {
      lastComparison = TBaseHelper.compareTo(this.cash, typedOther.cash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxExchangeCash()).compareTo(typedOther.isSetMaxExchangeCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxExchangeCash()) {
      lastComparison = TBaseHelper.compareTo(this.maxExchangeCash, typedOther.maxExchangeCash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PERCENT
          if (field.type == TType.STRING) {
            this.percent = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SCORE
          if (field.type == TType.STRING) {
            this.score = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CASH
          if (field.type == TType.STRING) {
            this.cash = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // MAX_EXCHANGE_CASH
          if (field.type == TType.STRING) {
            this.maxExchangeCash = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.percent != null) {
      oprot.writeFieldBegin(PERCENT_FIELD_DESC);
      oprot.writeString(this.percent);
      oprot.writeFieldEnd();
    }
    if (this.score != null) {
      oprot.writeFieldBegin(SCORE_FIELD_DESC);
      oprot.writeString(this.score);
      oprot.writeFieldEnd();
    }
    if (this.cash != null) {
      oprot.writeFieldBegin(CASH_FIELD_DESC);
      oprot.writeString(this.cash);
      oprot.writeFieldEnd();
    }
    if (this.maxExchangeCash != null) {
      if (isSetMaxExchangeCash()) {
        oprot.writeFieldBegin(MAX_EXCHANGE_CASH_FIELD_DESC);
        oprot.writeString(this.maxExchangeCash);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExchangeRule(");
    boolean first = true;
    sb.append("percent:");
    if (this.percent == null) {
      sb.append("null");
    } else {
      sb.append(this.percent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("score:");
    if (this.score == null) {
      sb.append("null");
    } else {
      sb.append(this.score);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cash:");
    if (this.cash == null) {
      sb.append("null");
    } else {
      sb.append(this.cash);
    }
    first = false;
    if (isSetMaxExchangeCash()) {
      if (!first) sb.append(", ");
      sb.append("maxExchangeCash:");
      if (this.maxExchangeCash == null) {
        sb.append("null");
      } else {
        sb.append(this.maxExchangeCash);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
