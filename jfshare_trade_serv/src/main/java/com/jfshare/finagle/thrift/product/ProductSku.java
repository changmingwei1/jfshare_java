/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.product;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.meta_data.ListMetaData;
import org.apache.thrift.meta_data.StructMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class ProductSku implements TBase<ProductSku, ProductSku._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ProductSku");

  private static final TField SKU_ITEMS_FIELD_DESC = new TField("skuItems", TType.LIST, (short)1);
  private static final TField SELLER_CLASS_NUM_FIELD_DESC = new TField("sellerClassNum", TType.STRING, (short)2);
  private static final TField SHELF_FIELD_DESC = new TField("shelf", TType.STRING, (short)3);
  private static final TField CUR_PRICE_FIELD_DESC = new TField("curPrice", TType.STRING, (short)4);
  private static final TField ORG_PRICE_FIELD_DESC = new TField("orgPrice", TType.STRING, (short)5);
  private static final TField MIN_CUR_PRICE_FIELD_DESC = new TField("minCurPrice", TType.STRING, (short)6);
  private static final TField MAX_CUR_PRICE_FIELD_DESC = new TField("maxCurPrice", TType.STRING, (short)7);
  private static final TField MIN_ORG_PRICE_FIELD_DESC = new TField("minOrgPrice", TType.STRING, (short)8);
  private static final TField MAX_ORG_PRICE_FIELD_DESC = new TField("maxOrgPrice", TType.STRING, (short)9);
  private static final TField V_PICTURE_FIELD_DESC = new TField("vPicture", TType.STRING, (short)10);
  private static final TField SKU_NAME_FIELD_DESC = new TField("skuName", TType.STRING, (short)11);
  private static final TField SKU_NUM_FIELD_DESC = new TField("skuNum", TType.STRING, (short)12);
  private static final TField REF_PRICE_FIELD_DESC = new TField("refPrice", TType.STRING, (short)13);


  public List<ProductSkuItem> skuItems;
  public String sellerClassNum;
  public String shelf;
  public String curPrice;
  public String orgPrice;
  public String minCurPrice;
  public String maxCurPrice;
  public String minOrgPrice;
  public String maxOrgPrice;
  public String vPicture;
  public String skuName;
  public String skuNum;
  public String refPrice;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SKU_ITEMS((short)1, "skuItems"),
    SELLER_CLASS_NUM((short)2, "sellerClassNum"),
    SHELF((short)3, "shelf"),
    CUR_PRICE((short)4, "curPrice"),
    ORG_PRICE((short)5, "orgPrice"),
    MIN_CUR_PRICE((short)6, "minCurPrice"),
    MAX_CUR_PRICE((short)7, "maxCurPrice"),
    MIN_ORG_PRICE((short)8, "minOrgPrice"),
    MAX_ORG_PRICE((short)9, "maxOrgPrice"),
    V_PICTURE((short)10, "vPicture"),
    SKU_NAME((short)11, "skuName"),
    SKU_NUM((short)12, "skuNum"),
    REF_PRICE((short)13, "refPrice");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SKU_ITEMS
  	return SKU_ITEMS;
        case 2: // SELLER_CLASS_NUM
  	return SELLER_CLASS_NUM;
        case 3: // SHELF
  	return SHELF;
        case 4: // CUR_PRICE
  	return CUR_PRICE;
        case 5: // ORG_PRICE
  	return ORG_PRICE;
        case 6: // MIN_CUR_PRICE
  	return MIN_CUR_PRICE;
        case 7: // MAX_CUR_PRICE
  	return MAX_CUR_PRICE;
        case 8: // MIN_ORG_PRICE
  	return MIN_ORG_PRICE;
        case 9: // MAX_ORG_PRICE
  	return MAX_ORG_PRICE;
        case 10: // V_PICTURE
  	return V_PICTURE;
        case 11: // SKU_NAME
  	return SKU_NAME;
        case 12: // SKU_NUM
  	return SKU_NUM;
        case 13: // REF_PRICE
  	return REF_PRICE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SKU_ITEMS, new FieldMetaData("skuItems", TFieldRequirementType.OPTIONAL,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, ProductSkuItem.class))));
    tmpMap.put(_Fields.SELLER_CLASS_NUM, new FieldMetaData("sellerClassNum", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SHELF, new FieldMetaData("shelf", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CUR_PRICE, new FieldMetaData("curPrice", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ORG_PRICE, new FieldMetaData("orgPrice", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MIN_CUR_PRICE, new FieldMetaData("minCurPrice", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MAX_CUR_PRICE, new FieldMetaData("maxCurPrice", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MIN_ORG_PRICE, new FieldMetaData("minOrgPrice", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MAX_ORG_PRICE, new FieldMetaData("maxOrgPrice", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.V_PICTURE, new FieldMetaData("vPicture", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SKU_NAME, new FieldMetaData("skuName", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SKU_NUM, new FieldMetaData("skuNum", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.REF_PRICE, new FieldMetaData("refPrice", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ProductSku.class, metaDataMap);
  }


  public ProductSku() {
  }


  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductSku(ProductSku other) {
    if (other.isSetSkuItems()) {
      List<ProductSkuItem> __this__skuItems = new ArrayList<ProductSkuItem>();
      for (ProductSkuItem other_element : other.skuItems) {
        __this__skuItems.add(new ProductSkuItem(other_element));
      }
      this.skuItems = __this__skuItems;
    }
    if (other.isSetSellerClassNum()) {
      this.sellerClassNum = other.sellerClassNum;
    }
    if (other.isSetShelf()) {
      this.shelf = other.shelf;
    }
    if (other.isSetCurPrice()) {
      this.curPrice = other.curPrice;
    }
    if (other.isSetOrgPrice()) {
      this.orgPrice = other.orgPrice;
    }
    if (other.isSetMinCurPrice()) {
      this.minCurPrice = other.minCurPrice;
    }
    if (other.isSetMaxCurPrice()) {
      this.maxCurPrice = other.maxCurPrice;
    }
    if (other.isSetMinOrgPrice()) {
      this.minOrgPrice = other.minOrgPrice;
    }
    if (other.isSetMaxOrgPrice()) {
      this.maxOrgPrice = other.maxOrgPrice;
    }
    if (other.isSetVPicture()) {
      this.vPicture = other.vPicture;
    }
    if (other.isSetSkuName()) {
      this.skuName = other.skuName;
    }
    if (other.isSetSkuNum()) {
      this.skuNum = other.skuNum;
    }
    if (other.isSetRefPrice()) {
      this.refPrice = other.refPrice;
    }
  }

  public ProductSku deepCopy() {
    return new ProductSku(this);
  }

  @Override
  public void clear() {
    this.skuItems = null;
    this.sellerClassNum = null;
    this.shelf = null;
    this.curPrice = null;
    this.orgPrice = null;
    this.minCurPrice = null;
    this.maxCurPrice = null;
    this.minOrgPrice = null;
    this.maxOrgPrice = null;
    this.vPicture = null;
    this.skuName = null;
    this.skuNum = null;
    this.refPrice = null;
  }

  public int getSkuItemsSize() {
    return (this.skuItems == null) ? 0 : this.skuItems.size();
  }

  public java.util.Iterator<ProductSkuItem> getSkuItemsIterator() {
    return (this.skuItems == null) ? null : this.skuItems.iterator();
  }

  public void addToSkuItems(ProductSkuItem elem) {
    if (this.skuItems == null) {
      this.skuItems = new ArrayList<ProductSkuItem>();
    }
    this.skuItems.add(elem);
  }

  public List<ProductSkuItem> getSkuItems() {
    return this.skuItems;
  }

  public ProductSku setSkuItems(List<ProductSkuItem> skuItems) {
    this.skuItems = skuItems;
    
    return this;
  }

  public void unsetSkuItems() {
    this.skuItems = null;
  }

  /** Returns true if field skuItems is set (has been asigned a value) and false otherwise */
  public boolean isSetSkuItems() {
    return this.skuItems != null;
  }

  public void setSkuItemsIsSet(boolean value) {
    if (!value) {
      this.skuItems = null;
    }
  }

  public String getSellerClassNum() {
    return this.sellerClassNum;
  }

  public ProductSku setSellerClassNum(String sellerClassNum) {
    this.sellerClassNum = sellerClassNum;
    
    return this;
  }

  public void unsetSellerClassNum() {
    this.sellerClassNum = null;
  }

  /** Returns true if field sellerClassNum is set (has been asigned a value) and false otherwise */
  public boolean isSetSellerClassNum() {
    return this.sellerClassNum != null;
  }

  public void setSellerClassNumIsSet(boolean value) {
    if (!value) {
      this.sellerClassNum = null;
    }
  }

  public String getShelf() {
    return this.shelf;
  }

  public ProductSku setShelf(String shelf) {
    this.shelf = shelf;
    
    return this;
  }

  public void unsetShelf() {
    this.shelf = null;
  }

  /** Returns true if field shelf is set (has been asigned a value) and false otherwise */
  public boolean isSetShelf() {
    return this.shelf != null;
  }

  public void setShelfIsSet(boolean value) {
    if (!value) {
      this.shelf = null;
    }
  }

  public String getCurPrice() {
    return this.curPrice;
  }

  public ProductSku setCurPrice(String curPrice) {
    this.curPrice = curPrice;
    
    return this;
  }

  public void unsetCurPrice() {
    this.curPrice = null;
  }

  /** Returns true if field curPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetCurPrice() {
    return this.curPrice != null;
  }

  public void setCurPriceIsSet(boolean value) {
    if (!value) {
      this.curPrice = null;
    }
  }

  public String getOrgPrice() {
    return this.orgPrice;
  }

  public ProductSku setOrgPrice(String orgPrice) {
    this.orgPrice = orgPrice;
    
    return this;
  }

  public void unsetOrgPrice() {
    this.orgPrice = null;
  }

  /** Returns true if field orgPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetOrgPrice() {
    return this.orgPrice != null;
  }

  public void setOrgPriceIsSet(boolean value) {
    if (!value) {
      this.orgPrice = null;
    }
  }

  public String getMinCurPrice() {
    return this.minCurPrice;
  }

  public ProductSku setMinCurPrice(String minCurPrice) {
    this.minCurPrice = minCurPrice;
    
    return this;
  }

  public void unsetMinCurPrice() {
    this.minCurPrice = null;
  }

  /** Returns true if field minCurPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetMinCurPrice() {
    return this.minCurPrice != null;
  }

  public void setMinCurPriceIsSet(boolean value) {
    if (!value) {
      this.minCurPrice = null;
    }
  }

  public String getMaxCurPrice() {
    return this.maxCurPrice;
  }

  public ProductSku setMaxCurPrice(String maxCurPrice) {
    this.maxCurPrice = maxCurPrice;
    
    return this;
  }

  public void unsetMaxCurPrice() {
    this.maxCurPrice = null;
  }

  /** Returns true if field maxCurPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetMaxCurPrice() {
    return this.maxCurPrice != null;
  }

  public void setMaxCurPriceIsSet(boolean value) {
    if (!value) {
      this.maxCurPrice = null;
    }
  }

  public String getMinOrgPrice() {
    return this.minOrgPrice;
  }

  public ProductSku setMinOrgPrice(String minOrgPrice) {
    this.minOrgPrice = minOrgPrice;
    
    return this;
  }

  public void unsetMinOrgPrice() {
    this.minOrgPrice = null;
  }

  /** Returns true if field minOrgPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetMinOrgPrice() {
    return this.minOrgPrice != null;
  }

  public void setMinOrgPriceIsSet(boolean value) {
    if (!value) {
      this.minOrgPrice = null;
    }
  }

  public String getMaxOrgPrice() {
    return this.maxOrgPrice;
  }

  public ProductSku setMaxOrgPrice(String maxOrgPrice) {
    this.maxOrgPrice = maxOrgPrice;
    
    return this;
  }

  public void unsetMaxOrgPrice() {
    this.maxOrgPrice = null;
  }

  /** Returns true if field maxOrgPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetMaxOrgPrice() {
    return this.maxOrgPrice != null;
  }

  public void setMaxOrgPriceIsSet(boolean value) {
    if (!value) {
      this.maxOrgPrice = null;
    }
  }

  public String getVPicture() {
    return this.vPicture;
  }

  public ProductSku setVPicture(String vPicture) {
    this.vPicture = vPicture;
    
    return this;
  }

  public void unsetVPicture() {
    this.vPicture = null;
  }

  /** Returns true if field vPicture is set (has been asigned a value) and false otherwise */
  public boolean isSetVPicture() {
    return this.vPicture != null;
  }

  public void setVPictureIsSet(boolean value) {
    if (!value) {
      this.vPicture = null;
    }
  }

  public String getSkuName() {
    return this.skuName;
  }

  public ProductSku setSkuName(String skuName) {
    this.skuName = skuName;
    
    return this;
  }

  public void unsetSkuName() {
    this.skuName = null;
  }

  /** Returns true if field skuName is set (has been asigned a value) and false otherwise */
  public boolean isSetSkuName() {
    return this.skuName != null;
  }

  public void setSkuNameIsSet(boolean value) {
    if (!value) {
      this.skuName = null;
    }
  }

  public String getSkuNum() {
    return this.skuNum;
  }

  public ProductSku setSkuNum(String skuNum) {
    this.skuNum = skuNum;
    
    return this;
  }

  public void unsetSkuNum() {
    this.skuNum = null;
  }

  /** Returns true if field skuNum is set (has been asigned a value) and false otherwise */
  public boolean isSetSkuNum() {
    return this.skuNum != null;
  }

  public void setSkuNumIsSet(boolean value) {
    if (!value) {
      this.skuNum = null;
    }
  }

  public String getRefPrice() {
    return this.refPrice;
  }

  public ProductSku setRefPrice(String refPrice) {
    this.refPrice = refPrice;
    
    return this;
  }

  public void unsetRefPrice() {
    this.refPrice = null;
  }

  /** Returns true if field refPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetRefPrice() {
    return this.refPrice != null;
  }

  public void setRefPriceIsSet(boolean value) {
    if (!value) {
      this.refPrice = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SKU_ITEMS:
      if (value == null) {
        unsetSkuItems();
      } else {
        setSkuItems((List<ProductSkuItem>)value);
      }
      break;
    case SELLER_CLASS_NUM:
      if (value == null) {
        unsetSellerClassNum();
      } else {
        setSellerClassNum((String)value);
      }
      break;
    case SHELF:
      if (value == null) {
        unsetShelf();
      } else {
        setShelf((String)value);
      }
      break;
    case CUR_PRICE:
      if (value == null) {
        unsetCurPrice();
      } else {
        setCurPrice((String)value);
      }
      break;
    case ORG_PRICE:
      if (value == null) {
        unsetOrgPrice();
      } else {
        setOrgPrice((String)value);
      }
      break;
    case MIN_CUR_PRICE:
      if (value == null) {
        unsetMinCurPrice();
      } else {
        setMinCurPrice((String)value);
      }
      break;
    case MAX_CUR_PRICE:
      if (value == null) {
        unsetMaxCurPrice();
      } else {
        setMaxCurPrice((String)value);
      }
      break;
    case MIN_ORG_PRICE:
      if (value == null) {
        unsetMinOrgPrice();
      } else {
        setMinOrgPrice((String)value);
      }
      break;
    case MAX_ORG_PRICE:
      if (value == null) {
        unsetMaxOrgPrice();
      } else {
        setMaxOrgPrice((String)value);
      }
      break;
    case V_PICTURE:
      if (value == null) {
        unsetVPicture();
      } else {
        setVPicture((String)value);
      }
      break;
    case SKU_NAME:
      if (value == null) {
        unsetSkuName();
      } else {
        setSkuName((String)value);
      }
      break;
    case SKU_NUM:
      if (value == null) {
        unsetSkuNum();
      } else {
        setSkuNum((String)value);
      }
      break;
    case REF_PRICE:
      if (value == null) {
        unsetRefPrice();
      } else {
        setRefPrice((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SKU_ITEMS:
      return getSkuItems();
    case SELLER_CLASS_NUM:
      return getSellerClassNum();
    case SHELF:
      return getShelf();
    case CUR_PRICE:
      return getCurPrice();
    case ORG_PRICE:
      return getOrgPrice();
    case MIN_CUR_PRICE:
      return getMinCurPrice();
    case MAX_CUR_PRICE:
      return getMaxCurPrice();
    case MIN_ORG_PRICE:
      return getMinOrgPrice();
    case MAX_ORG_PRICE:
      return getMaxOrgPrice();
    case V_PICTURE:
      return getVPicture();
    case SKU_NAME:
      return getSkuName();
    case SKU_NUM:
      return getSkuNum();
    case REF_PRICE:
      return getRefPrice();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SKU_ITEMS:
      return isSetSkuItems();
    case SELLER_CLASS_NUM:
      return isSetSellerClassNum();
    case SHELF:
      return isSetShelf();
    case CUR_PRICE:
      return isSetCurPrice();
    case ORG_PRICE:
      return isSetOrgPrice();
    case MIN_CUR_PRICE:
      return isSetMinCurPrice();
    case MAX_CUR_PRICE:
      return isSetMaxCurPrice();
    case MIN_ORG_PRICE:
      return isSetMinOrgPrice();
    case MAX_ORG_PRICE:
      return isSetMaxOrgPrice();
    case V_PICTURE:
      return isSetVPicture();
    case SKU_NAME:
      return isSetSkuName();
    case SKU_NUM:
      return isSetSkuNum();
    case REF_PRICE:
      return isSetRefPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductSku)
      return this.equals((ProductSku)that);
    return false;
  }

  public boolean equals(ProductSku that) {
    if (that == null)
      return false;
    boolean this_present_skuItems = true && this.isSetSkuItems();
    boolean that_present_skuItems = true && that.isSetSkuItems();
    if (this_present_skuItems || that_present_skuItems) {
      if (!(this_present_skuItems && that_present_skuItems))
        return false;
      if (!this.skuItems.equals(that.skuItems))
        return false;
    }
    boolean this_present_sellerClassNum = true && this.isSetSellerClassNum();
    boolean that_present_sellerClassNum = true && that.isSetSellerClassNum();
    if (this_present_sellerClassNum || that_present_sellerClassNum) {
      if (!(this_present_sellerClassNum && that_present_sellerClassNum))
        return false;
      if (!this.sellerClassNum.equals(that.sellerClassNum))
        return false;
    }
    boolean this_present_shelf = true && this.isSetShelf();
    boolean that_present_shelf = true && that.isSetShelf();
    if (this_present_shelf || that_present_shelf) {
      if (!(this_present_shelf && that_present_shelf))
        return false;
      if (!this.shelf.equals(that.shelf))
        return false;
    }
    boolean this_present_curPrice = true && this.isSetCurPrice();
    boolean that_present_curPrice = true && that.isSetCurPrice();
    if (this_present_curPrice || that_present_curPrice) {
      if (!(this_present_curPrice && that_present_curPrice))
        return false;
      if (!this.curPrice.equals(that.curPrice))
        return false;
    }
    boolean this_present_orgPrice = true && this.isSetOrgPrice();
    boolean that_present_orgPrice = true && that.isSetOrgPrice();
    if (this_present_orgPrice || that_present_orgPrice) {
      if (!(this_present_orgPrice && that_present_orgPrice))
        return false;
      if (!this.orgPrice.equals(that.orgPrice))
        return false;
    }
    boolean this_present_minCurPrice = true && this.isSetMinCurPrice();
    boolean that_present_minCurPrice = true && that.isSetMinCurPrice();
    if (this_present_minCurPrice || that_present_minCurPrice) {
      if (!(this_present_minCurPrice && that_present_minCurPrice))
        return false;
      if (!this.minCurPrice.equals(that.minCurPrice))
        return false;
    }
    boolean this_present_maxCurPrice = true && this.isSetMaxCurPrice();
    boolean that_present_maxCurPrice = true && that.isSetMaxCurPrice();
    if (this_present_maxCurPrice || that_present_maxCurPrice) {
      if (!(this_present_maxCurPrice && that_present_maxCurPrice))
        return false;
      if (!this.maxCurPrice.equals(that.maxCurPrice))
        return false;
    }
    boolean this_present_minOrgPrice = true && this.isSetMinOrgPrice();
    boolean that_present_minOrgPrice = true && that.isSetMinOrgPrice();
    if (this_present_minOrgPrice || that_present_minOrgPrice) {
      if (!(this_present_minOrgPrice && that_present_minOrgPrice))
        return false;
      if (!this.minOrgPrice.equals(that.minOrgPrice))
        return false;
    }
    boolean this_present_maxOrgPrice = true && this.isSetMaxOrgPrice();
    boolean that_present_maxOrgPrice = true && that.isSetMaxOrgPrice();
    if (this_present_maxOrgPrice || that_present_maxOrgPrice) {
      if (!(this_present_maxOrgPrice && that_present_maxOrgPrice))
        return false;
      if (!this.maxOrgPrice.equals(that.maxOrgPrice))
        return false;
    }
    boolean this_present_vPicture = true && this.isSetVPicture();
    boolean that_present_vPicture = true && that.isSetVPicture();
    if (this_present_vPicture || that_present_vPicture) {
      if (!(this_present_vPicture && that_present_vPicture))
        return false;
      if (!this.vPicture.equals(that.vPicture))
        return false;
    }
    boolean this_present_skuName = true && this.isSetSkuName();
    boolean that_present_skuName = true && that.isSetSkuName();
    if (this_present_skuName || that_present_skuName) {
      if (!(this_present_skuName && that_present_skuName))
        return false;
      if (!this.skuName.equals(that.skuName))
        return false;
    }
    boolean this_present_skuNum = true && this.isSetSkuNum();
    boolean that_present_skuNum = true && that.isSetSkuNum();
    if (this_present_skuNum || that_present_skuNum) {
      if (!(this_present_skuNum && that_present_skuNum))
        return false;
      if (!this.skuNum.equals(that.skuNum))
        return false;
    }
    boolean this_present_refPrice = true && this.isSetRefPrice();
    boolean that_present_refPrice = true && that.isSetRefPrice();
    if (this_present_refPrice || that_present_refPrice) {
      if (!(this_present_refPrice && that_present_refPrice))
        return false;
      if (!this.refPrice.equals(that.refPrice))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_skuItems = true && (isSetSkuItems());
    builder.append(present_skuItems);
    if (present_skuItems)
      builder.append(skuItems);
    boolean present_sellerClassNum = true && (isSetSellerClassNum());
    builder.append(present_sellerClassNum);
    if (present_sellerClassNum)
      builder.append(sellerClassNum);
    boolean present_shelf = true && (isSetShelf());
    builder.append(present_shelf);
    if (present_shelf)
      builder.append(shelf);
    boolean present_curPrice = true && (isSetCurPrice());
    builder.append(present_curPrice);
    if (present_curPrice)
      builder.append(curPrice);
    boolean present_orgPrice = true && (isSetOrgPrice());
    builder.append(present_orgPrice);
    if (present_orgPrice)
      builder.append(orgPrice);
    boolean present_minCurPrice = true && (isSetMinCurPrice());
    builder.append(present_minCurPrice);
    if (present_minCurPrice)
      builder.append(minCurPrice);
    boolean present_maxCurPrice = true && (isSetMaxCurPrice());
    builder.append(present_maxCurPrice);
    if (present_maxCurPrice)
      builder.append(maxCurPrice);
    boolean present_minOrgPrice = true && (isSetMinOrgPrice());
    builder.append(present_minOrgPrice);
    if (present_minOrgPrice)
      builder.append(minOrgPrice);
    boolean present_maxOrgPrice = true && (isSetMaxOrgPrice());
    builder.append(present_maxOrgPrice);
    if (present_maxOrgPrice)
      builder.append(maxOrgPrice);
    boolean present_vPicture = true && (isSetVPicture());
    builder.append(present_vPicture);
    if (present_vPicture)
      builder.append(vPicture);
    boolean present_skuName = true && (isSetSkuName());
    builder.append(present_skuName);
    if (present_skuName)
      builder.append(skuName);
    boolean present_skuNum = true && (isSetSkuNum());
    builder.append(present_skuNum);
    if (present_skuNum)
      builder.append(skuNum);
    boolean present_refPrice = true && (isSetRefPrice());
    builder.append(present_refPrice);
    if (present_refPrice)
      builder.append(refPrice);
    return builder.toHashCode();
  }

  public int compareTo(ProductSku other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ProductSku typedOther = (ProductSku)other;

    lastComparison = Boolean.valueOf(isSetSkuItems()).compareTo(typedOther.isSetSkuItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkuItems()) {
      lastComparison = TBaseHelper.compareTo(this.skuItems, typedOther.skuItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerClassNum()).compareTo(typedOther.isSetSellerClassNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerClassNum()) {
      lastComparison = TBaseHelper.compareTo(this.sellerClassNum, typedOther.sellerClassNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShelf()).compareTo(typedOther.isSetShelf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShelf()) {
      lastComparison = TBaseHelper.compareTo(this.shelf, typedOther.shelf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurPrice()).compareTo(typedOther.isSetCurPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurPrice()) {
      lastComparison = TBaseHelper.compareTo(this.curPrice, typedOther.curPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgPrice()).compareTo(typedOther.isSetOrgPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgPrice()) {
      lastComparison = TBaseHelper.compareTo(this.orgPrice, typedOther.orgPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinCurPrice()).compareTo(typedOther.isSetMinCurPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinCurPrice()) {
      lastComparison = TBaseHelper.compareTo(this.minCurPrice, typedOther.minCurPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxCurPrice()).compareTo(typedOther.isSetMaxCurPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxCurPrice()) {
      lastComparison = TBaseHelper.compareTo(this.maxCurPrice, typedOther.maxCurPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinOrgPrice()).compareTo(typedOther.isSetMinOrgPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinOrgPrice()) {
      lastComparison = TBaseHelper.compareTo(this.minOrgPrice, typedOther.minOrgPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxOrgPrice()).compareTo(typedOther.isSetMaxOrgPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxOrgPrice()) {
      lastComparison = TBaseHelper.compareTo(this.maxOrgPrice, typedOther.maxOrgPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVPicture()).compareTo(typedOther.isSetVPicture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVPicture()) {
      lastComparison = TBaseHelper.compareTo(this.vPicture, typedOther.vPicture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkuName()).compareTo(typedOther.isSetSkuName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkuName()) {
      lastComparison = TBaseHelper.compareTo(this.skuName, typedOther.skuName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkuNum()).compareTo(typedOther.isSetSkuNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkuNum()) {
      lastComparison = TBaseHelper.compareTo(this.skuNum, typedOther.skuNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefPrice()).compareTo(typedOther.isSetRefPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefPrice()) {
      lastComparison = TBaseHelper.compareTo(this.refPrice, typedOther.refPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // SKU_ITEMS
          if (field.type == TType.LIST) {
            {
            TList _list0 = iprot.readListBegin();
            this.skuItems = new ArrayList<ProductSkuItem>(_list0.size);
            for (int _i1 = 0; _i1 < _list0.size; ++_i1)
            {
              ProductSkuItem _elem2;
              _elem2 = new ProductSkuItem();
              _elem2.read(iprot);
              this.skuItems.add(_elem2);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SELLER_CLASS_NUM
          if (field.type == TType.STRING) {
            this.sellerClassNum = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SHELF
          if (field.type == TType.STRING) {
            this.shelf = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CUR_PRICE
          if (field.type == TType.STRING) {
            this.curPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ORG_PRICE
          if (field.type == TType.STRING) {
            this.orgPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // MIN_CUR_PRICE
          if (field.type == TType.STRING) {
            this.minCurPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // MAX_CUR_PRICE
          if (field.type == TType.STRING) {
            this.maxCurPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // MIN_ORG_PRICE
          if (field.type == TType.STRING) {
            this.minOrgPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // MAX_ORG_PRICE
          if (field.type == TType.STRING) {
            this.maxOrgPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // V_PICTURE
          if (field.type == TType.STRING) {
            this.vPicture = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // SKU_NAME
          if (field.type == TType.STRING) {
            this.skuName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // SKU_NUM
          if (field.type == TType.STRING) {
            this.skuNum = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // REF_PRICE
          if (field.type == TType.STRING) {
            this.refPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.skuItems != null) {
      if (isSetSkuItems()) {
        oprot.writeFieldBegin(SKU_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.skuItems.size()));
          for (ProductSkuItem _iter3 : this.skuItems)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.sellerClassNum != null) {
      if (isSetSellerClassNum()) {
        oprot.writeFieldBegin(SELLER_CLASS_NUM_FIELD_DESC);
        oprot.writeString(this.sellerClassNum);
        oprot.writeFieldEnd();
      }
    }
    if (this.shelf != null) {
      if (isSetShelf()) {
        oprot.writeFieldBegin(SHELF_FIELD_DESC);
        oprot.writeString(this.shelf);
        oprot.writeFieldEnd();
      }
    }
    if (this.curPrice != null) {
      if (isSetCurPrice()) {
        oprot.writeFieldBegin(CUR_PRICE_FIELD_DESC);
        oprot.writeString(this.curPrice);
        oprot.writeFieldEnd();
      }
    }
    if (this.orgPrice != null) {
      if (isSetOrgPrice()) {
        oprot.writeFieldBegin(ORG_PRICE_FIELD_DESC);
        oprot.writeString(this.orgPrice);
        oprot.writeFieldEnd();
      }
    }
    if (this.minCurPrice != null) {
      if (isSetMinCurPrice()) {
        oprot.writeFieldBegin(MIN_CUR_PRICE_FIELD_DESC);
        oprot.writeString(this.minCurPrice);
        oprot.writeFieldEnd();
      }
    }
    if (this.maxCurPrice != null) {
      if (isSetMaxCurPrice()) {
        oprot.writeFieldBegin(MAX_CUR_PRICE_FIELD_DESC);
        oprot.writeString(this.maxCurPrice);
        oprot.writeFieldEnd();
      }
    }
    if (this.minOrgPrice != null) {
      if (isSetMinOrgPrice()) {
        oprot.writeFieldBegin(MIN_ORG_PRICE_FIELD_DESC);
        oprot.writeString(this.minOrgPrice);
        oprot.writeFieldEnd();
      }
    }
    if (this.maxOrgPrice != null) {
      if (isSetMaxOrgPrice()) {
        oprot.writeFieldBegin(MAX_ORG_PRICE_FIELD_DESC);
        oprot.writeString(this.maxOrgPrice);
        oprot.writeFieldEnd();
      }
    }
    if (this.vPicture != null) {
      if (isSetVPicture()) {
        oprot.writeFieldBegin(V_PICTURE_FIELD_DESC);
        oprot.writeString(this.vPicture);
        oprot.writeFieldEnd();
      }
    }
    if (this.skuName != null) {
      if (isSetSkuName()) {
        oprot.writeFieldBegin(SKU_NAME_FIELD_DESC);
        oprot.writeString(this.skuName);
        oprot.writeFieldEnd();
      }
    }
    if (this.skuNum != null) {
      if (isSetSkuNum()) {
        oprot.writeFieldBegin(SKU_NUM_FIELD_DESC);
        oprot.writeString(this.skuNum);
        oprot.writeFieldEnd();
      }
    }
    if (this.refPrice != null) {
      if (isSetRefPrice()) {
        oprot.writeFieldBegin(REF_PRICE_FIELD_DESC);
        oprot.writeString(this.refPrice);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductSku(");
    boolean first = true;
    if (isSetSkuItems()) {
      sb.append("skuItems:");
      if (this.skuItems == null) {
        sb.append("null");
      } else {
        sb.append(this.skuItems);
      }
      first = false;
      }
    if (isSetSellerClassNum()) {
      if (!first) sb.append(", ");
      sb.append("sellerClassNum:");
      if (this.sellerClassNum == null) {
        sb.append("null");
      } else {
        sb.append(this.sellerClassNum);
      }
      first = false;
      }
    if (isSetShelf()) {
      if (!first) sb.append(", ");
      sb.append("shelf:");
      if (this.shelf == null) {
        sb.append("null");
      } else {
        sb.append(this.shelf);
      }
      first = false;
      }
    if (isSetCurPrice()) {
      if (!first) sb.append(", ");
      sb.append("curPrice:");
      if (this.curPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.curPrice);
      }
      first = false;
      }
    if (isSetOrgPrice()) {
      if (!first) sb.append(", ");
      sb.append("orgPrice:");
      if (this.orgPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.orgPrice);
      }
      first = false;
      }
    if (isSetMinCurPrice()) {
      if (!first) sb.append(", ");
      sb.append("minCurPrice:");
      if (this.minCurPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.minCurPrice);
      }
      first = false;
      }
    if (isSetMaxCurPrice()) {
      if (!first) sb.append(", ");
      sb.append("maxCurPrice:");
      if (this.maxCurPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.maxCurPrice);
      }
      first = false;
      }
    if (isSetMinOrgPrice()) {
      if (!first) sb.append(", ");
      sb.append("minOrgPrice:");
      if (this.minOrgPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.minOrgPrice);
      }
      first = false;
      }
    if (isSetMaxOrgPrice()) {
      if (!first) sb.append(", ");
      sb.append("maxOrgPrice:");
      if (this.maxOrgPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.maxOrgPrice);
      }
      first = false;
      }
    if (isSetVPicture()) {
      if (!first) sb.append(", ");
      sb.append("vPicture:");
      if (this.vPicture == null) {
        sb.append("null");
      } else {
        sb.append(this.vPicture);
      }
      first = false;
      }
    if (isSetSkuName()) {
      if (!first) sb.append(", ");
      sb.append("skuName:");
      if (this.skuName == null) {
        sb.append("null");
      } else {
        sb.append(this.skuName);
      }
      first = false;
      }
    if (isSetSkuNum()) {
      if (!first) sb.append(", ");
      sb.append("skuNum:");
      if (this.skuNum == null) {
        sb.append("null");
      } else {
        sb.append(this.skuNum);
      }
      first = false;
      }
    if (isSetRefPrice()) {
      if (!first) sb.append(", ");
      sb.append("refPrice:");
      if (this.refPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.refPrice);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
