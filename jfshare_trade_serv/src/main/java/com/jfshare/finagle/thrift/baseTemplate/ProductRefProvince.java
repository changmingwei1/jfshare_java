/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.baseTemplate;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ProductRefProvince implements TBase<ProductRefProvince, ProductRefProvince._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ProductRefProvince");

  private static final TField SELLER_ID_FIELD_DESC = new TField("sellerId", TType.I32, (short)1);
  private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, (short)2);
  private static final TField STOREHOUSE_IDS_FIELD_DESC = new TField("storehouseIds", TType.STRING, (short)3);
  private static final TField SEND_TO_PROVINCE_FIELD_DESC = new TField("sendToProvince", TType.STRING, (short)4);


  public int sellerId;
  public String productId;
  public String storehouseIds;
  public String sendToProvince;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SELLER_ID((short)1, "sellerId"),
    PRODUCT_ID((short)2, "productId"),
    STOREHOUSE_IDS((short)3, "storehouseIds"),
    SEND_TO_PROVINCE((short)4, "sendToProvince");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SELLER_ID
  	return SELLER_ID;
        case 2: // PRODUCT_ID
  	return PRODUCT_ID;
        case 3: // STOREHOUSE_IDS
  	return STOREHOUSE_IDS;
        case 4: // SEND_TO_PROVINCE
  	return SEND_TO_PROVINCE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SELLERID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SELLER_ID, new FieldMetaData("sellerId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PRODUCT_ID, new FieldMetaData("productId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.STOREHOUSE_IDS, new FieldMetaData("storehouseIds", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SEND_TO_PROVINCE, new FieldMetaData("sendToProvince", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ProductRefProvince.class, metaDataMap);
  }


  public ProductRefProvince() {
  }

  public ProductRefProvince(
    int sellerId,
    String productId,
    String storehouseIds,
    String sendToProvince)
  {
    this();
    this.sellerId = sellerId;
    setSellerIdIsSet(true);
    this.productId = productId;
    this.storehouseIds = storehouseIds;
    this.sendToProvince = sendToProvince;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductRefProvince(ProductRefProvince other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.sellerId = other.sellerId;
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetStorehouseIds()) {
      this.storehouseIds = other.storehouseIds;
    }
    if (other.isSetSendToProvince()) {
      this.sendToProvince = other.sendToProvince;
    }
  }

  public ProductRefProvince deepCopy() {
    return new ProductRefProvince(this);
  }

  @Override
  public void clear() {
    setSellerIdIsSet(false);
    this.sellerId = 0;
    this.productId = null;
    this.storehouseIds = null;
    this.sendToProvince = null;
  }

  public int getSellerId() {
    return this.sellerId;
  }

  public ProductRefProvince setSellerId(int sellerId) {
    this.sellerId = sellerId;
    setSellerIdIsSet(true);

    return this;
  }

  public void unsetSellerId() {
  __isset_bit_vector.clear(__SELLERID_ISSET_ID);
  }

  /** Returns true if field sellerId is set (has been asigned a value) and false otherwise */
  public boolean isSetSellerId() {
    return __isset_bit_vector.get(__SELLERID_ISSET_ID);
  }

  public void setSellerIdIsSet(boolean value) {
    __isset_bit_vector.set(__SELLERID_ISSET_ID, value);
  }

  public String getProductId() {
    return this.productId;
  }

  public ProductRefProvince setProductId(String productId) {
    this.productId = productId;
    
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been asigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public String getStorehouseIds() {
    return this.storehouseIds;
  }

  public ProductRefProvince setStorehouseIds(String storehouseIds) {
    this.storehouseIds = storehouseIds;
    
    return this;
  }

  public void unsetStorehouseIds() {
    this.storehouseIds = null;
  }

  /** Returns true if field storehouseIds is set (has been asigned a value) and false otherwise */
  public boolean isSetStorehouseIds() {
    return this.storehouseIds != null;
  }

  public void setStorehouseIdsIsSet(boolean value) {
    if (!value) {
      this.storehouseIds = null;
    }
  }

  public String getSendToProvince() {
    return this.sendToProvince;
  }

  public ProductRefProvince setSendToProvince(String sendToProvince) {
    this.sendToProvince = sendToProvince;
    
    return this;
  }

  public void unsetSendToProvince() {
    this.sendToProvince = null;
  }

  /** Returns true if field sendToProvince is set (has been asigned a value) and false otherwise */
  public boolean isSetSendToProvince() {
    return this.sendToProvince != null;
  }

  public void setSendToProvinceIsSet(boolean value) {
    if (!value) {
      this.sendToProvince = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SELLER_ID:
      if (value == null) {
        unsetSellerId();
      } else {
        setSellerId((Integer)value);
      }
      break;
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;
    case STOREHOUSE_IDS:
      if (value == null) {
        unsetStorehouseIds();
      } else {
        setStorehouseIds((String)value);
      }
      break;
    case SEND_TO_PROVINCE:
      if (value == null) {
        unsetSendToProvince();
      } else {
        setSendToProvince((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SELLER_ID:
      return new Integer(getSellerId());
    case PRODUCT_ID:
      return getProductId();
    case STOREHOUSE_IDS:
      return getStorehouseIds();
    case SEND_TO_PROVINCE:
      return getSendToProvince();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SELLER_ID:
      return isSetSellerId();
    case PRODUCT_ID:
      return isSetProductId();
    case STOREHOUSE_IDS:
      return isSetStorehouseIds();
    case SEND_TO_PROVINCE:
      return isSetSendToProvince();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductRefProvince)
      return this.equals((ProductRefProvince)that);
    return false;
  }

  public boolean equals(ProductRefProvince that) {
    if (that == null)
      return false;
    boolean this_present_sellerId = true;
    boolean that_present_sellerId = true;
    if (this_present_sellerId || that_present_sellerId) {
      if (!(this_present_sellerId && that_present_sellerId))
        return false;
      if (this.sellerId != that.sellerId)
        return false;
    }
    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }
    boolean this_present_storehouseIds = true && this.isSetStorehouseIds();
    boolean that_present_storehouseIds = true && that.isSetStorehouseIds();
    if (this_present_storehouseIds || that_present_storehouseIds) {
      if (!(this_present_storehouseIds && that_present_storehouseIds))
        return false;
      if (!this.storehouseIds.equals(that.storehouseIds))
        return false;
    }
    boolean this_present_sendToProvince = true && this.isSetSendToProvince();
    boolean that_present_sendToProvince = true && that.isSetSendToProvince();
    if (this_present_sendToProvince || that_present_sendToProvince) {
      if (!(this_present_sendToProvince && that_present_sendToProvince))
        return false;
      if (!this.sendToProvince.equals(that.sendToProvince))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_sellerId = true;
    builder.append(present_sellerId);
    if (present_sellerId)
      builder.append(sellerId);
    boolean present_productId = true && (isSetProductId());
    builder.append(present_productId);
    if (present_productId)
      builder.append(productId);
    boolean present_storehouseIds = true && (isSetStorehouseIds());
    builder.append(present_storehouseIds);
    if (present_storehouseIds)
      builder.append(storehouseIds);
    boolean present_sendToProvince = true && (isSetSendToProvince());
    builder.append(present_sendToProvince);
    if (present_sendToProvince)
      builder.append(sendToProvince);
    return builder.toHashCode();
  }

  public int compareTo(ProductRefProvince other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ProductRefProvince typedOther = (ProductRefProvince)other;

    lastComparison = Boolean.valueOf(isSetSellerId()).compareTo(typedOther.isSetSellerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerId()) {
      lastComparison = TBaseHelper.compareTo(this.sellerId, typedOther.sellerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = TBaseHelper.compareTo(this.productId, typedOther.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStorehouseIds()).compareTo(typedOther.isSetStorehouseIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorehouseIds()) {
      lastComparison = TBaseHelper.compareTo(this.storehouseIds, typedOther.storehouseIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendToProvince()).compareTo(typedOther.isSetSendToProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendToProvince()) {
      lastComparison = TBaseHelper.compareTo(this.sendToProvince, typedOther.sendToProvince);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // SELLER_ID
          if (field.type == TType.I32) {
            this.sellerId = iprot.readI32();
            setSellerIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PRODUCT_ID
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // STOREHOUSE_IDS
          if (field.type == TType.STRING) {
            this.storehouseIds = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SEND_TO_PROVINCE
          if (field.type == TType.STRING) {
            this.sendToProvince = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SELLER_ID_FIELD_DESC);
    oprot.writeI32(this.sellerId);
    oprot.writeFieldEnd();
    if (this.productId != null) {
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    if (this.storehouseIds != null) {
      oprot.writeFieldBegin(STOREHOUSE_IDS_FIELD_DESC);
      oprot.writeString(this.storehouseIds);
      oprot.writeFieldEnd();
    }
    if (this.sendToProvince != null) {
      oprot.writeFieldBegin(SEND_TO_PROVINCE_FIELD_DESC);
      oprot.writeString(this.sendToProvince);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductRefProvince(");
    boolean first = true;
    sb.append("sellerId:");
    sb.append(this.sellerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("storehouseIds:");
    if (this.storehouseIds == null) {
      sb.append("null");
    } else {
      sb.append(this.storehouseIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendToProvince:");
    if (this.sendToProvince == null) {
      sb.append("null");
    } else {
      sb.append(this.sendToProvince);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
