/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.order;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class Order implements TBase<Order, Order._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Order");

  private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short)1);
  private static final TField TRADE_CODE_FIELD_DESC = new TField("tradeCode", TType.STRING, (short)2);
  private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I32, (short)3);
  private static final TField USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, (short)4);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.STRING, (short)5);
  private static final TField CANCEL_TIME_FIELD_DESC = new TField("cancelTime", TType.STRING, (short)6);
  private static final TField PAY_INFO_FIELD_DESC = new TField("payInfo", TType.STRUCT, (short)7);
  private static final TField SELLER_ID_FIELD_DESC = new TField("sellerId", TType.I32, (short)8);
  private static final TField SELLER_NAME_FIELD_DESC = new TField("sellerName", TType.STRING, (short)9);
  private static final TField CLOSING_PRICE_FIELD_DESC = new TField("closingPrice", TType.STRING, (short)10);
  private static final TField THIRD_ID_FIELD_DESC = new TField("thirdId", TType.STRING, (short)11);
  private static final TField DELIVER_INFO_FIELD_DESC = new TField("deliverInfo", TType.STRUCT, (short)12);
  private static final TField ORDER_STATE_FIELD_DESC = new TField("orderState", TType.I32, (short)13);
  private static final TField SELLER_COMMENT_FIELD_DESC = new TField("sellerComment", TType.STRING, (short)14);
  private static final TField BUYER_COMMENT_FIELD_DESC = new TField("buyerComment", TType.STRING, (short)15);
  private static final TField LAST_UPDATE_TIME_FIELD_DESC = new TField("lastUpdateTime", TType.STRING, (short)16);
  private static final TField LAST_UPDATE_USER_ID_FIELD_DESC = new TField("lastUpdateUserId", TType.I32, (short)17);
  private static final TField CREATE_USER_ID_FIELD_DESC = new TField("createUserId", TType.I32, (short)18);
  private static final TField DELIVER_TIME_FIELD_DESC = new TField("deliverTime", TType.STRING, (short)19);
  private static final TField SUCCESS_TIME_FIELD_DESC = new TField("successTime", TType.STRING, (short)20);
  private static final TField SETTLEMENT_STATE_FIELD_DESC = new TField("settlementState", TType.I32, (short)21);
  private static final TField POSTAGE_FIELD_DESC = new TField("postage", TType.STRING, (short)22);
  private static final TField ORDER_STATE_TYPE_FIELD_DESC = new TField("orderStateType", TType.I32, (short)23);
  private static final TField ORDER_STATE_TYPE_DESC_FIELD_DESC = new TField("orderStateTypeDesc", TType.I32, (short)24);
  private static final TField SETTLEMENT_TIME_FIELD_DESC = new TField("settlementTime", TType.STRING, (short)25);
  private static final TField ORDER_TAG_FIELD_DESC = new TField("orderTag", TType.I32, (short)26);
  private static final TField WI_FIELD_DESC = new TField("wi", TType.STRING, (short)27);
  private static final TField FROM_SOURCE_FIELD_DESC = new TField("fromSource", TType.I32, (short)28);
  private static final TField TRADE_PAY_ID_FIELD_DESC = new TField("tradePayId", TType.STRING, (short)29);
  private static final TField ORDER_DELETE_STATE_FIELD_DESC = new TField("orderDeleteState", TType.I32, (short)30);
  private static final TField EXCHANGE_SCORE_FIELD_DESC = new TField("exchangeScore", TType.I32, (short)31);
  private static final TField EXCHANGE_CASH_FIELD_DESC = new TField("exchangeCash", TType.STRING, (short)32);
  private static final TField ORDER_BATCH_FIELD_DESC = new TField("orderBatch", TType.STRING, (short)33);
  private static final TField ACTIVE_STATE_FIELD_DESC = new TField("activeState", TType.I32, (short)34);
  private static final TField PRODUCT_LIST_FIELD_DESC = new TField("productList", TType.LIST, (short)35);
  private static final TField THIRD_SCORE_FIELD_DESC = new TField("thirdScore", TType.I32, (short)36);
  private static final TField POSTAGE_EXT_FIELD_DESC = new TField("postageExt", TType.STRING, (short)37);


  public String orderId;
  public String tradeCode;
  public int userId;
  public String userName;
  public String createTime;
  public String cancelTime;
  public PayInfo payInfo;
  public int sellerId;
  public String sellerName;
  public String closingPrice;
  public String thirdId;
  public DeliverInfo deliverInfo;
  public int orderState;
  public String sellerComment;
  public String buyerComment;
  public String lastUpdateTime;
  public int lastUpdateUserId;
  public int createUserId;
  public String deliverTime;
  public String successTime;
  public int settlementState;
  public String postage;
  public OrderStateType orderStateType;
  public OrderCancelReason orderStateTypeDesc;
  public String settlementTime;
  public int orderTag;
  public String wi;
  public int fromSource;
  public String tradePayId;
  public int orderDeleteState;
  public int exchangeScore;
  public String exchangeCash;
  public String orderBatch;
  public int activeState;
  public List<OrderInfo> productList;
  public int thirdScore;
  public String postageExt;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    TRADE_CODE((short)2, "tradeCode"),
    USER_ID((short)3, "userId"),
    USER_NAME((short)4, "userName"),
    CREATE_TIME((short)5, "createTime"),
    CANCEL_TIME((short)6, "cancelTime"),
    PAY_INFO((short)7, "payInfo"),
    SELLER_ID((short)8, "sellerId"),
    SELLER_NAME((short)9, "sellerName"),
    CLOSING_PRICE((short)10, "closingPrice"),
    THIRD_ID((short)11, "thirdId"),
    DELIVER_INFO((short)12, "deliverInfo"),
    ORDER_STATE((short)13, "orderState"),
    SELLER_COMMENT((short)14, "sellerComment"),
    BUYER_COMMENT((short)15, "buyerComment"),
    LAST_UPDATE_TIME((short)16, "lastUpdateTime"),
    LAST_UPDATE_USER_ID((short)17, "lastUpdateUserId"),
    CREATE_USER_ID((short)18, "createUserId"),
    DELIVER_TIME((short)19, "deliverTime"),
    SUCCESS_TIME((short)20, "successTime"),
    SETTLEMENT_STATE((short)21, "settlementState"),
    POSTAGE((short)22, "postage"),
    ORDER_STATE_TYPE((short)23, "orderStateType"),
    ORDER_STATE_TYPE_DESC((short)24, "orderStateTypeDesc"),
    SETTLEMENT_TIME((short)25, "settlementTime"),
    ORDER_TAG((short)26, "orderTag"),
    WI((short)27, "wi"),
    FROM_SOURCE((short)28, "fromSource"),
    TRADE_PAY_ID((short)29, "tradePayId"),
    ORDER_DELETE_STATE((short)30, "orderDeleteState"),
    EXCHANGE_SCORE((short)31, "exchangeScore"),
    EXCHANGE_CASH((short)32, "exchangeCash"),
    ORDER_BATCH((short)33, "orderBatch"),
    ACTIVE_STATE((short)34, "activeState"),
    PRODUCT_LIST((short)35, "productList"),
    THIRD_SCORE((short)36, "thirdScore"),
    POSTAGE_EXT((short)37, "postageExt");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
  	return ORDER_ID;
        case 2: // TRADE_CODE
  	return TRADE_CODE;
        case 3: // USER_ID
  	return USER_ID;
        case 4: // USER_NAME
  	return USER_NAME;
        case 5: // CREATE_TIME
  	return CREATE_TIME;
        case 6: // CANCEL_TIME
  	return CANCEL_TIME;
        case 7: // PAY_INFO
  	return PAY_INFO;
        case 8: // SELLER_ID
  	return SELLER_ID;
        case 9: // SELLER_NAME
  	return SELLER_NAME;
        case 10: // CLOSING_PRICE
  	return CLOSING_PRICE;
        case 11: // THIRD_ID
  	return THIRD_ID;
        case 12: // DELIVER_INFO
  	return DELIVER_INFO;
        case 13: // ORDER_STATE
  	return ORDER_STATE;
        case 14: // SELLER_COMMENT
  	return SELLER_COMMENT;
        case 15: // BUYER_COMMENT
  	return BUYER_COMMENT;
        case 16: // LAST_UPDATE_TIME
  	return LAST_UPDATE_TIME;
        case 17: // LAST_UPDATE_USER_ID
  	return LAST_UPDATE_USER_ID;
        case 18: // CREATE_USER_ID
  	return CREATE_USER_ID;
        case 19: // DELIVER_TIME
  	return DELIVER_TIME;
        case 20: // SUCCESS_TIME
  	return SUCCESS_TIME;
        case 21: // SETTLEMENT_STATE
  	return SETTLEMENT_STATE;
        case 22: // POSTAGE
  	return POSTAGE;
        case 23: // ORDER_STATE_TYPE
  	return ORDER_STATE_TYPE;
        case 24: // ORDER_STATE_TYPE_DESC
  	return ORDER_STATE_TYPE_DESC;
        case 25: // SETTLEMENT_TIME
  	return SETTLEMENT_TIME;
        case 26: // ORDER_TAG
  	return ORDER_TAG;
        case 27: // WI
  	return WI;
        case 28: // FROM_SOURCE
  	return FROM_SOURCE;
        case 29: // TRADE_PAY_ID
  	return TRADE_PAY_ID;
        case 30: // ORDER_DELETE_STATE
  	return ORDER_DELETE_STATE;
        case 31: // EXCHANGE_SCORE
  	return EXCHANGE_SCORE;
        case 32: // EXCHANGE_CASH
  	return EXCHANGE_CASH;
        case 33: // ORDER_BATCH
  	return ORDER_BATCH;
        case 34: // ACTIVE_STATE
  	return ACTIVE_STATE;
        case 35: // PRODUCT_LIST
  	return PRODUCT_LIST;
        case 36: // THIRD_SCORE
  	return THIRD_SCORE;
        case 37: // POSTAGE_EXT
  	return POSTAGE_EXT;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __SELLERID_ISSET_ID = 1;
  private static final int __ORDERSTATE_ISSET_ID = 2;
  private static final int __LASTUPDATEUSERID_ISSET_ID = 3;
  private static final int __CREATEUSERID_ISSET_ID = 4;
  private static final int __SETTLEMENTSTATE_ISSET_ID = 5;
  private static final int __ORDERTAG_ISSET_ID = 6;
  private static final int __FROMSOURCE_ISSET_ID = 7;
  private static final int __ORDERDELETESTATE_ISSET_ID = 8;
  private static final int __EXCHANGESCORE_ISSET_ID = 9;
  private static final int __ACTIVESTATE_ISSET_ID = 10;
  private static final int __THIRDSCORE_ISSET_ID = 11;
  private BitSet __isset_bit_vector = new BitSet(12);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TRADE_CODE, new FieldMetaData("tradeCode", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new FieldMetaData("userName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CANCEL_TIME, new FieldMetaData("cancelTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PAY_INFO, new FieldMetaData("payInfo", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, PayInfo.class)));
    tmpMap.put(_Fields.SELLER_ID, new FieldMetaData("sellerId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.SELLER_NAME, new FieldMetaData("sellerName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CLOSING_PRICE, new FieldMetaData("closingPrice", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.THIRD_ID, new FieldMetaData("thirdId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DELIVER_INFO, new FieldMetaData("deliverInfo", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, DeliverInfo.class)));
    tmpMap.put(_Fields.ORDER_STATE, new FieldMetaData("orderState", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.SELLER_COMMENT, new FieldMetaData("sellerComment", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.BUYER_COMMENT, new FieldMetaData("buyerComment", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new FieldMetaData("lastUpdateTime", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_USER_ID, new FieldMetaData("lastUpdateUserId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CREATE_USER_ID, new FieldMetaData("createUserId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.DELIVER_TIME, new FieldMetaData("deliverTime", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SUCCESS_TIME, new FieldMetaData("successTime", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SETTLEMENT_STATE, new FieldMetaData("settlementState", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.POSTAGE, new FieldMetaData("postage", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ORDER_STATE_TYPE, new FieldMetaData("orderStateType", TFieldRequirementType.OPTIONAL,
      new EnumMetaData(TType.ENUM, OrderStateType.class)));
    tmpMap.put(_Fields.ORDER_STATE_TYPE_DESC, new FieldMetaData("orderStateTypeDesc", TFieldRequirementType.OPTIONAL,
      new EnumMetaData(TType.ENUM, OrderCancelReason.class)));
    tmpMap.put(_Fields.SETTLEMENT_TIME, new FieldMetaData("settlementTime", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ORDER_TAG, new FieldMetaData("orderTag", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.WI, new FieldMetaData("wi", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.FROM_SOURCE, new FieldMetaData("fromSource", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TRADE_PAY_ID, new FieldMetaData("tradePayId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ORDER_DELETE_STATE, new FieldMetaData("orderDeleteState", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.EXCHANGE_SCORE, new FieldMetaData("exchangeScore", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.EXCHANGE_CASH, new FieldMetaData("exchangeCash", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ORDER_BATCH, new FieldMetaData("orderBatch", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_STATE, new FieldMetaData("activeState", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PRODUCT_LIST, new FieldMetaData("productList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, OrderInfo.class))));
    tmpMap.put(_Fields.THIRD_SCORE, new FieldMetaData("thirdScore", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.POSTAGE_EXT, new FieldMetaData("postageExt", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Order.class, metaDataMap);
  }


  public Order() {
  }

  public Order(
    String orderId,
    String tradeCode,
    int userId,
    String userName,
    String createTime,
    String cancelTime,
    PayInfo payInfo,
    int sellerId,
    String sellerName,
    String closingPrice,
    String thirdId,
    DeliverInfo deliverInfo,
    int orderState,
    String postage,
    String wi,
    int fromSource,
    String tradePayId,
    List<OrderInfo> productList)
  {
    this();
    this.orderId = orderId;
    this.tradeCode = tradeCode;
    this.userId = userId;
    setUserIdIsSet(true);
    this.userName = userName;
    this.createTime = createTime;
    this.cancelTime = cancelTime;
    this.payInfo = payInfo;
    this.sellerId = sellerId;
    setSellerIdIsSet(true);
    this.sellerName = sellerName;
    this.closingPrice = closingPrice;
    this.thirdId = thirdId;
    this.deliverInfo = deliverInfo;
    this.orderState = orderState;
    setOrderStateIsSet(true);
    this.postage = postage;
    this.wi = wi;
    this.fromSource = fromSource;
    setFromSourceIsSet(true);
    this.tradePayId = tradePayId;
    this.productList = productList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Order(Order other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetTradeCode()) {
      this.tradeCode = other.tradeCode;
    }
    this.userId = other.userId;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetCancelTime()) {
      this.cancelTime = other.cancelTime;
    }
    if (other.isSetPayInfo()) {
      this.payInfo = new PayInfo(other.payInfo);
    }
    this.sellerId = other.sellerId;
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    if (other.isSetClosingPrice()) {
      this.closingPrice = other.closingPrice;
    }
    if (other.isSetThirdId()) {
      this.thirdId = other.thirdId;
    }
    if (other.isSetDeliverInfo()) {
      this.deliverInfo = new DeliverInfo(other.deliverInfo);
    }
    this.orderState = other.orderState;
    if (other.isSetSellerComment()) {
      this.sellerComment = other.sellerComment;
    }
    if (other.isSetBuyerComment()) {
      this.buyerComment = other.buyerComment;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
    this.lastUpdateUserId = other.lastUpdateUserId;
    this.createUserId = other.createUserId;
    if (other.isSetDeliverTime()) {
      this.deliverTime = other.deliverTime;
    }
    if (other.isSetSuccessTime()) {
      this.successTime = other.successTime;
    }
    this.settlementState = other.settlementState;
    if (other.isSetPostage()) {
      this.postage = other.postage;
    }
    if (other.isSetOrderStateType()) {
      this.orderStateType = other.orderStateType;
    }
    if (other.isSetOrderStateTypeDesc()) {
      this.orderStateTypeDesc = other.orderStateTypeDesc;
    }
    if (other.isSetSettlementTime()) {
      this.settlementTime = other.settlementTime;
    }
    this.orderTag = other.orderTag;
    if (other.isSetWi()) {
      this.wi = other.wi;
    }
    this.fromSource = other.fromSource;
    if (other.isSetTradePayId()) {
      this.tradePayId = other.tradePayId;
    }
    this.orderDeleteState = other.orderDeleteState;
    this.exchangeScore = other.exchangeScore;
    if (other.isSetExchangeCash()) {
      this.exchangeCash = other.exchangeCash;
    }
    if (other.isSetOrderBatch()) {
      this.orderBatch = other.orderBatch;
    }
    this.activeState = other.activeState;
    if (other.isSetProductList()) {
      List<OrderInfo> __this__productList = new ArrayList<OrderInfo>();
      for (OrderInfo other_element : other.productList) {
        __this__productList.add(new OrderInfo(other_element));
      }
      this.productList = __this__productList;
    }
    this.thirdScore = other.thirdScore;
    if (other.isSetPostageExt()) {
      this.postageExt = other.postageExt;
    }
  }

  public Order deepCopy() {
    return new Order(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.tradeCode = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.userName = null;
    this.createTime = null;
    this.cancelTime = null;
    this.payInfo = null;
    setSellerIdIsSet(false);
    this.sellerId = 0;
    this.sellerName = null;
    this.closingPrice = null;
    this.thirdId = null;
    this.deliverInfo = null;
    setOrderStateIsSet(false);
    this.orderState = 0;
    this.sellerComment = null;
    this.buyerComment = null;
    this.lastUpdateTime = null;
    setLastUpdateUserIdIsSet(false);
    this.lastUpdateUserId = 0;
    setCreateUserIdIsSet(false);
    this.createUserId = 0;
    this.deliverTime = null;
    this.successTime = null;
    setSettlementStateIsSet(false);
    this.settlementState = 0;
    this.postage = null;
    this.orderStateType = null;
    this.orderStateTypeDesc = null;
    this.settlementTime = null;
    setOrderTagIsSet(false);
    this.orderTag = 0;
    this.wi = null;
    setFromSourceIsSet(false);
    this.fromSource = 0;
    this.tradePayId = null;
    setOrderDeleteStateIsSet(false);
    this.orderDeleteState = 0;
    setExchangeScoreIsSet(false);
    this.exchangeScore = 0;
    this.exchangeCash = null;
    this.orderBatch = null;
    setActiveStateIsSet(false);
    this.activeState = 0;
    this.productList = null;
    setThirdScoreIsSet(false);
    this.thirdScore = 0;
    this.postageExt = null;
  }

  public String getOrderId() {
    return this.orderId;
  }

  public Order setOrderId(String orderId) {
    this.orderId = orderId;
    
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public String getTradeCode() {
    return this.tradeCode;
  }

  public Order setTradeCode(String tradeCode) {
    this.tradeCode = tradeCode;
    
    return this;
  }

  public void unsetTradeCode() {
    this.tradeCode = null;
  }

  /** Returns true if field tradeCode is set (has been asigned a value) and false otherwise */
  public boolean isSetTradeCode() {
    return this.tradeCode != null;
  }

  public void setTradeCodeIsSet(boolean value) {
    if (!value) {
      this.tradeCode = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public Order setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);

    return this;
  }

  public void unsetUserId() {
  __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been asigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public Order setUserName(String userName) {
    this.userName = userName;
    
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been asigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public Order setCreateTime(String createTime) {
    this.createTime = createTime;
    
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getCancelTime() {
    return this.cancelTime;
  }

  public Order setCancelTime(String cancelTime) {
    this.cancelTime = cancelTime;
    
    return this;
  }

  public void unsetCancelTime() {
    this.cancelTime = null;
  }

  /** Returns true if field cancelTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCancelTime() {
    return this.cancelTime != null;
  }

  public void setCancelTimeIsSet(boolean value) {
    if (!value) {
      this.cancelTime = null;
    }
  }

  public PayInfo getPayInfo() {
    return this.payInfo;
  }

  public Order setPayInfo(PayInfo payInfo) {
    this.payInfo = payInfo;
    
    return this;
  }

  public void unsetPayInfo() {
    this.payInfo = null;
  }

  /** Returns true if field payInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetPayInfo() {
    return this.payInfo != null;
  }

  public void setPayInfoIsSet(boolean value) {
    if (!value) {
      this.payInfo = null;
    }
  }

  public int getSellerId() {
    return this.sellerId;
  }

  public Order setSellerId(int sellerId) {
    this.sellerId = sellerId;
    setSellerIdIsSet(true);

    return this;
  }

  public void unsetSellerId() {
  __isset_bit_vector.clear(__SELLERID_ISSET_ID);
  }

  /** Returns true if field sellerId is set (has been asigned a value) and false otherwise */
  public boolean isSetSellerId() {
    return __isset_bit_vector.get(__SELLERID_ISSET_ID);
  }

  public void setSellerIdIsSet(boolean value) {
    __isset_bit_vector.set(__SELLERID_ISSET_ID, value);
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public Order setSellerName(String sellerName) {
    this.sellerName = sellerName;
    
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been asigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public String getClosingPrice() {
    return this.closingPrice;
  }

  public Order setClosingPrice(String closingPrice) {
    this.closingPrice = closingPrice;
    
    return this;
  }

  public void unsetClosingPrice() {
    this.closingPrice = null;
  }

  /** Returns true if field closingPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetClosingPrice() {
    return this.closingPrice != null;
  }

  public void setClosingPriceIsSet(boolean value) {
    if (!value) {
      this.closingPrice = null;
    }
  }

  public String getThirdId() {
    return this.thirdId;
  }

  public Order setThirdId(String thirdId) {
    this.thirdId = thirdId;
    
    return this;
  }

  public void unsetThirdId() {
    this.thirdId = null;
  }

  /** Returns true if field thirdId is set (has been asigned a value) and false otherwise */
  public boolean isSetThirdId() {
    return this.thirdId != null;
  }

  public void setThirdIdIsSet(boolean value) {
    if (!value) {
      this.thirdId = null;
    }
  }

  public DeliverInfo getDeliverInfo() {
    return this.deliverInfo;
  }

  public Order setDeliverInfo(DeliverInfo deliverInfo) {
    this.deliverInfo = deliverInfo;
    
    return this;
  }

  public void unsetDeliverInfo() {
    this.deliverInfo = null;
  }

  /** Returns true if field deliverInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetDeliverInfo() {
    return this.deliverInfo != null;
  }

  public void setDeliverInfoIsSet(boolean value) {
    if (!value) {
      this.deliverInfo = null;
    }
  }

  public int getOrderState() {
    return this.orderState;
  }

  public Order setOrderState(int orderState) {
    this.orderState = orderState;
    setOrderStateIsSet(true);

    return this;
  }

  public void unsetOrderState() {
  __isset_bit_vector.clear(__ORDERSTATE_ISSET_ID);
  }

  /** Returns true if field orderState is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderState() {
    return __isset_bit_vector.get(__ORDERSTATE_ISSET_ID);
  }

  public void setOrderStateIsSet(boolean value) {
    __isset_bit_vector.set(__ORDERSTATE_ISSET_ID, value);
  }

  public String getSellerComment() {
    return this.sellerComment;
  }

  public Order setSellerComment(String sellerComment) {
    this.sellerComment = sellerComment;
    
    return this;
  }

  public void unsetSellerComment() {
    this.sellerComment = null;
  }

  /** Returns true if field sellerComment is set (has been asigned a value) and false otherwise */
  public boolean isSetSellerComment() {
    return this.sellerComment != null;
  }

  public void setSellerCommentIsSet(boolean value) {
    if (!value) {
      this.sellerComment = null;
    }
  }

  public String getBuyerComment() {
    return this.buyerComment;
  }

  public Order setBuyerComment(String buyerComment) {
    this.buyerComment = buyerComment;
    
    return this;
  }

  public void unsetBuyerComment() {
    this.buyerComment = null;
  }

  /** Returns true if field buyerComment is set (has been asigned a value) and false otherwise */
  public boolean isSetBuyerComment() {
    return this.buyerComment != null;
  }

  public void setBuyerCommentIsSet(boolean value) {
    if (!value) {
      this.buyerComment = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public Order setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been asigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public int getLastUpdateUserId() {
    return this.lastUpdateUserId;
  }

  public Order setLastUpdateUserId(int lastUpdateUserId) {
    this.lastUpdateUserId = lastUpdateUserId;
    setLastUpdateUserIdIsSet(true);

    return this;
  }

  public void unsetLastUpdateUserId() {
  __isset_bit_vector.clear(__LASTUPDATEUSERID_ISSET_ID);
  }

  /** Returns true if field lastUpdateUserId is set (has been asigned a value) and false otherwise */
  public boolean isSetLastUpdateUserId() {
    return __isset_bit_vector.get(__LASTUPDATEUSERID_ISSET_ID);
  }

  public void setLastUpdateUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__LASTUPDATEUSERID_ISSET_ID, value);
  }

  public int getCreateUserId() {
    return this.createUserId;
  }

  public Order setCreateUserId(int createUserId) {
    this.createUserId = createUserId;
    setCreateUserIdIsSet(true);

    return this;
  }

  public void unsetCreateUserId() {
  __isset_bit_vector.clear(__CREATEUSERID_ISSET_ID);
  }

  /** Returns true if field createUserId is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateUserId() {
    return __isset_bit_vector.get(__CREATEUSERID_ISSET_ID);
  }

  public void setCreateUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__CREATEUSERID_ISSET_ID, value);
  }

  public String getDeliverTime() {
    return this.deliverTime;
  }

  public Order setDeliverTime(String deliverTime) {
    this.deliverTime = deliverTime;
    
    return this;
  }

  public void unsetDeliverTime() {
    this.deliverTime = null;
  }

  /** Returns true if field deliverTime is set (has been asigned a value) and false otherwise */
  public boolean isSetDeliverTime() {
    return this.deliverTime != null;
  }

  public void setDeliverTimeIsSet(boolean value) {
    if (!value) {
      this.deliverTime = null;
    }
  }

  public String getSuccessTime() {
    return this.successTime;
  }

  public Order setSuccessTime(String successTime) {
    this.successTime = successTime;
    
    return this;
  }

  public void unsetSuccessTime() {
    this.successTime = null;
  }

  /** Returns true if field successTime is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccessTime() {
    return this.successTime != null;
  }

  public void setSuccessTimeIsSet(boolean value) {
    if (!value) {
      this.successTime = null;
    }
  }

  public int getSettlementState() {
    return this.settlementState;
  }

  public Order setSettlementState(int settlementState) {
    this.settlementState = settlementState;
    setSettlementStateIsSet(true);

    return this;
  }

  public void unsetSettlementState() {
  __isset_bit_vector.clear(__SETTLEMENTSTATE_ISSET_ID);
  }

  /** Returns true if field settlementState is set (has been asigned a value) and false otherwise */
  public boolean isSetSettlementState() {
    return __isset_bit_vector.get(__SETTLEMENTSTATE_ISSET_ID);
  }

  public void setSettlementStateIsSet(boolean value) {
    __isset_bit_vector.set(__SETTLEMENTSTATE_ISSET_ID, value);
  }

  public String getPostage() {
    return this.postage;
  }

  public Order setPostage(String postage) {
    this.postage = postage;
    
    return this;
  }

  public void unsetPostage() {
    this.postage = null;
  }

  /** Returns true if field postage is set (has been asigned a value) and false otherwise */
  public boolean isSetPostage() {
    return this.postage != null;
  }

  public void setPostageIsSet(boolean value) {
    if (!value) {
      this.postage = null;
    }
  }

  public OrderStateType getOrderStateType() {
    return this.orderStateType;
  }

  public Order setOrderStateType(OrderStateType orderStateType) {
    this.orderStateType = orderStateType;
    
    return this;
  }

  public void unsetOrderStateType() {
    this.orderStateType = null;
  }

  /** Returns true if field orderStateType is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderStateType() {
    return this.orderStateType != null;
  }

  public void setOrderStateTypeIsSet(boolean value) {
    if (!value) {
      this.orderStateType = null;
    }
  }

  public OrderCancelReason getOrderStateTypeDesc() {
    return this.orderStateTypeDesc;
  }

  public Order setOrderStateTypeDesc(OrderCancelReason orderStateTypeDesc) {
    this.orderStateTypeDesc = orderStateTypeDesc;
    
    return this;
  }

  public void unsetOrderStateTypeDesc() {
    this.orderStateTypeDesc = null;
  }

  /** Returns true if field orderStateTypeDesc is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderStateTypeDesc() {
    return this.orderStateTypeDesc != null;
  }

  public void setOrderStateTypeDescIsSet(boolean value) {
    if (!value) {
      this.orderStateTypeDesc = null;
    }
  }

  public String getSettlementTime() {
    return this.settlementTime;
  }

  public Order setSettlementTime(String settlementTime) {
    this.settlementTime = settlementTime;
    
    return this;
  }

  public void unsetSettlementTime() {
    this.settlementTime = null;
  }

  /** Returns true if field settlementTime is set (has been asigned a value) and false otherwise */
  public boolean isSetSettlementTime() {
    return this.settlementTime != null;
  }

  public void setSettlementTimeIsSet(boolean value) {
    if (!value) {
      this.settlementTime = null;
    }
  }

  public int getOrderTag() {
    return this.orderTag;
  }

  public Order setOrderTag(int orderTag) {
    this.orderTag = orderTag;
    setOrderTagIsSet(true);

    return this;
  }

  public void unsetOrderTag() {
  __isset_bit_vector.clear(__ORDERTAG_ISSET_ID);
  }

  /** Returns true if field orderTag is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderTag() {
    return __isset_bit_vector.get(__ORDERTAG_ISSET_ID);
  }

  public void setOrderTagIsSet(boolean value) {
    __isset_bit_vector.set(__ORDERTAG_ISSET_ID, value);
  }

  public String getWi() {
    return this.wi;
  }

  public Order setWi(String wi) {
    this.wi = wi;
    
    return this;
  }

  public void unsetWi() {
    this.wi = null;
  }

  /** Returns true if field wi is set (has been asigned a value) and false otherwise */
  public boolean isSetWi() {
    return this.wi != null;
  }

  public void setWiIsSet(boolean value) {
    if (!value) {
      this.wi = null;
    }
  }

  public int getFromSource() {
    return this.fromSource;
  }

  public Order setFromSource(int fromSource) {
    this.fromSource = fromSource;
    setFromSourceIsSet(true);

    return this;
  }

  public void unsetFromSource() {
  __isset_bit_vector.clear(__FROMSOURCE_ISSET_ID);
  }

  /** Returns true if field fromSource is set (has been asigned a value) and false otherwise */
  public boolean isSetFromSource() {
    return __isset_bit_vector.get(__FROMSOURCE_ISSET_ID);
  }

  public void setFromSourceIsSet(boolean value) {
    __isset_bit_vector.set(__FROMSOURCE_ISSET_ID, value);
  }

  public String getTradePayId() {
    return this.tradePayId;
  }

  public Order setTradePayId(String tradePayId) {
    this.tradePayId = tradePayId;
    
    return this;
  }

  public void unsetTradePayId() {
    this.tradePayId = null;
  }

  /** Returns true if field tradePayId is set (has been asigned a value) and false otherwise */
  public boolean isSetTradePayId() {
    return this.tradePayId != null;
  }

  public void setTradePayIdIsSet(boolean value) {
    if (!value) {
      this.tradePayId = null;
    }
  }

  public int getOrderDeleteState() {
    return this.orderDeleteState;
  }

  public Order setOrderDeleteState(int orderDeleteState) {
    this.orderDeleteState = orderDeleteState;
    setOrderDeleteStateIsSet(true);

    return this;
  }

  public void unsetOrderDeleteState() {
  __isset_bit_vector.clear(__ORDERDELETESTATE_ISSET_ID);
  }

  /** Returns true if field orderDeleteState is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderDeleteState() {
    return __isset_bit_vector.get(__ORDERDELETESTATE_ISSET_ID);
  }

  public void setOrderDeleteStateIsSet(boolean value) {
    __isset_bit_vector.set(__ORDERDELETESTATE_ISSET_ID, value);
  }

  public int getExchangeScore() {
    return this.exchangeScore;
  }

  public Order setExchangeScore(int exchangeScore) {
    this.exchangeScore = exchangeScore;
    setExchangeScoreIsSet(true);

    return this;
  }

  public void unsetExchangeScore() {
  __isset_bit_vector.clear(__EXCHANGESCORE_ISSET_ID);
  }

  /** Returns true if field exchangeScore is set (has been asigned a value) and false otherwise */
  public boolean isSetExchangeScore() {
    return __isset_bit_vector.get(__EXCHANGESCORE_ISSET_ID);
  }

  public void setExchangeScoreIsSet(boolean value) {
    __isset_bit_vector.set(__EXCHANGESCORE_ISSET_ID, value);
  }

  public String getExchangeCash() {
    return this.exchangeCash;
  }

  public Order setExchangeCash(String exchangeCash) {
    this.exchangeCash = exchangeCash;
    
    return this;
  }

  public void unsetExchangeCash() {
    this.exchangeCash = null;
  }

  /** Returns true if field exchangeCash is set (has been asigned a value) and false otherwise */
  public boolean isSetExchangeCash() {
    return this.exchangeCash != null;
  }

  public void setExchangeCashIsSet(boolean value) {
    if (!value) {
      this.exchangeCash = null;
    }
  }

  public String getOrderBatch() {
    return this.orderBatch;
  }

  public Order setOrderBatch(String orderBatch) {
    this.orderBatch = orderBatch;
    
    return this;
  }

  public void unsetOrderBatch() {
    this.orderBatch = null;
  }

  /** Returns true if field orderBatch is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderBatch() {
    return this.orderBatch != null;
  }

  public void setOrderBatchIsSet(boolean value) {
    if (!value) {
      this.orderBatch = null;
    }
  }

  public int getActiveState() {
    return this.activeState;
  }

  public Order setActiveState(int activeState) {
    this.activeState = activeState;
    setActiveStateIsSet(true);

    return this;
  }

  public void unsetActiveState() {
  __isset_bit_vector.clear(__ACTIVESTATE_ISSET_ID);
  }

  /** Returns true if field activeState is set (has been asigned a value) and false otherwise */
  public boolean isSetActiveState() {
    return __isset_bit_vector.get(__ACTIVESTATE_ISSET_ID);
  }

  public void setActiveStateIsSet(boolean value) {
    __isset_bit_vector.set(__ACTIVESTATE_ISSET_ID, value);
  }

  public int getProductListSize() {
    return (this.productList == null) ? 0 : this.productList.size();
  }

  public java.util.Iterator<OrderInfo> getProductListIterator() {
    return (this.productList == null) ? null : this.productList.iterator();
  }

  public void addToProductList(OrderInfo elem) {
    if (this.productList == null) {
      this.productList = new ArrayList<OrderInfo>();
    }
    this.productList.add(elem);
  }

  public List<OrderInfo> getProductList() {
    return this.productList;
  }

  public Order setProductList(List<OrderInfo> productList) {
    this.productList = productList;
    
    return this;
  }

  public void unsetProductList() {
    this.productList = null;
  }

  /** Returns true if field productList is set (has been asigned a value) and false otherwise */
  public boolean isSetProductList() {
    return this.productList != null;
  }

  public void setProductListIsSet(boolean value) {
    if (!value) {
      this.productList = null;
    }
  }

  public int getThirdScore() {
    return this.thirdScore;
  }

  public Order setThirdScore(int thirdScore) {
    this.thirdScore = thirdScore;
    setThirdScoreIsSet(true);

    return this;
  }

  public void unsetThirdScore() {
  __isset_bit_vector.clear(__THIRDSCORE_ISSET_ID);
  }

  /** Returns true if field thirdScore is set (has been asigned a value) and false otherwise */
  public boolean isSetThirdScore() {
    return __isset_bit_vector.get(__THIRDSCORE_ISSET_ID);
  }

  public void setThirdScoreIsSet(boolean value) {
    __isset_bit_vector.set(__THIRDSCORE_ISSET_ID, value);
  }

  public String getPostageExt() {
    return this.postageExt;
  }

  public Order setPostageExt(String postageExt) {
    this.postageExt = postageExt;
    
    return this;
  }

  public void unsetPostageExt() {
    this.postageExt = null;
  }

  /** Returns true if field postageExt is set (has been asigned a value) and false otherwise */
  public boolean isSetPostageExt() {
    return this.postageExt != null;
  }

  public void setPostageExtIsSet(boolean value) {
    if (!value) {
      this.postageExt = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;
    case TRADE_CODE:
      if (value == null) {
        unsetTradeCode();
      } else {
        setTradeCode((String)value);
      }
      break;
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;
    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;
    case CANCEL_TIME:
      if (value == null) {
        unsetCancelTime();
      } else {
        setCancelTime((String)value);
      }
      break;
    case PAY_INFO:
      if (value == null) {
        unsetPayInfo();
      } else {
        setPayInfo((PayInfo)value);
      }
      break;
    case SELLER_ID:
      if (value == null) {
        unsetSellerId();
      } else {
        setSellerId((Integer)value);
      }
      break;
    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;
    case CLOSING_PRICE:
      if (value == null) {
        unsetClosingPrice();
      } else {
        setClosingPrice((String)value);
      }
      break;
    case THIRD_ID:
      if (value == null) {
        unsetThirdId();
      } else {
        setThirdId((String)value);
      }
      break;
    case DELIVER_INFO:
      if (value == null) {
        unsetDeliverInfo();
      } else {
        setDeliverInfo((DeliverInfo)value);
      }
      break;
    case ORDER_STATE:
      if (value == null) {
        unsetOrderState();
      } else {
        setOrderState((Integer)value);
      }
      break;
    case SELLER_COMMENT:
      if (value == null) {
        unsetSellerComment();
      } else {
        setSellerComment((String)value);
      }
      break;
    case BUYER_COMMENT:
      if (value == null) {
        unsetBuyerComment();
      } else {
        setBuyerComment((String)value);
      }
      break;
    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;
    case LAST_UPDATE_USER_ID:
      if (value == null) {
        unsetLastUpdateUserId();
      } else {
        setLastUpdateUserId((Integer)value);
      }
      break;
    case CREATE_USER_ID:
      if (value == null) {
        unsetCreateUserId();
      } else {
        setCreateUserId((Integer)value);
      }
      break;
    case DELIVER_TIME:
      if (value == null) {
        unsetDeliverTime();
      } else {
        setDeliverTime((String)value);
      }
      break;
    case SUCCESS_TIME:
      if (value == null) {
        unsetSuccessTime();
      } else {
        setSuccessTime((String)value);
      }
      break;
    case SETTLEMENT_STATE:
      if (value == null) {
        unsetSettlementState();
      } else {
        setSettlementState((Integer)value);
      }
      break;
    case POSTAGE:
      if (value == null) {
        unsetPostage();
      } else {
        setPostage((String)value);
      }
      break;
    case ORDER_STATE_TYPE:
      if (value == null) {
        unsetOrderStateType();
      } else {
        setOrderStateType((OrderStateType)value);
      }
      break;
    case ORDER_STATE_TYPE_DESC:
      if (value == null) {
        unsetOrderStateTypeDesc();
      } else {
        setOrderStateTypeDesc((OrderCancelReason)value);
      }
      break;
    case SETTLEMENT_TIME:
      if (value == null) {
        unsetSettlementTime();
      } else {
        setSettlementTime((String)value);
      }
      break;
    case ORDER_TAG:
      if (value == null) {
        unsetOrderTag();
      } else {
        setOrderTag((Integer)value);
      }
      break;
    case WI:
      if (value == null) {
        unsetWi();
      } else {
        setWi((String)value);
      }
      break;
    case FROM_SOURCE:
      if (value == null) {
        unsetFromSource();
      } else {
        setFromSource((Integer)value);
      }
      break;
    case TRADE_PAY_ID:
      if (value == null) {
        unsetTradePayId();
      } else {
        setTradePayId((String)value);
      }
      break;
    case ORDER_DELETE_STATE:
      if (value == null) {
        unsetOrderDeleteState();
      } else {
        setOrderDeleteState((Integer)value);
      }
      break;
    case EXCHANGE_SCORE:
      if (value == null) {
        unsetExchangeScore();
      } else {
        setExchangeScore((Integer)value);
      }
      break;
    case EXCHANGE_CASH:
      if (value == null) {
        unsetExchangeCash();
      } else {
        setExchangeCash((String)value);
      }
      break;
    case ORDER_BATCH:
      if (value == null) {
        unsetOrderBatch();
      } else {
        setOrderBatch((String)value);
      }
      break;
    case ACTIVE_STATE:
      if (value == null) {
        unsetActiveState();
      } else {
        setActiveState((Integer)value);
      }
      break;
    case PRODUCT_LIST:
      if (value == null) {
        unsetProductList();
      } else {
        setProductList((List<OrderInfo>)value);
      }
      break;
    case THIRD_SCORE:
      if (value == null) {
        unsetThirdScore();
      } else {
        setThirdScore((Integer)value);
      }
      break;
    case POSTAGE_EXT:
      if (value == null) {
        unsetPostageExt();
      } else {
        setPostageExt((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();
    case TRADE_CODE:
      return getTradeCode();
    case USER_ID:
      return new Integer(getUserId());
    case USER_NAME:
      return getUserName();
    case CREATE_TIME:
      return getCreateTime();
    case CANCEL_TIME:
      return getCancelTime();
    case PAY_INFO:
      return getPayInfo();
    case SELLER_ID:
      return new Integer(getSellerId());
    case SELLER_NAME:
      return getSellerName();
    case CLOSING_PRICE:
      return getClosingPrice();
    case THIRD_ID:
      return getThirdId();
    case DELIVER_INFO:
      return getDeliverInfo();
    case ORDER_STATE:
      return new Integer(getOrderState());
    case SELLER_COMMENT:
      return getSellerComment();
    case BUYER_COMMENT:
      return getBuyerComment();
    case LAST_UPDATE_TIME:
      return getLastUpdateTime();
    case LAST_UPDATE_USER_ID:
      return new Integer(getLastUpdateUserId());
    case CREATE_USER_ID:
      return new Integer(getCreateUserId());
    case DELIVER_TIME:
      return getDeliverTime();
    case SUCCESS_TIME:
      return getSuccessTime();
    case SETTLEMENT_STATE:
      return new Integer(getSettlementState());
    case POSTAGE:
      return getPostage();
    case ORDER_STATE_TYPE:
      return getOrderStateType();
    case ORDER_STATE_TYPE_DESC:
      return getOrderStateTypeDesc();
    case SETTLEMENT_TIME:
      return getSettlementTime();
    case ORDER_TAG:
      return new Integer(getOrderTag());
    case WI:
      return getWi();
    case FROM_SOURCE:
      return new Integer(getFromSource());
    case TRADE_PAY_ID:
      return getTradePayId();
    case ORDER_DELETE_STATE:
      return new Integer(getOrderDeleteState());
    case EXCHANGE_SCORE:
      return new Integer(getExchangeScore());
    case EXCHANGE_CASH:
      return getExchangeCash();
    case ORDER_BATCH:
      return getOrderBatch();
    case ACTIVE_STATE:
      return new Integer(getActiveState());
    case PRODUCT_LIST:
      return getProductList();
    case THIRD_SCORE:
      return new Integer(getThirdScore());
    case POSTAGE_EXT:
      return getPostageExt();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case TRADE_CODE:
      return isSetTradeCode();
    case USER_ID:
      return isSetUserId();
    case USER_NAME:
      return isSetUserName();
    case CREATE_TIME:
      return isSetCreateTime();
    case CANCEL_TIME:
      return isSetCancelTime();
    case PAY_INFO:
      return isSetPayInfo();
    case SELLER_ID:
      return isSetSellerId();
    case SELLER_NAME:
      return isSetSellerName();
    case CLOSING_PRICE:
      return isSetClosingPrice();
    case THIRD_ID:
      return isSetThirdId();
    case DELIVER_INFO:
      return isSetDeliverInfo();
    case ORDER_STATE:
      return isSetOrderState();
    case SELLER_COMMENT:
      return isSetSellerComment();
    case BUYER_COMMENT:
      return isSetBuyerComment();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case LAST_UPDATE_USER_ID:
      return isSetLastUpdateUserId();
    case CREATE_USER_ID:
      return isSetCreateUserId();
    case DELIVER_TIME:
      return isSetDeliverTime();
    case SUCCESS_TIME:
      return isSetSuccessTime();
    case SETTLEMENT_STATE:
      return isSetSettlementState();
    case POSTAGE:
      return isSetPostage();
    case ORDER_STATE_TYPE:
      return isSetOrderStateType();
    case ORDER_STATE_TYPE_DESC:
      return isSetOrderStateTypeDesc();
    case SETTLEMENT_TIME:
      return isSetSettlementTime();
    case ORDER_TAG:
      return isSetOrderTag();
    case WI:
      return isSetWi();
    case FROM_SOURCE:
      return isSetFromSource();
    case TRADE_PAY_ID:
      return isSetTradePayId();
    case ORDER_DELETE_STATE:
      return isSetOrderDeleteState();
    case EXCHANGE_SCORE:
      return isSetExchangeScore();
    case EXCHANGE_CASH:
      return isSetExchangeCash();
    case ORDER_BATCH:
      return isSetOrderBatch();
    case ACTIVE_STATE:
      return isSetActiveState();
    case PRODUCT_LIST:
      return isSetProductList();
    case THIRD_SCORE:
      return isSetThirdScore();
    case POSTAGE_EXT:
      return isSetPostageExt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Order)
      return this.equals((Order)that);
    return false;
  }

  public boolean equals(Order that) {
    if (that == null)
      return false;
    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }
    boolean this_present_tradeCode = true && this.isSetTradeCode();
    boolean that_present_tradeCode = true && that.isSetTradeCode();
    if (this_present_tradeCode || that_present_tradeCode) {
      if (!(this_present_tradeCode && that_present_tradeCode))
        return false;
      if (!this.tradeCode.equals(that.tradeCode))
        return false;
    }
    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }
    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }
    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }
    boolean this_present_cancelTime = true && this.isSetCancelTime();
    boolean that_present_cancelTime = true && that.isSetCancelTime();
    if (this_present_cancelTime || that_present_cancelTime) {
      if (!(this_present_cancelTime && that_present_cancelTime))
        return false;
      if (!this.cancelTime.equals(that.cancelTime))
        return false;
    }
    boolean this_present_payInfo = true && this.isSetPayInfo();
    boolean that_present_payInfo = true && that.isSetPayInfo();
    if (this_present_payInfo || that_present_payInfo) {
      if (!(this_present_payInfo && that_present_payInfo))
        return false;
      if (!this.payInfo.equals(that.payInfo))
        return false;
    }
    boolean this_present_sellerId = true;
    boolean that_present_sellerId = true;
    if (this_present_sellerId || that_present_sellerId) {
      if (!(this_present_sellerId && that_present_sellerId))
        return false;
      if (this.sellerId != that.sellerId)
        return false;
    }
    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }
    boolean this_present_closingPrice = true && this.isSetClosingPrice();
    boolean that_present_closingPrice = true && that.isSetClosingPrice();
    if (this_present_closingPrice || that_present_closingPrice) {
      if (!(this_present_closingPrice && that_present_closingPrice))
        return false;
      if (!this.closingPrice.equals(that.closingPrice))
        return false;
    }
    boolean this_present_thirdId = true && this.isSetThirdId();
    boolean that_present_thirdId = true && that.isSetThirdId();
    if (this_present_thirdId || that_present_thirdId) {
      if (!(this_present_thirdId && that_present_thirdId))
        return false;
      if (!this.thirdId.equals(that.thirdId))
        return false;
    }
    boolean this_present_deliverInfo = true && this.isSetDeliverInfo();
    boolean that_present_deliverInfo = true && that.isSetDeliverInfo();
    if (this_present_deliverInfo || that_present_deliverInfo) {
      if (!(this_present_deliverInfo && that_present_deliverInfo))
        return false;
      if (!this.deliverInfo.equals(that.deliverInfo))
        return false;
    }
    boolean this_present_orderState = true;
    boolean that_present_orderState = true;
    if (this_present_orderState || that_present_orderState) {
      if (!(this_present_orderState && that_present_orderState))
        return false;
      if (this.orderState != that.orderState)
        return false;
    }
    boolean this_present_sellerComment = true && this.isSetSellerComment();
    boolean that_present_sellerComment = true && that.isSetSellerComment();
    if (this_present_sellerComment || that_present_sellerComment) {
      if (!(this_present_sellerComment && that_present_sellerComment))
        return false;
      if (!this.sellerComment.equals(that.sellerComment))
        return false;
    }
    boolean this_present_buyerComment = true && this.isSetBuyerComment();
    boolean that_present_buyerComment = true && that.isSetBuyerComment();
    if (this_present_buyerComment || that_present_buyerComment) {
      if (!(this_present_buyerComment && that_present_buyerComment))
        return false;
      if (!this.buyerComment.equals(that.buyerComment))
        return false;
    }
    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }
    boolean this_present_lastUpdateUserId = true && this.isSetLastUpdateUserId();
    boolean that_present_lastUpdateUserId = true && that.isSetLastUpdateUserId();
    if (this_present_lastUpdateUserId || that_present_lastUpdateUserId) {
      if (!(this_present_lastUpdateUserId && that_present_lastUpdateUserId))
        return false;
      if (this.lastUpdateUserId != that.lastUpdateUserId)
        return false;
    }
    boolean this_present_createUserId = true && this.isSetCreateUserId();
    boolean that_present_createUserId = true && that.isSetCreateUserId();
    if (this_present_createUserId || that_present_createUserId) {
      if (!(this_present_createUserId && that_present_createUserId))
        return false;
      if (this.createUserId != that.createUserId)
        return false;
    }
    boolean this_present_deliverTime = true && this.isSetDeliverTime();
    boolean that_present_deliverTime = true && that.isSetDeliverTime();
    if (this_present_deliverTime || that_present_deliverTime) {
      if (!(this_present_deliverTime && that_present_deliverTime))
        return false;
      if (!this.deliverTime.equals(that.deliverTime))
        return false;
    }
    boolean this_present_successTime = true && this.isSetSuccessTime();
    boolean that_present_successTime = true && that.isSetSuccessTime();
    if (this_present_successTime || that_present_successTime) {
      if (!(this_present_successTime && that_present_successTime))
        return false;
      if (!this.successTime.equals(that.successTime))
        return false;
    }
    boolean this_present_settlementState = true && this.isSetSettlementState();
    boolean that_present_settlementState = true && that.isSetSettlementState();
    if (this_present_settlementState || that_present_settlementState) {
      if (!(this_present_settlementState && that_present_settlementState))
        return false;
      if (this.settlementState != that.settlementState)
        return false;
    }
    boolean this_present_postage = true && this.isSetPostage();
    boolean that_present_postage = true && that.isSetPostage();
    if (this_present_postage || that_present_postage) {
      if (!(this_present_postage && that_present_postage))
        return false;
      if (!this.postage.equals(that.postage))
        return false;
    }
    boolean this_present_orderStateType = true && this.isSetOrderStateType();
    boolean that_present_orderStateType = true && that.isSetOrderStateType();
    if (this_present_orderStateType || that_present_orderStateType) {
      if (!(this_present_orderStateType && that_present_orderStateType))
        return false;
      if (!this.orderStateType.equals(that.orderStateType))
        return false;
    }
    boolean this_present_orderStateTypeDesc = true && this.isSetOrderStateTypeDesc();
    boolean that_present_orderStateTypeDesc = true && that.isSetOrderStateTypeDesc();
    if (this_present_orderStateTypeDesc || that_present_orderStateTypeDesc) {
      if (!(this_present_orderStateTypeDesc && that_present_orderStateTypeDesc))
        return false;
      if (!this.orderStateTypeDesc.equals(that.orderStateTypeDesc))
        return false;
    }
    boolean this_present_settlementTime = true && this.isSetSettlementTime();
    boolean that_present_settlementTime = true && that.isSetSettlementTime();
    if (this_present_settlementTime || that_present_settlementTime) {
      if (!(this_present_settlementTime && that_present_settlementTime))
        return false;
      if (!this.settlementTime.equals(that.settlementTime))
        return false;
    }
    boolean this_present_orderTag = true && this.isSetOrderTag();
    boolean that_present_orderTag = true && that.isSetOrderTag();
    if (this_present_orderTag || that_present_orderTag) {
      if (!(this_present_orderTag && that_present_orderTag))
        return false;
      if (this.orderTag != that.orderTag)
        return false;
    }
    boolean this_present_wi = true && this.isSetWi();
    boolean that_present_wi = true && that.isSetWi();
    if (this_present_wi || that_present_wi) {
      if (!(this_present_wi && that_present_wi))
        return false;
      if (!this.wi.equals(that.wi))
        return false;
    }
    boolean this_present_fromSource = true;
    boolean that_present_fromSource = true;
    if (this_present_fromSource || that_present_fromSource) {
      if (!(this_present_fromSource && that_present_fromSource))
        return false;
      if (this.fromSource != that.fromSource)
        return false;
    }
    boolean this_present_tradePayId = true && this.isSetTradePayId();
    boolean that_present_tradePayId = true && that.isSetTradePayId();
    if (this_present_tradePayId || that_present_tradePayId) {
      if (!(this_present_tradePayId && that_present_tradePayId))
        return false;
      if (!this.tradePayId.equals(that.tradePayId))
        return false;
    }
    boolean this_present_orderDeleteState = true && this.isSetOrderDeleteState();
    boolean that_present_orderDeleteState = true && that.isSetOrderDeleteState();
    if (this_present_orderDeleteState || that_present_orderDeleteState) {
      if (!(this_present_orderDeleteState && that_present_orderDeleteState))
        return false;
      if (this.orderDeleteState != that.orderDeleteState)
        return false;
    }
    boolean this_present_exchangeScore = true && this.isSetExchangeScore();
    boolean that_present_exchangeScore = true && that.isSetExchangeScore();
    if (this_present_exchangeScore || that_present_exchangeScore) {
      if (!(this_present_exchangeScore && that_present_exchangeScore))
        return false;
      if (this.exchangeScore != that.exchangeScore)
        return false;
    }
    boolean this_present_exchangeCash = true && this.isSetExchangeCash();
    boolean that_present_exchangeCash = true && that.isSetExchangeCash();
    if (this_present_exchangeCash || that_present_exchangeCash) {
      if (!(this_present_exchangeCash && that_present_exchangeCash))
        return false;
      if (!this.exchangeCash.equals(that.exchangeCash))
        return false;
    }
    boolean this_present_orderBatch = true && this.isSetOrderBatch();
    boolean that_present_orderBatch = true && that.isSetOrderBatch();
    if (this_present_orderBatch || that_present_orderBatch) {
      if (!(this_present_orderBatch && that_present_orderBatch))
        return false;
      if (!this.orderBatch.equals(that.orderBatch))
        return false;
    }
    boolean this_present_activeState = true && this.isSetActiveState();
    boolean that_present_activeState = true && that.isSetActiveState();
    if (this_present_activeState || that_present_activeState) {
      if (!(this_present_activeState && that_present_activeState))
        return false;
      if (this.activeState != that.activeState)
        return false;
    }
    boolean this_present_productList = true && this.isSetProductList();
    boolean that_present_productList = true && that.isSetProductList();
    if (this_present_productList || that_present_productList) {
      if (!(this_present_productList && that_present_productList))
        return false;
      if (!this.productList.equals(that.productList))
        return false;
    }
    boolean this_present_thirdScore = true && this.isSetThirdScore();
    boolean that_present_thirdScore = true && that.isSetThirdScore();
    if (this_present_thirdScore || that_present_thirdScore) {
      if (!(this_present_thirdScore && that_present_thirdScore))
        return false;
      if (this.thirdScore != that.thirdScore)
        return false;
    }
    boolean this_present_postageExt = true && this.isSetPostageExt();
    boolean that_present_postageExt = true && that.isSetPostageExt();
    if (this_present_postageExt || that_present_postageExt) {
      if (!(this_present_postageExt && that_present_postageExt))
        return false;
      if (!this.postageExt.equals(that.postageExt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_orderId = true && (isSetOrderId());
    builder.append(present_orderId);
    if (present_orderId)
      builder.append(orderId);
    boolean present_tradeCode = true && (isSetTradeCode());
    builder.append(present_tradeCode);
    if (present_tradeCode)
      builder.append(tradeCode);
    boolean present_userId = true;
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);
    boolean present_userName = true && (isSetUserName());
    builder.append(present_userName);
    if (present_userName)
      builder.append(userName);
    boolean present_createTime = true && (isSetCreateTime());
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);
    boolean present_cancelTime = true && (isSetCancelTime());
    builder.append(present_cancelTime);
    if (present_cancelTime)
      builder.append(cancelTime);
    boolean present_payInfo = true && (isSetPayInfo());
    builder.append(present_payInfo);
    if (present_payInfo)
      builder.append(payInfo);
    boolean present_sellerId = true;
    builder.append(present_sellerId);
    if (present_sellerId)
      builder.append(sellerId);
    boolean present_sellerName = true && (isSetSellerName());
    builder.append(present_sellerName);
    if (present_sellerName)
      builder.append(sellerName);
    boolean present_closingPrice = true && (isSetClosingPrice());
    builder.append(present_closingPrice);
    if (present_closingPrice)
      builder.append(closingPrice);
    boolean present_thirdId = true && (isSetThirdId());
    builder.append(present_thirdId);
    if (present_thirdId)
      builder.append(thirdId);
    boolean present_deliverInfo = true && (isSetDeliverInfo());
    builder.append(present_deliverInfo);
    if (present_deliverInfo)
      builder.append(deliverInfo);
    boolean present_orderState = true;
    builder.append(present_orderState);
    if (present_orderState)
      builder.append(orderState);
    boolean present_sellerComment = true && (isSetSellerComment());
    builder.append(present_sellerComment);
    if (present_sellerComment)
      builder.append(sellerComment);
    boolean present_buyerComment = true && (isSetBuyerComment());
    builder.append(present_buyerComment);
    if (present_buyerComment)
      builder.append(buyerComment);
    boolean present_lastUpdateTime = true && (isSetLastUpdateTime());
    builder.append(present_lastUpdateTime);
    if (present_lastUpdateTime)
      builder.append(lastUpdateTime);
    boolean present_lastUpdateUserId = true && (isSetLastUpdateUserId());
    builder.append(present_lastUpdateUserId);
    if (present_lastUpdateUserId)
      builder.append(lastUpdateUserId);
    boolean present_createUserId = true && (isSetCreateUserId());
    builder.append(present_createUserId);
    if (present_createUserId)
      builder.append(createUserId);
    boolean present_deliverTime = true && (isSetDeliverTime());
    builder.append(present_deliverTime);
    if (present_deliverTime)
      builder.append(deliverTime);
    boolean present_successTime = true && (isSetSuccessTime());
    builder.append(present_successTime);
    if (present_successTime)
      builder.append(successTime);
    boolean present_settlementState = true && (isSetSettlementState());
    builder.append(present_settlementState);
    if (present_settlementState)
      builder.append(settlementState);
    boolean present_postage = true && (isSetPostage());
    builder.append(present_postage);
    if (present_postage)
      builder.append(postage);
    boolean present_orderStateType = true && (isSetOrderStateType());
    builder.append(present_orderStateType);
    if (present_orderStateType)
      builder.append(orderStateType.getValue());
    boolean present_orderStateTypeDesc = true && (isSetOrderStateTypeDesc());
    builder.append(present_orderStateTypeDesc);
    if (present_orderStateTypeDesc)
      builder.append(orderStateTypeDesc.getValue());
    boolean present_settlementTime = true && (isSetSettlementTime());
    builder.append(present_settlementTime);
    if (present_settlementTime)
      builder.append(settlementTime);
    boolean present_orderTag = true && (isSetOrderTag());
    builder.append(present_orderTag);
    if (present_orderTag)
      builder.append(orderTag);
    boolean present_wi = true && (isSetWi());
    builder.append(present_wi);
    if (present_wi)
      builder.append(wi);
    boolean present_fromSource = true;
    builder.append(present_fromSource);
    if (present_fromSource)
      builder.append(fromSource);
    boolean present_tradePayId = true && (isSetTradePayId());
    builder.append(present_tradePayId);
    if (present_tradePayId)
      builder.append(tradePayId);
    boolean present_orderDeleteState = true && (isSetOrderDeleteState());
    builder.append(present_orderDeleteState);
    if (present_orderDeleteState)
      builder.append(orderDeleteState);
    boolean present_exchangeScore = true && (isSetExchangeScore());
    builder.append(present_exchangeScore);
    if (present_exchangeScore)
      builder.append(exchangeScore);
    boolean present_exchangeCash = true && (isSetExchangeCash());
    builder.append(present_exchangeCash);
    if (present_exchangeCash)
      builder.append(exchangeCash);
    boolean present_orderBatch = true && (isSetOrderBatch());
    builder.append(present_orderBatch);
    if (present_orderBatch)
      builder.append(orderBatch);
    boolean present_activeState = true && (isSetActiveState());
    builder.append(present_activeState);
    if (present_activeState)
      builder.append(activeState);
    boolean present_productList = true && (isSetProductList());
    builder.append(present_productList);
    if (present_productList)
      builder.append(productList);
    boolean present_thirdScore = true && (isSetThirdScore());
    builder.append(present_thirdScore);
    if (present_thirdScore)
      builder.append(thirdScore);
    boolean present_postageExt = true && (isSetPostageExt());
    builder.append(present_postageExt);
    if (present_postageExt)
      builder.append(postageExt);
    return builder.toHashCode();
  }

  public int compareTo(Order other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Order typedOther = (Order)other;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeCode()).compareTo(typedOther.isSetTradeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeCode()) {
      lastComparison = TBaseHelper.compareTo(this.tradeCode, typedOther.tradeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = TBaseHelper.compareTo(this.userName, typedOther.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelTime()).compareTo(typedOther.isSetCancelTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelTime()) {
      lastComparison = TBaseHelper.compareTo(this.cancelTime, typedOther.cancelTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayInfo()).compareTo(typedOther.isSetPayInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayInfo()) {
      lastComparison = TBaseHelper.compareTo(this.payInfo, typedOther.payInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerId()).compareTo(typedOther.isSetSellerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerId()) {
      lastComparison = TBaseHelper.compareTo(this.sellerId, typedOther.sellerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(typedOther.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = TBaseHelper.compareTo(this.sellerName, typedOther.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClosingPrice()).compareTo(typedOther.isSetClosingPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClosingPrice()) {
      lastComparison = TBaseHelper.compareTo(this.closingPrice, typedOther.closingPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdId()).compareTo(typedOther.isSetThirdId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdId()) {
      lastComparison = TBaseHelper.compareTo(this.thirdId, typedOther.thirdId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliverInfo()).compareTo(typedOther.isSetDeliverInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliverInfo()) {
      lastComparison = TBaseHelper.compareTo(this.deliverInfo, typedOther.deliverInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderState()).compareTo(typedOther.isSetOrderState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderState()) {
      lastComparison = TBaseHelper.compareTo(this.orderState, typedOther.orderState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerComment()).compareTo(typedOther.isSetSellerComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerComment()) {
      lastComparison = TBaseHelper.compareTo(this.sellerComment, typedOther.sellerComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerComment()).compareTo(typedOther.isSetBuyerComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerComment()) {
      lastComparison = TBaseHelper.compareTo(this.buyerComment, typedOther.buyerComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(typedOther.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = TBaseHelper.compareTo(this.lastUpdateTime, typedOther.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateUserId()).compareTo(typedOther.isSetLastUpdateUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateUserId()) {
      lastComparison = TBaseHelper.compareTo(this.lastUpdateUserId, typedOther.lastUpdateUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateUserId()).compareTo(typedOther.isSetCreateUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateUserId()) {
      lastComparison = TBaseHelper.compareTo(this.createUserId, typedOther.createUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliverTime()).compareTo(typedOther.isSetDeliverTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliverTime()) {
      lastComparison = TBaseHelper.compareTo(this.deliverTime, typedOther.deliverTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessTime()).compareTo(typedOther.isSetSuccessTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessTime()) {
      lastComparison = TBaseHelper.compareTo(this.successTime, typedOther.successTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementState()).compareTo(typedOther.isSetSettlementState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementState()) {
      lastComparison = TBaseHelper.compareTo(this.settlementState, typedOther.settlementState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostage()).compareTo(typedOther.isSetPostage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostage()) {
      lastComparison = TBaseHelper.compareTo(this.postage, typedOther.postage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStateType()).compareTo(typedOther.isSetOrderStateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStateType()) {
      lastComparison = TBaseHelper.compareTo(this.orderStateType, typedOther.orderStateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStateTypeDesc()).compareTo(typedOther.isSetOrderStateTypeDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStateTypeDesc()) {
      lastComparison = TBaseHelper.compareTo(this.orderStateTypeDesc, typedOther.orderStateTypeDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementTime()).compareTo(typedOther.isSetSettlementTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementTime()) {
      lastComparison = TBaseHelper.compareTo(this.settlementTime, typedOther.settlementTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderTag()).compareTo(typedOther.isSetOrderTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderTag()) {
      lastComparison = TBaseHelper.compareTo(this.orderTag, typedOther.orderTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWi()).compareTo(typedOther.isSetWi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWi()) {
      lastComparison = TBaseHelper.compareTo(this.wi, typedOther.wi);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromSource()).compareTo(typedOther.isSetFromSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromSource()) {
      lastComparison = TBaseHelper.compareTo(this.fromSource, typedOther.fromSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradePayId()).compareTo(typedOther.isSetTradePayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradePayId()) {
      lastComparison = TBaseHelper.compareTo(this.tradePayId, typedOther.tradePayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderDeleteState()).compareTo(typedOther.isSetOrderDeleteState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderDeleteState()) {
      lastComparison = TBaseHelper.compareTo(this.orderDeleteState, typedOther.orderDeleteState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeScore()).compareTo(typedOther.isSetExchangeScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeScore()) {
      lastComparison = TBaseHelper.compareTo(this.exchangeScore, typedOther.exchangeScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeCash()).compareTo(typedOther.isSetExchangeCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeCash()) {
      lastComparison = TBaseHelper.compareTo(this.exchangeCash, typedOther.exchangeCash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderBatch()).compareTo(typedOther.isSetOrderBatch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderBatch()) {
      lastComparison = TBaseHelper.compareTo(this.orderBatch, typedOther.orderBatch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveState()).compareTo(typedOther.isSetActiveState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveState()) {
      lastComparison = TBaseHelper.compareTo(this.activeState, typedOther.activeState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductList()).compareTo(typedOther.isSetProductList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductList()) {
      lastComparison = TBaseHelper.compareTo(this.productList, typedOther.productList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdScore()).compareTo(typedOther.isSetThirdScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdScore()) {
      lastComparison = TBaseHelper.compareTo(this.thirdScore, typedOther.thirdScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostageExt()).compareTo(typedOther.isSetPostageExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostageExt()) {
      lastComparison = TBaseHelper.compareTo(this.postageExt, typedOther.postageExt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ORDER_ID
          if (field.type == TType.STRING) {
            this.orderId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TRADE_CODE
          if (field.type == TType.STRING) {
            this.tradeCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // USER_ID
          if (field.type == TType.I32) {
            this.userId = iprot.readI32();
            setUserIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // USER_NAME
          if (field.type == TType.STRING) {
            this.userName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CREATE_TIME
          if (field.type == TType.STRING) {
            this.createTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // CANCEL_TIME
          if (field.type == TType.STRING) {
            this.cancelTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // PAY_INFO
          if (field.type == TType.STRUCT) {
            this.payInfo = new PayInfo();
            this.payInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // SELLER_ID
          if (field.type == TType.I32) {
            this.sellerId = iprot.readI32();
            setSellerIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // SELLER_NAME
          if (field.type == TType.STRING) {
            this.sellerName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // CLOSING_PRICE
          if (field.type == TType.STRING) {
            this.closingPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // THIRD_ID
          if (field.type == TType.STRING) {
            this.thirdId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // DELIVER_INFO
          if (field.type == TType.STRUCT) {
            this.deliverInfo = new DeliverInfo();
            this.deliverInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // ORDER_STATE
          if (field.type == TType.I32) {
            this.orderState = iprot.readI32();
            setOrderStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // SELLER_COMMENT
          if (field.type == TType.STRING) {
            this.sellerComment = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // BUYER_COMMENT
          if (field.type == TType.STRING) {
            this.buyerComment = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // LAST_UPDATE_TIME
          if (field.type == TType.STRING) {
            this.lastUpdateTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // LAST_UPDATE_USER_ID
          if (field.type == TType.I32) {
            this.lastUpdateUserId = iprot.readI32();
            setLastUpdateUserIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // CREATE_USER_ID
          if (field.type == TType.I32) {
            this.createUserId = iprot.readI32();
            setCreateUserIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 19: // DELIVER_TIME
          if (field.type == TType.STRING) {
            this.deliverTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // SUCCESS_TIME
          if (field.type == TType.STRING) {
            this.successTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 21: // SETTLEMENT_STATE
          if (field.type == TType.I32) {
            this.settlementState = iprot.readI32();
            setSettlementStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 22: // POSTAGE
          if (field.type == TType.STRING) {
            this.postage = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 23: // ORDER_STATE_TYPE
          if (field.type == TType.I32) {
            this.orderStateType = OrderStateType.findByValue(iprot.readI32());
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 24: // ORDER_STATE_TYPE_DESC
          if (field.type == TType.I32) {
            this.orderStateTypeDesc = OrderCancelReason.findByValue(iprot.readI32());
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 25: // SETTLEMENT_TIME
          if (field.type == TType.STRING) {
            this.settlementTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 26: // ORDER_TAG
          if (field.type == TType.I32) {
            this.orderTag = iprot.readI32();
            setOrderTagIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 27: // WI
          if (field.type == TType.STRING) {
            this.wi = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 28: // FROM_SOURCE
          if (field.type == TType.I32) {
            this.fromSource = iprot.readI32();
            setFromSourceIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 29: // TRADE_PAY_ID
          if (field.type == TType.STRING) {
            this.tradePayId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 30: // ORDER_DELETE_STATE
          if (field.type == TType.I32) {
            this.orderDeleteState = iprot.readI32();
            setOrderDeleteStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 31: // EXCHANGE_SCORE
          if (field.type == TType.I32) {
            this.exchangeScore = iprot.readI32();
            setExchangeScoreIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 32: // EXCHANGE_CASH
          if (field.type == TType.STRING) {
            this.exchangeCash = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 33: // ORDER_BATCH
          if (field.type == TType.STRING) {
            this.orderBatch = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 34: // ACTIVE_STATE
          if (field.type == TType.I32) {
            this.activeState = iprot.readI32();
            setActiveStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 35: // PRODUCT_LIST
          if (field.type == TType.LIST) {
            {
            TList _list0 = iprot.readListBegin();
            this.productList = new ArrayList<OrderInfo>(_list0.size);
            for (int _i1 = 0; _i1 < _list0.size; ++_i1)
            {
              OrderInfo _elem2;
              _elem2 = new OrderInfo();
              _elem2.read(iprot);
              this.productList.add(_elem2);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 36: // THIRD_SCORE
          if (field.type == TType.I32) {
            this.thirdScore = iprot.readI32();
            setThirdScoreIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 37: // POSTAGE_EXT
          if (field.type == TType.STRING) {
            this.postageExt = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.orderId != null) {
      oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
      oprot.writeString(this.orderId);
      oprot.writeFieldEnd();
    }
    if (this.tradeCode != null) {
      oprot.writeFieldBegin(TRADE_CODE_FIELD_DESC);
      oprot.writeString(this.tradeCode);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(USER_ID_FIELD_DESC);
    oprot.writeI32(this.userId);
    oprot.writeFieldEnd();
    if (this.userName != null) {
      oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
      oprot.writeString(this.userName);
      oprot.writeFieldEnd();
    }
    if (this.createTime != null) {
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeString(this.createTime);
      oprot.writeFieldEnd();
    }
    if (this.cancelTime != null) {
      oprot.writeFieldBegin(CANCEL_TIME_FIELD_DESC);
      oprot.writeString(this.cancelTime);
      oprot.writeFieldEnd();
    }
    if (this.payInfo != null) {
      oprot.writeFieldBegin(PAY_INFO_FIELD_DESC);
      this.payInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SELLER_ID_FIELD_DESC);
    oprot.writeI32(this.sellerId);
    oprot.writeFieldEnd();
    if (this.sellerName != null) {
      oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
      oprot.writeString(this.sellerName);
      oprot.writeFieldEnd();
    }
    if (this.closingPrice != null) {
      oprot.writeFieldBegin(CLOSING_PRICE_FIELD_DESC);
      oprot.writeString(this.closingPrice);
      oprot.writeFieldEnd();
    }
    if (this.thirdId != null) {
      oprot.writeFieldBegin(THIRD_ID_FIELD_DESC);
      oprot.writeString(this.thirdId);
      oprot.writeFieldEnd();
    }
    if (this.deliverInfo != null) {
      oprot.writeFieldBegin(DELIVER_INFO_FIELD_DESC);
      this.deliverInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ORDER_STATE_FIELD_DESC);
    oprot.writeI32(this.orderState);
    oprot.writeFieldEnd();
    if (this.sellerComment != null) {
      if (isSetSellerComment()) {
        oprot.writeFieldBegin(SELLER_COMMENT_FIELD_DESC);
        oprot.writeString(this.sellerComment);
        oprot.writeFieldEnd();
      }
    }
    if (this.buyerComment != null) {
      if (isSetBuyerComment()) {
        oprot.writeFieldBegin(BUYER_COMMENT_FIELD_DESC);
        oprot.writeString(this.buyerComment);
        oprot.writeFieldEnd();
      }
    }
    if (this.lastUpdateTime != null) {
      if (isSetLastUpdateTime()) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(this.lastUpdateTime);
        oprot.writeFieldEnd();
      }
    }
    if (isSetLastUpdateUserId()) {
      oprot.writeFieldBegin(LAST_UPDATE_USER_ID_FIELD_DESC);
      oprot.writeI32(this.lastUpdateUserId);
      oprot.writeFieldEnd();
    }
    if (isSetCreateUserId()) {
      oprot.writeFieldBegin(CREATE_USER_ID_FIELD_DESC);
      oprot.writeI32(this.createUserId);
      oprot.writeFieldEnd();
    }
    if (this.deliverTime != null) {
      if (isSetDeliverTime()) {
        oprot.writeFieldBegin(DELIVER_TIME_FIELD_DESC);
        oprot.writeString(this.deliverTime);
        oprot.writeFieldEnd();
      }
    }
    if (this.successTime != null) {
      if (isSetSuccessTime()) {
        oprot.writeFieldBegin(SUCCESS_TIME_FIELD_DESC);
        oprot.writeString(this.successTime);
        oprot.writeFieldEnd();
      }
    }
    if (isSetSettlementState()) {
      oprot.writeFieldBegin(SETTLEMENT_STATE_FIELD_DESC);
      oprot.writeI32(this.settlementState);
      oprot.writeFieldEnd();
    }
    if (this.postage != null) {
      oprot.writeFieldBegin(POSTAGE_FIELD_DESC);
      oprot.writeString(this.postage);
      oprot.writeFieldEnd();
    }
    if (this.orderStateType != null) {
      if (isSetOrderStateType()) {
        oprot.writeFieldBegin(ORDER_STATE_TYPE_FIELD_DESC);
        oprot.writeI32(this.orderStateType.getValue());
        oprot.writeFieldEnd();
      }
    }
    if (this.orderStateTypeDesc != null) {
      if (isSetOrderStateTypeDesc()) {
        oprot.writeFieldBegin(ORDER_STATE_TYPE_DESC_FIELD_DESC);
        oprot.writeI32(this.orderStateTypeDesc.getValue());
        oprot.writeFieldEnd();
      }
    }
    if (this.settlementTime != null) {
      if (isSetSettlementTime()) {
        oprot.writeFieldBegin(SETTLEMENT_TIME_FIELD_DESC);
        oprot.writeString(this.settlementTime);
        oprot.writeFieldEnd();
      }
    }
    if (isSetOrderTag()) {
      oprot.writeFieldBegin(ORDER_TAG_FIELD_DESC);
      oprot.writeI32(this.orderTag);
      oprot.writeFieldEnd();
    }
    if (this.wi != null) {
      oprot.writeFieldBegin(WI_FIELD_DESC);
      oprot.writeString(this.wi);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(FROM_SOURCE_FIELD_DESC);
    oprot.writeI32(this.fromSource);
    oprot.writeFieldEnd();
    if (this.tradePayId != null) {
      oprot.writeFieldBegin(TRADE_PAY_ID_FIELD_DESC);
      oprot.writeString(this.tradePayId);
      oprot.writeFieldEnd();
    }
    if (isSetOrderDeleteState()) {
      oprot.writeFieldBegin(ORDER_DELETE_STATE_FIELD_DESC);
      oprot.writeI32(this.orderDeleteState);
      oprot.writeFieldEnd();
    }
    if (isSetExchangeScore()) {
      oprot.writeFieldBegin(EXCHANGE_SCORE_FIELD_DESC);
      oprot.writeI32(this.exchangeScore);
      oprot.writeFieldEnd();
    }
    if (this.exchangeCash != null) {
      if (isSetExchangeCash()) {
        oprot.writeFieldBegin(EXCHANGE_CASH_FIELD_DESC);
        oprot.writeString(this.exchangeCash);
        oprot.writeFieldEnd();
      }
    }
    if (this.orderBatch != null) {
      if (isSetOrderBatch()) {
        oprot.writeFieldBegin(ORDER_BATCH_FIELD_DESC);
        oprot.writeString(this.orderBatch);
        oprot.writeFieldEnd();
      }
    }
    if (isSetActiveState()) {
      oprot.writeFieldBegin(ACTIVE_STATE_FIELD_DESC);
      oprot.writeI32(this.activeState);
      oprot.writeFieldEnd();
    }
    if (this.productList != null) {
      oprot.writeFieldBegin(PRODUCT_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.productList.size()));
        for (OrderInfo _iter3 : this.productList)
        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (isSetThirdScore()) {
      oprot.writeFieldBegin(THIRD_SCORE_FIELD_DESC);
      oprot.writeI32(this.thirdScore);
      oprot.writeFieldEnd();
    }
    if (this.postageExt != null) {
      if (isSetPostageExt()) {
        oprot.writeFieldBegin(POSTAGE_EXT_FIELD_DESC);
        oprot.writeString(this.postageExt);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Order(");
    boolean first = true;
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeCode:");
    if (this.tradeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelTime:");
    if (this.cancelTime == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payInfo:");
    if (this.payInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.payInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerId:");
    sb.append(this.sellerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("closingPrice:");
    if (this.closingPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.closingPrice);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdId:");
    if (this.thirdId == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliverInfo:");
    if (this.deliverInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.deliverInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderState:");
    sb.append(this.orderState);
    first = false;
    if (isSetSellerComment()) {
      if (!first) sb.append(", ");
      sb.append("sellerComment:");
      if (this.sellerComment == null) {
        sb.append("null");
      } else {
        sb.append(this.sellerComment);
      }
      first = false;
      }
    if (isSetBuyerComment()) {
      if (!first) sb.append(", ");
      sb.append("buyerComment:");
      if (this.buyerComment == null) {
        sb.append("null");
      } else {
        sb.append(this.buyerComment);
      }
      first = false;
      }
    if (isSetLastUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("lastUpdateTime:");
      if (this.lastUpdateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.lastUpdateTime);
      }
      first = false;
      }
    if (isSetLastUpdateUserId()) {
      if (!first) sb.append(", ");
      sb.append("lastUpdateUserId:");
      sb.append(this.lastUpdateUserId);
      first = false;
      }
    if (isSetCreateUserId()) {
      if (!first) sb.append(", ");
      sb.append("createUserId:");
      sb.append(this.createUserId);
      first = false;
      }
    if (isSetDeliverTime()) {
      if (!first) sb.append(", ");
      sb.append("deliverTime:");
      if (this.deliverTime == null) {
        sb.append("null");
      } else {
        sb.append(this.deliverTime);
      }
      first = false;
      }
    if (isSetSuccessTime()) {
      if (!first) sb.append(", ");
      sb.append("successTime:");
      if (this.successTime == null) {
        sb.append("null");
      } else {
        sb.append(this.successTime);
      }
      first = false;
      }
    if (isSetSettlementState()) {
      if (!first) sb.append(", ");
      sb.append("settlementState:");
      sb.append(this.settlementState);
      first = false;
      }
    if (!first) sb.append(", ");
    sb.append("postage:");
    if (this.postage == null) {
      sb.append("null");
    } else {
      sb.append(this.postage);
    }
    first = false;
    if (isSetOrderStateType()) {
      if (!first) sb.append(", ");
      sb.append("orderStateType:");
      if (this.orderStateType == null) {
        sb.append("null");
      } else {
        sb.append(this.orderStateType);
      }
      first = false;
      }
    if (isSetOrderStateTypeDesc()) {
      if (!first) sb.append(", ");
      sb.append("orderStateTypeDesc:");
      if (this.orderStateTypeDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.orderStateTypeDesc);
      }
      first = false;
      }
    if (isSetSettlementTime()) {
      if (!first) sb.append(", ");
      sb.append("settlementTime:");
      if (this.settlementTime == null) {
        sb.append("null");
      } else {
        sb.append(this.settlementTime);
      }
      first = false;
      }
    if (isSetOrderTag()) {
      if (!first) sb.append(", ");
      sb.append("orderTag:");
      sb.append(this.orderTag);
      first = false;
      }
    if (!first) sb.append(", ");
    sb.append("wi:");
    if (this.wi == null) {
      sb.append("null");
    } else {
      sb.append(this.wi);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromSource:");
    sb.append(this.fromSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradePayId:");
    if (this.tradePayId == null) {
      sb.append("null");
    } else {
      sb.append(this.tradePayId);
    }
    first = false;
    if (isSetOrderDeleteState()) {
      if (!first) sb.append(", ");
      sb.append("orderDeleteState:");
      sb.append(this.orderDeleteState);
      first = false;
      }
    if (isSetExchangeScore()) {
      if (!first) sb.append(", ");
      sb.append("exchangeScore:");
      sb.append(this.exchangeScore);
      first = false;
      }
    if (isSetExchangeCash()) {
      if (!first) sb.append(", ");
      sb.append("exchangeCash:");
      if (this.exchangeCash == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeCash);
      }
      first = false;
      }
    if (isSetOrderBatch()) {
      if (!first) sb.append(", ");
      sb.append("orderBatch:");
      if (this.orderBatch == null) {
        sb.append("null");
      } else {
        sb.append(this.orderBatch);
      }
      first = false;
      }
    if (isSetActiveState()) {
      if (!first) sb.append(", ");
      sb.append("activeState:");
      sb.append(this.activeState);
      first = false;
      }
    if (!first) sb.append(", ");
    sb.append("productList:");
    if (this.productList == null) {
      sb.append("null");
    } else {
      sb.append(this.productList);
    }
    first = false;
    if (isSetThirdScore()) {
      if (!first) sb.append(", ");
      sb.append("thirdScore:");
      sb.append(this.thirdScore);
      first = false;
      }
    if (isSetPostageExt()) {
      if (!first) sb.append(", ");
      sb.append("postageExt:");
      if (this.postageExt == null) {
        sb.append("null");
      } else {
        sb.append(this.postageExt);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
