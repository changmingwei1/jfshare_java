/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.product;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ProductSkuItem implements TBase<ProductSkuItem, ProductSkuItem._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ProductSkuItem");

  private static final TField SELLER_CLASS_NUM_FIELD_DESC = new TField("sellerClassNum", TType.STRING, (short)1);
  private static final TField SHELF_FIELD_DESC = new TField("shelf", TType.STRING, (short)2);
  private static final TField CUR_PRICE_FIELD_DESC = new TField("curPrice", TType.STRING, (short)3);
  private static final TField ORG_PRICE_FIELD_DESC = new TField("orgPrice", TType.STRING, (short)4);
  private static final TField V_PICTURE_FIELD_DESC = new TField("vPicture", TType.STRING, (short)5);


  public String sellerClassNum;
  public String shelf;
  public String curPrice;
  public String orgPrice;
  public String vPicture;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SELLER_CLASS_NUM((short)1, "sellerClassNum"),
    SHELF((short)2, "shelf"),
    CUR_PRICE((short)3, "curPrice"),
    ORG_PRICE((short)4, "orgPrice"),
    V_PICTURE((short)5, "vPicture");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SELLER_CLASS_NUM
  	return SELLER_CLASS_NUM;
        case 2: // SHELF
  	return SHELF;
        case 3: // CUR_PRICE
  	return CUR_PRICE;
        case 4: // ORG_PRICE
  	return ORG_PRICE;
        case 5: // V_PICTURE
  	return V_PICTURE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SELLER_CLASS_NUM, new FieldMetaData("sellerClassNum", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SHELF, new FieldMetaData("shelf", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CUR_PRICE, new FieldMetaData("curPrice", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ORG_PRICE, new FieldMetaData("orgPrice", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.V_PICTURE, new FieldMetaData("vPicture", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ProductSkuItem.class, metaDataMap);
  }


  public ProductSkuItem() {
  }


  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductSkuItem(ProductSkuItem other) {
    if (other.isSetSellerClassNum()) {
      this.sellerClassNum = other.sellerClassNum;
    }
    if (other.isSetShelf()) {
      this.shelf = other.shelf;
    }
    if (other.isSetCurPrice()) {
      this.curPrice = other.curPrice;
    }
    if (other.isSetOrgPrice()) {
      this.orgPrice = other.orgPrice;
    }
    if (other.isSetVPicture()) {
      this.vPicture = other.vPicture;
    }
  }

  public ProductSkuItem deepCopy() {
    return new ProductSkuItem(this);
  }

  @Override
  public void clear() {
    this.sellerClassNum = null;
    this.shelf = null;
    this.curPrice = null;
    this.orgPrice = null;
    this.vPicture = null;
  }

  public String getSellerClassNum() {
    return this.sellerClassNum;
  }

  public ProductSkuItem setSellerClassNum(String sellerClassNum) {
    this.sellerClassNum = sellerClassNum;
    
    return this;
  }

  public void unsetSellerClassNum() {
    this.sellerClassNum = null;
  }

  /** Returns true if field sellerClassNum is set (has been asigned a value) and false otherwise */
  public boolean isSetSellerClassNum() {
    return this.sellerClassNum != null;
  }

  public void setSellerClassNumIsSet(boolean value) {
    if (!value) {
      this.sellerClassNum = null;
    }
  }

  public String getShelf() {
    return this.shelf;
  }

  public ProductSkuItem setShelf(String shelf) {
    this.shelf = shelf;
    
    return this;
  }

  public void unsetShelf() {
    this.shelf = null;
  }

  /** Returns true if field shelf is set (has been asigned a value) and false otherwise */
  public boolean isSetShelf() {
    return this.shelf != null;
  }

  public void setShelfIsSet(boolean value) {
    if (!value) {
      this.shelf = null;
    }
  }

  public String getCurPrice() {
    return this.curPrice;
  }

  public ProductSkuItem setCurPrice(String curPrice) {
    this.curPrice = curPrice;
    
    return this;
  }

  public void unsetCurPrice() {
    this.curPrice = null;
  }

  /** Returns true if field curPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetCurPrice() {
    return this.curPrice != null;
  }

  public void setCurPriceIsSet(boolean value) {
    if (!value) {
      this.curPrice = null;
    }
  }

  public String getOrgPrice() {
    return this.orgPrice;
  }

  public ProductSkuItem setOrgPrice(String orgPrice) {
    this.orgPrice = orgPrice;
    
    return this;
  }

  public void unsetOrgPrice() {
    this.orgPrice = null;
  }

  /** Returns true if field orgPrice is set (has been asigned a value) and false otherwise */
  public boolean isSetOrgPrice() {
    return this.orgPrice != null;
  }

  public void setOrgPriceIsSet(boolean value) {
    if (!value) {
      this.orgPrice = null;
    }
  }

  public String getVPicture() {
    return this.vPicture;
  }

  public ProductSkuItem setVPicture(String vPicture) {
    this.vPicture = vPicture;
    
    return this;
  }

  public void unsetVPicture() {
    this.vPicture = null;
  }

  /** Returns true if field vPicture is set (has been asigned a value) and false otherwise */
  public boolean isSetVPicture() {
    return this.vPicture != null;
  }

  public void setVPictureIsSet(boolean value) {
    if (!value) {
      this.vPicture = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SELLER_CLASS_NUM:
      if (value == null) {
        unsetSellerClassNum();
      } else {
        setSellerClassNum((String)value);
      }
      break;
    case SHELF:
      if (value == null) {
        unsetShelf();
      } else {
        setShelf((String)value);
      }
      break;
    case CUR_PRICE:
      if (value == null) {
        unsetCurPrice();
      } else {
        setCurPrice((String)value);
      }
      break;
    case ORG_PRICE:
      if (value == null) {
        unsetOrgPrice();
      } else {
        setOrgPrice((String)value);
      }
      break;
    case V_PICTURE:
      if (value == null) {
        unsetVPicture();
      } else {
        setVPicture((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SELLER_CLASS_NUM:
      return getSellerClassNum();
    case SHELF:
      return getShelf();
    case CUR_PRICE:
      return getCurPrice();
    case ORG_PRICE:
      return getOrgPrice();
    case V_PICTURE:
      return getVPicture();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SELLER_CLASS_NUM:
      return isSetSellerClassNum();
    case SHELF:
      return isSetShelf();
    case CUR_PRICE:
      return isSetCurPrice();
    case ORG_PRICE:
      return isSetOrgPrice();
    case V_PICTURE:
      return isSetVPicture();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductSkuItem)
      return this.equals((ProductSkuItem)that);
    return false;
  }

  public boolean equals(ProductSkuItem that) {
    if (that == null)
      return false;
    boolean this_present_sellerClassNum = true && this.isSetSellerClassNum();
    boolean that_present_sellerClassNum = true && that.isSetSellerClassNum();
    if (this_present_sellerClassNum || that_present_sellerClassNum) {
      if (!(this_present_sellerClassNum && that_present_sellerClassNum))
        return false;
      if (!this.sellerClassNum.equals(that.sellerClassNum))
        return false;
    }
    boolean this_present_shelf = true && this.isSetShelf();
    boolean that_present_shelf = true && that.isSetShelf();
    if (this_present_shelf || that_present_shelf) {
      if (!(this_present_shelf && that_present_shelf))
        return false;
      if (!this.shelf.equals(that.shelf))
        return false;
    }
    boolean this_present_curPrice = true && this.isSetCurPrice();
    boolean that_present_curPrice = true && that.isSetCurPrice();
    if (this_present_curPrice || that_present_curPrice) {
      if (!(this_present_curPrice && that_present_curPrice))
        return false;
      if (!this.curPrice.equals(that.curPrice))
        return false;
    }
    boolean this_present_orgPrice = true && this.isSetOrgPrice();
    boolean that_present_orgPrice = true && that.isSetOrgPrice();
    if (this_present_orgPrice || that_present_orgPrice) {
      if (!(this_present_orgPrice && that_present_orgPrice))
        return false;
      if (!this.orgPrice.equals(that.orgPrice))
        return false;
    }
    boolean this_present_vPicture = true && this.isSetVPicture();
    boolean that_present_vPicture = true && that.isSetVPicture();
    if (this_present_vPicture || that_present_vPicture) {
      if (!(this_present_vPicture && that_present_vPicture))
        return false;
      if (!this.vPicture.equals(that.vPicture))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_sellerClassNum = true && (isSetSellerClassNum());
    builder.append(present_sellerClassNum);
    if (present_sellerClassNum)
      builder.append(sellerClassNum);
    boolean present_shelf = true && (isSetShelf());
    builder.append(present_shelf);
    if (present_shelf)
      builder.append(shelf);
    boolean present_curPrice = true && (isSetCurPrice());
    builder.append(present_curPrice);
    if (present_curPrice)
      builder.append(curPrice);
    boolean present_orgPrice = true && (isSetOrgPrice());
    builder.append(present_orgPrice);
    if (present_orgPrice)
      builder.append(orgPrice);
    boolean present_vPicture = true && (isSetVPicture());
    builder.append(present_vPicture);
    if (present_vPicture)
      builder.append(vPicture);
    return builder.toHashCode();
  }

  public int compareTo(ProductSkuItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ProductSkuItem typedOther = (ProductSkuItem)other;

    lastComparison = Boolean.valueOf(isSetSellerClassNum()).compareTo(typedOther.isSetSellerClassNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerClassNum()) {
      lastComparison = TBaseHelper.compareTo(this.sellerClassNum, typedOther.sellerClassNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShelf()).compareTo(typedOther.isSetShelf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShelf()) {
      lastComparison = TBaseHelper.compareTo(this.shelf, typedOther.shelf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurPrice()).compareTo(typedOther.isSetCurPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurPrice()) {
      lastComparison = TBaseHelper.compareTo(this.curPrice, typedOther.curPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgPrice()).compareTo(typedOther.isSetOrgPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgPrice()) {
      lastComparison = TBaseHelper.compareTo(this.orgPrice, typedOther.orgPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVPicture()).compareTo(typedOther.isSetVPicture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVPicture()) {
      lastComparison = TBaseHelper.compareTo(this.vPicture, typedOther.vPicture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // SELLER_CLASS_NUM
          if (field.type == TType.STRING) {
            this.sellerClassNum = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SHELF
          if (field.type == TType.STRING) {
            this.shelf = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CUR_PRICE
          if (field.type == TType.STRING) {
            this.curPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ORG_PRICE
          if (field.type == TType.STRING) {
            this.orgPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // V_PICTURE
          if (field.type == TType.STRING) {
            this.vPicture = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.sellerClassNum != null) {
      if (isSetSellerClassNum()) {
        oprot.writeFieldBegin(SELLER_CLASS_NUM_FIELD_DESC);
        oprot.writeString(this.sellerClassNum);
        oprot.writeFieldEnd();
      }
    }
    if (this.shelf != null) {
      if (isSetShelf()) {
        oprot.writeFieldBegin(SHELF_FIELD_DESC);
        oprot.writeString(this.shelf);
        oprot.writeFieldEnd();
      }
    }
    if (this.curPrice != null) {
      if (isSetCurPrice()) {
        oprot.writeFieldBegin(CUR_PRICE_FIELD_DESC);
        oprot.writeString(this.curPrice);
        oprot.writeFieldEnd();
      }
    }
    if (this.orgPrice != null) {
      if (isSetOrgPrice()) {
        oprot.writeFieldBegin(ORG_PRICE_FIELD_DESC);
        oprot.writeString(this.orgPrice);
        oprot.writeFieldEnd();
      }
    }
    if (this.vPicture != null) {
      if (isSetVPicture()) {
        oprot.writeFieldBegin(V_PICTURE_FIELD_DESC);
        oprot.writeString(this.vPicture);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductSkuItem(");
    boolean first = true;
    if (isSetSellerClassNum()) {
      sb.append("sellerClassNum:");
      if (this.sellerClassNum == null) {
        sb.append("null");
      } else {
        sb.append(this.sellerClassNum);
      }
      first = false;
      }
    if (isSetShelf()) {
      if (!first) sb.append(", ");
      sb.append("shelf:");
      if (this.shelf == null) {
        sb.append("null");
      } else {
        sb.append(this.shelf);
      }
      first = false;
      }
    if (isSetCurPrice()) {
      if (!first) sb.append(", ");
      sb.append("curPrice:");
      if (this.curPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.curPrice);
      }
      first = false;
      }
    if (isSetOrgPrice()) {
      if (!first) sb.append(", ");
      sb.append("orgPrice:");
      if (this.orgPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.orgPrice);
      }
      first = false;
      }
    if (isSetVPicture()) {
      if (!first) sb.append(", ");
      sb.append("vPicture:");
      if (this.vPicture == null) {
        sb.append("null");
      } else {
        sb.append(this.vPicture);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
