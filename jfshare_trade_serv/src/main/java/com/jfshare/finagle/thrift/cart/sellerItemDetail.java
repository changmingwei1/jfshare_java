/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.cart;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class sellerItemDetail implements TBase<sellerItemDetail, sellerItemDetail._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("sellerItemDetail");

  private static final TField SELLER_FIELD_DESC = new TField("seller", TType.STRUCT, (short)1);
  private static final TField ITEM_DETAIL_LIST_FIELD_DESC = new TField("itemDetailList", TType.LIST, (short)2);


  public com.jfshare.finagle.thrift.seller.Seller seller;
  public List<ItemDetail> itemDetailList;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SELLER((short)1, "seller"),
    ITEM_DETAIL_LIST((short)2, "itemDetailList");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SELLER
  	return SELLER;
        case 2: // ITEM_DETAIL_LIST
  	return ITEM_DETAIL_LIST;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SELLER, new FieldMetaData("seller", TFieldRequirementType.OPTIONAL,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.seller.Seller.class)));
    tmpMap.put(_Fields.ITEM_DETAIL_LIST, new FieldMetaData("itemDetailList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, ItemDetail.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(sellerItemDetail.class, metaDataMap);
  }


  public sellerItemDetail() {
  }

  public sellerItemDetail(
    List<ItemDetail> itemDetailList)
  {
    this();
    this.itemDetailList = itemDetailList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public sellerItemDetail(sellerItemDetail other) {
    if (other.isSetSeller()) {
      this.seller = new com.jfshare.finagle.thrift.seller.Seller(other.seller);
    }
    if (other.isSetItemDetailList()) {
      List<ItemDetail> __this__itemDetailList = new ArrayList<ItemDetail>();
      for (ItemDetail other_element : other.itemDetailList) {
        __this__itemDetailList.add(new ItemDetail(other_element));
      }
      this.itemDetailList = __this__itemDetailList;
    }
  }

  public sellerItemDetail deepCopy() {
    return new sellerItemDetail(this);
  }

  @Override
  public void clear() {
    this.seller = null;
    this.itemDetailList = null;
  }

  public com.jfshare.finagle.thrift.seller.Seller getSeller() {
    return this.seller;
  }

  public sellerItemDetail setSeller(com.jfshare.finagle.thrift.seller.Seller seller) {
    this.seller = seller;
    
    return this;
  }

  public void unsetSeller() {
    this.seller = null;
  }

  /** Returns true if field seller is set (has been asigned a value) and false otherwise */
  public boolean isSetSeller() {
    return this.seller != null;
  }

  public void setSellerIsSet(boolean value) {
    if (!value) {
      this.seller = null;
    }
  }

  public int getItemDetailListSize() {
    return (this.itemDetailList == null) ? 0 : this.itemDetailList.size();
  }

  public java.util.Iterator<ItemDetail> getItemDetailListIterator() {
    return (this.itemDetailList == null) ? null : this.itemDetailList.iterator();
  }

  public void addToItemDetailList(ItemDetail elem) {
    if (this.itemDetailList == null) {
      this.itemDetailList = new ArrayList<ItemDetail>();
    }
    this.itemDetailList.add(elem);
  }

  public List<ItemDetail> getItemDetailList() {
    return this.itemDetailList;
  }

  public sellerItemDetail setItemDetailList(List<ItemDetail> itemDetailList) {
    this.itemDetailList = itemDetailList;
    
    return this;
  }

  public void unsetItemDetailList() {
    this.itemDetailList = null;
  }

  /** Returns true if field itemDetailList is set (has been asigned a value) and false otherwise */
  public boolean isSetItemDetailList() {
    return this.itemDetailList != null;
  }

  public void setItemDetailListIsSet(boolean value) {
    if (!value) {
      this.itemDetailList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SELLER:
      if (value == null) {
        unsetSeller();
      } else {
        setSeller((com.jfshare.finagle.thrift.seller.Seller)value);
      }
      break;
    case ITEM_DETAIL_LIST:
      if (value == null) {
        unsetItemDetailList();
      } else {
        setItemDetailList((List<ItemDetail>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SELLER:
      return getSeller();
    case ITEM_DETAIL_LIST:
      return getItemDetailList();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SELLER:
      return isSetSeller();
    case ITEM_DETAIL_LIST:
      return isSetItemDetailList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof sellerItemDetail)
      return this.equals((sellerItemDetail)that);
    return false;
  }

  public boolean equals(sellerItemDetail that) {
    if (that == null)
      return false;
    boolean this_present_seller = true && this.isSetSeller();
    boolean that_present_seller = true && that.isSetSeller();
    if (this_present_seller || that_present_seller) {
      if (!(this_present_seller && that_present_seller))
        return false;
      if (!this.seller.equals(that.seller))
        return false;
    }
    boolean this_present_itemDetailList = true && this.isSetItemDetailList();
    boolean that_present_itemDetailList = true && that.isSetItemDetailList();
    if (this_present_itemDetailList || that_present_itemDetailList) {
      if (!(this_present_itemDetailList && that_present_itemDetailList))
        return false;
      if (!this.itemDetailList.equals(that.itemDetailList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_seller = true && (isSetSeller());
    builder.append(present_seller);
    if (present_seller)
      builder.append(seller);
    boolean present_itemDetailList = true && (isSetItemDetailList());
    builder.append(present_itemDetailList);
    if (present_itemDetailList)
      builder.append(itemDetailList);
    return builder.toHashCode();
  }

  public int compareTo(sellerItemDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    sellerItemDetail typedOther = (sellerItemDetail)other;

    lastComparison = Boolean.valueOf(isSetSeller()).compareTo(typedOther.isSetSeller());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeller()) {
      lastComparison = TBaseHelper.compareTo(this.seller, typedOther.seller);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemDetailList()).compareTo(typedOther.isSetItemDetailList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemDetailList()) {
      lastComparison = TBaseHelper.compareTo(this.itemDetailList, typedOther.itemDetailList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // SELLER
          if (field.type == TType.STRUCT) {
            this.seller = new com.jfshare.finagle.thrift.seller.Seller();
            this.seller.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ITEM_DETAIL_LIST
          if (field.type == TType.LIST) {
            {
            TList _list0 = iprot.readListBegin();
            this.itemDetailList = new ArrayList<ItemDetail>(_list0.size);
            for (int _i1 = 0; _i1 < _list0.size; ++_i1)
            {
              ItemDetail _elem2;
              _elem2 = new ItemDetail();
              _elem2.read(iprot);
              this.itemDetailList.add(_elem2);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.seller != null) {
      if (isSetSeller()) {
        oprot.writeFieldBegin(SELLER_FIELD_DESC);
        this.seller.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.itemDetailList != null) {
      oprot.writeFieldBegin(ITEM_DETAIL_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.itemDetailList.size()));
        for (ItemDetail _iter3 : this.itemDetailList)
        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("sellerItemDetail(");
    boolean first = true;
    if (isSetSeller()) {
      sb.append("seller:");
      if (this.seller == null) {
        sb.append("null");
      } else {
        sb.append(this.seller);
      }
      first = false;
      }
    if (!first) sb.append(", ");
    sb.append("itemDetailList:");
    if (this.itemDetailList == null) {
      sb.append("null");
    } else {
      sb.append(this.itemDetailList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
