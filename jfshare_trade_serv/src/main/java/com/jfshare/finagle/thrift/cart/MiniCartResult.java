/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.cart;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class MiniCartResult implements TBase<MiniCartResult, MiniCartResult._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MiniCartResult");

  private static final TField RESULT_FIELD_DESC = new TField("result", TType.STRUCT, (short)1);
  private static final TField P_LIST_FIELD_DESC = new TField("pList", TType.LIST, (short)2);
  private static final TField VALID_COUNT_FIELD_DESC = new TField("validCount", TType.I32, (short)3);
  private static final TField INVALID_COUNT_FIELD_DESC = new TField("invalidCount", TType.I32, (short)4);


  public com.jfshare.finagle.thrift.result.Result result;
  public List<ItemPlus> pList;
  public int validCount;
  public int invalidCount;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    RESULT((short)1, "result"),
    P_LIST((short)2, "pList"),
    VALID_COUNT((short)3, "validCount"),
    INVALID_COUNT((short)4, "invalidCount");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT
  	return RESULT;
        case 2: // P_LIST
  	return P_LIST;
        case 3: // VALID_COUNT
  	return VALID_COUNT;
        case 4: // INVALID_COUNT
  	return INVALID_COUNT;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __VALIDCOUNT_ISSET_ID = 0;
  private static final int __INVALIDCOUNT_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT, new FieldMetaData("result", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    tmpMap.put(_Fields.P_LIST, new FieldMetaData("pList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, ItemPlus.class))));
    tmpMap.put(_Fields.VALID_COUNT, new FieldMetaData("validCount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.INVALID_COUNT, new FieldMetaData("invalidCount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(MiniCartResult.class, metaDataMap);
  }


  public MiniCartResult() {
  }

  public MiniCartResult(
    com.jfshare.finagle.thrift.result.Result result,
    List<ItemPlus> pList,
    int validCount,
    int invalidCount)
  {
    this();
    this.result = result;
    this.pList = pList;
    this.validCount = validCount;
    setValidCountIsSet(true);
    this.invalidCount = invalidCount;
    setInvalidCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MiniCartResult(MiniCartResult other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetResult()) {
      this.result = new com.jfshare.finagle.thrift.result.Result(other.result);
    }
    if (other.isSetPList()) {
      List<ItemPlus> __this__pList = new ArrayList<ItemPlus>();
      for (ItemPlus other_element : other.pList) {
        __this__pList.add(new ItemPlus(other_element));
      }
      this.pList = __this__pList;
    }
    this.validCount = other.validCount;
    this.invalidCount = other.invalidCount;
  }

  public MiniCartResult deepCopy() {
    return new MiniCartResult(this);
  }

  @Override
  public void clear() {
    this.result = null;
    this.pList = null;
    setValidCountIsSet(false);
    this.validCount = 0;
    setInvalidCountIsSet(false);
    this.invalidCount = 0;
  }

  public com.jfshare.finagle.thrift.result.Result getResult() {
    return this.result;
  }

  public MiniCartResult setResult(com.jfshare.finagle.thrift.result.Result result) {
    this.result = result;
    
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been asigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public int getPListSize() {
    return (this.pList == null) ? 0 : this.pList.size();
  }

  public java.util.Iterator<ItemPlus> getPListIterator() {
    return (this.pList == null) ? null : this.pList.iterator();
  }

  public void addToPList(ItemPlus elem) {
    if (this.pList == null) {
      this.pList = new ArrayList<ItemPlus>();
    }
    this.pList.add(elem);
  }

  public List<ItemPlus> getPList() {
    return this.pList;
  }

  public MiniCartResult setPList(List<ItemPlus> pList) {
    this.pList = pList;
    
    return this;
  }

  public void unsetPList() {
    this.pList = null;
  }

  /** Returns true if field pList is set (has been asigned a value) and false otherwise */
  public boolean isSetPList() {
    return this.pList != null;
  }

  public void setPListIsSet(boolean value) {
    if (!value) {
      this.pList = null;
    }
  }

  public int getValidCount() {
    return this.validCount;
  }

  public MiniCartResult setValidCount(int validCount) {
    this.validCount = validCount;
    setValidCountIsSet(true);

    return this;
  }

  public void unsetValidCount() {
  __isset_bit_vector.clear(__VALIDCOUNT_ISSET_ID);
  }

  /** Returns true if field validCount is set (has been asigned a value) and false otherwise */
  public boolean isSetValidCount() {
    return __isset_bit_vector.get(__VALIDCOUNT_ISSET_ID);
  }

  public void setValidCountIsSet(boolean value) {
    __isset_bit_vector.set(__VALIDCOUNT_ISSET_ID, value);
  }

  public int getInvalidCount() {
    return this.invalidCount;
  }

  public MiniCartResult setInvalidCount(int invalidCount) {
    this.invalidCount = invalidCount;
    setInvalidCountIsSet(true);

    return this;
  }

  public void unsetInvalidCount() {
  __isset_bit_vector.clear(__INVALIDCOUNT_ISSET_ID);
  }

  /** Returns true if field invalidCount is set (has been asigned a value) and false otherwise */
  public boolean isSetInvalidCount() {
    return __isset_bit_vector.get(__INVALIDCOUNT_ISSET_ID);
  }

  public void setInvalidCountIsSet(boolean value) {
    __isset_bit_vector.set(__INVALIDCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    case P_LIST:
      if (value == null) {
        unsetPList();
      } else {
        setPList((List<ItemPlus>)value);
      }
      break;
    case VALID_COUNT:
      if (value == null) {
        unsetValidCount();
      } else {
        setValidCount((Integer)value);
      }
      break;
    case INVALID_COUNT:
      if (value == null) {
        unsetInvalidCount();
      } else {
        setInvalidCount((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT:
      return getResult();
    case P_LIST:
      return getPList();
    case VALID_COUNT:
      return new Integer(getValidCount());
    case INVALID_COUNT:
      return new Integer(getInvalidCount());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT:
      return isSetResult();
    case P_LIST:
      return isSetPList();
    case VALID_COUNT:
      return isSetValidCount();
    case INVALID_COUNT:
      return isSetInvalidCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MiniCartResult)
      return this.equals((MiniCartResult)that);
    return false;
  }

  public boolean equals(MiniCartResult that) {
    if (that == null)
      return false;
    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }
    boolean this_present_pList = true && this.isSetPList();
    boolean that_present_pList = true && that.isSetPList();
    if (this_present_pList || that_present_pList) {
      if (!(this_present_pList && that_present_pList))
        return false;
      if (!this.pList.equals(that.pList))
        return false;
    }
    boolean this_present_validCount = true;
    boolean that_present_validCount = true;
    if (this_present_validCount || that_present_validCount) {
      if (!(this_present_validCount && that_present_validCount))
        return false;
      if (this.validCount != that.validCount)
        return false;
    }
    boolean this_present_invalidCount = true;
    boolean that_present_invalidCount = true;
    if (this_present_invalidCount || that_present_invalidCount) {
      if (!(this_present_invalidCount && that_present_invalidCount))
        return false;
      if (this.invalidCount != that.invalidCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_result = true && (isSetResult());
    builder.append(present_result);
    if (present_result)
      builder.append(result);
    boolean present_pList = true && (isSetPList());
    builder.append(present_pList);
    if (present_pList)
      builder.append(pList);
    boolean present_validCount = true;
    builder.append(present_validCount);
    if (present_validCount)
      builder.append(validCount);
    boolean present_invalidCount = true;
    builder.append(present_invalidCount);
    if (present_invalidCount)
      builder.append(invalidCount);
    return builder.toHashCode();
  }

  public int compareTo(MiniCartResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MiniCartResult typedOther = (MiniCartResult)other;

    lastComparison = Boolean.valueOf(isSetResult()).compareTo(typedOther.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = TBaseHelper.compareTo(this.result, typedOther.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPList()).compareTo(typedOther.isSetPList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPList()) {
      lastComparison = TBaseHelper.compareTo(this.pList, typedOther.pList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidCount()).compareTo(typedOther.isSetValidCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidCount()) {
      lastComparison = TBaseHelper.compareTo(this.validCount, typedOther.validCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvalidCount()).compareTo(typedOther.isSetInvalidCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvalidCount()) {
      lastComparison = TBaseHelper.compareTo(this.invalidCount, typedOther.invalidCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // RESULT
          if (field.type == TType.STRUCT) {
            this.result = new com.jfshare.finagle.thrift.result.Result();
            this.result.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // P_LIST
          if (field.type == TType.LIST) {
            {
            TList _list12 = iprot.readListBegin();
            this.pList = new ArrayList<ItemPlus>(_list12.size);
            for (int _i13 = 0; _i13 < _list12.size; ++_i13)
            {
              ItemPlus _elem14;
              _elem14 = new ItemPlus();
              _elem14.read(iprot);
              this.pList.add(_elem14);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // VALID_COUNT
          if (field.type == TType.I32) {
            this.validCount = iprot.readI32();
            setValidCountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // INVALID_COUNT
          if (field.type == TType.I32) {
            this.invalidCount = iprot.readI32();
            setInvalidCountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.result != null) {
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      this.result.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.pList != null) {
      oprot.writeFieldBegin(P_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.pList.size()));
        for (ItemPlus _iter15 : this.pList)
        {
          _iter15.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(VALID_COUNT_FIELD_DESC);
    oprot.writeI32(this.validCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(INVALID_COUNT_FIELD_DESC);
    oprot.writeI32(this.invalidCount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MiniCartResult(");
    boolean first = true;
    sb.append("result:");
    if (this.result == null) {
      sb.append("null");
    } else {
      sb.append(this.result);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pList:");
    if (this.pList == null) {
      sb.append("null");
    } else {
      sb.append(this.pList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("validCount:");
    sb.append(this.validCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("invalidCount:");
    sb.append(this.invalidCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
