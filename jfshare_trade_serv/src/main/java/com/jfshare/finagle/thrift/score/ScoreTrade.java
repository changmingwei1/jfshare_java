/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.score;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ScoreTrade implements TBase<ScoreTrade, ScoreTrade._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ScoreTrade");

  private static final TField TRADE_ID_FIELD_DESC = new TField("tradeId", TType.STRING, (short)1);
  private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I32, (short)2);
  private static final TField TRADE_TIME_FIELD_DESC = new TField("tradeTime", TType.STRING, (short)3);
  private static final TField IN_OR_OUT_FIELD_DESC = new TField("inOrOut", TType.I32, (short)4);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)5);
  private static final TField AMOUNT_FIELD_DESC = new TField("amount", TType.I32, (short)6);
  private static final TField TRADER_FIELD_DESC = new TField("trader", TType.I32, (short)7);


  public String tradeId;
  public int userId;
  public String tradeTime;
  public int inOrOut;
  public int type;
  public int amount;
  public int trader;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TRADE_ID((short)1, "tradeId"),
    USER_ID((short)2, "userId"),
    TRADE_TIME((short)3, "tradeTime"),
    IN_OR_OUT((short)4, "inOrOut"),
    TYPE((short)5, "type"),
    AMOUNT((short)6, "amount"),
    TRADER((short)7, "trader");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADE_ID
  	return TRADE_ID;
        case 2: // USER_ID
  	return USER_ID;
        case 3: // TRADE_TIME
  	return TRADE_TIME;
        case 4: // IN_OR_OUT
  	return IN_OR_OUT;
        case 5: // TYPE
  	return TYPE;
        case 6: // AMOUNT
  	return AMOUNT;
        case 7: // TRADER
  	return TRADER;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __INOROUT_ISSET_ID = 1;
  private static final int __TYPE_ISSET_ID = 2;
  private static final int __AMOUNT_ISSET_ID = 3;
  private static final int __TRADER_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADE_ID, new FieldMetaData("tradeId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TRADE_TIME, new FieldMetaData("tradeTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.IN_OR_OUT, new FieldMetaData("inOrOut", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.AMOUNT, new FieldMetaData("amount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TRADER, new FieldMetaData("trader", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ScoreTrade.class, metaDataMap);
  }


  public ScoreTrade() {
  }

  public ScoreTrade(
    String tradeId,
    int userId,
    String tradeTime,
    int inOrOut,
    int type,
    int amount,
    int trader)
  {
    this();
    this.tradeId = tradeId;
    this.userId = userId;
    setUserIdIsSet(true);
    this.tradeTime = tradeTime;
    this.inOrOut = inOrOut;
    setInOrOutIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.amount = amount;
    setAmountIsSet(true);
    this.trader = trader;
    setTraderIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ScoreTrade(ScoreTrade other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetTradeId()) {
      this.tradeId = other.tradeId;
    }
    this.userId = other.userId;
    if (other.isSetTradeTime()) {
      this.tradeTime = other.tradeTime;
    }
    this.inOrOut = other.inOrOut;
    this.type = other.type;
    this.amount = other.amount;
    this.trader = other.trader;
  }

  public ScoreTrade deepCopy() {
    return new ScoreTrade(this);
  }

  @Override
  public void clear() {
    this.tradeId = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.tradeTime = null;
    setInOrOutIsSet(false);
    this.inOrOut = 0;
    setTypeIsSet(false);
    this.type = 0;
    setAmountIsSet(false);
    this.amount = 0;
    setTraderIsSet(false);
    this.trader = 0;
  }

  public String getTradeId() {
    return this.tradeId;
  }

  public ScoreTrade setTradeId(String tradeId) {
    this.tradeId = tradeId;
    
    return this;
  }

  public void unsetTradeId() {
    this.tradeId = null;
  }

  /** Returns true if field tradeId is set (has been asigned a value) and false otherwise */
  public boolean isSetTradeId() {
    return this.tradeId != null;
  }

  public void setTradeIdIsSet(boolean value) {
    if (!value) {
      this.tradeId = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public ScoreTrade setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);

    return this;
  }

  public void unsetUserId() {
  __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been asigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public String getTradeTime() {
    return this.tradeTime;
  }

  public ScoreTrade setTradeTime(String tradeTime) {
    this.tradeTime = tradeTime;
    
    return this;
  }

  public void unsetTradeTime() {
    this.tradeTime = null;
  }

  /** Returns true if field tradeTime is set (has been asigned a value) and false otherwise */
  public boolean isSetTradeTime() {
    return this.tradeTime != null;
  }

  public void setTradeTimeIsSet(boolean value) {
    if (!value) {
      this.tradeTime = null;
    }
  }

  public int getInOrOut() {
    return this.inOrOut;
  }

  public ScoreTrade setInOrOut(int inOrOut) {
    this.inOrOut = inOrOut;
    setInOrOutIsSet(true);

    return this;
  }

  public void unsetInOrOut() {
  __isset_bit_vector.clear(__INOROUT_ISSET_ID);
  }

  /** Returns true if field inOrOut is set (has been asigned a value) and false otherwise */
  public boolean isSetInOrOut() {
    return __isset_bit_vector.get(__INOROUT_ISSET_ID);
  }

  public void setInOrOutIsSet(boolean value) {
    __isset_bit_vector.set(__INOROUT_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public ScoreTrade setType(int type) {
    this.type = type;
    setTypeIsSet(true);

    return this;
  }

  public void unsetType() {
  __isset_bit_vector.clear(__TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been asigned a value) and false otherwise */
  public boolean isSetType() {
    return __isset_bit_vector.get(__TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bit_vector.set(__TYPE_ISSET_ID, value);
  }

  public int getAmount() {
    return this.amount;
  }

  public ScoreTrade setAmount(int amount) {
    this.amount = amount;
    setAmountIsSet(true);

    return this;
  }

  public void unsetAmount() {
  __isset_bit_vector.clear(__AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been asigned a value) and false otherwise */
  public boolean isSetAmount() {
    return __isset_bit_vector.get(__AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bit_vector.set(__AMOUNT_ISSET_ID, value);
  }

  public int getTrader() {
    return this.trader;
  }

  public ScoreTrade setTrader(int trader) {
    this.trader = trader;
    setTraderIsSet(true);

    return this;
  }

  public void unsetTrader() {
  __isset_bit_vector.clear(__TRADER_ISSET_ID);
  }

  /** Returns true if field trader is set (has been asigned a value) and false otherwise */
  public boolean isSetTrader() {
    return __isset_bit_vector.get(__TRADER_ISSET_ID);
  }

  public void setTraderIsSet(boolean value) {
    __isset_bit_vector.set(__TRADER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADE_ID:
      if (value == null) {
        unsetTradeId();
      } else {
        setTradeId((String)value);
      }
      break;
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;
    case TRADE_TIME:
      if (value == null) {
        unsetTradeTime();
      } else {
        setTradeTime((String)value);
      }
      break;
    case IN_OR_OUT:
      if (value == null) {
        unsetInOrOut();
      } else {
        setInOrOut((Integer)value);
      }
      break;
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;
    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Integer)value);
      }
      break;
    case TRADER:
      if (value == null) {
        unsetTrader();
      } else {
        setTrader((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADE_ID:
      return getTradeId();
    case USER_ID:
      return new Integer(getUserId());
    case TRADE_TIME:
      return getTradeTime();
    case IN_OR_OUT:
      return new Integer(getInOrOut());
    case TYPE:
      return new Integer(getType());
    case AMOUNT:
      return new Integer(getAmount());
    case TRADER:
      return new Integer(getTrader());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADE_ID:
      return isSetTradeId();
    case USER_ID:
      return isSetUserId();
    case TRADE_TIME:
      return isSetTradeTime();
    case IN_OR_OUT:
      return isSetInOrOut();
    case TYPE:
      return isSetType();
    case AMOUNT:
      return isSetAmount();
    case TRADER:
      return isSetTrader();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ScoreTrade)
      return this.equals((ScoreTrade)that);
    return false;
  }

  public boolean equals(ScoreTrade that) {
    if (that == null)
      return false;
    boolean this_present_tradeId = true && this.isSetTradeId();
    boolean that_present_tradeId = true && that.isSetTradeId();
    if (this_present_tradeId || that_present_tradeId) {
      if (!(this_present_tradeId && that_present_tradeId))
        return false;
      if (!this.tradeId.equals(that.tradeId))
        return false;
    }
    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }
    boolean this_present_tradeTime = true && this.isSetTradeTime();
    boolean that_present_tradeTime = true && that.isSetTradeTime();
    if (this_present_tradeTime || that_present_tradeTime) {
      if (!(this_present_tradeTime && that_present_tradeTime))
        return false;
      if (!this.tradeTime.equals(that.tradeTime))
        return false;
    }
    boolean this_present_inOrOut = true;
    boolean that_present_inOrOut = true;
    if (this_present_inOrOut || that_present_inOrOut) {
      if (!(this_present_inOrOut && that_present_inOrOut))
        return false;
      if (this.inOrOut != that.inOrOut)
        return false;
    }
    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }
    boolean this_present_amount = true;
    boolean that_present_amount = true;
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }
    boolean this_present_trader = true;
    boolean that_present_trader = true;
    if (this_present_trader || that_present_trader) {
      if (!(this_present_trader && that_present_trader))
        return false;
      if (this.trader != that.trader)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_tradeId = true && (isSetTradeId());
    builder.append(present_tradeId);
    if (present_tradeId)
      builder.append(tradeId);
    boolean present_userId = true;
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);
    boolean present_tradeTime = true && (isSetTradeTime());
    builder.append(present_tradeTime);
    if (present_tradeTime)
      builder.append(tradeTime);
    boolean present_inOrOut = true;
    builder.append(present_inOrOut);
    if (present_inOrOut)
      builder.append(inOrOut);
    boolean present_type = true;
    builder.append(present_type);
    if (present_type)
      builder.append(type);
    boolean present_amount = true;
    builder.append(present_amount);
    if (present_amount)
      builder.append(amount);
    boolean present_trader = true;
    builder.append(present_trader);
    if (present_trader)
      builder.append(trader);
    return builder.toHashCode();
  }

  public int compareTo(ScoreTrade other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ScoreTrade typedOther = (ScoreTrade)other;

    lastComparison = Boolean.valueOf(isSetTradeId()).compareTo(typedOther.isSetTradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeId()) {
      lastComparison = TBaseHelper.compareTo(this.tradeId, typedOther.tradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeTime()).compareTo(typedOther.isSetTradeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeTime()) {
      lastComparison = TBaseHelper.compareTo(this.tradeTime, typedOther.tradeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInOrOut()).compareTo(typedOther.isSetInOrOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInOrOut()) {
      lastComparison = TBaseHelper.compareTo(this.inOrOut, typedOther.inOrOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(typedOther.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = TBaseHelper.compareTo(this.amount, typedOther.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrader()).compareTo(typedOther.isSetTrader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrader()) {
      lastComparison = TBaseHelper.compareTo(this.trader, typedOther.trader);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // TRADE_ID
          if (field.type == TType.STRING) {
            this.tradeId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // USER_ID
          if (field.type == TType.I32) {
            this.userId = iprot.readI32();
            setUserIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TRADE_TIME
          if (field.type == TType.STRING) {
            this.tradeTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // IN_OR_OUT
          if (field.type == TType.I32) {
            this.inOrOut = iprot.readI32();
            setInOrOutIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // TYPE
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            setTypeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // AMOUNT
          if (field.type == TType.I32) {
            this.amount = iprot.readI32();
            setAmountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // TRADER
          if (field.type == TType.I32) {
            this.trader = iprot.readI32();
            setTraderIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.tradeId != null) {
      oprot.writeFieldBegin(TRADE_ID_FIELD_DESC);
      oprot.writeString(this.tradeId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(USER_ID_FIELD_DESC);
    oprot.writeI32(this.userId);
    oprot.writeFieldEnd();
    if (this.tradeTime != null) {
      oprot.writeFieldBegin(TRADE_TIME_FIELD_DESC);
      oprot.writeString(this.tradeTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IN_OR_OUT_FIELD_DESC);
    oprot.writeI32(this.inOrOut);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
    oprot.writeI32(this.amount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TRADER_FIELD_DESC);
    oprot.writeI32(this.trader);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ScoreTrade(");
    boolean first = true;
    sb.append("tradeId:");
    if (this.tradeId == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeTime:");
    if (this.tradeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inOrOut:");
    sb.append(this.inOrOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    sb.append(this.amount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("trader:");
    sb.append(this.trader);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
