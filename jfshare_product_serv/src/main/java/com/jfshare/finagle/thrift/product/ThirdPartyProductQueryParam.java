/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.product;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ThirdPartyProductQueryParam implements TBase<ThirdPartyProductQueryParam, ThirdPartyProductQueryParam._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ThirdPartyProductQueryParam");

  private static final TField THIRD_PARTY_IDENTIFY_FIELD_DESC = new TField("thirdPartyIdentify", TType.I32, (short)1);
  private static final TField PRODUCT_NAME_FIELD_DESC = new TField("productName", TType.STRING, (short)2);
  private static final TField ACTIVE_STATE_FIELD_DESC = new TField("activeState", TType.I32, (short)3);
  private static final TField STOCK_STATE_FIELD_DESC = new TField("stockState", TType.I32, (short)4);
  private static final TField PRICE_STATE_FIELD_DESC = new TField("priceState", TType.I32, (short)5);
  private static final TField OFFER_STATE_FIELD_DESC = new TField("offerState", TType.I32, (short)6);


  public int thirdPartyIdentify;
  public String productName;
  public int activeState;
  public int stockState;
  public int priceState;
  public int offerState;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    THIRD_PARTY_IDENTIFY((short)1, "thirdPartyIdentify"),
    PRODUCT_NAME((short)2, "productName"),
    ACTIVE_STATE((short)3, "activeState"),
    STOCK_STATE((short)4, "stockState"),
    PRICE_STATE((short)5, "priceState"),
    OFFER_STATE((short)6, "offerState");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // THIRD_PARTY_IDENTIFY
  	return THIRD_PARTY_IDENTIFY;
        case 2: // PRODUCT_NAME
  	return PRODUCT_NAME;
        case 3: // ACTIVE_STATE
  	return ACTIVE_STATE;
        case 4: // STOCK_STATE
  	return STOCK_STATE;
        case 5: // PRICE_STATE
  	return PRICE_STATE;
        case 6: // OFFER_STATE
  	return OFFER_STATE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __THIRDPARTYIDENTIFY_ISSET_ID = 0;
  private static final int __ACTIVESTATE_ISSET_ID = 1;
  private static final int __STOCKSTATE_ISSET_ID = 2;
  private static final int __PRICESTATE_ISSET_ID = 3;
  private static final int __OFFERSTATE_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.THIRD_PARTY_IDENTIFY, new FieldMetaData("thirdPartyIdentify", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PRODUCT_NAME, new FieldMetaData("productName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_STATE, new FieldMetaData("activeState", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.STOCK_STATE, new FieldMetaData("stockState", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PRICE_STATE, new FieldMetaData("priceState", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.OFFER_STATE, new FieldMetaData("offerState", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ThirdPartyProductQueryParam.class, metaDataMap);
  }


  public ThirdPartyProductQueryParam() {
  }

  public ThirdPartyProductQueryParam(
    int thirdPartyIdentify,
    String productName,
    int activeState,
    int stockState,
    int priceState,
    int offerState)
  {
    this();
    this.thirdPartyIdentify = thirdPartyIdentify;
    setThirdPartyIdentifyIsSet(true);
    this.productName = productName;
    this.activeState = activeState;
    setActiveStateIsSet(true);
    this.stockState = stockState;
    setStockStateIsSet(true);
    this.priceState = priceState;
    setPriceStateIsSet(true);
    this.offerState = offerState;
    setOfferStateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThirdPartyProductQueryParam(ThirdPartyProductQueryParam other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.thirdPartyIdentify = other.thirdPartyIdentify;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.activeState = other.activeState;
    this.stockState = other.stockState;
    this.priceState = other.priceState;
    this.offerState = other.offerState;
  }

  public ThirdPartyProductQueryParam deepCopy() {
    return new ThirdPartyProductQueryParam(this);
  }

  @Override
  public void clear() {
    setThirdPartyIdentifyIsSet(false);
    this.thirdPartyIdentify = 0;
    this.productName = null;
    setActiveStateIsSet(false);
    this.activeState = 0;
    setStockStateIsSet(false);
    this.stockState = 0;
    setPriceStateIsSet(false);
    this.priceState = 0;
    setOfferStateIsSet(false);
    this.offerState = 0;
  }

  public int getThirdPartyIdentify() {
    return this.thirdPartyIdentify;
  }

  public ThirdPartyProductQueryParam setThirdPartyIdentify(int thirdPartyIdentify) {
    this.thirdPartyIdentify = thirdPartyIdentify;
    setThirdPartyIdentifyIsSet(true);

    return this;
  }

  public void unsetThirdPartyIdentify() {
  __isset_bit_vector.clear(__THIRDPARTYIDENTIFY_ISSET_ID);
  }

  /** Returns true if field thirdPartyIdentify is set (has been asigned a value) and false otherwise */
  public boolean isSetThirdPartyIdentify() {
    return __isset_bit_vector.get(__THIRDPARTYIDENTIFY_ISSET_ID);
  }

  public void setThirdPartyIdentifyIsSet(boolean value) {
    __isset_bit_vector.set(__THIRDPARTYIDENTIFY_ISSET_ID, value);
  }

  public String getProductName() {
    return this.productName;
  }

  public ThirdPartyProductQueryParam setProductName(String productName) {
    this.productName = productName;
    
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been asigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public int getActiveState() {
    return this.activeState;
  }

  public ThirdPartyProductQueryParam setActiveState(int activeState) {
    this.activeState = activeState;
    setActiveStateIsSet(true);

    return this;
  }

  public void unsetActiveState() {
  __isset_bit_vector.clear(__ACTIVESTATE_ISSET_ID);
  }

  /** Returns true if field activeState is set (has been asigned a value) and false otherwise */
  public boolean isSetActiveState() {
    return __isset_bit_vector.get(__ACTIVESTATE_ISSET_ID);
  }

  public void setActiveStateIsSet(boolean value) {
    __isset_bit_vector.set(__ACTIVESTATE_ISSET_ID, value);
  }

  public int getStockState() {
    return this.stockState;
  }

  public ThirdPartyProductQueryParam setStockState(int stockState) {
    this.stockState = stockState;
    setStockStateIsSet(true);

    return this;
  }

  public void unsetStockState() {
  __isset_bit_vector.clear(__STOCKSTATE_ISSET_ID);
  }

  /** Returns true if field stockState is set (has been asigned a value) and false otherwise */
  public boolean isSetStockState() {
    return __isset_bit_vector.get(__STOCKSTATE_ISSET_ID);
  }

  public void setStockStateIsSet(boolean value) {
    __isset_bit_vector.set(__STOCKSTATE_ISSET_ID, value);
  }

  public int getPriceState() {
    return this.priceState;
  }

  public ThirdPartyProductQueryParam setPriceState(int priceState) {
    this.priceState = priceState;
    setPriceStateIsSet(true);

    return this;
  }

  public void unsetPriceState() {
  __isset_bit_vector.clear(__PRICESTATE_ISSET_ID);
  }

  /** Returns true if field priceState is set (has been asigned a value) and false otherwise */
  public boolean isSetPriceState() {
    return __isset_bit_vector.get(__PRICESTATE_ISSET_ID);
  }

  public void setPriceStateIsSet(boolean value) {
    __isset_bit_vector.set(__PRICESTATE_ISSET_ID, value);
  }

  public int getOfferState() {
    return this.offerState;
  }

  public ThirdPartyProductQueryParam setOfferState(int offerState) {
    this.offerState = offerState;
    setOfferStateIsSet(true);

    return this;
  }

  public void unsetOfferState() {
  __isset_bit_vector.clear(__OFFERSTATE_ISSET_ID);
  }

  /** Returns true if field offerState is set (has been asigned a value) and false otherwise */
  public boolean isSetOfferState() {
    return __isset_bit_vector.get(__OFFERSTATE_ISSET_ID);
  }

  public void setOfferStateIsSet(boolean value) {
    __isset_bit_vector.set(__OFFERSTATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case THIRD_PARTY_IDENTIFY:
      if (value == null) {
        unsetThirdPartyIdentify();
      } else {
        setThirdPartyIdentify((Integer)value);
      }
      break;
    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;
    case ACTIVE_STATE:
      if (value == null) {
        unsetActiveState();
      } else {
        setActiveState((Integer)value);
      }
      break;
    case STOCK_STATE:
      if (value == null) {
        unsetStockState();
      } else {
        setStockState((Integer)value);
      }
      break;
    case PRICE_STATE:
      if (value == null) {
        unsetPriceState();
      } else {
        setPriceState((Integer)value);
      }
      break;
    case OFFER_STATE:
      if (value == null) {
        unsetOfferState();
      } else {
        setOfferState((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case THIRD_PARTY_IDENTIFY:
      return new Integer(getThirdPartyIdentify());
    case PRODUCT_NAME:
      return getProductName();
    case ACTIVE_STATE:
      return new Integer(getActiveState());
    case STOCK_STATE:
      return new Integer(getStockState());
    case PRICE_STATE:
      return new Integer(getPriceState());
    case OFFER_STATE:
      return new Integer(getOfferState());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case THIRD_PARTY_IDENTIFY:
      return isSetThirdPartyIdentify();
    case PRODUCT_NAME:
      return isSetProductName();
    case ACTIVE_STATE:
      return isSetActiveState();
    case STOCK_STATE:
      return isSetStockState();
    case PRICE_STATE:
      return isSetPriceState();
    case OFFER_STATE:
      return isSetOfferState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThirdPartyProductQueryParam)
      return this.equals((ThirdPartyProductQueryParam)that);
    return false;
  }

  public boolean equals(ThirdPartyProductQueryParam that) {
    if (that == null)
      return false;
    boolean this_present_thirdPartyIdentify = true;
    boolean that_present_thirdPartyIdentify = true;
    if (this_present_thirdPartyIdentify || that_present_thirdPartyIdentify) {
      if (!(this_present_thirdPartyIdentify && that_present_thirdPartyIdentify))
        return false;
      if (this.thirdPartyIdentify != that.thirdPartyIdentify)
        return false;
    }
    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }
    boolean this_present_activeState = true;
    boolean that_present_activeState = true;
    if (this_present_activeState || that_present_activeState) {
      if (!(this_present_activeState && that_present_activeState))
        return false;
      if (this.activeState != that.activeState)
        return false;
    }
    boolean this_present_stockState = true;
    boolean that_present_stockState = true;
    if (this_present_stockState || that_present_stockState) {
      if (!(this_present_stockState && that_present_stockState))
        return false;
      if (this.stockState != that.stockState)
        return false;
    }
    boolean this_present_priceState = true;
    boolean that_present_priceState = true;
    if (this_present_priceState || that_present_priceState) {
      if (!(this_present_priceState && that_present_priceState))
        return false;
      if (this.priceState != that.priceState)
        return false;
    }
    boolean this_present_offerState = true;
    boolean that_present_offerState = true;
    if (this_present_offerState || that_present_offerState) {
      if (!(this_present_offerState && that_present_offerState))
        return false;
      if (this.offerState != that.offerState)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_thirdPartyIdentify = true;
    builder.append(present_thirdPartyIdentify);
    if (present_thirdPartyIdentify)
      builder.append(thirdPartyIdentify);
    boolean present_productName = true && (isSetProductName());
    builder.append(present_productName);
    if (present_productName)
      builder.append(productName);
    boolean present_activeState = true;
    builder.append(present_activeState);
    if (present_activeState)
      builder.append(activeState);
    boolean present_stockState = true;
    builder.append(present_stockState);
    if (present_stockState)
      builder.append(stockState);
    boolean present_priceState = true;
    builder.append(present_priceState);
    if (present_priceState)
      builder.append(priceState);
    boolean present_offerState = true;
    builder.append(present_offerState);
    if (present_offerState)
      builder.append(offerState);
    return builder.toHashCode();
  }

  public int compareTo(ThirdPartyProductQueryParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThirdPartyProductQueryParam typedOther = (ThirdPartyProductQueryParam)other;

    lastComparison = Boolean.valueOf(isSetThirdPartyIdentify()).compareTo(typedOther.isSetThirdPartyIdentify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdPartyIdentify()) {
      lastComparison = TBaseHelper.compareTo(this.thirdPartyIdentify, typedOther.thirdPartyIdentify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(typedOther.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = TBaseHelper.compareTo(this.productName, typedOther.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveState()).compareTo(typedOther.isSetActiveState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveState()) {
      lastComparison = TBaseHelper.compareTo(this.activeState, typedOther.activeState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStockState()).compareTo(typedOther.isSetStockState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStockState()) {
      lastComparison = TBaseHelper.compareTo(this.stockState, typedOther.stockState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceState()).compareTo(typedOther.isSetPriceState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceState()) {
      lastComparison = TBaseHelper.compareTo(this.priceState, typedOther.priceState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfferState()).compareTo(typedOther.isSetOfferState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfferState()) {
      lastComparison = TBaseHelper.compareTo(this.offerState, typedOther.offerState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // THIRD_PARTY_IDENTIFY
          if (field.type == TType.I32) {
            this.thirdPartyIdentify = iprot.readI32();
            setThirdPartyIdentifyIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PRODUCT_NAME
          if (field.type == TType.STRING) {
            this.productName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ACTIVE_STATE
          if (field.type == TType.I32) {
            this.activeState = iprot.readI32();
            setActiveStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // STOCK_STATE
          if (field.type == TType.I32) {
            this.stockState = iprot.readI32();
            setStockStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // PRICE_STATE
          if (field.type == TType.I32) {
            this.priceState = iprot.readI32();
            setPriceStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // OFFER_STATE
          if (field.type == TType.I32) {
            this.offerState = iprot.readI32();
            setOfferStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(THIRD_PARTY_IDENTIFY_FIELD_DESC);
    oprot.writeI32(this.thirdPartyIdentify);
    oprot.writeFieldEnd();
    if (this.productName != null) {
      oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
      oprot.writeString(this.productName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ACTIVE_STATE_FIELD_DESC);
    oprot.writeI32(this.activeState);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(STOCK_STATE_FIELD_DESC);
    oprot.writeI32(this.stockState);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PRICE_STATE_FIELD_DESC);
    oprot.writeI32(this.priceState);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(OFFER_STATE_FIELD_DESC);
    oprot.writeI32(this.offerState);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThirdPartyProductQueryParam(");
    boolean first = true;
    sb.append("thirdPartyIdentify:");
    sb.append(this.thirdPartyIdentify);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeState:");
    sb.append(this.activeState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stockState:");
    sb.append(this.stockState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceState:");
    sb.append(this.priceState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("offerState:");
    sb.append(this.offerState);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
