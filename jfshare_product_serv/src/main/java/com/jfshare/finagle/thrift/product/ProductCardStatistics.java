/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.product;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ProductCardStatistics implements TBase<ProductCardStatistics, ProductCardStatistics._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ProductCardStatistics");

  private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, (short)1);
  private static final TField PRODUCT_NAME_FIELD_DESC = new TField("productName", TType.STRING, (short)2);
  private static final TField TOTAL_FIELD_DESC = new TField("total", TType.I32, (short)3);
  private static final TField USED_NUM_FIELD_DESC = new TField("usedNum", TType.I32, (short)4);
  private static final TField UNUSED_NUM_FIELD_DESC = new TField("unusedNum", TType.I32, (short)5);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.STRING, (short)6);


  public String productId;
  public String productName;
  public int total;
  public int usedNum;
  public int unusedNum;
  public String createTime;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PRODUCT_ID((short)1, "productId"),
    PRODUCT_NAME((short)2, "productName"),
    TOTAL((short)3, "total"),
    USED_NUM((short)4, "usedNum"),
    UNUSED_NUM((short)5, "unusedNum"),
    CREATE_TIME((short)6, "createTime");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
  	return PRODUCT_ID;
        case 2: // PRODUCT_NAME
  	return PRODUCT_NAME;
        case 3: // TOTAL
  	return TOTAL;
        case 4: // USED_NUM
  	return USED_NUM;
        case 5: // UNUSED_NUM
  	return UNUSED_NUM;
        case 6: // CREATE_TIME
  	return CREATE_TIME;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __TOTAL_ISSET_ID = 0;
  private static final int __USEDNUM_ISSET_ID = 1;
  private static final int __UNUSEDNUM_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new FieldMetaData("productId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new FieldMetaData("productName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TOTAL, new FieldMetaData("total", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.USED_NUM, new FieldMetaData("usedNum", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.UNUSED_NUM, new FieldMetaData("unusedNum", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ProductCardStatistics.class, metaDataMap);
  }


  public ProductCardStatistics() {
  }

  public ProductCardStatistics(
    String productId,
    String productName,
    int total,
    int usedNum,
    int unusedNum,
    String createTime)
  {
    this();
    this.productId = productId;
    this.productName = productName;
    this.total = total;
    setTotalIsSet(true);
    this.usedNum = usedNum;
    setUsedNumIsSet(true);
    this.unusedNum = unusedNum;
    setUnusedNumIsSet(true);
    this.createTime = createTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductCardStatistics(ProductCardStatistics other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.total = other.total;
    this.usedNum = other.usedNum;
    this.unusedNum = other.unusedNum;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
  }

  public ProductCardStatistics deepCopy() {
    return new ProductCardStatistics(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    this.productName = null;
    setTotalIsSet(false);
    this.total = 0;
    setUsedNumIsSet(false);
    this.usedNum = 0;
    setUnusedNumIsSet(false);
    this.unusedNum = 0;
    this.createTime = null;
  }

  public String getProductId() {
    return this.productId;
  }

  public ProductCardStatistics setProductId(String productId) {
    this.productId = productId;
    
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been asigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public ProductCardStatistics setProductName(String productName) {
    this.productName = productName;
    
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been asigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public int getTotal() {
    return this.total;
  }

  public ProductCardStatistics setTotal(int total) {
    this.total = total;
    setTotalIsSet(true);

    return this;
  }

  public void unsetTotal() {
  __isset_bit_vector.clear(__TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been asigned a value) and false otherwise */
  public boolean isSetTotal() {
    return __isset_bit_vector.get(__TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bit_vector.set(__TOTAL_ISSET_ID, value);
  }

  public int getUsedNum() {
    return this.usedNum;
  }

  public ProductCardStatistics setUsedNum(int usedNum) {
    this.usedNum = usedNum;
    setUsedNumIsSet(true);

    return this;
  }

  public void unsetUsedNum() {
  __isset_bit_vector.clear(__USEDNUM_ISSET_ID);
  }

  /** Returns true if field usedNum is set (has been asigned a value) and false otherwise */
  public boolean isSetUsedNum() {
    return __isset_bit_vector.get(__USEDNUM_ISSET_ID);
  }

  public void setUsedNumIsSet(boolean value) {
    __isset_bit_vector.set(__USEDNUM_ISSET_ID, value);
  }

  public int getUnusedNum() {
    return this.unusedNum;
  }

  public ProductCardStatistics setUnusedNum(int unusedNum) {
    this.unusedNum = unusedNum;
    setUnusedNumIsSet(true);

    return this;
  }

  public void unsetUnusedNum() {
  __isset_bit_vector.clear(__UNUSEDNUM_ISSET_ID);
  }

  /** Returns true if field unusedNum is set (has been asigned a value) and false otherwise */
  public boolean isSetUnusedNum() {
    return __isset_bit_vector.get(__UNUSEDNUM_ISSET_ID);
  }

  public void setUnusedNumIsSet(boolean value) {
    __isset_bit_vector.set(__UNUSEDNUM_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public ProductCardStatistics setCreateTime(String createTime) {
    this.createTime = createTime;
    
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;
    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;
    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Integer)value);
      }
      break;
    case USED_NUM:
      if (value == null) {
        unsetUsedNum();
      } else {
        setUsedNum((Integer)value);
      }
      break;
    case UNUSED_NUM:
      if (value == null) {
        unsetUnusedNum();
      } else {
        setUnusedNum((Integer)value);
      }
      break;
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();
    case PRODUCT_NAME:
      return getProductName();
    case TOTAL:
      return new Integer(getTotal());
    case USED_NUM:
      return new Integer(getUsedNum());
    case UNUSED_NUM:
      return new Integer(getUnusedNum());
    case CREATE_TIME:
      return getCreateTime();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_NAME:
      return isSetProductName();
    case TOTAL:
      return isSetTotal();
    case USED_NUM:
      return isSetUsedNum();
    case UNUSED_NUM:
      return isSetUnusedNum();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductCardStatistics)
      return this.equals((ProductCardStatistics)that);
    return false;
  }

  public boolean equals(ProductCardStatistics that) {
    if (that == null)
      return false;
    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }
    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }
    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }
    boolean this_present_usedNum = true;
    boolean that_present_usedNum = true;
    if (this_present_usedNum || that_present_usedNum) {
      if (!(this_present_usedNum && that_present_usedNum))
        return false;
      if (this.usedNum != that.usedNum)
        return false;
    }
    boolean this_present_unusedNum = true;
    boolean that_present_unusedNum = true;
    if (this_present_unusedNum || that_present_unusedNum) {
      if (!(this_present_unusedNum && that_present_unusedNum))
        return false;
      if (this.unusedNum != that.unusedNum)
        return false;
    }
    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_productId = true && (isSetProductId());
    builder.append(present_productId);
    if (present_productId)
      builder.append(productId);
    boolean present_productName = true && (isSetProductName());
    builder.append(present_productName);
    if (present_productName)
      builder.append(productName);
    boolean present_total = true;
    builder.append(present_total);
    if (present_total)
      builder.append(total);
    boolean present_usedNum = true;
    builder.append(present_usedNum);
    if (present_usedNum)
      builder.append(usedNum);
    boolean present_unusedNum = true;
    builder.append(present_unusedNum);
    if (present_unusedNum)
      builder.append(unusedNum);
    boolean present_createTime = true && (isSetCreateTime());
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);
    return builder.toHashCode();
  }

  public int compareTo(ProductCardStatistics other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ProductCardStatistics typedOther = (ProductCardStatistics)other;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = TBaseHelper.compareTo(this.productId, typedOther.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(typedOther.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = TBaseHelper.compareTo(this.productName, typedOther.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(typedOther.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = TBaseHelper.compareTo(this.total, typedOther.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsedNum()).compareTo(typedOther.isSetUsedNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedNum()) {
      lastComparison = TBaseHelper.compareTo(this.usedNum, typedOther.usedNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnusedNum()).compareTo(typedOther.isSetUnusedNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnusedNum()) {
      lastComparison = TBaseHelper.compareTo(this.unusedNum, typedOther.unusedNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PRODUCT_ID
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PRODUCT_NAME
          if (field.type == TType.STRING) {
            this.productName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TOTAL
          if (field.type == TType.I32) {
            this.total = iprot.readI32();
            setTotalIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // USED_NUM
          if (field.type == TType.I32) {
            this.usedNum = iprot.readI32();
            setUsedNumIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // UNUSED_NUM
          if (field.type == TType.I32) {
            this.unusedNum = iprot.readI32();
            setUnusedNumIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // CREATE_TIME
          if (field.type == TType.STRING) {
            this.createTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.productId != null) {
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    if (this.productName != null) {
      oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
      oprot.writeString(this.productName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TOTAL_FIELD_DESC);
    oprot.writeI32(this.total);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(USED_NUM_FIELD_DESC);
    oprot.writeI32(this.usedNum);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UNUSED_NUM_FIELD_DESC);
    oprot.writeI32(this.unusedNum);
    oprot.writeFieldEnd();
    if (this.createTime != null) {
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeString(this.createTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductCardStatistics(");
    boolean first = true;
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("usedNum:");
    sb.append(this.usedNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unusedNum:");
    sb.append(this.unusedNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
