/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.stock;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

import com.twitter.util.Future;
import com.twitter.util.Function;
import com.twitter.util.Function2;
import com.twitter.finagle.thrift.ThriftClientRequest;

public class StockServ {
  public interface Iface {
    public com.jfshare.finagle.thrift.result.Result setStock(String tranId, StockInfo stockInfo) throws TException;
    public StockResult getStock(String productId) throws TException;
    public StockResult getStockForSku(String productId, List<String> skuNums) throws TException;
    public LockStockResult lockStock(String tranId, List<LockInfo> lockInfoList) throws TException;
    public com.jfshare.finagle.thrift.result.Result releaseStock(String tranId, List<LockInfo> lockInfoList) throws TException;
    public com.jfshare.finagle.thrift.result.Result releaseLockCount(String tranId, List<LockInfo> lockInfoList) throws TException;
    public com.jfshare.finagle.thrift.result.Result removeStock(String productId) throws TException;
    public com.jfshare.finagle.thrift.result.Result createStock(String tranId, StockInfo stockInfo) throws TException;
    public com.jfshare.finagle.thrift.result.Result supplyStock(String tranId, StockInfo stockInfo) throws TException;
    public com.jfshare.finagle.thrift.result.Result supplyFullStock(String tranId, StockInfo stockInfo) throws TException;
  }

  public interface AsyncIface {
    public void setStock(String tranId, StockInfo stockInfo, AsyncMethodCallback<AsyncClient.setStock_call> resultHandler) throws TException;
    public void getStock(String productId, AsyncMethodCallback<AsyncClient.getStock_call> resultHandler) throws TException;
    public void getStockForSku(String productId, List<String> skuNums, AsyncMethodCallback<AsyncClient.getStockForSku_call> resultHandler) throws TException;
    public void lockStock(String tranId, List<LockInfo> lockInfoList, AsyncMethodCallback<AsyncClient.lockStock_call> resultHandler) throws TException;
    public void releaseStock(String tranId, List<LockInfo> lockInfoList, AsyncMethodCallback<AsyncClient.releaseStock_call> resultHandler) throws TException;
    public void releaseLockCount(String tranId, List<LockInfo> lockInfoList, AsyncMethodCallback<AsyncClient.releaseLockCount_call> resultHandler) throws TException;
    public void removeStock(String productId, AsyncMethodCallback<AsyncClient.removeStock_call> resultHandler) throws TException;
    public void createStock(String tranId, StockInfo stockInfo, AsyncMethodCallback<AsyncClient.createStock_call> resultHandler) throws TException;
    public void supplyStock(String tranId, StockInfo stockInfo, AsyncMethodCallback<AsyncClient.supplyStock_call> resultHandler) throws TException;
    public void supplyFullStock(String tranId, StockInfo stockInfo, AsyncMethodCallback<AsyncClient.supplyFullStock_call> resultHandler) throws TException;
  }

  public interface ServiceIface {
    public Future<com.jfshare.finagle.thrift.result.Result> setStock(String tranId, StockInfo stockInfo);
    public Future<StockResult> getStock(String productId);
    public Future<StockResult> getStockForSku(String productId, List<String> skuNums);
    public Future<LockStockResult> lockStock(String tranId, List<LockInfo> lockInfoList);
    public Future<com.jfshare.finagle.thrift.result.Result> releaseStock(String tranId, List<LockInfo> lockInfoList);
    public Future<com.jfshare.finagle.thrift.result.Result> releaseLockCount(String tranId, List<LockInfo> lockInfoList);
    public Future<com.jfshare.finagle.thrift.result.Result> removeStock(String productId);
    public Future<com.jfshare.finagle.thrift.result.Result> createStock(String tranId, StockInfo stockInfo);
    public Future<com.jfshare.finagle.thrift.result.Result> supplyStock(String tranId, StockInfo stockInfo);
    public Future<com.jfshare.finagle.thrift.result.Result> supplyFullStock(String tranId, StockInfo stockInfo);
  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public com.jfshare.finagle.thrift.result.Result setStock(String tranId, StockInfo stockInfo) throws TException
    {
      send_setStock(tranId, stockInfo);
      return recv_setStock();
    }

    public void send_setStock(String tranId, StockInfo stockInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("setStock", TMessageType.CALL, ++seqid_));
      setStock_args args = new setStock_args();
      args.setTranId(tranId);
      args.setStockInfo(stockInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_setStock() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "setStock failed: out of sequence response");
      }
      setStock_result result = new setStock_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "setStock failed: unknown result");
    }
    public StockResult getStock(String productId) throws TException
    {
      send_getStock(productId);
      return recv_getStock();
    }

    public void send_getStock(String productId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getStock", TMessageType.CALL, ++seqid_));
      getStock_args args = new getStock_args();
      args.setProductId(productId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public StockResult recv_getStock() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getStock failed: out of sequence response");
      }
      getStock_result result = new getStock_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getStock failed: unknown result");
    }
    public StockResult getStockForSku(String productId, List<String> skuNums) throws TException
    {
      send_getStockForSku(productId, skuNums);
      return recv_getStockForSku();
    }

    public void send_getStockForSku(String productId, List<String> skuNums) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getStockForSku", TMessageType.CALL, ++seqid_));
      getStockForSku_args args = new getStockForSku_args();
      args.setProductId(productId);
      args.setSkuNums(skuNums);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public StockResult recv_getStockForSku() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getStockForSku failed: out of sequence response");
      }
      getStockForSku_result result = new getStockForSku_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getStockForSku failed: unknown result");
    }
    public LockStockResult lockStock(String tranId, List<LockInfo> lockInfoList) throws TException
    {
      send_lockStock(tranId, lockInfoList);
      return recv_lockStock();
    }

    public void send_lockStock(String tranId, List<LockInfo> lockInfoList) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lockStock", TMessageType.CALL, ++seqid_));
      lockStock_args args = new lockStock_args();
      args.setTranId(tranId);
      args.setLockInfoList(lockInfoList);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public LockStockResult recv_lockStock() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lockStock failed: out of sequence response");
      }
      lockStock_result result = new lockStock_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lockStock failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.Result releaseStock(String tranId, List<LockInfo> lockInfoList) throws TException
    {
      send_releaseStock(tranId, lockInfoList);
      return recv_releaseStock();
    }

    public void send_releaseStock(String tranId, List<LockInfo> lockInfoList) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("releaseStock", TMessageType.CALL, ++seqid_));
      releaseStock_args args = new releaseStock_args();
      args.setTranId(tranId);
      args.setLockInfoList(lockInfoList);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_releaseStock() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "releaseStock failed: out of sequence response");
      }
      releaseStock_result result = new releaseStock_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "releaseStock failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.Result releaseLockCount(String tranId, List<LockInfo> lockInfoList) throws TException
    {
      send_releaseLockCount(tranId, lockInfoList);
      return recv_releaseLockCount();
    }

    public void send_releaseLockCount(String tranId, List<LockInfo> lockInfoList) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("releaseLockCount", TMessageType.CALL, ++seqid_));
      releaseLockCount_args args = new releaseLockCount_args();
      args.setTranId(tranId);
      args.setLockInfoList(lockInfoList);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_releaseLockCount() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "releaseLockCount failed: out of sequence response");
      }
      releaseLockCount_result result = new releaseLockCount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "releaseLockCount failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.Result removeStock(String productId) throws TException
    {
      send_removeStock(productId);
      return recv_removeStock();
    }

    public void send_removeStock(String productId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removeStock", TMessageType.CALL, ++seqid_));
      removeStock_args args = new removeStock_args();
      args.setProductId(productId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_removeStock() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeStock failed: out of sequence response");
      }
      removeStock_result result = new removeStock_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "removeStock failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.Result createStock(String tranId, StockInfo stockInfo) throws TException
    {
      send_createStock(tranId, stockInfo);
      return recv_createStock();
    }

    public void send_createStock(String tranId, StockInfo stockInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createStock", TMessageType.CALL, ++seqid_));
      createStock_args args = new createStock_args();
      args.setTranId(tranId);
      args.setStockInfo(stockInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_createStock() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createStock failed: out of sequence response");
      }
      createStock_result result = new createStock_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createStock failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.Result supplyStock(String tranId, StockInfo stockInfo) throws TException
    {
      send_supplyStock(tranId, stockInfo);
      return recv_supplyStock();
    }

    public void send_supplyStock(String tranId, StockInfo stockInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("supplyStock", TMessageType.CALL, ++seqid_));
      supplyStock_args args = new supplyStock_args();
      args.setTranId(tranId);
      args.setStockInfo(stockInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_supplyStock() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "supplyStock failed: out of sequence response");
      }
      supplyStock_result result = new supplyStock_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "supplyStock failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.Result supplyFullStock(String tranId, StockInfo stockInfo) throws TException
    {
      send_supplyFullStock(tranId, stockInfo);
      return recv_supplyFullStock();
    }

    public void send_supplyFullStock(String tranId, StockInfo stockInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("supplyFullStock", TMessageType.CALL, ++seqid_));
      supplyFullStock_args args = new supplyFullStock_args();
      args.setTranId(tranId);
      args.setStockInfo(stockInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_supplyFullStock() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "supplyFullStock failed: out of sequence response");
      }
      supplyFullStock_result result = new supplyFullStock_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "supplyFullStock failed: unknown result");
    }
  }

  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void setStock(String tranId, StockInfo stockInfo, AsyncMethodCallback<setStock_call> resultHandler) throws TException {
      checkReady();
      setStock_call method_call = new setStock_call(tranId, stockInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class setStock_call extends TAsyncMethodCall {
      private String tranId;
      private StockInfo stockInfo;

      public setStock_call(String tranId, StockInfo stockInfo, AsyncMethodCallback<setStock_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tranId = tranId;
        this.stockInfo = stockInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("setStock", TMessageType.CALL, 0));
        setStock_args args = new setStock_args();
        args.setTranId(tranId);
        args.setStockInfo(stockInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setStock();
      }
     }
    public void getStock(String productId, AsyncMethodCallback<getStock_call> resultHandler) throws TException {
      checkReady();
      getStock_call method_call = new getStock_call(productId, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getStock_call extends TAsyncMethodCall {
      private String productId;

      public getStock_call(String productId, AsyncMethodCallback<getStock_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getStock", TMessageType.CALL, 0));
        getStock_args args = new getStock_args();
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StockResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStock();
      }
     }
    public void getStockForSku(String productId, List<String> skuNums, AsyncMethodCallback<getStockForSku_call> resultHandler) throws TException {
      checkReady();
      getStockForSku_call method_call = new getStockForSku_call(productId, skuNums, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getStockForSku_call extends TAsyncMethodCall {
      private String productId;
      private List<String> skuNums;

      public getStockForSku_call(String productId, List<String> skuNums, AsyncMethodCallback<getStockForSku_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
        this.skuNums = skuNums;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getStockForSku", TMessageType.CALL, 0));
        getStockForSku_args args = new getStockForSku_args();
        args.setProductId(productId);
        args.setSkuNums(skuNums);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StockResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStockForSku();
      }
     }
    public void lockStock(String tranId, List<LockInfo> lockInfoList, AsyncMethodCallback<lockStock_call> resultHandler) throws TException {
      checkReady();
      lockStock_call method_call = new lockStock_call(tranId, lockInfoList, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class lockStock_call extends TAsyncMethodCall {
      private String tranId;
      private List<LockInfo> lockInfoList;

      public lockStock_call(String tranId, List<LockInfo> lockInfoList, AsyncMethodCallback<lockStock_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tranId = tranId;
        this.lockInfoList = lockInfoList;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("lockStock", TMessageType.CALL, 0));
        lockStock_args args = new lockStock_args();
        args.setTranId(tranId);
        args.setLockInfoList(lockInfoList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LockStockResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lockStock();
      }
     }
    public void releaseStock(String tranId, List<LockInfo> lockInfoList, AsyncMethodCallback<releaseStock_call> resultHandler) throws TException {
      checkReady();
      releaseStock_call method_call = new releaseStock_call(tranId, lockInfoList, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class releaseStock_call extends TAsyncMethodCall {
      private String tranId;
      private List<LockInfo> lockInfoList;

      public releaseStock_call(String tranId, List<LockInfo> lockInfoList, AsyncMethodCallback<releaseStock_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tranId = tranId;
        this.lockInfoList = lockInfoList;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("releaseStock", TMessageType.CALL, 0));
        releaseStock_args args = new releaseStock_args();
        args.setTranId(tranId);
        args.setLockInfoList(lockInfoList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_releaseStock();
      }
     }
    public void releaseLockCount(String tranId, List<LockInfo> lockInfoList, AsyncMethodCallback<releaseLockCount_call> resultHandler) throws TException {
      checkReady();
      releaseLockCount_call method_call = new releaseLockCount_call(tranId, lockInfoList, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class releaseLockCount_call extends TAsyncMethodCall {
      private String tranId;
      private List<LockInfo> lockInfoList;

      public releaseLockCount_call(String tranId, List<LockInfo> lockInfoList, AsyncMethodCallback<releaseLockCount_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tranId = tranId;
        this.lockInfoList = lockInfoList;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("releaseLockCount", TMessageType.CALL, 0));
        releaseLockCount_args args = new releaseLockCount_args();
        args.setTranId(tranId);
        args.setLockInfoList(lockInfoList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_releaseLockCount();
      }
     }
    public void removeStock(String productId, AsyncMethodCallback<removeStock_call> resultHandler) throws TException {
      checkReady();
      removeStock_call method_call = new removeStock_call(productId, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class removeStock_call extends TAsyncMethodCall {
      private String productId;

      public removeStock_call(String productId, AsyncMethodCallback<removeStock_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("removeStock", TMessageType.CALL, 0));
        removeStock_args args = new removeStock_args();
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeStock();
      }
     }
    public void createStock(String tranId, StockInfo stockInfo, AsyncMethodCallback<createStock_call> resultHandler) throws TException {
      checkReady();
      createStock_call method_call = new createStock_call(tranId, stockInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class createStock_call extends TAsyncMethodCall {
      private String tranId;
      private StockInfo stockInfo;

      public createStock_call(String tranId, StockInfo stockInfo, AsyncMethodCallback<createStock_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tranId = tranId;
        this.stockInfo = stockInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("createStock", TMessageType.CALL, 0));
        createStock_args args = new createStock_args();
        args.setTranId(tranId);
        args.setStockInfo(stockInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createStock();
      }
     }
    public void supplyStock(String tranId, StockInfo stockInfo, AsyncMethodCallback<supplyStock_call> resultHandler) throws TException {
      checkReady();
      supplyStock_call method_call = new supplyStock_call(tranId, stockInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class supplyStock_call extends TAsyncMethodCall {
      private String tranId;
      private StockInfo stockInfo;

      public supplyStock_call(String tranId, StockInfo stockInfo, AsyncMethodCallback<supplyStock_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tranId = tranId;
        this.stockInfo = stockInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("supplyStock", TMessageType.CALL, 0));
        supplyStock_args args = new supplyStock_args();
        args.setTranId(tranId);
        args.setStockInfo(stockInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_supplyStock();
      }
     }
    public void supplyFullStock(String tranId, StockInfo stockInfo, AsyncMethodCallback<supplyFullStock_call> resultHandler) throws TException {
      checkReady();
      supplyFullStock_call method_call = new supplyFullStock_call(tranId, stockInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class supplyFullStock_call extends TAsyncMethodCall {
      private String tranId;
      private StockInfo stockInfo;

      public supplyFullStock_call(String tranId, StockInfo stockInfo, AsyncMethodCallback<supplyFullStock_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tranId = tranId;
        this.stockInfo = stockInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("supplyFullStock", TMessageType.CALL, 0));
        supplyFullStock_args args = new supplyFullStock_args();
        args.setTranId(tranId);
        args.setStockInfo(stockInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_supplyFullStock();
      }
     }
   }


  public static class ServiceToClient implements ServiceIface {
    private com.twitter.finagle.Service<ThriftClientRequest, byte[]> service;
    private TProtocolFactory protocolFactory;
    public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service, TProtocolFactory protocolFactory) {
      
      this.service = service;
      this.protocolFactory = protocolFactory;
    }

    public Future<com.jfshare.finagle.thrift.result.Result> setStock(String tranId, StockInfo stockInfo) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("setStock", TMessageType.CALL, 0));
        setStock_args __args__ = new setStock_args();
        __args__.setTranId(tranId);
        __args__.setStockInfo(stockInfo);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_setStock());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<StockResult> getStock(String productId) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("getStock", TMessageType.CALL, 0));
        getStock_args __args__ = new getStock_args();
        __args__.setProductId(productId);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<StockResult>>() {
          public Future<StockResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_getStock());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<StockResult> getStockForSku(String productId, List<String> skuNums) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("getStockForSku", TMessageType.CALL, 0));
        getStockForSku_args __args__ = new getStockForSku_args();
        __args__.setProductId(productId);
        __args__.setSkuNums(skuNums);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<StockResult>>() {
          public Future<StockResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_getStockForSku());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<LockStockResult> lockStock(String tranId, List<LockInfo> lockInfoList) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("lockStock", TMessageType.CALL, 0));
        lockStock_args __args__ = new lockStock_args();
        __args__.setTranId(tranId);
        __args__.setLockInfoList(lockInfoList);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<LockStockResult>>() {
          public Future<LockStockResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_lockStock());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.Result> releaseStock(String tranId, List<LockInfo> lockInfoList) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("releaseStock", TMessageType.CALL, 0));
        releaseStock_args __args__ = new releaseStock_args();
        __args__.setTranId(tranId);
        __args__.setLockInfoList(lockInfoList);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_releaseStock());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.Result> releaseLockCount(String tranId, List<LockInfo> lockInfoList) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("releaseLockCount", TMessageType.CALL, 0));
        releaseLockCount_args __args__ = new releaseLockCount_args();
        __args__.setTranId(tranId);
        __args__.setLockInfoList(lockInfoList);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_releaseLockCount());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.Result> removeStock(String productId) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("removeStock", TMessageType.CALL, 0));
        removeStock_args __args__ = new removeStock_args();
        __args__.setProductId(productId);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_removeStock());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.Result> createStock(String tranId, StockInfo stockInfo) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("createStock", TMessageType.CALL, 0));
        createStock_args __args__ = new createStock_args();
        __args__.setTranId(tranId);
        __args__.setStockInfo(stockInfo);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_createStock());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.Result> supplyStock(String tranId, StockInfo stockInfo) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("supplyStock", TMessageType.CALL, 0));
        supplyStock_args __args__ = new supplyStock_args();
        __args__.setTranId(tranId);
        __args__.setStockInfo(stockInfo);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_supplyStock());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.Result> supplyFullStock(String tranId, StockInfo stockInfo) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("supplyFullStock", TMessageType.CALL, 0));
        supplyFullStock_args __args__ = new supplyFullStock_args();
        __args__.setTranId(tranId);
        __args__.setStockInfo(stockInfo);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_supplyFullStock());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("setStock", new setStock());
      processMap_.put("getStock", new getStock());
      processMap_.put("getStockForSku", new getStockForSku());
      processMap_.put("lockStock", new lockStock());
      processMap_.put("releaseStock", new releaseStock());
      processMap_.put("releaseLockCount", new releaseLockCount());
      processMap_.put("removeStock", new removeStock());
      processMap_.put("createStock", new createStock());
      processMap_.put("supplyStock", new supplyStock());
      processMap_.put("supplyFullStock", new supplyFullStock());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class setStock implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        setStock_args args = new setStock_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("setStock", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        setStock_result result = new setStock_result();
        result.success = iface_.setStock(args.tranId, args.stockInfo);
        
        oprot.writeMessageBegin(new TMessage("setStock", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class getStock implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getStock_args args = new getStock_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getStock", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getStock_result result = new getStock_result();
        result.success = iface_.getStock(args.productId);
        
        oprot.writeMessageBegin(new TMessage("getStock", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class getStockForSku implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getStockForSku_args args = new getStockForSku_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getStockForSku", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getStockForSku_result result = new getStockForSku_result();
        result.success = iface_.getStockForSku(args.productId, args.skuNums);
        
        oprot.writeMessageBegin(new TMessage("getStockForSku", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class lockStock implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lockStock_args args = new lockStock_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lockStock", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lockStock_result result = new lockStock_result();
        result.success = iface_.lockStock(args.tranId, args.lockInfoList);
        
        oprot.writeMessageBegin(new TMessage("lockStock", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class releaseStock implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        releaseStock_args args = new releaseStock_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("releaseStock", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        releaseStock_result result = new releaseStock_result();
        result.success = iface_.releaseStock(args.tranId, args.lockInfoList);
        
        oprot.writeMessageBegin(new TMessage("releaseStock", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class releaseLockCount implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        releaseLockCount_args args = new releaseLockCount_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("releaseLockCount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        releaseLockCount_result result = new releaseLockCount_result();
        result.success = iface_.releaseLockCount(args.tranId, args.lockInfoList);
        
        oprot.writeMessageBegin(new TMessage("releaseLockCount", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class removeStock implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        removeStock_args args = new removeStock_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeStock", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeStock_result result = new removeStock_result();
        result.success = iface_.removeStock(args.productId);
        
        oprot.writeMessageBegin(new TMessage("removeStock", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class createStock implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createStock_args args = new createStock_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createStock", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createStock_result result = new createStock_result();
        result.success = iface_.createStock(args.tranId, args.stockInfo);
        
        oprot.writeMessageBegin(new TMessage("createStock", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class supplyStock implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        supplyStock_args args = new supplyStock_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("supplyStock", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        supplyStock_result result = new supplyStock_result();
        result.success = iface_.supplyStock(args.tranId, args.stockInfo);
        
        oprot.writeMessageBegin(new TMessage("supplyStock", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class supplyFullStock implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        supplyFullStock_args args = new supplyFullStock_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("supplyFullStock", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        supplyFullStock_result result = new supplyFullStock_result();
        result.success = iface_.supplyFullStock(args.tranId, args.stockInfo);
        
        oprot.writeMessageBegin(new TMessage("supplyFullStock", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
  }

  public static class Service extends com.twitter.finagle.Service<byte[], byte[]> {
    private final ServiceIface iface;
    private final TProtocolFactory protocolFactory;
    protected HashMap<String, Function2<TProtocol, Integer, Future<byte[]>>> functionMap = new HashMap<String, Function2<TProtocol, Integer, Future<byte[]>>>();
    public Service(final ServiceIface iface, final TProtocolFactory protocolFactory) {
      this.iface = iface;
      this.protocolFactory = protocolFactory;
      functionMap.put("setStock", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          setStock_args args = new setStock_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("setStock", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.setStock(args.tranId, args.stockInfo);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                setStock_result result = new setStock_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("setStock", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("getStock", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          getStock_args args = new getStock_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("getStock", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<StockResult> future;
          try {
            future = iface.getStock(args.productId);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<StockResult, Future<byte[]>>() {
              public Future<byte[]> apply(StockResult value) {
                getStock_result result = new getStock_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("getStock", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("getStockForSku", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          getStockForSku_args args = new getStockForSku_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("getStockForSku", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<StockResult> future;
          try {
            future = iface.getStockForSku(args.productId, args.skuNums);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<StockResult, Future<byte[]>>() {
              public Future<byte[]> apply(StockResult value) {
                getStockForSku_result result = new getStockForSku_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("getStockForSku", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("lockStock", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          lockStock_args args = new lockStock_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("lockStock", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<LockStockResult> future;
          try {
            future = iface.lockStock(args.tranId, args.lockInfoList);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<LockStockResult, Future<byte[]>>() {
              public Future<byte[]> apply(LockStockResult value) {
                lockStock_result result = new lockStock_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("lockStock", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("releaseStock", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          releaseStock_args args = new releaseStock_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("releaseStock", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.releaseStock(args.tranId, args.lockInfoList);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                releaseStock_result result = new releaseStock_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("releaseStock", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("releaseLockCount", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          releaseLockCount_args args = new releaseLockCount_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("releaseLockCount", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.releaseLockCount(args.tranId, args.lockInfoList);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                releaseLockCount_result result = new releaseLockCount_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("releaseLockCount", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("removeStock", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          removeStock_args args = new removeStock_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("removeStock", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.removeStock(args.productId);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                removeStock_result result = new removeStock_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("removeStock", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("createStock", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          createStock_args args = new createStock_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("createStock", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.createStock(args.tranId, args.stockInfo);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                createStock_result result = new createStock_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("createStock", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("supplyStock", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          supplyStock_args args = new supplyStock_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("supplyStock", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.supplyStock(args.tranId, args.stockInfo);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                supplyStock_result result = new supplyStock_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("supplyStock", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("supplyFullStock", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          supplyFullStock_args args = new supplyFullStock_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("supplyFullStock", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.supplyFullStock(args.tranId, args.stockInfo);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                supplyFullStock_result result = new supplyFullStock_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("supplyFullStock", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
    }

    public Future<byte[]> apply(byte[] request) {
      TTransport inputTransport = new TMemoryInputTransport(request);
      TProtocol iprot = protocolFactory.getProtocol(inputTransport);

      TMessage msg;
      try {
        msg = iprot.readMessageBegin();
      } catch (Exception e) {
        return Future.exception(e);
      }

      Function2<TProtocol, Integer, Future<byte[]>> fn = functionMap.get(msg.name);
      if (fn == null) {
        try {
          TProtocolUtil.skip(iprot, TType.STRUCT);
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
          TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
          TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
          oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
        } catch (Exception e) {
          return Future.exception(e);
        }
      }

      return fn.apply(iprot, msg.seqid);
    }
  }

  public static class setStock_args implements TBase<setStock_args, setStock_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("setStock_args");

  private static final TField TRAN_ID_FIELD_DESC = new TField("tranId", TType.STRING, (short)1);
  private static final TField STOCK_INFO_FIELD_DESC = new TField("stockInfo", TType.STRUCT, (short)2);


  public String tranId;
  public StockInfo stockInfo;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TRAN_ID((short)1, "tranId"),
    STOCK_INFO((short)2, "stockInfo");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRAN_ID
  	return TRAN_ID;
        case 2: // STOCK_INFO
  	return STOCK_INFO;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRAN_ID, new FieldMetaData("tranId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.STOCK_INFO, new FieldMetaData("stockInfo", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, StockInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(setStock_args.class, metaDataMap);
  }


  public setStock_args() {
  }

  public setStock_args(
    String tranId,
    StockInfo stockInfo)
  {
    this();
    this.tranId = tranId;
    this.stockInfo = stockInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public setStock_args(setStock_args other) {
    if (other.isSetTranId()) {
      this.tranId = other.tranId;
    }
    if (other.isSetStockInfo()) {
      this.stockInfo = new StockInfo(other.stockInfo);
    }
  }

  public setStock_args deepCopy() {
    return new setStock_args(this);
  }

  @Override
  public void clear() {
    this.tranId = null;
    this.stockInfo = null;
  }

  public String getTranId() {
    return this.tranId;
  }

  public setStock_args setTranId(String tranId) {
    this.tranId = tranId;
    
    return this;
  }

  public void unsetTranId() {
    this.tranId = null;
  }

  /** Returns true if field tranId is set (has been asigned a value) and false otherwise */
  public boolean isSetTranId() {
    return this.tranId != null;
  }

  public void setTranIdIsSet(boolean value) {
    if (!value) {
      this.tranId = null;
    }
  }

  public StockInfo getStockInfo() {
    return this.stockInfo;
  }

  public setStock_args setStockInfo(StockInfo stockInfo) {
    this.stockInfo = stockInfo;
    
    return this;
  }

  public void unsetStockInfo() {
    this.stockInfo = null;
  }

  /** Returns true if field stockInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetStockInfo() {
    return this.stockInfo != null;
  }

  public void setStockInfoIsSet(boolean value) {
    if (!value) {
      this.stockInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRAN_ID:
      if (value == null) {
        unsetTranId();
      } else {
        setTranId((String)value);
      }
      break;
    case STOCK_INFO:
      if (value == null) {
        unsetStockInfo();
      } else {
        setStockInfo((StockInfo)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRAN_ID:
      return getTranId();
    case STOCK_INFO:
      return getStockInfo();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRAN_ID:
      return isSetTranId();
    case STOCK_INFO:
      return isSetStockInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof setStock_args)
      return this.equals((setStock_args)that);
    return false;
  }

  public boolean equals(setStock_args that) {
    if (that == null)
      return false;
    boolean this_present_tranId = true && this.isSetTranId();
    boolean that_present_tranId = true && that.isSetTranId();
    if (this_present_tranId || that_present_tranId) {
      if (!(this_present_tranId && that_present_tranId))
        return false;
      if (!this.tranId.equals(that.tranId))
        return false;
    }
    boolean this_present_stockInfo = true && this.isSetStockInfo();
    boolean that_present_stockInfo = true && that.isSetStockInfo();
    if (this_present_stockInfo || that_present_stockInfo) {
      if (!(this_present_stockInfo && that_present_stockInfo))
        return false;
      if (!this.stockInfo.equals(that.stockInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_tranId = true && (isSetTranId());
    builder.append(present_tranId);
    if (present_tranId)
      builder.append(tranId);
    boolean present_stockInfo = true && (isSetStockInfo());
    builder.append(present_stockInfo);
    if (present_stockInfo)
      builder.append(stockInfo);
    return builder.toHashCode();
  }

  public int compareTo(setStock_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    setStock_args typedOther = (setStock_args)other;

    lastComparison = Boolean.valueOf(isSetTranId()).compareTo(typedOther.isSetTranId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTranId()) {
      lastComparison = TBaseHelper.compareTo(this.tranId, typedOther.tranId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStockInfo()).compareTo(typedOther.isSetStockInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStockInfo()) {
      lastComparison = TBaseHelper.compareTo(this.stockInfo, typedOther.stockInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // TRAN_ID
          if (field.type == TType.STRING) {
            this.tranId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STOCK_INFO
          if (field.type == TType.STRUCT) {
            this.stockInfo = new StockInfo();
            this.stockInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.tranId != null) {
      oprot.writeFieldBegin(TRAN_ID_FIELD_DESC);
      oprot.writeString(this.tranId);
      oprot.writeFieldEnd();
    }
    if (this.stockInfo != null) {
      oprot.writeFieldBegin(STOCK_INFO_FIELD_DESC);
      this.stockInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("setStock_args(");
    boolean first = true;
    sb.append("tranId:");
    if (this.tranId == null) {
      sb.append("null");
    } else {
      sb.append(this.tranId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stockInfo:");
    if (this.stockInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.stockInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class setStock_result implements TBase<setStock_result, setStock_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("setStock_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(setStock_result.class, metaDataMap);
  }


  public setStock_result() {
  }

  public setStock_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public setStock_result(setStock_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public setStock_result deepCopy() {
    return new setStock_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public setStock_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof setStock_result)
      return this.equals((setStock_result)that);
    return false;
  }

  public boolean equals(setStock_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(setStock_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    setStock_result typedOther = (setStock_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("setStock_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class getStock_args implements TBase<getStock_args, getStock_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("getStock_args");

  private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, (short)1);


  public String productId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PRODUCT_ID((short)1, "productId");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
  	return PRODUCT_ID;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new FieldMetaData("productId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(getStock_args.class, metaDataMap);
  }


  public getStock_args() {
  }

  public getStock_args(
    String productId)
  {
    this();
    this.productId = productId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public getStock_args(getStock_args other) {
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
  }

  public getStock_args deepCopy() {
    return new getStock_args(this);
  }

  @Override
  public void clear() {
    this.productId = null;
  }

  public String getProductId() {
    return this.productId;
  }

  public getStock_args setProductId(String productId) {
    this.productId = productId;
    
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been asigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof getStock_args)
      return this.equals((getStock_args)that);
    return false;
  }

  public boolean equals(getStock_args that) {
    if (that == null)
      return false;
    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_productId = true && (isSetProductId());
    builder.append(present_productId);
    if (present_productId)
      builder.append(productId);
    return builder.toHashCode();
  }

  public int compareTo(getStock_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    getStock_args typedOther = (getStock_args)other;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = TBaseHelper.compareTo(this.productId, typedOther.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PRODUCT_ID
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.productId != null) {
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("getStock_args(");
    boolean first = true;
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class getStock_result implements TBase<getStock_result, getStock_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("getStock_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public StockResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, StockResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(getStock_result.class, metaDataMap);
  }


  public getStock_result() {
  }

  public getStock_result(
    StockResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public getStock_result(getStock_result other) {
    if (other.isSetSuccess()) {
      this.success = new StockResult(other.success);
    }
  }

  public getStock_result deepCopy() {
    return new getStock_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public StockResult getSuccess() {
    return this.success;
  }

  public getStock_result setSuccess(StockResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((StockResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof getStock_result)
      return this.equals((getStock_result)that);
    return false;
  }

  public boolean equals(getStock_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(getStock_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    getStock_result typedOther = (getStock_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new StockResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("getStock_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class getStockForSku_args implements TBase<getStockForSku_args, getStockForSku_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("getStockForSku_args");

  private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, (short)1);
  private static final TField SKU_NUMS_FIELD_DESC = new TField("skuNums", TType.LIST, (short)2);


  public String productId;
  public List<String> skuNums;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PRODUCT_ID((short)1, "productId"),
    SKU_NUMS((short)2, "skuNums");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
  	return PRODUCT_ID;
        case 2: // SKU_NUMS
  	return SKU_NUMS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new FieldMetaData("productId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SKU_NUMS, new FieldMetaData("skuNums", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(getStockForSku_args.class, metaDataMap);
  }


  public getStockForSku_args() {
  }

  public getStockForSku_args(
    String productId,
    List<String> skuNums)
  {
    this();
    this.productId = productId;
    this.skuNums = skuNums;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public getStockForSku_args(getStockForSku_args other) {
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetSkuNums()) {
      List<String> __this__skuNums = new ArrayList<String>();
      for (String other_element : other.skuNums) {
        __this__skuNums.add(other_element);
      }
      this.skuNums = __this__skuNums;
    }
  }

  public getStockForSku_args deepCopy() {
    return new getStockForSku_args(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    this.skuNums = null;
  }

  public String getProductId() {
    return this.productId;
  }

  public getStockForSku_args setProductId(String productId) {
    this.productId = productId;
    
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been asigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public int getSkuNumsSize() {
    return (this.skuNums == null) ? 0 : this.skuNums.size();
  }

  public java.util.Iterator<String> getSkuNumsIterator() {
    return (this.skuNums == null) ? null : this.skuNums.iterator();
  }

  public void addToSkuNums(String elem) {
    if (this.skuNums == null) {
      this.skuNums = new ArrayList<String>();
    }
    this.skuNums.add(elem);
  }

  public List<String> getSkuNums() {
    return this.skuNums;
  }

  public getStockForSku_args setSkuNums(List<String> skuNums) {
    this.skuNums = skuNums;
    
    return this;
  }

  public void unsetSkuNums() {
    this.skuNums = null;
  }

  /** Returns true if field skuNums is set (has been asigned a value) and false otherwise */
  public boolean isSetSkuNums() {
    return this.skuNums != null;
  }

  public void setSkuNumsIsSet(boolean value) {
    if (!value) {
      this.skuNums = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;
    case SKU_NUMS:
      if (value == null) {
        unsetSkuNums();
      } else {
        setSkuNums((List<String>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();
    case SKU_NUMS:
      return getSkuNums();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case SKU_NUMS:
      return isSetSkuNums();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof getStockForSku_args)
      return this.equals((getStockForSku_args)that);
    return false;
  }

  public boolean equals(getStockForSku_args that) {
    if (that == null)
      return false;
    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }
    boolean this_present_skuNums = true && this.isSetSkuNums();
    boolean that_present_skuNums = true && that.isSetSkuNums();
    if (this_present_skuNums || that_present_skuNums) {
      if (!(this_present_skuNums && that_present_skuNums))
        return false;
      if (!this.skuNums.equals(that.skuNums))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_productId = true && (isSetProductId());
    builder.append(present_productId);
    if (present_productId)
      builder.append(productId);
    boolean present_skuNums = true && (isSetSkuNums());
    builder.append(present_skuNums);
    if (present_skuNums)
      builder.append(skuNums);
    return builder.toHashCode();
  }

  public int compareTo(getStockForSku_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    getStockForSku_args typedOther = (getStockForSku_args)other;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = TBaseHelper.compareTo(this.productId, typedOther.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkuNums()).compareTo(typedOther.isSetSkuNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkuNums()) {
      lastComparison = TBaseHelper.compareTo(this.skuNums, typedOther.skuNums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PRODUCT_ID
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SKU_NUMS
          if (field.type == TType.LIST) {
            {
            TList _list13 = iprot.readListBegin();
            this.skuNums = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              String _elem15;
              _elem15 = iprot.readString();
              this.skuNums.add(_elem15);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.productId != null) {
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    if (this.skuNums != null) {
      oprot.writeFieldBegin(SKU_NUMS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.skuNums.size()));
        for (String _iter16 : this.skuNums)
        {
          oprot.writeString(_iter16);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("getStockForSku_args(");
    boolean first = true;
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("skuNums:");
    if (this.skuNums == null) {
      sb.append("null");
    } else {
      sb.append(this.skuNums);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class getStockForSku_result implements TBase<getStockForSku_result, getStockForSku_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("getStockForSku_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public StockResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, StockResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(getStockForSku_result.class, metaDataMap);
  }


  public getStockForSku_result() {
  }

  public getStockForSku_result(
    StockResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public getStockForSku_result(getStockForSku_result other) {
    if (other.isSetSuccess()) {
      this.success = new StockResult(other.success);
    }
  }

  public getStockForSku_result deepCopy() {
    return new getStockForSku_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public StockResult getSuccess() {
    return this.success;
  }

  public getStockForSku_result setSuccess(StockResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((StockResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof getStockForSku_result)
      return this.equals((getStockForSku_result)that);
    return false;
  }

  public boolean equals(getStockForSku_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(getStockForSku_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    getStockForSku_result typedOther = (getStockForSku_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new StockResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("getStockForSku_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class lockStock_args implements TBase<lockStock_args, lockStock_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("lockStock_args");

  private static final TField TRAN_ID_FIELD_DESC = new TField("tranId", TType.STRING, (short)1);
  private static final TField LOCK_INFO_LIST_FIELD_DESC = new TField("lockInfoList", TType.LIST, (short)2);


  public String tranId;
  public List<LockInfo> lockInfoList;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TRAN_ID((short)1, "tranId"),
    LOCK_INFO_LIST((short)2, "lockInfoList");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRAN_ID
  	return TRAN_ID;
        case 2: // LOCK_INFO_LIST
  	return LOCK_INFO_LIST;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRAN_ID, new FieldMetaData("tranId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LOCK_INFO_LIST, new FieldMetaData("lockInfoList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, LockInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(lockStock_args.class, metaDataMap);
  }


  public lockStock_args() {
  }

  public lockStock_args(
    String tranId,
    List<LockInfo> lockInfoList)
  {
    this();
    this.tranId = tranId;
    this.lockInfoList = lockInfoList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public lockStock_args(lockStock_args other) {
    if (other.isSetTranId()) {
      this.tranId = other.tranId;
    }
    if (other.isSetLockInfoList()) {
      List<LockInfo> __this__lockInfoList = new ArrayList<LockInfo>();
      for (LockInfo other_element : other.lockInfoList) {
        __this__lockInfoList.add(new LockInfo(other_element));
      }
      this.lockInfoList = __this__lockInfoList;
    }
  }

  public lockStock_args deepCopy() {
    return new lockStock_args(this);
  }

  @Override
  public void clear() {
    this.tranId = null;
    this.lockInfoList = null;
  }

  public String getTranId() {
    return this.tranId;
  }

  public lockStock_args setTranId(String tranId) {
    this.tranId = tranId;
    
    return this;
  }

  public void unsetTranId() {
    this.tranId = null;
  }

  /** Returns true if field tranId is set (has been asigned a value) and false otherwise */
  public boolean isSetTranId() {
    return this.tranId != null;
  }

  public void setTranIdIsSet(boolean value) {
    if (!value) {
      this.tranId = null;
    }
  }

  public int getLockInfoListSize() {
    return (this.lockInfoList == null) ? 0 : this.lockInfoList.size();
  }

  public java.util.Iterator<LockInfo> getLockInfoListIterator() {
    return (this.lockInfoList == null) ? null : this.lockInfoList.iterator();
  }

  public void addToLockInfoList(LockInfo elem) {
    if (this.lockInfoList == null) {
      this.lockInfoList = new ArrayList<LockInfo>();
    }
    this.lockInfoList.add(elem);
  }

  public List<LockInfo> getLockInfoList() {
    return this.lockInfoList;
  }

  public lockStock_args setLockInfoList(List<LockInfo> lockInfoList) {
    this.lockInfoList = lockInfoList;
    
    return this;
  }

  public void unsetLockInfoList() {
    this.lockInfoList = null;
  }

  /** Returns true if field lockInfoList is set (has been asigned a value) and false otherwise */
  public boolean isSetLockInfoList() {
    return this.lockInfoList != null;
  }

  public void setLockInfoListIsSet(boolean value) {
    if (!value) {
      this.lockInfoList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRAN_ID:
      if (value == null) {
        unsetTranId();
      } else {
        setTranId((String)value);
      }
      break;
    case LOCK_INFO_LIST:
      if (value == null) {
        unsetLockInfoList();
      } else {
        setLockInfoList((List<LockInfo>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRAN_ID:
      return getTranId();
    case LOCK_INFO_LIST:
      return getLockInfoList();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRAN_ID:
      return isSetTranId();
    case LOCK_INFO_LIST:
      return isSetLockInfoList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof lockStock_args)
      return this.equals((lockStock_args)that);
    return false;
  }

  public boolean equals(lockStock_args that) {
    if (that == null)
      return false;
    boolean this_present_tranId = true && this.isSetTranId();
    boolean that_present_tranId = true && that.isSetTranId();
    if (this_present_tranId || that_present_tranId) {
      if (!(this_present_tranId && that_present_tranId))
        return false;
      if (!this.tranId.equals(that.tranId))
        return false;
    }
    boolean this_present_lockInfoList = true && this.isSetLockInfoList();
    boolean that_present_lockInfoList = true && that.isSetLockInfoList();
    if (this_present_lockInfoList || that_present_lockInfoList) {
      if (!(this_present_lockInfoList && that_present_lockInfoList))
        return false;
      if (!this.lockInfoList.equals(that.lockInfoList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_tranId = true && (isSetTranId());
    builder.append(present_tranId);
    if (present_tranId)
      builder.append(tranId);
    boolean present_lockInfoList = true && (isSetLockInfoList());
    builder.append(present_lockInfoList);
    if (present_lockInfoList)
      builder.append(lockInfoList);
    return builder.toHashCode();
  }

  public int compareTo(lockStock_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    lockStock_args typedOther = (lockStock_args)other;

    lastComparison = Boolean.valueOf(isSetTranId()).compareTo(typedOther.isSetTranId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTranId()) {
      lastComparison = TBaseHelper.compareTo(this.tranId, typedOther.tranId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLockInfoList()).compareTo(typedOther.isSetLockInfoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockInfoList()) {
      lastComparison = TBaseHelper.compareTo(this.lockInfoList, typedOther.lockInfoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // TRAN_ID
          if (field.type == TType.STRING) {
            this.tranId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LOCK_INFO_LIST
          if (field.type == TType.LIST) {
            {
            TList _list17 = iprot.readListBegin();
            this.lockInfoList = new ArrayList<LockInfo>(_list17.size);
            for (int _i18 = 0; _i18 < _list17.size; ++_i18)
            {
              LockInfo _elem19;
              _elem19 = new LockInfo();
              _elem19.read(iprot);
              this.lockInfoList.add(_elem19);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.tranId != null) {
      oprot.writeFieldBegin(TRAN_ID_FIELD_DESC);
      oprot.writeString(this.tranId);
      oprot.writeFieldEnd();
    }
    if (this.lockInfoList != null) {
      oprot.writeFieldBegin(LOCK_INFO_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.lockInfoList.size()));
        for (LockInfo _iter20 : this.lockInfoList)
        {
          _iter20.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("lockStock_args(");
    boolean first = true;
    sb.append("tranId:");
    if (this.tranId == null) {
      sb.append("null");
    } else {
      sb.append(this.tranId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lockInfoList:");
    if (this.lockInfoList == null) {
      sb.append("null");
    } else {
      sb.append(this.lockInfoList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class lockStock_result implements TBase<lockStock_result, lockStock_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("lockStock_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public LockStockResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, LockStockResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(lockStock_result.class, metaDataMap);
  }


  public lockStock_result() {
  }

  public lockStock_result(
    LockStockResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public lockStock_result(lockStock_result other) {
    if (other.isSetSuccess()) {
      this.success = new LockStockResult(other.success);
    }
  }

  public lockStock_result deepCopy() {
    return new lockStock_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public LockStockResult getSuccess() {
    return this.success;
  }

  public lockStock_result setSuccess(LockStockResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((LockStockResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof lockStock_result)
      return this.equals((lockStock_result)that);
    return false;
  }

  public boolean equals(lockStock_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(lockStock_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    lockStock_result typedOther = (lockStock_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new LockStockResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("lockStock_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class releaseStock_args implements TBase<releaseStock_args, releaseStock_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("releaseStock_args");

  private static final TField TRAN_ID_FIELD_DESC = new TField("tranId", TType.STRING, (short)1);
  private static final TField LOCK_INFO_LIST_FIELD_DESC = new TField("lockInfoList", TType.LIST, (short)2);


  public String tranId;
  public List<LockInfo> lockInfoList;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TRAN_ID((short)1, "tranId"),
    LOCK_INFO_LIST((short)2, "lockInfoList");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRAN_ID
  	return TRAN_ID;
        case 2: // LOCK_INFO_LIST
  	return LOCK_INFO_LIST;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRAN_ID, new FieldMetaData("tranId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LOCK_INFO_LIST, new FieldMetaData("lockInfoList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, LockInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(releaseStock_args.class, metaDataMap);
  }


  public releaseStock_args() {
  }

  public releaseStock_args(
    String tranId,
    List<LockInfo> lockInfoList)
  {
    this();
    this.tranId = tranId;
    this.lockInfoList = lockInfoList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public releaseStock_args(releaseStock_args other) {
    if (other.isSetTranId()) {
      this.tranId = other.tranId;
    }
    if (other.isSetLockInfoList()) {
      List<LockInfo> __this__lockInfoList = new ArrayList<LockInfo>();
      for (LockInfo other_element : other.lockInfoList) {
        __this__lockInfoList.add(new LockInfo(other_element));
      }
      this.lockInfoList = __this__lockInfoList;
    }
  }

  public releaseStock_args deepCopy() {
    return new releaseStock_args(this);
  }

  @Override
  public void clear() {
    this.tranId = null;
    this.lockInfoList = null;
  }

  public String getTranId() {
    return this.tranId;
  }

  public releaseStock_args setTranId(String tranId) {
    this.tranId = tranId;
    
    return this;
  }

  public void unsetTranId() {
    this.tranId = null;
  }

  /** Returns true if field tranId is set (has been asigned a value) and false otherwise */
  public boolean isSetTranId() {
    return this.tranId != null;
  }

  public void setTranIdIsSet(boolean value) {
    if (!value) {
      this.tranId = null;
    }
  }

  public int getLockInfoListSize() {
    return (this.lockInfoList == null) ? 0 : this.lockInfoList.size();
  }

  public java.util.Iterator<LockInfo> getLockInfoListIterator() {
    return (this.lockInfoList == null) ? null : this.lockInfoList.iterator();
  }

  public void addToLockInfoList(LockInfo elem) {
    if (this.lockInfoList == null) {
      this.lockInfoList = new ArrayList<LockInfo>();
    }
    this.lockInfoList.add(elem);
  }

  public List<LockInfo> getLockInfoList() {
    return this.lockInfoList;
  }

  public releaseStock_args setLockInfoList(List<LockInfo> lockInfoList) {
    this.lockInfoList = lockInfoList;
    
    return this;
  }

  public void unsetLockInfoList() {
    this.lockInfoList = null;
  }

  /** Returns true if field lockInfoList is set (has been asigned a value) and false otherwise */
  public boolean isSetLockInfoList() {
    return this.lockInfoList != null;
  }

  public void setLockInfoListIsSet(boolean value) {
    if (!value) {
      this.lockInfoList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRAN_ID:
      if (value == null) {
        unsetTranId();
      } else {
        setTranId((String)value);
      }
      break;
    case LOCK_INFO_LIST:
      if (value == null) {
        unsetLockInfoList();
      } else {
        setLockInfoList((List<LockInfo>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRAN_ID:
      return getTranId();
    case LOCK_INFO_LIST:
      return getLockInfoList();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRAN_ID:
      return isSetTranId();
    case LOCK_INFO_LIST:
      return isSetLockInfoList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof releaseStock_args)
      return this.equals((releaseStock_args)that);
    return false;
  }

  public boolean equals(releaseStock_args that) {
    if (that == null)
      return false;
    boolean this_present_tranId = true && this.isSetTranId();
    boolean that_present_tranId = true && that.isSetTranId();
    if (this_present_tranId || that_present_tranId) {
      if (!(this_present_tranId && that_present_tranId))
        return false;
      if (!this.tranId.equals(that.tranId))
        return false;
    }
    boolean this_present_lockInfoList = true && this.isSetLockInfoList();
    boolean that_present_lockInfoList = true && that.isSetLockInfoList();
    if (this_present_lockInfoList || that_present_lockInfoList) {
      if (!(this_present_lockInfoList && that_present_lockInfoList))
        return false;
      if (!this.lockInfoList.equals(that.lockInfoList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_tranId = true && (isSetTranId());
    builder.append(present_tranId);
    if (present_tranId)
      builder.append(tranId);
    boolean present_lockInfoList = true && (isSetLockInfoList());
    builder.append(present_lockInfoList);
    if (present_lockInfoList)
      builder.append(lockInfoList);
    return builder.toHashCode();
  }

  public int compareTo(releaseStock_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    releaseStock_args typedOther = (releaseStock_args)other;

    lastComparison = Boolean.valueOf(isSetTranId()).compareTo(typedOther.isSetTranId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTranId()) {
      lastComparison = TBaseHelper.compareTo(this.tranId, typedOther.tranId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLockInfoList()).compareTo(typedOther.isSetLockInfoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockInfoList()) {
      lastComparison = TBaseHelper.compareTo(this.lockInfoList, typedOther.lockInfoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // TRAN_ID
          if (field.type == TType.STRING) {
            this.tranId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LOCK_INFO_LIST
          if (field.type == TType.LIST) {
            {
            TList _list21 = iprot.readListBegin();
            this.lockInfoList = new ArrayList<LockInfo>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              LockInfo _elem23;
              _elem23 = new LockInfo();
              _elem23.read(iprot);
              this.lockInfoList.add(_elem23);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.tranId != null) {
      oprot.writeFieldBegin(TRAN_ID_FIELD_DESC);
      oprot.writeString(this.tranId);
      oprot.writeFieldEnd();
    }
    if (this.lockInfoList != null) {
      oprot.writeFieldBegin(LOCK_INFO_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.lockInfoList.size()));
        for (LockInfo _iter24 : this.lockInfoList)
        {
          _iter24.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("releaseStock_args(");
    boolean first = true;
    sb.append("tranId:");
    if (this.tranId == null) {
      sb.append("null");
    } else {
      sb.append(this.tranId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lockInfoList:");
    if (this.lockInfoList == null) {
      sb.append("null");
    } else {
      sb.append(this.lockInfoList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class releaseStock_result implements TBase<releaseStock_result, releaseStock_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("releaseStock_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(releaseStock_result.class, metaDataMap);
  }


  public releaseStock_result() {
  }

  public releaseStock_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public releaseStock_result(releaseStock_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public releaseStock_result deepCopy() {
    return new releaseStock_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public releaseStock_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof releaseStock_result)
      return this.equals((releaseStock_result)that);
    return false;
  }

  public boolean equals(releaseStock_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(releaseStock_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    releaseStock_result typedOther = (releaseStock_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("releaseStock_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class releaseLockCount_args implements TBase<releaseLockCount_args, releaseLockCount_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("releaseLockCount_args");

  private static final TField TRAN_ID_FIELD_DESC = new TField("tranId", TType.STRING, (short)1);
  private static final TField LOCK_INFO_LIST_FIELD_DESC = new TField("lockInfoList", TType.LIST, (short)2);


  public String tranId;
  public List<LockInfo> lockInfoList;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TRAN_ID((short)1, "tranId"),
    LOCK_INFO_LIST((short)2, "lockInfoList");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRAN_ID
  	return TRAN_ID;
        case 2: // LOCK_INFO_LIST
  	return LOCK_INFO_LIST;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRAN_ID, new FieldMetaData("tranId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LOCK_INFO_LIST, new FieldMetaData("lockInfoList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, LockInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(releaseLockCount_args.class, metaDataMap);
  }


  public releaseLockCount_args() {
  }

  public releaseLockCount_args(
    String tranId,
    List<LockInfo> lockInfoList)
  {
    this();
    this.tranId = tranId;
    this.lockInfoList = lockInfoList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public releaseLockCount_args(releaseLockCount_args other) {
    if (other.isSetTranId()) {
      this.tranId = other.tranId;
    }
    if (other.isSetLockInfoList()) {
      List<LockInfo> __this__lockInfoList = new ArrayList<LockInfo>();
      for (LockInfo other_element : other.lockInfoList) {
        __this__lockInfoList.add(new LockInfo(other_element));
      }
      this.lockInfoList = __this__lockInfoList;
    }
  }

  public releaseLockCount_args deepCopy() {
    return new releaseLockCount_args(this);
  }

  @Override
  public void clear() {
    this.tranId = null;
    this.lockInfoList = null;
  }

  public String getTranId() {
    return this.tranId;
  }

  public releaseLockCount_args setTranId(String tranId) {
    this.tranId = tranId;
    
    return this;
  }

  public void unsetTranId() {
    this.tranId = null;
  }

  /** Returns true if field tranId is set (has been asigned a value) and false otherwise */
  public boolean isSetTranId() {
    return this.tranId != null;
  }

  public void setTranIdIsSet(boolean value) {
    if (!value) {
      this.tranId = null;
    }
  }

  public int getLockInfoListSize() {
    return (this.lockInfoList == null) ? 0 : this.lockInfoList.size();
  }

  public java.util.Iterator<LockInfo> getLockInfoListIterator() {
    return (this.lockInfoList == null) ? null : this.lockInfoList.iterator();
  }

  public void addToLockInfoList(LockInfo elem) {
    if (this.lockInfoList == null) {
      this.lockInfoList = new ArrayList<LockInfo>();
    }
    this.lockInfoList.add(elem);
  }

  public List<LockInfo> getLockInfoList() {
    return this.lockInfoList;
  }

  public releaseLockCount_args setLockInfoList(List<LockInfo> lockInfoList) {
    this.lockInfoList = lockInfoList;
    
    return this;
  }

  public void unsetLockInfoList() {
    this.lockInfoList = null;
  }

  /** Returns true if field lockInfoList is set (has been asigned a value) and false otherwise */
  public boolean isSetLockInfoList() {
    return this.lockInfoList != null;
  }

  public void setLockInfoListIsSet(boolean value) {
    if (!value) {
      this.lockInfoList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRAN_ID:
      if (value == null) {
        unsetTranId();
      } else {
        setTranId((String)value);
      }
      break;
    case LOCK_INFO_LIST:
      if (value == null) {
        unsetLockInfoList();
      } else {
        setLockInfoList((List<LockInfo>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRAN_ID:
      return getTranId();
    case LOCK_INFO_LIST:
      return getLockInfoList();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRAN_ID:
      return isSetTranId();
    case LOCK_INFO_LIST:
      return isSetLockInfoList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof releaseLockCount_args)
      return this.equals((releaseLockCount_args)that);
    return false;
  }

  public boolean equals(releaseLockCount_args that) {
    if (that == null)
      return false;
    boolean this_present_tranId = true && this.isSetTranId();
    boolean that_present_tranId = true && that.isSetTranId();
    if (this_present_tranId || that_present_tranId) {
      if (!(this_present_tranId && that_present_tranId))
        return false;
      if (!this.tranId.equals(that.tranId))
        return false;
    }
    boolean this_present_lockInfoList = true && this.isSetLockInfoList();
    boolean that_present_lockInfoList = true && that.isSetLockInfoList();
    if (this_present_lockInfoList || that_present_lockInfoList) {
      if (!(this_present_lockInfoList && that_present_lockInfoList))
        return false;
      if (!this.lockInfoList.equals(that.lockInfoList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_tranId = true && (isSetTranId());
    builder.append(present_tranId);
    if (present_tranId)
      builder.append(tranId);
    boolean present_lockInfoList = true && (isSetLockInfoList());
    builder.append(present_lockInfoList);
    if (present_lockInfoList)
      builder.append(lockInfoList);
    return builder.toHashCode();
  }

  public int compareTo(releaseLockCount_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    releaseLockCount_args typedOther = (releaseLockCount_args)other;

    lastComparison = Boolean.valueOf(isSetTranId()).compareTo(typedOther.isSetTranId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTranId()) {
      lastComparison = TBaseHelper.compareTo(this.tranId, typedOther.tranId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLockInfoList()).compareTo(typedOther.isSetLockInfoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockInfoList()) {
      lastComparison = TBaseHelper.compareTo(this.lockInfoList, typedOther.lockInfoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // TRAN_ID
          if (field.type == TType.STRING) {
            this.tranId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LOCK_INFO_LIST
          if (field.type == TType.LIST) {
            {
            TList _list25 = iprot.readListBegin();
            this.lockInfoList = new ArrayList<LockInfo>(_list25.size);
            for (int _i26 = 0; _i26 < _list25.size; ++_i26)
            {
              LockInfo _elem27;
              _elem27 = new LockInfo();
              _elem27.read(iprot);
              this.lockInfoList.add(_elem27);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.tranId != null) {
      oprot.writeFieldBegin(TRAN_ID_FIELD_DESC);
      oprot.writeString(this.tranId);
      oprot.writeFieldEnd();
    }
    if (this.lockInfoList != null) {
      oprot.writeFieldBegin(LOCK_INFO_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.lockInfoList.size()));
        for (LockInfo _iter28 : this.lockInfoList)
        {
          _iter28.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("releaseLockCount_args(");
    boolean first = true;
    sb.append("tranId:");
    if (this.tranId == null) {
      sb.append("null");
    } else {
      sb.append(this.tranId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lockInfoList:");
    if (this.lockInfoList == null) {
      sb.append("null");
    } else {
      sb.append(this.lockInfoList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class releaseLockCount_result implements TBase<releaseLockCount_result, releaseLockCount_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("releaseLockCount_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(releaseLockCount_result.class, metaDataMap);
  }


  public releaseLockCount_result() {
  }

  public releaseLockCount_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public releaseLockCount_result(releaseLockCount_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public releaseLockCount_result deepCopy() {
    return new releaseLockCount_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public releaseLockCount_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof releaseLockCount_result)
      return this.equals((releaseLockCount_result)that);
    return false;
  }

  public boolean equals(releaseLockCount_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(releaseLockCount_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    releaseLockCount_result typedOther = (releaseLockCount_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("releaseLockCount_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class removeStock_args implements TBase<removeStock_args, removeStock_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("removeStock_args");

  private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, (short)1);


  public String productId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PRODUCT_ID((short)1, "productId");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
  	return PRODUCT_ID;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new FieldMetaData("productId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(removeStock_args.class, metaDataMap);
  }


  public removeStock_args() {
  }

  public removeStock_args(
    String productId)
  {
    this();
    this.productId = productId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public removeStock_args(removeStock_args other) {
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
  }

  public removeStock_args deepCopy() {
    return new removeStock_args(this);
  }

  @Override
  public void clear() {
    this.productId = null;
  }

  public String getProductId() {
    return this.productId;
  }

  public removeStock_args setProductId(String productId) {
    this.productId = productId;
    
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been asigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof removeStock_args)
      return this.equals((removeStock_args)that);
    return false;
  }

  public boolean equals(removeStock_args that) {
    if (that == null)
      return false;
    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_productId = true && (isSetProductId());
    builder.append(present_productId);
    if (present_productId)
      builder.append(productId);
    return builder.toHashCode();
  }

  public int compareTo(removeStock_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    removeStock_args typedOther = (removeStock_args)other;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = TBaseHelper.compareTo(this.productId, typedOther.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PRODUCT_ID
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.productId != null) {
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("removeStock_args(");
    boolean first = true;
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class removeStock_result implements TBase<removeStock_result, removeStock_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("removeStock_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(removeStock_result.class, metaDataMap);
  }


  public removeStock_result() {
  }

  public removeStock_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public removeStock_result(removeStock_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public removeStock_result deepCopy() {
    return new removeStock_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public removeStock_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof removeStock_result)
      return this.equals((removeStock_result)that);
    return false;
  }

  public boolean equals(removeStock_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(removeStock_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    removeStock_result typedOther = (removeStock_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("removeStock_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class createStock_args implements TBase<createStock_args, createStock_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("createStock_args");

  private static final TField TRAN_ID_FIELD_DESC = new TField("tranId", TType.STRING, (short)1);
  private static final TField STOCK_INFO_FIELD_DESC = new TField("stockInfo", TType.STRUCT, (short)2);


  public String tranId;
  public StockInfo stockInfo;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TRAN_ID((short)1, "tranId"),
    STOCK_INFO((short)2, "stockInfo");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRAN_ID
  	return TRAN_ID;
        case 2: // STOCK_INFO
  	return STOCK_INFO;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRAN_ID, new FieldMetaData("tranId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.STOCK_INFO, new FieldMetaData("stockInfo", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, StockInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(createStock_args.class, metaDataMap);
  }


  public createStock_args() {
  }

  public createStock_args(
    String tranId,
    StockInfo stockInfo)
  {
    this();
    this.tranId = tranId;
    this.stockInfo = stockInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public createStock_args(createStock_args other) {
    if (other.isSetTranId()) {
      this.tranId = other.tranId;
    }
    if (other.isSetStockInfo()) {
      this.stockInfo = new StockInfo(other.stockInfo);
    }
  }

  public createStock_args deepCopy() {
    return new createStock_args(this);
  }

  @Override
  public void clear() {
    this.tranId = null;
    this.stockInfo = null;
  }

  public String getTranId() {
    return this.tranId;
  }

  public createStock_args setTranId(String tranId) {
    this.tranId = tranId;
    
    return this;
  }

  public void unsetTranId() {
    this.tranId = null;
  }

  /** Returns true if field tranId is set (has been asigned a value) and false otherwise */
  public boolean isSetTranId() {
    return this.tranId != null;
  }

  public void setTranIdIsSet(boolean value) {
    if (!value) {
      this.tranId = null;
    }
  }

  public StockInfo getStockInfo() {
    return this.stockInfo;
  }

  public createStock_args setStockInfo(StockInfo stockInfo) {
    this.stockInfo = stockInfo;
    
    return this;
  }

  public void unsetStockInfo() {
    this.stockInfo = null;
  }

  /** Returns true if field stockInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetStockInfo() {
    return this.stockInfo != null;
  }

  public void setStockInfoIsSet(boolean value) {
    if (!value) {
      this.stockInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRAN_ID:
      if (value == null) {
        unsetTranId();
      } else {
        setTranId((String)value);
      }
      break;
    case STOCK_INFO:
      if (value == null) {
        unsetStockInfo();
      } else {
        setStockInfo((StockInfo)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRAN_ID:
      return getTranId();
    case STOCK_INFO:
      return getStockInfo();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRAN_ID:
      return isSetTranId();
    case STOCK_INFO:
      return isSetStockInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof createStock_args)
      return this.equals((createStock_args)that);
    return false;
  }

  public boolean equals(createStock_args that) {
    if (that == null)
      return false;
    boolean this_present_tranId = true && this.isSetTranId();
    boolean that_present_tranId = true && that.isSetTranId();
    if (this_present_tranId || that_present_tranId) {
      if (!(this_present_tranId && that_present_tranId))
        return false;
      if (!this.tranId.equals(that.tranId))
        return false;
    }
    boolean this_present_stockInfo = true && this.isSetStockInfo();
    boolean that_present_stockInfo = true && that.isSetStockInfo();
    if (this_present_stockInfo || that_present_stockInfo) {
      if (!(this_present_stockInfo && that_present_stockInfo))
        return false;
      if (!this.stockInfo.equals(that.stockInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_tranId = true && (isSetTranId());
    builder.append(present_tranId);
    if (present_tranId)
      builder.append(tranId);
    boolean present_stockInfo = true && (isSetStockInfo());
    builder.append(present_stockInfo);
    if (present_stockInfo)
      builder.append(stockInfo);
    return builder.toHashCode();
  }

  public int compareTo(createStock_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    createStock_args typedOther = (createStock_args)other;

    lastComparison = Boolean.valueOf(isSetTranId()).compareTo(typedOther.isSetTranId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTranId()) {
      lastComparison = TBaseHelper.compareTo(this.tranId, typedOther.tranId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStockInfo()).compareTo(typedOther.isSetStockInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStockInfo()) {
      lastComparison = TBaseHelper.compareTo(this.stockInfo, typedOther.stockInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // TRAN_ID
          if (field.type == TType.STRING) {
            this.tranId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STOCK_INFO
          if (field.type == TType.STRUCT) {
            this.stockInfo = new StockInfo();
            this.stockInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.tranId != null) {
      oprot.writeFieldBegin(TRAN_ID_FIELD_DESC);
      oprot.writeString(this.tranId);
      oprot.writeFieldEnd();
    }
    if (this.stockInfo != null) {
      oprot.writeFieldBegin(STOCK_INFO_FIELD_DESC);
      this.stockInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("createStock_args(");
    boolean first = true;
    sb.append("tranId:");
    if (this.tranId == null) {
      sb.append("null");
    } else {
      sb.append(this.tranId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stockInfo:");
    if (this.stockInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.stockInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class createStock_result implements TBase<createStock_result, createStock_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("createStock_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(createStock_result.class, metaDataMap);
  }


  public createStock_result() {
  }

  public createStock_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public createStock_result(createStock_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public createStock_result deepCopy() {
    return new createStock_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public createStock_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof createStock_result)
      return this.equals((createStock_result)that);
    return false;
  }

  public boolean equals(createStock_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(createStock_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    createStock_result typedOther = (createStock_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("createStock_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class supplyStock_args implements TBase<supplyStock_args, supplyStock_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("supplyStock_args");

  private static final TField TRAN_ID_FIELD_DESC = new TField("tranId", TType.STRING, (short)1);
  private static final TField STOCK_INFO_FIELD_DESC = new TField("stockInfo", TType.STRUCT, (short)2);


  public String tranId;
  public StockInfo stockInfo;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TRAN_ID((short)1, "tranId"),
    STOCK_INFO((short)2, "stockInfo");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRAN_ID
  	return TRAN_ID;
        case 2: // STOCK_INFO
  	return STOCK_INFO;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRAN_ID, new FieldMetaData("tranId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.STOCK_INFO, new FieldMetaData("stockInfo", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, StockInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(supplyStock_args.class, metaDataMap);
  }


  public supplyStock_args() {
  }

  public supplyStock_args(
    String tranId,
    StockInfo stockInfo)
  {
    this();
    this.tranId = tranId;
    this.stockInfo = stockInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public supplyStock_args(supplyStock_args other) {
    if (other.isSetTranId()) {
      this.tranId = other.tranId;
    }
    if (other.isSetStockInfo()) {
      this.stockInfo = new StockInfo(other.stockInfo);
    }
  }

  public supplyStock_args deepCopy() {
    return new supplyStock_args(this);
  }

  @Override
  public void clear() {
    this.tranId = null;
    this.stockInfo = null;
  }

  public String getTranId() {
    return this.tranId;
  }

  public supplyStock_args setTranId(String tranId) {
    this.tranId = tranId;
    
    return this;
  }

  public void unsetTranId() {
    this.tranId = null;
  }

  /** Returns true if field tranId is set (has been asigned a value) and false otherwise */
  public boolean isSetTranId() {
    return this.tranId != null;
  }

  public void setTranIdIsSet(boolean value) {
    if (!value) {
      this.tranId = null;
    }
  }

  public StockInfo getStockInfo() {
    return this.stockInfo;
  }

  public supplyStock_args setStockInfo(StockInfo stockInfo) {
    this.stockInfo = stockInfo;
    
    return this;
  }

  public void unsetStockInfo() {
    this.stockInfo = null;
  }

  /** Returns true if field stockInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetStockInfo() {
    return this.stockInfo != null;
  }

  public void setStockInfoIsSet(boolean value) {
    if (!value) {
      this.stockInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRAN_ID:
      if (value == null) {
        unsetTranId();
      } else {
        setTranId((String)value);
      }
      break;
    case STOCK_INFO:
      if (value == null) {
        unsetStockInfo();
      } else {
        setStockInfo((StockInfo)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRAN_ID:
      return getTranId();
    case STOCK_INFO:
      return getStockInfo();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRAN_ID:
      return isSetTranId();
    case STOCK_INFO:
      return isSetStockInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof supplyStock_args)
      return this.equals((supplyStock_args)that);
    return false;
  }

  public boolean equals(supplyStock_args that) {
    if (that == null)
      return false;
    boolean this_present_tranId = true && this.isSetTranId();
    boolean that_present_tranId = true && that.isSetTranId();
    if (this_present_tranId || that_present_tranId) {
      if (!(this_present_tranId && that_present_tranId))
        return false;
      if (!this.tranId.equals(that.tranId))
        return false;
    }
    boolean this_present_stockInfo = true && this.isSetStockInfo();
    boolean that_present_stockInfo = true && that.isSetStockInfo();
    if (this_present_stockInfo || that_present_stockInfo) {
      if (!(this_present_stockInfo && that_present_stockInfo))
        return false;
      if (!this.stockInfo.equals(that.stockInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_tranId = true && (isSetTranId());
    builder.append(present_tranId);
    if (present_tranId)
      builder.append(tranId);
    boolean present_stockInfo = true && (isSetStockInfo());
    builder.append(present_stockInfo);
    if (present_stockInfo)
      builder.append(stockInfo);
    return builder.toHashCode();
  }

  public int compareTo(supplyStock_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    supplyStock_args typedOther = (supplyStock_args)other;

    lastComparison = Boolean.valueOf(isSetTranId()).compareTo(typedOther.isSetTranId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTranId()) {
      lastComparison = TBaseHelper.compareTo(this.tranId, typedOther.tranId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStockInfo()).compareTo(typedOther.isSetStockInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStockInfo()) {
      lastComparison = TBaseHelper.compareTo(this.stockInfo, typedOther.stockInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // TRAN_ID
          if (field.type == TType.STRING) {
            this.tranId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STOCK_INFO
          if (field.type == TType.STRUCT) {
            this.stockInfo = new StockInfo();
            this.stockInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.tranId != null) {
      oprot.writeFieldBegin(TRAN_ID_FIELD_DESC);
      oprot.writeString(this.tranId);
      oprot.writeFieldEnd();
    }
    if (this.stockInfo != null) {
      oprot.writeFieldBegin(STOCK_INFO_FIELD_DESC);
      this.stockInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("supplyStock_args(");
    boolean first = true;
    sb.append("tranId:");
    if (this.tranId == null) {
      sb.append("null");
    } else {
      sb.append(this.tranId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stockInfo:");
    if (this.stockInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.stockInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class supplyStock_result implements TBase<supplyStock_result, supplyStock_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("supplyStock_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(supplyStock_result.class, metaDataMap);
  }


  public supplyStock_result() {
  }

  public supplyStock_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public supplyStock_result(supplyStock_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public supplyStock_result deepCopy() {
    return new supplyStock_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public supplyStock_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof supplyStock_result)
      return this.equals((supplyStock_result)that);
    return false;
  }

  public boolean equals(supplyStock_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(supplyStock_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    supplyStock_result typedOther = (supplyStock_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("supplyStock_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class supplyFullStock_args implements TBase<supplyFullStock_args, supplyFullStock_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("supplyFullStock_args");

  private static final TField TRAN_ID_FIELD_DESC = new TField("tranId", TType.STRING, (short)1);
  private static final TField STOCK_INFO_FIELD_DESC = new TField("stockInfo", TType.STRUCT, (short)2);


  public String tranId;
  public StockInfo stockInfo;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TRAN_ID((short)1, "tranId"),
    STOCK_INFO((short)2, "stockInfo");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRAN_ID
  	return TRAN_ID;
        case 2: // STOCK_INFO
  	return STOCK_INFO;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRAN_ID, new FieldMetaData("tranId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.STOCK_INFO, new FieldMetaData("stockInfo", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, StockInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(supplyFullStock_args.class, metaDataMap);
  }


  public supplyFullStock_args() {
  }

  public supplyFullStock_args(
    String tranId,
    StockInfo stockInfo)
  {
    this();
    this.tranId = tranId;
    this.stockInfo = stockInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public supplyFullStock_args(supplyFullStock_args other) {
    if (other.isSetTranId()) {
      this.tranId = other.tranId;
    }
    if (other.isSetStockInfo()) {
      this.stockInfo = new StockInfo(other.stockInfo);
    }
  }

  public supplyFullStock_args deepCopy() {
    return new supplyFullStock_args(this);
  }

  @Override
  public void clear() {
    this.tranId = null;
    this.stockInfo = null;
  }

  public String getTranId() {
    return this.tranId;
  }

  public supplyFullStock_args setTranId(String tranId) {
    this.tranId = tranId;
    
    return this;
  }

  public void unsetTranId() {
    this.tranId = null;
  }

  /** Returns true if field tranId is set (has been asigned a value) and false otherwise */
  public boolean isSetTranId() {
    return this.tranId != null;
  }

  public void setTranIdIsSet(boolean value) {
    if (!value) {
      this.tranId = null;
    }
  }

  public StockInfo getStockInfo() {
    return this.stockInfo;
  }

  public supplyFullStock_args setStockInfo(StockInfo stockInfo) {
    this.stockInfo = stockInfo;
    
    return this;
  }

  public void unsetStockInfo() {
    this.stockInfo = null;
  }

  /** Returns true if field stockInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetStockInfo() {
    return this.stockInfo != null;
  }

  public void setStockInfoIsSet(boolean value) {
    if (!value) {
      this.stockInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRAN_ID:
      if (value == null) {
        unsetTranId();
      } else {
        setTranId((String)value);
      }
      break;
    case STOCK_INFO:
      if (value == null) {
        unsetStockInfo();
      } else {
        setStockInfo((StockInfo)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRAN_ID:
      return getTranId();
    case STOCK_INFO:
      return getStockInfo();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRAN_ID:
      return isSetTranId();
    case STOCK_INFO:
      return isSetStockInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof supplyFullStock_args)
      return this.equals((supplyFullStock_args)that);
    return false;
  }

  public boolean equals(supplyFullStock_args that) {
    if (that == null)
      return false;
    boolean this_present_tranId = true && this.isSetTranId();
    boolean that_present_tranId = true && that.isSetTranId();
    if (this_present_tranId || that_present_tranId) {
      if (!(this_present_tranId && that_present_tranId))
        return false;
      if (!this.tranId.equals(that.tranId))
        return false;
    }
    boolean this_present_stockInfo = true && this.isSetStockInfo();
    boolean that_present_stockInfo = true && that.isSetStockInfo();
    if (this_present_stockInfo || that_present_stockInfo) {
      if (!(this_present_stockInfo && that_present_stockInfo))
        return false;
      if (!this.stockInfo.equals(that.stockInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_tranId = true && (isSetTranId());
    builder.append(present_tranId);
    if (present_tranId)
      builder.append(tranId);
    boolean present_stockInfo = true && (isSetStockInfo());
    builder.append(present_stockInfo);
    if (present_stockInfo)
      builder.append(stockInfo);
    return builder.toHashCode();
  }

  public int compareTo(supplyFullStock_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    supplyFullStock_args typedOther = (supplyFullStock_args)other;

    lastComparison = Boolean.valueOf(isSetTranId()).compareTo(typedOther.isSetTranId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTranId()) {
      lastComparison = TBaseHelper.compareTo(this.tranId, typedOther.tranId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStockInfo()).compareTo(typedOther.isSetStockInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStockInfo()) {
      lastComparison = TBaseHelper.compareTo(this.stockInfo, typedOther.stockInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // TRAN_ID
          if (field.type == TType.STRING) {
            this.tranId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STOCK_INFO
          if (field.type == TType.STRUCT) {
            this.stockInfo = new StockInfo();
            this.stockInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.tranId != null) {
      oprot.writeFieldBegin(TRAN_ID_FIELD_DESC);
      oprot.writeString(this.tranId);
      oprot.writeFieldEnd();
    }
    if (this.stockInfo != null) {
      oprot.writeFieldBegin(STOCK_INFO_FIELD_DESC);
      this.stockInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("supplyFullStock_args(");
    boolean first = true;
    sb.append("tranId:");
    if (this.tranId == null) {
      sb.append("null");
    } else {
      sb.append(this.tranId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stockInfo:");
    if (this.stockInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.stockInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class supplyFullStock_result implements TBase<supplyFullStock_result, supplyFullStock_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("supplyFullStock_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(supplyFullStock_result.class, metaDataMap);
  }


  public supplyFullStock_result() {
  }

  public supplyFullStock_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public supplyFullStock_result(supplyFullStock_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public supplyFullStock_result deepCopy() {
    return new supplyFullStock_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public supplyFullStock_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof supplyFullStock_result)
      return this.equals((supplyFullStock_result)that);
    return false;
  }

  public boolean equals(supplyFullStock_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(supplyFullStock_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    supplyFullStock_result typedOther = (supplyFullStock_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("supplyFullStock_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


}