/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.product;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ThirdPartyProductLogParam implements TBase<ThirdPartyProductLogParam, ThirdPartyProductLogParam._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ThirdPartyProductLogParam");

  private static final TField THIRD_PARTY_IDENTIFY_FIELD_DESC = new TField("thirdPartyIdentify", TType.I32, (short)1);
  private static final TField THIRD_PARTY_PRODUCT_ID_FIELD_DESC = new TField("thirdPartyProductId", TType.STRING, (short)2);


  public int thirdPartyIdentify;
  public String thirdPartyProductId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    THIRD_PARTY_IDENTIFY((short)1, "thirdPartyIdentify"),
    THIRD_PARTY_PRODUCT_ID((short)2, "thirdPartyProductId");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // THIRD_PARTY_IDENTIFY
  	return THIRD_PARTY_IDENTIFY;
        case 2: // THIRD_PARTY_PRODUCT_ID
  	return THIRD_PARTY_PRODUCT_ID;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __THIRDPARTYIDENTIFY_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.THIRD_PARTY_IDENTIFY, new FieldMetaData("thirdPartyIdentify", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.THIRD_PARTY_PRODUCT_ID, new FieldMetaData("thirdPartyProductId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ThirdPartyProductLogParam.class, metaDataMap);
  }


  public ThirdPartyProductLogParam() {
  }

  public ThirdPartyProductLogParam(
    int thirdPartyIdentify,
    String thirdPartyProductId)
  {
    this();
    this.thirdPartyIdentify = thirdPartyIdentify;
    setThirdPartyIdentifyIsSet(true);
    this.thirdPartyProductId = thirdPartyProductId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThirdPartyProductLogParam(ThirdPartyProductLogParam other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.thirdPartyIdentify = other.thirdPartyIdentify;
    if (other.isSetThirdPartyProductId()) {
      this.thirdPartyProductId = other.thirdPartyProductId;
    }
  }

  public ThirdPartyProductLogParam deepCopy() {
    return new ThirdPartyProductLogParam(this);
  }

  @Override
  public void clear() {
    setThirdPartyIdentifyIsSet(false);
    this.thirdPartyIdentify = 0;
    this.thirdPartyProductId = null;
  }

  public int getThirdPartyIdentify() {
    return this.thirdPartyIdentify;
  }

  public ThirdPartyProductLogParam setThirdPartyIdentify(int thirdPartyIdentify) {
    this.thirdPartyIdentify = thirdPartyIdentify;
    setThirdPartyIdentifyIsSet(true);

    return this;
  }

  public void unsetThirdPartyIdentify() {
  __isset_bit_vector.clear(__THIRDPARTYIDENTIFY_ISSET_ID);
  }

  /** Returns true if field thirdPartyIdentify is set (has been asigned a value) and false otherwise */
  public boolean isSetThirdPartyIdentify() {
    return __isset_bit_vector.get(__THIRDPARTYIDENTIFY_ISSET_ID);
  }

  public void setThirdPartyIdentifyIsSet(boolean value) {
    __isset_bit_vector.set(__THIRDPARTYIDENTIFY_ISSET_ID, value);
  }

  public String getThirdPartyProductId() {
    return this.thirdPartyProductId;
  }

  public ThirdPartyProductLogParam setThirdPartyProductId(String thirdPartyProductId) {
    this.thirdPartyProductId = thirdPartyProductId;
    
    return this;
  }

  public void unsetThirdPartyProductId() {
    this.thirdPartyProductId = null;
  }

  /** Returns true if field thirdPartyProductId is set (has been asigned a value) and false otherwise */
  public boolean isSetThirdPartyProductId() {
    return this.thirdPartyProductId != null;
  }

  public void setThirdPartyProductIdIsSet(boolean value) {
    if (!value) {
      this.thirdPartyProductId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case THIRD_PARTY_IDENTIFY:
      if (value == null) {
        unsetThirdPartyIdentify();
      } else {
        setThirdPartyIdentify((Integer)value);
      }
      break;
    case THIRD_PARTY_PRODUCT_ID:
      if (value == null) {
        unsetThirdPartyProductId();
      } else {
        setThirdPartyProductId((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case THIRD_PARTY_IDENTIFY:
      return new Integer(getThirdPartyIdentify());
    case THIRD_PARTY_PRODUCT_ID:
      return getThirdPartyProductId();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case THIRD_PARTY_IDENTIFY:
      return isSetThirdPartyIdentify();
    case THIRD_PARTY_PRODUCT_ID:
      return isSetThirdPartyProductId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThirdPartyProductLogParam)
      return this.equals((ThirdPartyProductLogParam)that);
    return false;
  }

  public boolean equals(ThirdPartyProductLogParam that) {
    if (that == null)
      return false;
    boolean this_present_thirdPartyIdentify = true;
    boolean that_present_thirdPartyIdentify = true;
    if (this_present_thirdPartyIdentify || that_present_thirdPartyIdentify) {
      if (!(this_present_thirdPartyIdentify && that_present_thirdPartyIdentify))
        return false;
      if (this.thirdPartyIdentify != that.thirdPartyIdentify)
        return false;
    }
    boolean this_present_thirdPartyProductId = true && this.isSetThirdPartyProductId();
    boolean that_present_thirdPartyProductId = true && that.isSetThirdPartyProductId();
    if (this_present_thirdPartyProductId || that_present_thirdPartyProductId) {
      if (!(this_present_thirdPartyProductId && that_present_thirdPartyProductId))
        return false;
      if (!this.thirdPartyProductId.equals(that.thirdPartyProductId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_thirdPartyIdentify = true;
    builder.append(present_thirdPartyIdentify);
    if (present_thirdPartyIdentify)
      builder.append(thirdPartyIdentify);
    boolean present_thirdPartyProductId = true && (isSetThirdPartyProductId());
    builder.append(present_thirdPartyProductId);
    if (present_thirdPartyProductId)
      builder.append(thirdPartyProductId);
    return builder.toHashCode();
  }

  public int compareTo(ThirdPartyProductLogParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThirdPartyProductLogParam typedOther = (ThirdPartyProductLogParam)other;

    lastComparison = Boolean.valueOf(isSetThirdPartyIdentify()).compareTo(typedOther.isSetThirdPartyIdentify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdPartyIdentify()) {
      lastComparison = TBaseHelper.compareTo(this.thirdPartyIdentify, typedOther.thirdPartyIdentify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdPartyProductId()).compareTo(typedOther.isSetThirdPartyProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdPartyProductId()) {
      lastComparison = TBaseHelper.compareTo(this.thirdPartyProductId, typedOther.thirdPartyProductId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // THIRD_PARTY_IDENTIFY
          if (field.type == TType.I32) {
            this.thirdPartyIdentify = iprot.readI32();
            setThirdPartyIdentifyIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // THIRD_PARTY_PRODUCT_ID
          if (field.type == TType.STRING) {
            this.thirdPartyProductId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(THIRD_PARTY_IDENTIFY_FIELD_DESC);
    oprot.writeI32(this.thirdPartyIdentify);
    oprot.writeFieldEnd();
    if (this.thirdPartyProductId != null) {
      oprot.writeFieldBegin(THIRD_PARTY_PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.thirdPartyProductId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThirdPartyProductLogParam(");
    boolean first = true;
    sb.append("thirdPartyIdentify:");
    sb.append(this.thirdPartyIdentify);
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdPartyProductId:");
    if (this.thirdPartyProductId == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdPartyProductId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
