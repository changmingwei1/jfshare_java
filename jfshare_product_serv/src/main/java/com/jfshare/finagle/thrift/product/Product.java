/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.product;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class Product implements TBase<Product, Product._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Product");

  private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, (short)1);
  private static final TField SELLER_ID_FIELD_DESC = new TField("sellerId", TType.I32, (short)2);
  private static final TField PRODUCT_NAME_FIELD_DESC = new TField("productName", TType.STRING, (short)3);
  private static final TField VICE_NAME_FIELD_DESC = new TField("viceName", TType.STRING, (short)4);
  private static final TField SUBJECT_ID_FIELD_DESC = new TField("subjectId", TType.I32, (short)5);
  private static final TField BRAND_ID_FIELD_DESC = new TField("brandId", TType.I32, (short)6);
  private static final TField IMG_KEY_FIELD_DESC = new TField("imgKey", TType.STRING, (short)7);
  private static final TField DETAIL_KEY_FIELD_DESC = new TField("detailKey", TType.STRING, (short)8);
  private static final TField MAX_BUY_LIMIT_FIELD_DESC = new TField("maxBuyLimit", TType.I32, (short)9);
  private static final TField ACTIVE_STATE_FIELD_DESC = new TField("activeState", TType.I32, (short)10);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)11);
  private static final TField REMARK_FIELD_DESC = new TField("remark", TType.STRING, (short)12);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.STRING, (short)13);
  private static final TField CREATE_USER_ID_FIELD_DESC = new TField("createUserId", TType.I32, (short)14);
  private static final TField LAST_UPDATE_TIME_FIELD_DESC = new TField("lastUpdateTime", TType.STRING, (short)15);
  private static final TField LAST_UPDATE_ID_FIELD_DESC = new TField("lastUpdateId", TType.I32, (short)16);
  private static final TField SKU_TEMPLATE_FIELD_DESC = new TField("skuTemplate", TType.STRING, (short)17);
  private static final TField ATTRIBUTE_FIELD_DESC = new TField("attribute", TType.STRING, (short)18);
  private static final TField PRODUCT_SKU_FIELD_DESC = new TField("productSku", TType.STRUCT, (short)19);
  private static final TField PRODUCT_URL_FIELD_DESC = new TField("productUrl", TType.STRING, (short)20);
  private static final TField TAGS_FIELD_DESC = new TField("tags", TType.STRING, (short)21);
  private static final TField DETAIL_CONTENT_FIELD_DESC = new TField("detailContent", TType.STRING, (short)22);
  private static final TField PRODUCT_SNAPSHOOT_ID_FIELD_DESC = new TField("productSnapshootId", TType.STRING, (short)23);


  public String productId;
  public int sellerId;
  public String productName;
  public String viceName;
  public int subjectId;
  public int brandId;
  public String imgKey;
  public String detailKey;
  public int maxBuyLimit;
  public int activeState;
  public int type;
  public String remark;
  public String createTime;
  public int createUserId;
  public String lastUpdateTime;
  public int lastUpdateId;
  public String skuTemplate;
  public String attribute;
  public ProductSku productSku;
  public String productUrl;
  public String tags;
  public String detailContent;
  public String productSnapshootId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PRODUCT_ID((short)1, "productId"),
    SELLER_ID((short)2, "sellerId"),
    PRODUCT_NAME((short)3, "productName"),
    VICE_NAME((short)4, "viceName"),
    SUBJECT_ID((short)5, "subjectId"),
    BRAND_ID((short)6, "brandId"),
    IMG_KEY((short)7, "imgKey"),
    DETAIL_KEY((short)8, "detailKey"),
    MAX_BUY_LIMIT((short)9, "maxBuyLimit"),
    ACTIVE_STATE((short)10, "activeState"),
    TYPE((short)11, "type"),
    REMARK((short)12, "remark"),
    CREATE_TIME((short)13, "createTime"),
    CREATE_USER_ID((short)14, "createUserId"),
    LAST_UPDATE_TIME((short)15, "lastUpdateTime"),
    LAST_UPDATE_ID((short)16, "lastUpdateId"),
    SKU_TEMPLATE((short)17, "skuTemplate"),
    ATTRIBUTE((short)18, "attribute"),
    PRODUCT_SKU((short)19, "productSku"),
    PRODUCT_URL((short)20, "productUrl"),
    TAGS((short)21, "tags"),
    DETAIL_CONTENT((short)22, "detailContent"),
    PRODUCT_SNAPSHOOT_ID((short)23, "productSnapshootId");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_ID
  	return PRODUCT_ID;
        case 2: // SELLER_ID
  	return SELLER_ID;
        case 3: // PRODUCT_NAME
  	return PRODUCT_NAME;
        case 4: // VICE_NAME
  	return VICE_NAME;
        case 5: // SUBJECT_ID
  	return SUBJECT_ID;
        case 6: // BRAND_ID
  	return BRAND_ID;
        case 7: // IMG_KEY
  	return IMG_KEY;
        case 8: // DETAIL_KEY
  	return DETAIL_KEY;
        case 9: // MAX_BUY_LIMIT
  	return MAX_BUY_LIMIT;
        case 10: // ACTIVE_STATE
  	return ACTIVE_STATE;
        case 11: // TYPE
  	return TYPE;
        case 12: // REMARK
  	return REMARK;
        case 13: // CREATE_TIME
  	return CREATE_TIME;
        case 14: // CREATE_USER_ID
  	return CREATE_USER_ID;
        case 15: // LAST_UPDATE_TIME
  	return LAST_UPDATE_TIME;
        case 16: // LAST_UPDATE_ID
  	return LAST_UPDATE_ID;
        case 17: // SKU_TEMPLATE
  	return SKU_TEMPLATE;
        case 18: // ATTRIBUTE
  	return ATTRIBUTE;
        case 19: // PRODUCT_SKU
  	return PRODUCT_SKU;
        case 20: // PRODUCT_URL
  	return PRODUCT_URL;
        case 21: // TAGS
  	return TAGS;
        case 22: // DETAIL_CONTENT
  	return DETAIL_CONTENT;
        case 23: // PRODUCT_SNAPSHOOT_ID
  	return PRODUCT_SNAPSHOOT_ID;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SELLERID_ISSET_ID = 0;
  private static final int __SUBJECTID_ISSET_ID = 1;
  private static final int __BRANDID_ISSET_ID = 2;
  private static final int __MAXBUYLIMIT_ISSET_ID = 3;
  private static final int __ACTIVESTATE_ISSET_ID = 4;
  private static final int __TYPE_ISSET_ID = 5;
  private static final int __CREATEUSERID_ISSET_ID = 6;
  private static final int __LASTUPDATEID_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_ID, new FieldMetaData("productId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SELLER_ID, new FieldMetaData("sellerId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PRODUCT_NAME, new FieldMetaData("productName", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.VICE_NAME, new FieldMetaData("viceName", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SUBJECT_ID, new FieldMetaData("subjectId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.BRAND_ID, new FieldMetaData("brandId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.IMG_KEY, new FieldMetaData("imgKey", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DETAIL_KEY, new FieldMetaData("detailKey", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MAX_BUY_LIMIT, new FieldMetaData("maxBuyLimit", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ACTIVE_STATE, new FieldMetaData("activeState", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TYPE, new FieldMetaData("type", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.REMARK, new FieldMetaData("remark", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_USER_ID, new FieldMetaData("createUserId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new FieldMetaData("lastUpdateTime", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_ID, new FieldMetaData("lastUpdateId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.SKU_TEMPLATE, new FieldMetaData("skuTemplate", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ATTRIBUTE, new FieldMetaData("attribute", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_SKU, new FieldMetaData("productSku", TFieldRequirementType.OPTIONAL,
      new StructMetaData(TType.STRUCT, ProductSku.class)));
    tmpMap.put(_Fields.PRODUCT_URL, new FieldMetaData("productUrl", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TAGS, new FieldMetaData("tags", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DETAIL_CONTENT, new FieldMetaData("detailContent", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_SNAPSHOOT_ID, new FieldMetaData("productSnapshootId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Product.class, metaDataMap);
  }


  public Product() {
    this.imgKey = ",,,,,";
  }

  public Product(
    String productId)
  {
    this();
    this.productId = productId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Product(Product other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    this.sellerId = other.sellerId;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetViceName()) {
      this.viceName = other.viceName;
    }
    this.subjectId = other.subjectId;
    this.brandId = other.brandId;
    if (other.isSetImgKey()) {
      this.imgKey = other.imgKey;
    }
    if (other.isSetDetailKey()) {
      this.detailKey = other.detailKey;
    }
    this.maxBuyLimit = other.maxBuyLimit;
    this.activeState = other.activeState;
    this.type = other.type;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.createUserId = other.createUserId;
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
    this.lastUpdateId = other.lastUpdateId;
    if (other.isSetSkuTemplate()) {
      this.skuTemplate = other.skuTemplate;
    }
    if (other.isSetAttribute()) {
      this.attribute = other.attribute;
    }
    if (other.isSetProductSku()) {
      this.productSku = new ProductSku(other.productSku);
    }
    if (other.isSetProductUrl()) {
      this.productUrl = other.productUrl;
    }
    if (other.isSetTags()) {
      this.tags = other.tags;
    }
    if (other.isSetDetailContent()) {
      this.detailContent = other.detailContent;
    }
    if (other.isSetProductSnapshootId()) {
      this.productSnapshootId = other.productSnapshootId;
    }
  }

  public Product deepCopy() {
    return new Product(this);
  }

  @Override
  public void clear() {
    this.productId = null;
    setSellerIdIsSet(false);
    this.sellerId = 0;
    this.productName = null;
    this.viceName = null;
    setSubjectIdIsSet(false);
    this.subjectId = 0;
    setBrandIdIsSet(false);
    this.brandId = 0;
    this.imgKey = ",,,,,";
    this.detailKey = null;
    setMaxBuyLimitIsSet(false);
    this.maxBuyLimit = 0;
    setActiveStateIsSet(false);
    this.activeState = 0;
    setTypeIsSet(false);
    this.type = 0;
    this.remark = null;
    this.createTime = null;
    setCreateUserIdIsSet(false);
    this.createUserId = 0;
    this.lastUpdateTime = null;
    setLastUpdateIdIsSet(false);
    this.lastUpdateId = 0;
    this.skuTemplate = null;
    this.attribute = null;
    this.productSku = null;
    this.productUrl = null;
    this.tags = null;
    this.detailContent = null;
    this.productSnapshootId = null;
  }

  public String getProductId() {
    return this.productId;
  }

  public Product setProductId(String productId) {
    this.productId = productId;
    
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been asigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public int getSellerId() {
    return this.sellerId;
  }

  public Product setSellerId(int sellerId) {
    this.sellerId = sellerId;
    setSellerIdIsSet(true);

    return this;
  }

  public void unsetSellerId() {
  __isset_bit_vector.clear(__SELLERID_ISSET_ID);
  }

  /** Returns true if field sellerId is set (has been asigned a value) and false otherwise */
  public boolean isSetSellerId() {
    return __isset_bit_vector.get(__SELLERID_ISSET_ID);
  }

  public void setSellerIdIsSet(boolean value) {
    __isset_bit_vector.set(__SELLERID_ISSET_ID, value);
  }

  public String getProductName() {
    return this.productName;
  }

  public Product setProductName(String productName) {
    this.productName = productName;
    
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been asigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getViceName() {
    return this.viceName;
  }

  public Product setViceName(String viceName) {
    this.viceName = viceName;
    
    return this;
  }

  public void unsetViceName() {
    this.viceName = null;
  }

  /** Returns true if field viceName is set (has been asigned a value) and false otherwise */
  public boolean isSetViceName() {
    return this.viceName != null;
  }

  public void setViceNameIsSet(boolean value) {
    if (!value) {
      this.viceName = null;
    }
  }

  public int getSubjectId() {
    return this.subjectId;
  }

  public Product setSubjectId(int subjectId) {
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);

    return this;
  }

  public void unsetSubjectId() {
  __isset_bit_vector.clear(__SUBJECTID_ISSET_ID);
  }

  /** Returns true if field subjectId is set (has been asigned a value) and false otherwise */
  public boolean isSetSubjectId() {
    return __isset_bit_vector.get(__SUBJECTID_ISSET_ID);
  }

  public void setSubjectIdIsSet(boolean value) {
    __isset_bit_vector.set(__SUBJECTID_ISSET_ID, value);
  }

  public int getBrandId() {
    return this.brandId;
  }

  public Product setBrandId(int brandId) {
    this.brandId = brandId;
    setBrandIdIsSet(true);

    return this;
  }

  public void unsetBrandId() {
  __isset_bit_vector.clear(__BRANDID_ISSET_ID);
  }

  /** Returns true if field brandId is set (has been asigned a value) and false otherwise */
  public boolean isSetBrandId() {
    return __isset_bit_vector.get(__BRANDID_ISSET_ID);
  }

  public void setBrandIdIsSet(boolean value) {
    __isset_bit_vector.set(__BRANDID_ISSET_ID, value);
  }

  public String getImgKey() {
    return this.imgKey;
  }

  public Product setImgKey(String imgKey) {
    this.imgKey = imgKey;
    
    return this;
  }

  public void unsetImgKey() {
    this.imgKey = null;
  }

  /** Returns true if field imgKey is set (has been asigned a value) and false otherwise */
  public boolean isSetImgKey() {
    return this.imgKey != null;
  }

  public void setImgKeyIsSet(boolean value) {
    if (!value) {
      this.imgKey = null;
    }
  }

  public String getDetailKey() {
    return this.detailKey;
  }

  public Product setDetailKey(String detailKey) {
    this.detailKey = detailKey;
    
    return this;
  }

  public void unsetDetailKey() {
    this.detailKey = null;
  }

  /** Returns true if field detailKey is set (has been asigned a value) and false otherwise */
  public boolean isSetDetailKey() {
    return this.detailKey != null;
  }

  public void setDetailKeyIsSet(boolean value) {
    if (!value) {
      this.detailKey = null;
    }
  }

  public int getMaxBuyLimit() {
    return this.maxBuyLimit;
  }

  public Product setMaxBuyLimit(int maxBuyLimit) {
    this.maxBuyLimit = maxBuyLimit;
    setMaxBuyLimitIsSet(true);

    return this;
  }

  public void unsetMaxBuyLimit() {
  __isset_bit_vector.clear(__MAXBUYLIMIT_ISSET_ID);
  }

  /** Returns true if field maxBuyLimit is set (has been asigned a value) and false otherwise */
  public boolean isSetMaxBuyLimit() {
    return __isset_bit_vector.get(__MAXBUYLIMIT_ISSET_ID);
  }

  public void setMaxBuyLimitIsSet(boolean value) {
    __isset_bit_vector.set(__MAXBUYLIMIT_ISSET_ID, value);
  }

  public int getActiveState() {
    return this.activeState;
  }

  public Product setActiveState(int activeState) {
    this.activeState = activeState;
    setActiveStateIsSet(true);

    return this;
  }

  public void unsetActiveState() {
  __isset_bit_vector.clear(__ACTIVESTATE_ISSET_ID);
  }

  /** Returns true if field activeState is set (has been asigned a value) and false otherwise */
  public boolean isSetActiveState() {
    return __isset_bit_vector.get(__ACTIVESTATE_ISSET_ID);
  }

  public void setActiveStateIsSet(boolean value) {
    __isset_bit_vector.set(__ACTIVESTATE_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public Product setType(int type) {
    this.type = type;
    setTypeIsSet(true);

    return this;
  }

  public void unsetType() {
  __isset_bit_vector.clear(__TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been asigned a value) and false otherwise */
  public boolean isSetType() {
    return __isset_bit_vector.get(__TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bit_vector.set(__TYPE_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public Product setRemark(String remark) {
    this.remark = remark;
    
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been asigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public Product setCreateTime(String createTime) {
    this.createTime = createTime;
    
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getCreateUserId() {
    return this.createUserId;
  }

  public Product setCreateUserId(int createUserId) {
    this.createUserId = createUserId;
    setCreateUserIdIsSet(true);

    return this;
  }

  public void unsetCreateUserId() {
  __isset_bit_vector.clear(__CREATEUSERID_ISSET_ID);
  }

  /** Returns true if field createUserId is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateUserId() {
    return __isset_bit_vector.get(__CREATEUSERID_ISSET_ID);
  }

  public void setCreateUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__CREATEUSERID_ISSET_ID, value);
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public Product setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been asigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public int getLastUpdateId() {
    return this.lastUpdateId;
  }

  public Product setLastUpdateId(int lastUpdateId) {
    this.lastUpdateId = lastUpdateId;
    setLastUpdateIdIsSet(true);

    return this;
  }

  public void unsetLastUpdateId() {
  __isset_bit_vector.clear(__LASTUPDATEID_ISSET_ID);
  }

  /** Returns true if field lastUpdateId is set (has been asigned a value) and false otherwise */
  public boolean isSetLastUpdateId() {
    return __isset_bit_vector.get(__LASTUPDATEID_ISSET_ID);
  }

  public void setLastUpdateIdIsSet(boolean value) {
    __isset_bit_vector.set(__LASTUPDATEID_ISSET_ID, value);
  }

  public String getSkuTemplate() {
    return this.skuTemplate;
  }

  public Product setSkuTemplate(String skuTemplate) {
    this.skuTemplate = skuTemplate;
    
    return this;
  }

  public void unsetSkuTemplate() {
    this.skuTemplate = null;
  }

  /** Returns true if field skuTemplate is set (has been asigned a value) and false otherwise */
  public boolean isSetSkuTemplate() {
    return this.skuTemplate != null;
  }

  public void setSkuTemplateIsSet(boolean value) {
    if (!value) {
      this.skuTemplate = null;
    }
  }

  public String getAttribute() {
    return this.attribute;
  }

  public Product setAttribute(String attribute) {
    this.attribute = attribute;
    
    return this;
  }

  public void unsetAttribute() {
    this.attribute = null;
  }

  /** Returns true if field attribute is set (has been asigned a value) and false otherwise */
  public boolean isSetAttribute() {
    return this.attribute != null;
  }

  public void setAttributeIsSet(boolean value) {
    if (!value) {
      this.attribute = null;
    }
  }

  public ProductSku getProductSku() {
    return this.productSku;
  }

  public Product setProductSku(ProductSku productSku) {
    this.productSku = productSku;
    
    return this;
  }

  public void unsetProductSku() {
    this.productSku = null;
  }

  /** Returns true if field productSku is set (has been asigned a value) and false otherwise */
  public boolean isSetProductSku() {
    return this.productSku != null;
  }

  public void setProductSkuIsSet(boolean value) {
    if (!value) {
      this.productSku = null;
    }
  }

  public String getProductUrl() {
    return this.productUrl;
  }

  public Product setProductUrl(String productUrl) {
    this.productUrl = productUrl;
    
    return this;
  }

  public void unsetProductUrl() {
    this.productUrl = null;
  }

  /** Returns true if field productUrl is set (has been asigned a value) and false otherwise */
  public boolean isSetProductUrl() {
    return this.productUrl != null;
  }

  public void setProductUrlIsSet(boolean value) {
    if (!value) {
      this.productUrl = null;
    }
  }

  public String getTags() {
    return this.tags;
  }

  public Product setTags(String tags) {
    this.tags = tags;
    
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been asigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public String getDetailContent() {
    return this.detailContent;
  }

  public Product setDetailContent(String detailContent) {
    this.detailContent = detailContent;
    
    return this;
  }

  public void unsetDetailContent() {
    this.detailContent = null;
  }

  /** Returns true if field detailContent is set (has been asigned a value) and false otherwise */
  public boolean isSetDetailContent() {
    return this.detailContent != null;
  }

  public void setDetailContentIsSet(boolean value) {
    if (!value) {
      this.detailContent = null;
    }
  }

  public String getProductSnapshootId() {
    return this.productSnapshootId;
  }

  public Product setProductSnapshootId(String productSnapshootId) {
    this.productSnapshootId = productSnapshootId;
    
    return this;
  }

  public void unsetProductSnapshootId() {
    this.productSnapshootId = null;
  }

  /** Returns true if field productSnapshootId is set (has been asigned a value) and false otherwise */
  public boolean isSetProductSnapshootId() {
    return this.productSnapshootId != null;
  }

  public void setProductSnapshootIdIsSet(boolean value) {
    if (!value) {
      this.productSnapshootId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;
    case SELLER_ID:
      if (value == null) {
        unsetSellerId();
      } else {
        setSellerId((Integer)value);
      }
      break;
    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;
    case VICE_NAME:
      if (value == null) {
        unsetViceName();
      } else {
        setViceName((String)value);
      }
      break;
    case SUBJECT_ID:
      if (value == null) {
        unsetSubjectId();
      } else {
        setSubjectId((Integer)value);
      }
      break;
    case BRAND_ID:
      if (value == null) {
        unsetBrandId();
      } else {
        setBrandId((Integer)value);
      }
      break;
    case IMG_KEY:
      if (value == null) {
        unsetImgKey();
      } else {
        setImgKey((String)value);
      }
      break;
    case DETAIL_KEY:
      if (value == null) {
        unsetDetailKey();
      } else {
        setDetailKey((String)value);
      }
      break;
    case MAX_BUY_LIMIT:
      if (value == null) {
        unsetMaxBuyLimit();
      } else {
        setMaxBuyLimit((Integer)value);
      }
      break;
    case ACTIVE_STATE:
      if (value == null) {
        unsetActiveState();
      } else {
        setActiveState((Integer)value);
      }
      break;
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;
    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;
    case CREATE_USER_ID:
      if (value == null) {
        unsetCreateUserId();
      } else {
        setCreateUserId((Integer)value);
      }
      break;
    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;
    case LAST_UPDATE_ID:
      if (value == null) {
        unsetLastUpdateId();
      } else {
        setLastUpdateId((Integer)value);
      }
      break;
    case SKU_TEMPLATE:
      if (value == null) {
        unsetSkuTemplate();
      } else {
        setSkuTemplate((String)value);
      }
      break;
    case ATTRIBUTE:
      if (value == null) {
        unsetAttribute();
      } else {
        setAttribute((String)value);
      }
      break;
    case PRODUCT_SKU:
      if (value == null) {
        unsetProductSku();
      } else {
        setProductSku((ProductSku)value);
      }
      break;
    case PRODUCT_URL:
      if (value == null) {
        unsetProductUrl();
      } else {
        setProductUrl((String)value);
      }
      break;
    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((String)value);
      }
      break;
    case DETAIL_CONTENT:
      if (value == null) {
        unsetDetailContent();
      } else {
        setDetailContent((String)value);
      }
      break;
    case PRODUCT_SNAPSHOOT_ID:
      if (value == null) {
        unsetProductSnapshootId();
      } else {
        setProductSnapshootId((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_ID:
      return getProductId();
    case SELLER_ID:
      return new Integer(getSellerId());
    case PRODUCT_NAME:
      return getProductName();
    case VICE_NAME:
      return getViceName();
    case SUBJECT_ID:
      return new Integer(getSubjectId());
    case BRAND_ID:
      return new Integer(getBrandId());
    case IMG_KEY:
      return getImgKey();
    case DETAIL_KEY:
      return getDetailKey();
    case MAX_BUY_LIMIT:
      return new Integer(getMaxBuyLimit());
    case ACTIVE_STATE:
      return new Integer(getActiveState());
    case TYPE:
      return new Integer(getType());
    case REMARK:
      return getRemark();
    case CREATE_TIME:
      return getCreateTime();
    case CREATE_USER_ID:
      return new Integer(getCreateUserId());
    case LAST_UPDATE_TIME:
      return getLastUpdateTime();
    case LAST_UPDATE_ID:
      return new Integer(getLastUpdateId());
    case SKU_TEMPLATE:
      return getSkuTemplate();
    case ATTRIBUTE:
      return getAttribute();
    case PRODUCT_SKU:
      return getProductSku();
    case PRODUCT_URL:
      return getProductUrl();
    case TAGS:
      return getTags();
    case DETAIL_CONTENT:
      return getDetailContent();
    case PRODUCT_SNAPSHOOT_ID:
      return getProductSnapshootId();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_ID:
      return isSetProductId();
    case SELLER_ID:
      return isSetSellerId();
    case PRODUCT_NAME:
      return isSetProductName();
    case VICE_NAME:
      return isSetViceName();
    case SUBJECT_ID:
      return isSetSubjectId();
    case BRAND_ID:
      return isSetBrandId();
    case IMG_KEY:
      return isSetImgKey();
    case DETAIL_KEY:
      return isSetDetailKey();
    case MAX_BUY_LIMIT:
      return isSetMaxBuyLimit();
    case ACTIVE_STATE:
      return isSetActiveState();
    case TYPE:
      return isSetType();
    case REMARK:
      return isSetRemark();
    case CREATE_TIME:
      return isSetCreateTime();
    case CREATE_USER_ID:
      return isSetCreateUserId();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case LAST_UPDATE_ID:
      return isSetLastUpdateId();
    case SKU_TEMPLATE:
      return isSetSkuTemplate();
    case ATTRIBUTE:
      return isSetAttribute();
    case PRODUCT_SKU:
      return isSetProductSku();
    case PRODUCT_URL:
      return isSetProductUrl();
    case TAGS:
      return isSetTags();
    case DETAIL_CONTENT:
      return isSetDetailContent();
    case PRODUCT_SNAPSHOOT_ID:
      return isSetProductSnapshootId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Product)
      return this.equals((Product)that);
    return false;
  }

  public boolean equals(Product that) {
    if (that == null)
      return false;
    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }
    boolean this_present_sellerId = true && this.isSetSellerId();
    boolean that_present_sellerId = true && that.isSetSellerId();
    if (this_present_sellerId || that_present_sellerId) {
      if (!(this_present_sellerId && that_present_sellerId))
        return false;
      if (this.sellerId != that.sellerId)
        return false;
    }
    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }
    boolean this_present_viceName = true && this.isSetViceName();
    boolean that_present_viceName = true && that.isSetViceName();
    if (this_present_viceName || that_present_viceName) {
      if (!(this_present_viceName && that_present_viceName))
        return false;
      if (!this.viceName.equals(that.viceName))
        return false;
    }
    boolean this_present_subjectId = true && this.isSetSubjectId();
    boolean that_present_subjectId = true && that.isSetSubjectId();
    if (this_present_subjectId || that_present_subjectId) {
      if (!(this_present_subjectId && that_present_subjectId))
        return false;
      if (this.subjectId != that.subjectId)
        return false;
    }
    boolean this_present_brandId = true && this.isSetBrandId();
    boolean that_present_brandId = true && that.isSetBrandId();
    if (this_present_brandId || that_present_brandId) {
      if (!(this_present_brandId && that_present_brandId))
        return false;
      if (this.brandId != that.brandId)
        return false;
    }
    boolean this_present_imgKey = true && this.isSetImgKey();
    boolean that_present_imgKey = true && that.isSetImgKey();
    if (this_present_imgKey || that_present_imgKey) {
      if (!(this_present_imgKey && that_present_imgKey))
        return false;
      if (!this.imgKey.equals(that.imgKey))
        return false;
    }
    boolean this_present_detailKey = true && this.isSetDetailKey();
    boolean that_present_detailKey = true && that.isSetDetailKey();
    if (this_present_detailKey || that_present_detailKey) {
      if (!(this_present_detailKey && that_present_detailKey))
        return false;
      if (!this.detailKey.equals(that.detailKey))
        return false;
    }
    boolean this_present_maxBuyLimit = true && this.isSetMaxBuyLimit();
    boolean that_present_maxBuyLimit = true && that.isSetMaxBuyLimit();
    if (this_present_maxBuyLimit || that_present_maxBuyLimit) {
      if (!(this_present_maxBuyLimit && that_present_maxBuyLimit))
        return false;
      if (this.maxBuyLimit != that.maxBuyLimit)
        return false;
    }
    boolean this_present_activeState = true && this.isSetActiveState();
    boolean that_present_activeState = true && that.isSetActiveState();
    if (this_present_activeState || that_present_activeState) {
      if (!(this_present_activeState && that_present_activeState))
        return false;
      if (this.activeState != that.activeState)
        return false;
    }
    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }
    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }
    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }
    boolean this_present_createUserId = true && this.isSetCreateUserId();
    boolean that_present_createUserId = true && that.isSetCreateUserId();
    if (this_present_createUserId || that_present_createUserId) {
      if (!(this_present_createUserId && that_present_createUserId))
        return false;
      if (this.createUserId != that.createUserId)
        return false;
    }
    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }
    boolean this_present_lastUpdateId = true && this.isSetLastUpdateId();
    boolean that_present_lastUpdateId = true && that.isSetLastUpdateId();
    if (this_present_lastUpdateId || that_present_lastUpdateId) {
      if (!(this_present_lastUpdateId && that_present_lastUpdateId))
        return false;
      if (this.lastUpdateId != that.lastUpdateId)
        return false;
    }
    boolean this_present_skuTemplate = true && this.isSetSkuTemplate();
    boolean that_present_skuTemplate = true && that.isSetSkuTemplate();
    if (this_present_skuTemplate || that_present_skuTemplate) {
      if (!(this_present_skuTemplate && that_present_skuTemplate))
        return false;
      if (!this.skuTemplate.equals(that.skuTemplate))
        return false;
    }
    boolean this_present_attribute = true && this.isSetAttribute();
    boolean that_present_attribute = true && that.isSetAttribute();
    if (this_present_attribute || that_present_attribute) {
      if (!(this_present_attribute && that_present_attribute))
        return false;
      if (!this.attribute.equals(that.attribute))
        return false;
    }
    boolean this_present_productSku = true && this.isSetProductSku();
    boolean that_present_productSku = true && that.isSetProductSku();
    if (this_present_productSku || that_present_productSku) {
      if (!(this_present_productSku && that_present_productSku))
        return false;
      if (!this.productSku.equals(that.productSku))
        return false;
    }
    boolean this_present_productUrl = true && this.isSetProductUrl();
    boolean that_present_productUrl = true && that.isSetProductUrl();
    if (this_present_productUrl || that_present_productUrl) {
      if (!(this_present_productUrl && that_present_productUrl))
        return false;
      if (!this.productUrl.equals(that.productUrl))
        return false;
    }
    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }
    boolean this_present_detailContent = true && this.isSetDetailContent();
    boolean that_present_detailContent = true && that.isSetDetailContent();
    if (this_present_detailContent || that_present_detailContent) {
      if (!(this_present_detailContent && that_present_detailContent))
        return false;
      if (!this.detailContent.equals(that.detailContent))
        return false;
    }
    boolean this_present_productSnapshootId = true && this.isSetProductSnapshootId();
    boolean that_present_productSnapshootId = true && that.isSetProductSnapshootId();
    if (this_present_productSnapshootId || that_present_productSnapshootId) {
      if (!(this_present_productSnapshootId && that_present_productSnapshootId))
        return false;
      if (!this.productSnapshootId.equals(that.productSnapshootId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_productId = true && (isSetProductId());
    builder.append(present_productId);
    if (present_productId)
      builder.append(productId);
    boolean present_sellerId = true && (isSetSellerId());
    builder.append(present_sellerId);
    if (present_sellerId)
      builder.append(sellerId);
    boolean present_productName = true && (isSetProductName());
    builder.append(present_productName);
    if (present_productName)
      builder.append(productName);
    boolean present_viceName = true && (isSetViceName());
    builder.append(present_viceName);
    if (present_viceName)
      builder.append(viceName);
    boolean present_subjectId = true && (isSetSubjectId());
    builder.append(present_subjectId);
    if (present_subjectId)
      builder.append(subjectId);
    boolean present_brandId = true && (isSetBrandId());
    builder.append(present_brandId);
    if (present_brandId)
      builder.append(brandId);
    boolean present_imgKey = true && (isSetImgKey());
    builder.append(present_imgKey);
    if (present_imgKey)
      builder.append(imgKey);
    boolean present_detailKey = true && (isSetDetailKey());
    builder.append(present_detailKey);
    if (present_detailKey)
      builder.append(detailKey);
    boolean present_maxBuyLimit = true && (isSetMaxBuyLimit());
    builder.append(present_maxBuyLimit);
    if (present_maxBuyLimit)
      builder.append(maxBuyLimit);
    boolean present_activeState = true && (isSetActiveState());
    builder.append(present_activeState);
    if (present_activeState)
      builder.append(activeState);
    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type);
    boolean present_remark = true && (isSetRemark());
    builder.append(present_remark);
    if (present_remark)
      builder.append(remark);
    boolean present_createTime = true && (isSetCreateTime());
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);
    boolean present_createUserId = true && (isSetCreateUserId());
    builder.append(present_createUserId);
    if (present_createUserId)
      builder.append(createUserId);
    boolean present_lastUpdateTime = true && (isSetLastUpdateTime());
    builder.append(present_lastUpdateTime);
    if (present_lastUpdateTime)
      builder.append(lastUpdateTime);
    boolean present_lastUpdateId = true && (isSetLastUpdateId());
    builder.append(present_lastUpdateId);
    if (present_lastUpdateId)
      builder.append(lastUpdateId);
    boolean present_skuTemplate = true && (isSetSkuTemplate());
    builder.append(present_skuTemplate);
    if (present_skuTemplate)
      builder.append(skuTemplate);
    boolean present_attribute = true && (isSetAttribute());
    builder.append(present_attribute);
    if (present_attribute)
      builder.append(attribute);
    boolean present_productSku = true && (isSetProductSku());
    builder.append(present_productSku);
    if (present_productSku)
      builder.append(productSku);
    boolean present_productUrl = true && (isSetProductUrl());
    builder.append(present_productUrl);
    if (present_productUrl)
      builder.append(productUrl);
    boolean present_tags = true && (isSetTags());
    builder.append(present_tags);
    if (present_tags)
      builder.append(tags);
    boolean present_detailContent = true && (isSetDetailContent());
    builder.append(present_detailContent);
    if (present_detailContent)
      builder.append(detailContent);
    boolean present_productSnapshootId = true && (isSetProductSnapshootId());
    builder.append(present_productSnapshootId);
    if (present_productSnapshootId)
      builder.append(productSnapshootId);
    return builder.toHashCode();
  }

  public int compareTo(Product other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Product typedOther = (Product)other;

    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = TBaseHelper.compareTo(this.productId, typedOther.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerId()).compareTo(typedOther.isSetSellerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerId()) {
      lastComparison = TBaseHelper.compareTo(this.sellerId, typedOther.sellerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(typedOther.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = TBaseHelper.compareTo(this.productName, typedOther.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViceName()).compareTo(typedOther.isSetViceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViceName()) {
      lastComparison = TBaseHelper.compareTo(this.viceName, typedOther.viceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubjectId()).compareTo(typedOther.isSetSubjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectId()) {
      lastComparison = TBaseHelper.compareTo(this.subjectId, typedOther.subjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandId()).compareTo(typedOther.isSetBrandId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandId()) {
      lastComparison = TBaseHelper.compareTo(this.brandId, typedOther.brandId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgKey()).compareTo(typedOther.isSetImgKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgKey()) {
      lastComparison = TBaseHelper.compareTo(this.imgKey, typedOther.imgKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailKey()).compareTo(typedOther.isSetDetailKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailKey()) {
      lastComparison = TBaseHelper.compareTo(this.detailKey, typedOther.detailKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxBuyLimit()).compareTo(typedOther.isSetMaxBuyLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxBuyLimit()) {
      lastComparison = TBaseHelper.compareTo(this.maxBuyLimit, typedOther.maxBuyLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveState()).compareTo(typedOther.isSetActiveState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveState()) {
      lastComparison = TBaseHelper.compareTo(this.activeState, typedOther.activeState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(typedOther.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = TBaseHelper.compareTo(this.remark, typedOther.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateUserId()).compareTo(typedOther.isSetCreateUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateUserId()) {
      lastComparison = TBaseHelper.compareTo(this.createUserId, typedOther.createUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(typedOther.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = TBaseHelper.compareTo(this.lastUpdateTime, typedOther.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateId()).compareTo(typedOther.isSetLastUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateId()) {
      lastComparison = TBaseHelper.compareTo(this.lastUpdateId, typedOther.lastUpdateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkuTemplate()).compareTo(typedOther.isSetSkuTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkuTemplate()) {
      lastComparison = TBaseHelper.compareTo(this.skuTemplate, typedOther.skuTemplate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttribute()).compareTo(typedOther.isSetAttribute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttribute()) {
      lastComparison = TBaseHelper.compareTo(this.attribute, typedOther.attribute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductSku()).compareTo(typedOther.isSetProductSku());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductSku()) {
      lastComparison = TBaseHelper.compareTo(this.productSku, typedOther.productSku);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductUrl()).compareTo(typedOther.isSetProductUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductUrl()) {
      lastComparison = TBaseHelper.compareTo(this.productUrl, typedOther.productUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(typedOther.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = TBaseHelper.compareTo(this.tags, typedOther.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailContent()).compareTo(typedOther.isSetDetailContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailContent()) {
      lastComparison = TBaseHelper.compareTo(this.detailContent, typedOther.detailContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductSnapshootId()).compareTo(typedOther.isSetProductSnapshootId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductSnapshootId()) {
      lastComparison = TBaseHelper.compareTo(this.productSnapshootId, typedOther.productSnapshootId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PRODUCT_ID
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SELLER_ID
          if (field.type == TType.I32) {
            this.sellerId = iprot.readI32();
            setSellerIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PRODUCT_NAME
          if (field.type == TType.STRING) {
            this.productName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // VICE_NAME
          if (field.type == TType.STRING) {
            this.viceName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SUBJECT_ID
          if (field.type == TType.I32) {
            this.subjectId = iprot.readI32();
            setSubjectIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // BRAND_ID
          if (field.type == TType.I32) {
            this.brandId = iprot.readI32();
            setBrandIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // IMG_KEY
          if (field.type == TType.STRING) {
            this.imgKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // DETAIL_KEY
          if (field.type == TType.STRING) {
            this.detailKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // MAX_BUY_LIMIT
          if (field.type == TType.I32) {
            this.maxBuyLimit = iprot.readI32();
            setMaxBuyLimitIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // ACTIVE_STATE
          if (field.type == TType.I32) {
            this.activeState = iprot.readI32();
            setActiveStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // TYPE
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            setTypeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // REMARK
          if (field.type == TType.STRING) {
            this.remark = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // CREATE_TIME
          if (field.type == TType.STRING) {
            this.createTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // CREATE_USER_ID
          if (field.type == TType.I32) {
            this.createUserId = iprot.readI32();
            setCreateUserIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // LAST_UPDATE_TIME
          if (field.type == TType.STRING) {
            this.lastUpdateTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // LAST_UPDATE_ID
          if (field.type == TType.I32) {
            this.lastUpdateId = iprot.readI32();
            setLastUpdateIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // SKU_TEMPLATE
          if (field.type == TType.STRING) {
            this.skuTemplate = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // ATTRIBUTE
          if (field.type == TType.STRING) {
            this.attribute = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 19: // PRODUCT_SKU
          if (field.type == TType.STRUCT) {
            this.productSku = new ProductSku();
            this.productSku.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // PRODUCT_URL
          if (field.type == TType.STRING) {
            this.productUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 21: // TAGS
          if (field.type == TType.STRING) {
            this.tags = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 22: // DETAIL_CONTENT
          if (field.type == TType.STRING) {
            this.detailContent = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 23: // PRODUCT_SNAPSHOOT_ID
          if (field.type == TType.STRING) {
            this.productSnapshootId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.productId != null) {
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    if (isSetSellerId()) {
      oprot.writeFieldBegin(SELLER_ID_FIELD_DESC);
      oprot.writeI32(this.sellerId);
      oprot.writeFieldEnd();
    }
    if (this.productName != null) {
      if (isSetProductName()) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(this.productName);
        oprot.writeFieldEnd();
      }
    }
    if (this.viceName != null) {
      if (isSetViceName()) {
        oprot.writeFieldBegin(VICE_NAME_FIELD_DESC);
        oprot.writeString(this.viceName);
        oprot.writeFieldEnd();
      }
    }
    if (isSetSubjectId()) {
      oprot.writeFieldBegin(SUBJECT_ID_FIELD_DESC);
      oprot.writeI32(this.subjectId);
      oprot.writeFieldEnd();
    }
    if (isSetBrandId()) {
      oprot.writeFieldBegin(BRAND_ID_FIELD_DESC);
      oprot.writeI32(this.brandId);
      oprot.writeFieldEnd();
    }
    if (this.imgKey != null) {
      if (isSetImgKey()) {
        oprot.writeFieldBegin(IMG_KEY_FIELD_DESC);
        oprot.writeString(this.imgKey);
        oprot.writeFieldEnd();
      }
    }
    if (this.detailKey != null) {
      if (isSetDetailKey()) {
        oprot.writeFieldBegin(DETAIL_KEY_FIELD_DESC);
        oprot.writeString(this.detailKey);
        oprot.writeFieldEnd();
      }
    }
    if (isSetMaxBuyLimit()) {
      oprot.writeFieldBegin(MAX_BUY_LIMIT_FIELD_DESC);
      oprot.writeI32(this.maxBuyLimit);
      oprot.writeFieldEnd();
    }
    if (isSetActiveState()) {
      oprot.writeFieldBegin(ACTIVE_STATE_FIELD_DESC);
      oprot.writeI32(this.activeState);
      oprot.writeFieldEnd();
    }
    if (isSetType()) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type);
      oprot.writeFieldEnd();
    }
    if (this.remark != null) {
      if (isSetRemark()) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(this.remark);
        oprot.writeFieldEnd();
      }
    }
    if (this.createTime != null) {
      if (isSetCreateTime()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(this.createTime);
        oprot.writeFieldEnd();
      }
    }
    if (isSetCreateUserId()) {
      oprot.writeFieldBegin(CREATE_USER_ID_FIELD_DESC);
      oprot.writeI32(this.createUserId);
      oprot.writeFieldEnd();
    }
    if (this.lastUpdateTime != null) {
      if (isSetLastUpdateTime()) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(this.lastUpdateTime);
        oprot.writeFieldEnd();
      }
    }
    if (isSetLastUpdateId()) {
      oprot.writeFieldBegin(LAST_UPDATE_ID_FIELD_DESC);
      oprot.writeI32(this.lastUpdateId);
      oprot.writeFieldEnd();
    }
    if (this.skuTemplate != null) {
      if (isSetSkuTemplate()) {
        oprot.writeFieldBegin(SKU_TEMPLATE_FIELD_DESC);
        oprot.writeString(this.skuTemplate);
        oprot.writeFieldEnd();
      }
    }
    if (this.attribute != null) {
      if (isSetAttribute()) {
        oprot.writeFieldBegin(ATTRIBUTE_FIELD_DESC);
        oprot.writeString(this.attribute);
        oprot.writeFieldEnd();
      }
    }
    if (this.productSku != null) {
      if (isSetProductSku()) {
        oprot.writeFieldBegin(PRODUCT_SKU_FIELD_DESC);
        this.productSku.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.productUrl != null) {
      if (isSetProductUrl()) {
        oprot.writeFieldBegin(PRODUCT_URL_FIELD_DESC);
        oprot.writeString(this.productUrl);
        oprot.writeFieldEnd();
      }
    }
    if (this.tags != null) {
      if (isSetTags()) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        oprot.writeString(this.tags);
        oprot.writeFieldEnd();
      }
    }
    if (this.detailContent != null) {
      if (isSetDetailContent()) {
        oprot.writeFieldBegin(DETAIL_CONTENT_FIELD_DESC);
        oprot.writeString(this.detailContent);
        oprot.writeFieldEnd();
      }
    }
    if (this.productSnapshootId != null) {
      if (isSetProductSnapshootId()) {
        oprot.writeFieldBegin(PRODUCT_SNAPSHOOT_ID_FIELD_DESC);
        oprot.writeString(this.productSnapshootId);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Product(");
    boolean first = true;
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (isSetSellerId()) {
      if (!first) sb.append(", ");
      sb.append("sellerId:");
      sb.append(this.sellerId);
      first = false;
      }
    if (isSetProductName()) {
      if (!first) sb.append(", ");
      sb.append("productName:");
      if (this.productName == null) {
        sb.append("null");
      } else {
        sb.append(this.productName);
      }
      first = false;
      }
    if (isSetViceName()) {
      if (!first) sb.append(", ");
      sb.append("viceName:");
      if (this.viceName == null) {
        sb.append("null");
      } else {
        sb.append(this.viceName);
      }
      first = false;
      }
    if (isSetSubjectId()) {
      if (!first) sb.append(", ");
      sb.append("subjectId:");
      sb.append(this.subjectId);
      first = false;
      }
    if (isSetBrandId()) {
      if (!first) sb.append(", ");
      sb.append("brandId:");
      sb.append(this.brandId);
      first = false;
      }
    if (isSetImgKey()) {
      if (!first) sb.append(", ");
      sb.append("imgKey:");
      if (this.imgKey == null) {
        sb.append("null");
      } else {
        sb.append(this.imgKey);
      }
      first = false;
      }
    if (isSetDetailKey()) {
      if (!first) sb.append(", ");
      sb.append("detailKey:");
      if (this.detailKey == null) {
        sb.append("null");
      } else {
        sb.append(this.detailKey);
      }
      first = false;
      }
    if (isSetMaxBuyLimit()) {
      if (!first) sb.append(", ");
      sb.append("maxBuyLimit:");
      sb.append(this.maxBuyLimit);
      first = false;
      }
    if (isSetActiveState()) {
      if (!first) sb.append(", ");
      sb.append("activeState:");
      sb.append(this.activeState);
      first = false;
      }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      }
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
      }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
      }
    if (isSetCreateUserId()) {
      if (!first) sb.append(", ");
      sb.append("createUserId:");
      sb.append(this.createUserId);
      first = false;
      }
    if (isSetLastUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("lastUpdateTime:");
      if (this.lastUpdateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.lastUpdateTime);
      }
      first = false;
      }
    if (isSetLastUpdateId()) {
      if (!first) sb.append(", ");
      sb.append("lastUpdateId:");
      sb.append(this.lastUpdateId);
      first = false;
      }
    if (isSetSkuTemplate()) {
      if (!first) sb.append(", ");
      sb.append("skuTemplate:");
      if (this.skuTemplate == null) {
        sb.append("null");
      } else {
        sb.append(this.skuTemplate);
      }
      first = false;
      }
    if (isSetAttribute()) {
      if (!first) sb.append(", ");
      sb.append("attribute:");
      if (this.attribute == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute);
      }
      first = false;
      }
    if (isSetProductSku()) {
      if (!first) sb.append(", ");
      sb.append("productSku:");
      if (this.productSku == null) {
        sb.append("null");
      } else {
        sb.append(this.productSku);
      }
      first = false;
      }
    if (isSetProductUrl()) {
      if (!first) sb.append(", ");
      sb.append("productUrl:");
      if (this.productUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.productUrl);
      }
      first = false;
      }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
      }
    if (isSetDetailContent()) {
      if (!first) sb.append(", ");
      sb.append("detailContent:");
      if (this.detailContent == null) {
        sb.append("null");
      } else {
        sb.append(this.detailContent);
      }
      first = false;
      }
    if (isSetProductSnapshootId()) {
      if (!first) sb.append(", ");
      sb.append("productSnapshootId:");
      if (this.productSnapshootId == null) {
        sb.append("null");
      } else {
        sb.append(this.productSnapshootId);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
