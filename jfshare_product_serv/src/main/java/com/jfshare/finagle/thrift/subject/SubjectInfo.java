/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.subject;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class SubjectInfo implements TBase<SubjectInfo, SubjectInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SubjectInfo");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField PID_FIELD_DESC = new TField("pid", TType.I32, (short)3);
  private static final TField SORTED_FIELD_DESC = new TField("sorted", TType.I32, (short)4);
  private static final TField LEVEL_FIELD_DESC = new TField("level", TType.I32, (short)5);
  private static final TField IS_LEAF_FIELD_DESC = new TField("isLeaf", TType.I32, (short)6);
  private static final TField DEMO_FIELD_DESC = new TField("demo", TType.STRING, (short)7);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.STRING, (short)8);
  private static final TField CREATOR_FIELD_DESC = new TField("creator", TType.I32, (short)9);
  private static final TField UPDATE_TIME_FIELD_DESC = new TField("updateTime", TType.STRING, (short)10);
  private static final TField UPDATER_FIELD_DESC = new TField("updater", TType.I32, (short)11);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)12);
  private static final TField PATH_FIELD_DESC = new TField("path", TType.STRING, (short)13);
  private static final TField DISPLAY_IDS_FIELD_DESC = new TField("displayIds", TType.STRING, (short)14);
  private static final TField SUBJECT_NODES_FIELD_DESC = new TField("subjectNodes", TType.LIST, (short)15);


  public int id;
  public String name;
  public int pid;
  public int sorted;
  public int level;
  public int isLeaf;
  public String demo;
  public String createTime;
  public int creator;
  public String updateTime;
  public int updater;
  public int status;
  public String path;
  public String displayIds;
  public List<SubjectNode> subjectNodes;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    PID((short)3, "pid"),
    SORTED((short)4, "sorted"),
    LEVEL((short)5, "level"),
    IS_LEAF((short)6, "isLeaf"),
    DEMO((short)7, "demo"),
    CREATE_TIME((short)8, "createTime"),
    CREATOR((short)9, "creator"),
    UPDATE_TIME((short)10, "updateTime"),
    UPDATER((short)11, "updater"),
    STATUS((short)12, "status"),
    PATH((short)13, "path"),
    DISPLAY_IDS((short)14, "displayIds"),
    SUBJECT_NODES((short)15, "subjectNodes");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
  	return ID;
        case 2: // NAME
  	return NAME;
        case 3: // PID
  	return PID;
        case 4: // SORTED
  	return SORTED;
        case 5: // LEVEL
  	return LEVEL;
        case 6: // IS_LEAF
  	return IS_LEAF;
        case 7: // DEMO
  	return DEMO;
        case 8: // CREATE_TIME
  	return CREATE_TIME;
        case 9: // CREATOR
  	return CREATOR;
        case 10: // UPDATE_TIME
  	return UPDATE_TIME;
        case 11: // UPDATER
  	return UPDATER;
        case 12: // STATUS
  	return STATUS;
        case 13: // PATH
  	return PATH;
        case 14: // DISPLAY_IDS
  	return DISPLAY_IDS;
        case 15: // SUBJECT_NODES
  	return SUBJECT_NODES;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PID_ISSET_ID = 1;
  private static final int __SORTED_ISSET_ID = 2;
  private static final int __LEVEL_ISSET_ID = 3;
  private static final int __ISLEAF_ISSET_ID = 4;
  private static final int __CREATOR_ISSET_ID = 5;
  private static final int __UPDATER_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PID, new FieldMetaData("pid", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.SORTED, new FieldMetaData("sorted", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.LEVEL, new FieldMetaData("level", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.IS_LEAF, new FieldMetaData("isLeaf", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.DEMO, new FieldMetaData("demo", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATOR, new FieldMetaData("creator", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new FieldMetaData("updateTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.UPDATER, new FieldMetaData("updater", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PATH, new FieldMetaData("path", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_IDS, new FieldMetaData("displayIds", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SUBJECT_NODES, new FieldMetaData("subjectNodes", TFieldRequirementType.OPTIONAL,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, SubjectNode.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(SubjectInfo.class, metaDataMap);
  }


  public SubjectInfo() {
  }

  public SubjectInfo(
    int id,
    String name,
    int pid,
    int sorted,
    int level,
    int isLeaf,
    String demo,
    String createTime,
    int creator,
    String updateTime,
    int updater,
    int status)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.pid = pid;
    setPidIsSet(true);
    this.sorted = sorted;
    setSortedIsSet(true);
    this.level = level;
    setLevelIsSet(true);
    this.isLeaf = isLeaf;
    setIsLeafIsSet(true);
    this.demo = demo;
    this.createTime = createTime;
    this.creator = creator;
    setCreatorIsSet(true);
    this.updateTime = updateTime;
    this.updater = updater;
    setUpdaterIsSet(true);
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubjectInfo(SubjectInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.pid = other.pid;
    this.sorted = other.sorted;
    this.level = other.level;
    this.isLeaf = other.isLeaf;
    if (other.isSetDemo()) {
      this.demo = other.demo;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.creator = other.creator;
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.updater = other.updater;
    this.status = other.status;
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetDisplayIds()) {
      this.displayIds = other.displayIds;
    }
    if (other.isSetSubjectNodes()) {
      List<SubjectNode> __this__subjectNodes = new ArrayList<SubjectNode>();
      for (SubjectNode other_element : other.subjectNodes) {
        __this__subjectNodes.add(new SubjectNode(other_element));
      }
      this.subjectNodes = __this__subjectNodes;
    }
  }

  public SubjectInfo deepCopy() {
    return new SubjectInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setPidIsSet(false);
    this.pid = 0;
    setSortedIsSet(false);
    this.sorted = 0;
    setLevelIsSet(false);
    this.level = 0;
    setIsLeafIsSet(false);
    this.isLeaf = 0;
    this.demo = null;
    this.createTime = null;
    setCreatorIsSet(false);
    this.creator = 0;
    this.updateTime = null;
    setUpdaterIsSet(false);
    this.updater = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.path = null;
    this.displayIds = null;
    this.subjectNodes = null;
  }

  public int getId() {
    return this.id;
  }

  public SubjectInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);

    return this;
  }

  public void unsetId() {
  __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public SubjectInfo setName(String name) {
    this.name = name;
    
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getPid() {
    return this.pid;
  }

  public SubjectInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);

    return this;
  }

  public void unsetPid() {
  __isset_bit_vector.clear(__PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been asigned a value) and false otherwise */
  public boolean isSetPid() {
    return __isset_bit_vector.get(__PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bit_vector.set(__PID_ISSET_ID, value);
  }

  public int getSorted() {
    return this.sorted;
  }

  public SubjectInfo setSorted(int sorted) {
    this.sorted = sorted;
    setSortedIsSet(true);

    return this;
  }

  public void unsetSorted() {
  __isset_bit_vector.clear(__SORTED_ISSET_ID);
  }

  /** Returns true if field sorted is set (has been asigned a value) and false otherwise */
  public boolean isSetSorted() {
    return __isset_bit_vector.get(__SORTED_ISSET_ID);
  }

  public void setSortedIsSet(boolean value) {
    __isset_bit_vector.set(__SORTED_ISSET_ID, value);
  }

  public int getLevel() {
    return this.level;
  }

  public SubjectInfo setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);

    return this;
  }

  public void unsetLevel() {
  __isset_bit_vector.clear(__LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been asigned a value) and false otherwise */
  public boolean isSetLevel() {
    return __isset_bit_vector.get(__LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bit_vector.set(__LEVEL_ISSET_ID, value);
  }

  public int getIsLeaf() {
    return this.isLeaf;
  }

  public SubjectInfo setIsLeaf(int isLeaf) {
    this.isLeaf = isLeaf;
    setIsLeafIsSet(true);

    return this;
  }

  public void unsetIsLeaf() {
  __isset_bit_vector.clear(__ISLEAF_ISSET_ID);
  }

  /** Returns true if field isLeaf is set (has been asigned a value) and false otherwise */
  public boolean isSetIsLeaf() {
    return __isset_bit_vector.get(__ISLEAF_ISSET_ID);
  }

  public void setIsLeafIsSet(boolean value) {
    __isset_bit_vector.set(__ISLEAF_ISSET_ID, value);
  }

  public String getDemo() {
    return this.demo;
  }

  public SubjectInfo setDemo(String demo) {
    this.demo = demo;
    
    return this;
  }

  public void unsetDemo() {
    this.demo = null;
  }

  /** Returns true if field demo is set (has been asigned a value) and false otherwise */
  public boolean isSetDemo() {
    return this.demo != null;
  }

  public void setDemoIsSet(boolean value) {
    if (!value) {
      this.demo = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public SubjectInfo setCreateTime(String createTime) {
    this.createTime = createTime;
    
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getCreator() {
    return this.creator;
  }

  public SubjectInfo setCreator(int creator) {
    this.creator = creator;
    setCreatorIsSet(true);

    return this;
  }

  public void unsetCreator() {
  __isset_bit_vector.clear(__CREATOR_ISSET_ID);
  }

  /** Returns true if field creator is set (has been asigned a value) and false otherwise */
  public boolean isSetCreator() {
    return __isset_bit_vector.get(__CREATOR_ISSET_ID);
  }

  public void setCreatorIsSet(boolean value) {
    __isset_bit_vector.set(__CREATOR_ISSET_ID, value);
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public SubjectInfo setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public int getUpdater() {
    return this.updater;
  }

  public SubjectInfo setUpdater(int updater) {
    this.updater = updater;
    setUpdaterIsSet(true);

    return this;
  }

  public void unsetUpdater() {
  __isset_bit_vector.clear(__UPDATER_ISSET_ID);
  }

  /** Returns true if field updater is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdater() {
    return __isset_bit_vector.get(__UPDATER_ISSET_ID);
  }

  public void setUpdaterIsSet(boolean value) {
    __isset_bit_vector.set(__UPDATER_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public SubjectInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);

    return this;
  }

  public void unsetStatus() {
  __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been asigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public String getPath() {
    return this.path;
  }

  public SubjectInfo setPath(String path) {
    this.path = path;
    
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been asigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public String getDisplayIds() {
    return this.displayIds;
  }

  public SubjectInfo setDisplayIds(String displayIds) {
    this.displayIds = displayIds;
    
    return this;
  }

  public void unsetDisplayIds() {
    this.displayIds = null;
  }

  /** Returns true if field displayIds is set (has been asigned a value) and false otherwise */
  public boolean isSetDisplayIds() {
    return this.displayIds != null;
  }

  public void setDisplayIdsIsSet(boolean value) {
    if (!value) {
      this.displayIds = null;
    }
  }

  public int getSubjectNodesSize() {
    return (this.subjectNodes == null) ? 0 : this.subjectNodes.size();
  }

  public java.util.Iterator<SubjectNode> getSubjectNodesIterator() {
    return (this.subjectNodes == null) ? null : this.subjectNodes.iterator();
  }

  public void addToSubjectNodes(SubjectNode elem) {
    if (this.subjectNodes == null) {
      this.subjectNodes = new ArrayList<SubjectNode>();
    }
    this.subjectNodes.add(elem);
  }

  public List<SubjectNode> getSubjectNodes() {
    return this.subjectNodes;
  }

  public SubjectInfo setSubjectNodes(List<SubjectNode> subjectNodes) {
    this.subjectNodes = subjectNodes;
    
    return this;
  }

  public void unsetSubjectNodes() {
    this.subjectNodes = null;
  }

  /** Returns true if field subjectNodes is set (has been asigned a value) and false otherwise */
  public boolean isSetSubjectNodes() {
    return this.subjectNodes != null;
  }

  public void setSubjectNodesIsSet(boolean value) {
    if (!value) {
      this.subjectNodes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;
    case SORTED:
      if (value == null) {
        unsetSorted();
      } else {
        setSorted((Integer)value);
      }
      break;
    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;
    case IS_LEAF:
      if (value == null) {
        unsetIsLeaf();
      } else {
        setIsLeaf((Integer)value);
      }
      break;
    case DEMO:
      if (value == null) {
        unsetDemo();
      } else {
        setDemo((String)value);
      }
      break;
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;
    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((Integer)value);
      }
      break;
    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;
    case UPDATER:
      if (value == null) {
        unsetUpdater();
      } else {
        setUpdater((Integer)value);
      }
      break;
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;
    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;
    case DISPLAY_IDS:
      if (value == null) {
        unsetDisplayIds();
      } else {
        setDisplayIds((String)value);
      }
      break;
    case SUBJECT_NODES:
      if (value == null) {
        unsetSubjectNodes();
      } else {
        setSubjectNodes((List<SubjectNode>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Integer(getId());
    case NAME:
      return getName();
    case PID:
      return new Integer(getPid());
    case SORTED:
      return new Integer(getSorted());
    case LEVEL:
      return new Integer(getLevel());
    case IS_LEAF:
      return new Integer(getIsLeaf());
    case DEMO:
      return getDemo();
    case CREATE_TIME:
      return getCreateTime();
    case CREATOR:
      return new Integer(getCreator());
    case UPDATE_TIME:
      return getUpdateTime();
    case UPDATER:
      return new Integer(getUpdater());
    case STATUS:
      return new Integer(getStatus());
    case PATH:
      return getPath();
    case DISPLAY_IDS:
      return getDisplayIds();
    case SUBJECT_NODES:
      return getSubjectNodes();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case PID:
      return isSetPid();
    case SORTED:
      return isSetSorted();
    case LEVEL:
      return isSetLevel();
    case IS_LEAF:
      return isSetIsLeaf();
    case DEMO:
      return isSetDemo();
    case CREATE_TIME:
      return isSetCreateTime();
    case CREATOR:
      return isSetCreator();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case UPDATER:
      return isSetUpdater();
    case STATUS:
      return isSetStatus();
    case PATH:
      return isSetPath();
    case DISPLAY_IDS:
      return isSetDisplayIds();
    case SUBJECT_NODES:
      return isSetSubjectNodes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubjectInfo)
      return this.equals((SubjectInfo)that);
    return false;
  }

  public boolean equals(SubjectInfo that) {
    if (that == null)
      return false;
    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }
    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }
    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }
    boolean this_present_sorted = true;
    boolean that_present_sorted = true;
    if (this_present_sorted || that_present_sorted) {
      if (!(this_present_sorted && that_present_sorted))
        return false;
      if (this.sorted != that.sorted)
        return false;
    }
    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }
    boolean this_present_isLeaf = true;
    boolean that_present_isLeaf = true;
    if (this_present_isLeaf || that_present_isLeaf) {
      if (!(this_present_isLeaf && that_present_isLeaf))
        return false;
      if (this.isLeaf != that.isLeaf)
        return false;
    }
    boolean this_present_demo = true && this.isSetDemo();
    boolean that_present_demo = true && that.isSetDemo();
    if (this_present_demo || that_present_demo) {
      if (!(this_present_demo && that_present_demo))
        return false;
      if (!this.demo.equals(that.demo))
        return false;
    }
    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }
    boolean this_present_creator = true;
    boolean that_present_creator = true;
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (this.creator != that.creator)
        return false;
    }
    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }
    boolean this_present_updater = true;
    boolean that_present_updater = true;
    if (this_present_updater || that_present_updater) {
      if (!(this_present_updater && that_present_updater))
        return false;
      if (this.updater != that.updater)
        return false;
    }
    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }
    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }
    boolean this_present_displayIds = true && this.isSetDisplayIds();
    boolean that_present_displayIds = true && that.isSetDisplayIds();
    if (this_present_displayIds || that_present_displayIds) {
      if (!(this_present_displayIds && that_present_displayIds))
        return false;
      if (!this.displayIds.equals(that.displayIds))
        return false;
    }
    boolean this_present_subjectNodes = true && this.isSetSubjectNodes();
    boolean that_present_subjectNodes = true && that.isSetSubjectNodes();
    if (this_present_subjectNodes || that_present_subjectNodes) {
      if (!(this_present_subjectNodes && that_present_subjectNodes))
        return false;
      if (!this.subjectNodes.equals(that.subjectNodes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);
    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);
    boolean present_pid = true;
    builder.append(present_pid);
    if (present_pid)
      builder.append(pid);
    boolean present_sorted = true;
    builder.append(present_sorted);
    if (present_sorted)
      builder.append(sorted);
    boolean present_level = true;
    builder.append(present_level);
    if (present_level)
      builder.append(level);
    boolean present_isLeaf = true;
    builder.append(present_isLeaf);
    if (present_isLeaf)
      builder.append(isLeaf);
    boolean present_demo = true && (isSetDemo());
    builder.append(present_demo);
    if (present_demo)
      builder.append(demo);
    boolean present_createTime = true && (isSetCreateTime());
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);
    boolean present_creator = true;
    builder.append(present_creator);
    if (present_creator)
      builder.append(creator);
    boolean present_updateTime = true && (isSetUpdateTime());
    builder.append(present_updateTime);
    if (present_updateTime)
      builder.append(updateTime);
    boolean present_updater = true;
    builder.append(present_updater);
    if (present_updater)
      builder.append(updater);
    boolean present_status = true;
    builder.append(present_status);
    if (present_status)
      builder.append(status);
    boolean present_path = true && (isSetPath());
    builder.append(present_path);
    if (present_path)
      builder.append(path);
    boolean present_displayIds = true && (isSetDisplayIds());
    builder.append(present_displayIds);
    if (present_displayIds)
      builder.append(displayIds);
    boolean present_subjectNodes = true && (isSetSubjectNodes());
    builder.append(present_subjectNodes);
    if (present_subjectNodes)
      builder.append(subjectNodes);
    return builder.toHashCode();
  }

  public int compareTo(SubjectInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SubjectInfo typedOther = (SubjectInfo)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(typedOther.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = TBaseHelper.compareTo(this.pid, typedOther.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSorted()).compareTo(typedOther.isSetSorted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSorted()) {
      lastComparison = TBaseHelper.compareTo(this.sorted, typedOther.sorted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLeaf()).compareTo(typedOther.isSetIsLeaf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLeaf()) {
      lastComparison = TBaseHelper.compareTo(this.isLeaf, typedOther.isLeaf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDemo()).compareTo(typedOther.isSetDemo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDemo()) {
      lastComparison = TBaseHelper.compareTo(this.demo, typedOther.demo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(typedOther.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = TBaseHelper.compareTo(this.creator, typedOther.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdater()).compareTo(typedOther.isSetUpdater());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdater()) {
      lastComparison = TBaseHelper.compareTo(this.updater, typedOther.updater);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = TBaseHelper.compareTo(this.path, typedOther.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayIds()).compareTo(typedOther.isSetDisplayIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayIds()) {
      lastComparison = TBaseHelper.compareTo(this.displayIds, typedOther.displayIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubjectNodes()).compareTo(typedOther.isSetSubjectNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectNodes()) {
      lastComparison = TBaseHelper.compareTo(this.subjectNodes, typedOther.subjectNodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PID
          if (field.type == TType.I32) {
            this.pid = iprot.readI32();
            setPidIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SORTED
          if (field.type == TType.I32) {
            this.sorted = iprot.readI32();
            setSortedIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // LEVEL
          if (field.type == TType.I32) {
            this.level = iprot.readI32();
            setLevelIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // IS_LEAF
          if (field.type == TType.I32) {
            this.isLeaf = iprot.readI32();
            setIsLeafIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // DEMO
          if (field.type == TType.STRING) {
            this.demo = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // CREATE_TIME
          if (field.type == TType.STRING) {
            this.createTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // CREATOR
          if (field.type == TType.I32) {
            this.creator = iprot.readI32();
            setCreatorIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // UPDATE_TIME
          if (field.type == TType.STRING) {
            this.updateTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // UPDATER
          if (field.type == TType.I32) {
            this.updater = iprot.readI32();
            setUpdaterIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // STATUS
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            setStatusIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // PATH
          if (field.type == TType.STRING) {
            this.path = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // DISPLAY_IDS
          if (field.type == TType.STRING) {
            this.displayIds = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // SUBJECT_NODES
          if (field.type == TType.LIST) {
            {
            TList _list0 = iprot.readListBegin();
            this.subjectNodes = new ArrayList<SubjectNode>(_list0.size);
            for (int _i1 = 0; _i1 < _list0.size; ++_i1)
            {
              SubjectNode _elem2;
              _elem2 = new SubjectNode();
              _elem2.read(iprot);
              this.subjectNodes.add(_elem2);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PID_FIELD_DESC);
    oprot.writeI32(this.pid);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SORTED_FIELD_DESC);
    oprot.writeI32(this.sorted);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LEVEL_FIELD_DESC);
    oprot.writeI32(this.level);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(IS_LEAF_FIELD_DESC);
    oprot.writeI32(this.isLeaf);
    oprot.writeFieldEnd();
    if (this.demo != null) {
      oprot.writeFieldBegin(DEMO_FIELD_DESC);
      oprot.writeString(this.demo);
      oprot.writeFieldEnd();
    }
    if (this.createTime != null) {
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeString(this.createTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CREATOR_FIELD_DESC);
    oprot.writeI32(this.creator);
    oprot.writeFieldEnd();
    if (this.updateTime != null) {
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeString(this.updateTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(UPDATER_FIELD_DESC);
    oprot.writeI32(this.updater);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    if (this.path != null) {
      if (isSetPath()) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(this.path);
        oprot.writeFieldEnd();
      }
    }
    if (this.displayIds != null) {
      if (isSetDisplayIds()) {
        oprot.writeFieldBegin(DISPLAY_IDS_FIELD_DESC);
        oprot.writeString(this.displayIds);
        oprot.writeFieldEnd();
      }
    }
    if (this.subjectNodes != null) {
      if (isSetSubjectNodes()) {
        oprot.writeFieldBegin(SUBJECT_NODES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.subjectNodes.size()));
          for (SubjectNode _iter3 : this.subjectNodes)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubjectInfo(");
    boolean first = true;
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sorted:");
    sb.append(this.sorted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLeaf:");
    sb.append(this.isLeaf);
    first = false;
    if (!first) sb.append(", ");
    sb.append("demo:");
    if (this.demo == null) {
      sb.append("null");
    } else {
      sb.append(this.demo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creator:");
    sb.append(this.creator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    if (this.updateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updater:");
    sb.append(this.updater);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (isSetPath()) {
      if (!first) sb.append(", ");
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      }
    if (isSetDisplayIds()) {
      if (!first) sb.append(", ");
      sb.append("displayIds:");
      if (this.displayIds == null) {
        sb.append("null");
      } else {
        sb.append(this.displayIds);
      }
      first = false;
      }
    if (isSetSubjectNodes()) {
      if (!first) sb.append(", ");
      sb.append("subjectNodes:");
      if (this.subjectNodes == null) {
        sb.append("null");
      } else {
        sb.append(this.subjectNodes);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
