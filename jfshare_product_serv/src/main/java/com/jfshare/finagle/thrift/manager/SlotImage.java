/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.manager;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class SlotImage implements TBase<SlotImage, SlotImage._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SlotImage");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short)1);
  private static final TField IMG_KEY_FIELD_DESC = new TField("imgKey", TType.STRING, (short)2);
  private static final TField WIDTH_FIELD_DESC = new TField("width", TType.I32, (short)3);
  private static final TField HEIGHT_FIELD_DESC = new TField("height", TType.I32, (short)4);
  private static final TField JUMP_FIELD_DESC = new TField("jump", TType.STRING, (short)5);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)6);
  private static final TField LAST_UPDATE_TIME_FIELD_DESC = new TField("lastUpdateTime", TType.STRING, (short)7);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.STRING, (short)8);
  private static final TField IS_DELETE_FIELD_DESC = new TField("isDelete", TType.I32, (short)9);


  public int id;
  public String imgKey;
  public int width;
  public int height;
  public String jump;
  public int type;
  public String lastUpdateTime;
  public String createTime;
  public int isDelete;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    IMG_KEY((short)2, "imgKey"),
    WIDTH((short)3, "width"),
    HEIGHT((short)4, "height"),
    JUMP((short)5, "jump"),
    TYPE((short)6, "type"),
    LAST_UPDATE_TIME((short)7, "lastUpdateTime"),
    CREATE_TIME((short)8, "createTime"),
    IS_DELETE((short)9, "isDelete");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
  	return ID;
        case 2: // IMG_KEY
  	return IMG_KEY;
        case 3: // WIDTH
  	return WIDTH;
        case 4: // HEIGHT
  	return HEIGHT;
        case 5: // JUMP
  	return JUMP;
        case 6: // TYPE
  	return TYPE;
        case 7: // LAST_UPDATE_TIME
  	return LAST_UPDATE_TIME;
        case 8: // CREATE_TIME
  	return CREATE_TIME;
        case 9: // IS_DELETE
  	return IS_DELETE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __WIDTH_ISSET_ID = 1;
  private static final int __HEIGHT_ISSET_ID = 2;
  private static final int __TYPE_ISSET_ID = 3;
  private static final int __ISDELETE_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.IMG_KEY, new FieldMetaData("imgKey", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.WIDTH, new FieldMetaData("width", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.HEIGHT, new FieldMetaData("height", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.JUMP, new FieldMetaData("jump", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new FieldMetaData("lastUpdateTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.IS_DELETE, new FieldMetaData("isDelete", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(SlotImage.class, metaDataMap);
  }


  public SlotImage() {
  }

  public SlotImage(
    int id,
    String imgKey,
    int width,
    int height,
    String jump,
    int type,
    String lastUpdateTime,
    String createTime,
    int isDelete)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.imgKey = imgKey;
    this.width = width;
    setWidthIsSet(true);
    this.height = height;
    setHeightIsSet(true);
    this.jump = jump;
    this.type = type;
    setTypeIsSet(true);
    this.lastUpdateTime = lastUpdateTime;
    this.createTime = createTime;
    this.isDelete = isDelete;
    setIsDeleteIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SlotImage(SlotImage other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetImgKey()) {
      this.imgKey = other.imgKey;
    }
    this.width = other.width;
    this.height = other.height;
    if (other.isSetJump()) {
      this.jump = other.jump;
    }
    this.type = other.type;
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.isDelete = other.isDelete;
  }

  public SlotImage deepCopy() {
    return new SlotImage(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.imgKey = null;
    setWidthIsSet(false);
    this.width = 0;
    setHeightIsSet(false);
    this.height = 0;
    this.jump = null;
    setTypeIsSet(false);
    this.type = 0;
    this.lastUpdateTime = null;
    this.createTime = null;
    setIsDeleteIsSet(false);
    this.isDelete = 0;
  }

  public int getId() {
    return this.id;
  }

  public SlotImage setId(int id) {
    this.id = id;
    setIdIsSet(true);

    return this;
  }

  public void unsetId() {
  __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getImgKey() {
    return this.imgKey;
  }

  public SlotImage setImgKey(String imgKey) {
    this.imgKey = imgKey;
    
    return this;
  }

  public void unsetImgKey() {
    this.imgKey = null;
  }

  /** Returns true if field imgKey is set (has been asigned a value) and false otherwise */
  public boolean isSetImgKey() {
    return this.imgKey != null;
  }

  public void setImgKeyIsSet(boolean value) {
    if (!value) {
      this.imgKey = null;
    }
  }

  public int getWidth() {
    return this.width;
  }

  public SlotImage setWidth(int width) {
    this.width = width;
    setWidthIsSet(true);

    return this;
  }

  public void unsetWidth() {
  __isset_bit_vector.clear(__WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been asigned a value) and false otherwise */
  public boolean isSetWidth() {
    return __isset_bit_vector.get(__WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bit_vector.set(__WIDTH_ISSET_ID, value);
  }

  public int getHeight() {
    return this.height;
  }

  public SlotImage setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);

    return this;
  }

  public void unsetHeight() {
  __isset_bit_vector.clear(__HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been asigned a value) and false otherwise */
  public boolean isSetHeight() {
    return __isset_bit_vector.get(__HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bit_vector.set(__HEIGHT_ISSET_ID, value);
  }

  public String getJump() {
    return this.jump;
  }

  public SlotImage setJump(String jump) {
    this.jump = jump;
    
    return this;
  }

  public void unsetJump() {
    this.jump = null;
  }

  /** Returns true if field jump is set (has been asigned a value) and false otherwise */
  public boolean isSetJump() {
    return this.jump != null;
  }

  public void setJumpIsSet(boolean value) {
    if (!value) {
      this.jump = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public SlotImage setType(int type) {
    this.type = type;
    setTypeIsSet(true);

    return this;
  }

  public void unsetType() {
  __isset_bit_vector.clear(__TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been asigned a value) and false otherwise */
  public boolean isSetType() {
    return __isset_bit_vector.get(__TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bit_vector.set(__TYPE_ISSET_ID, value);
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public SlotImage setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been asigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public SlotImage setCreateTime(String createTime) {
    this.createTime = createTime;
    
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getIsDelete() {
    return this.isDelete;
  }

  public SlotImage setIsDelete(int isDelete) {
    this.isDelete = isDelete;
    setIsDeleteIsSet(true);

    return this;
  }

  public void unsetIsDelete() {
  __isset_bit_vector.clear(__ISDELETE_ISSET_ID);
  }

  /** Returns true if field isDelete is set (has been asigned a value) and false otherwise */
  public boolean isSetIsDelete() {
    return __isset_bit_vector.get(__ISDELETE_ISSET_ID);
  }

  public void setIsDeleteIsSet(boolean value) {
    __isset_bit_vector.set(__ISDELETE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;
    case IMG_KEY:
      if (value == null) {
        unsetImgKey();
      } else {
        setImgKey((String)value);
      }
      break;
    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Integer)value);
      }
      break;
    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;
    case JUMP:
      if (value == null) {
        unsetJump();
      } else {
        setJump((String)value);
      }
      break;
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;
    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;
    case IS_DELETE:
      if (value == null) {
        unsetIsDelete();
      } else {
        setIsDelete((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Integer(getId());
    case IMG_KEY:
      return getImgKey();
    case WIDTH:
      return new Integer(getWidth());
    case HEIGHT:
      return new Integer(getHeight());
    case JUMP:
      return getJump();
    case TYPE:
      return new Integer(getType());
    case LAST_UPDATE_TIME:
      return getLastUpdateTime();
    case CREATE_TIME:
      return getCreateTime();
    case IS_DELETE:
      return new Integer(getIsDelete());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case IMG_KEY:
      return isSetImgKey();
    case WIDTH:
      return isSetWidth();
    case HEIGHT:
      return isSetHeight();
    case JUMP:
      return isSetJump();
    case TYPE:
      return isSetType();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case CREATE_TIME:
      return isSetCreateTime();
    case IS_DELETE:
      return isSetIsDelete();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SlotImage)
      return this.equals((SlotImage)that);
    return false;
  }

  public boolean equals(SlotImage that) {
    if (that == null)
      return false;
    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }
    boolean this_present_imgKey = true && this.isSetImgKey();
    boolean that_present_imgKey = true && that.isSetImgKey();
    if (this_present_imgKey || that_present_imgKey) {
      if (!(this_present_imgKey && that_present_imgKey))
        return false;
      if (!this.imgKey.equals(that.imgKey))
        return false;
    }
    boolean this_present_width = true;
    boolean that_present_width = true;
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }
    boolean this_present_height = true;
    boolean that_present_height = true;
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }
    boolean this_present_jump = true && this.isSetJump();
    boolean that_present_jump = true && that.isSetJump();
    if (this_present_jump || that_present_jump) {
      if (!(this_present_jump && that_present_jump))
        return false;
      if (!this.jump.equals(that.jump))
        return false;
    }
    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }
    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }
    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }
    boolean this_present_isDelete = true;
    boolean that_present_isDelete = true;
    if (this_present_isDelete || that_present_isDelete) {
      if (!(this_present_isDelete && that_present_isDelete))
        return false;
      if (this.isDelete != that.isDelete)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);
    boolean present_imgKey = true && (isSetImgKey());
    builder.append(present_imgKey);
    if (present_imgKey)
      builder.append(imgKey);
    boolean present_width = true;
    builder.append(present_width);
    if (present_width)
      builder.append(width);
    boolean present_height = true;
    builder.append(present_height);
    if (present_height)
      builder.append(height);
    boolean present_jump = true && (isSetJump());
    builder.append(present_jump);
    if (present_jump)
      builder.append(jump);
    boolean present_type = true;
    builder.append(present_type);
    if (present_type)
      builder.append(type);
    boolean present_lastUpdateTime = true && (isSetLastUpdateTime());
    builder.append(present_lastUpdateTime);
    if (present_lastUpdateTime)
      builder.append(lastUpdateTime);
    boolean present_createTime = true && (isSetCreateTime());
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);
    boolean present_isDelete = true;
    builder.append(present_isDelete);
    if (present_isDelete)
      builder.append(isDelete);
    return builder.toHashCode();
  }

  public int compareTo(SlotImage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SlotImage typedOther = (SlotImage)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgKey()).compareTo(typedOther.isSetImgKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgKey()) {
      lastComparison = TBaseHelper.compareTo(this.imgKey, typedOther.imgKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(typedOther.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = TBaseHelper.compareTo(this.width, typedOther.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(typedOther.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = TBaseHelper.compareTo(this.height, typedOther.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJump()).compareTo(typedOther.isSetJump());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJump()) {
      lastComparison = TBaseHelper.compareTo(this.jump, typedOther.jump);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(typedOther.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = TBaseHelper.compareTo(this.lastUpdateTime, typedOther.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDelete()).compareTo(typedOther.isSetIsDelete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDelete()) {
      lastComparison = TBaseHelper.compareTo(this.isDelete, typedOther.isDelete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // IMG_KEY
          if (field.type == TType.STRING) {
            this.imgKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // WIDTH
          if (field.type == TType.I32) {
            this.width = iprot.readI32();
            setWidthIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // HEIGHT
          if (field.type == TType.I32) {
            this.height = iprot.readI32();
            setHeightIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // JUMP
          if (field.type == TType.STRING) {
            this.jump = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // TYPE
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            setTypeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // LAST_UPDATE_TIME
          if (field.type == TType.STRING) {
            this.lastUpdateTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // CREATE_TIME
          if (field.type == TType.STRING) {
            this.createTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // IS_DELETE
          if (field.type == TType.I32) {
            this.isDelete = iprot.readI32();
            setIsDeleteIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    if (this.imgKey != null) {
      oprot.writeFieldBegin(IMG_KEY_FIELD_DESC);
      oprot.writeString(this.imgKey);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(WIDTH_FIELD_DESC);
    oprot.writeI32(this.width);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
    oprot.writeI32(this.height);
    oprot.writeFieldEnd();
    if (this.jump != null) {
      oprot.writeFieldBegin(JUMP_FIELD_DESC);
      oprot.writeString(this.jump);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (this.lastUpdateTime != null) {
      oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
      oprot.writeString(this.lastUpdateTime);
      oprot.writeFieldEnd();
    }
    if (this.createTime != null) {
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeString(this.createTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
    oprot.writeI32(this.isDelete);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SlotImage(");
    boolean first = true;
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imgKey:");
    if (this.imgKey == null) {
      sb.append("null");
    } else {
      sb.append(this.imgKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("width:");
    sb.append(this.width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    sb.append(this.height);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jump:");
    if (this.jump == null) {
      sb.append("null");
    } else {
      sb.append(this.jump);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDelete:");
    sb.append(this.isDelete);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
