/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.subject;

import org.apache.commons.lang.builder.HashCodeBuilder;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class DisplaySubjectChannelInfo implements TBase<DisplaySubjectChannelInfo, DisplaySubjectChannelInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("DisplaySubjectChannelInfo");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField CODE_FIELD_DESC = new TField("code", TType.STRING, (short)3);
  private static final TField CREATOR_FIELD_DESC = new TField("creator", TType.I32, (short)4);
  private static final TField UPDATER_FIELD_DESC = new TField("updater", TType.I32, (short)5);
  private static final TField UPDATE_TIME_FIELD_DESC = new TField("updateTime", TType.STRING, (short)6);
  private static final TField UPDATER_NAME_FIELD_DESC = new TField("updaterName", TType.STRING, (short)7);


  public int id;
  public String name;
  public String code;
  public int creator;
  public int updater;
  public String updateTime;
  public String updaterName;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    CODE((short)3, "code"),
    CREATOR((short)4, "creator"),
    UPDATER((short)5, "updater"),
    UPDATE_TIME((short)6, "updateTime"),
    UPDATER_NAME((short)7, "updaterName");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
  	return ID;
        case 2: // NAME
  	return NAME;
        case 3: // CODE
  	return CODE;
        case 4: // CREATOR
  	return CREATOR;
        case 5: // UPDATER
  	return UPDATER;
        case 6: // UPDATE_TIME
  	return UPDATE_TIME;
        case 7: // UPDATER_NAME
  	return UPDATER_NAME;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CREATOR_ISSET_ID = 1;
  private static final int __UPDATER_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CODE, new FieldMetaData("code", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATOR, new FieldMetaData("creator", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.UPDATER, new FieldMetaData("updater", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new FieldMetaData("updateTime", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.UPDATER_NAME, new FieldMetaData("updaterName", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(DisplaySubjectChannelInfo.class, metaDataMap);
  }


  public DisplaySubjectChannelInfo() {
  }

  public DisplaySubjectChannelInfo(
    int id,
    String name,
    String code,
    int creator,
    int updater)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.code = code;
    this.creator = creator;
    setCreatorIsSet(true);
    this.updater = updater;
    setUpdaterIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DisplaySubjectChannelInfo(DisplaySubjectChannelInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCode()) {
      this.code = other.code;
    }
    this.creator = other.creator;
    this.updater = other.updater;
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    if (other.isSetUpdaterName()) {
      this.updaterName = other.updaterName;
    }
  }

  public DisplaySubjectChannelInfo deepCopy() {
    return new DisplaySubjectChannelInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.code = null;
    setCreatorIsSet(false);
    this.creator = 0;
    setUpdaterIsSet(false);
    this.updater = 0;
    this.updateTime = null;
    this.updaterName = null;
  }

  public int getId() {
    return this.id;
  }

  public DisplaySubjectChannelInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);

    return this;
  }

  public void unsetId() {
  __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public DisplaySubjectChannelInfo setName(String name) {
    this.name = name;
    
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getCode() {
    return this.code;
  }

  public DisplaySubjectChannelInfo setCode(String code) {
    this.code = code;
    
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been asigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public int getCreator() {
    return this.creator;
  }

  public DisplaySubjectChannelInfo setCreator(int creator) {
    this.creator = creator;
    setCreatorIsSet(true);

    return this;
  }

  public void unsetCreator() {
  __isset_bit_vector.clear(__CREATOR_ISSET_ID);
  }

  /** Returns true if field creator is set (has been asigned a value) and false otherwise */
  public boolean isSetCreator() {
    return __isset_bit_vector.get(__CREATOR_ISSET_ID);
  }

  public void setCreatorIsSet(boolean value) {
    __isset_bit_vector.set(__CREATOR_ISSET_ID, value);
  }

  public int getUpdater() {
    return this.updater;
  }

  public DisplaySubjectChannelInfo setUpdater(int updater) {
    this.updater = updater;
    setUpdaterIsSet(true);

    return this;
  }

  public void unsetUpdater() {
  __isset_bit_vector.clear(__UPDATER_ISSET_ID);
  }

  /** Returns true if field updater is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdater() {
    return __isset_bit_vector.get(__UPDATER_ISSET_ID);
  }

  public void setUpdaterIsSet(boolean value) {
    __isset_bit_vector.set(__UPDATER_ISSET_ID, value);
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public DisplaySubjectChannelInfo setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public String getUpdaterName() {
    return this.updaterName;
  }

  public DisplaySubjectChannelInfo setUpdaterName(String updaterName) {
    this.updaterName = updaterName;
    
    return this;
  }

  public void unsetUpdaterName() {
    this.updaterName = null;
  }

  /** Returns true if field updaterName is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdaterName() {
    return this.updaterName != null;
  }

  public void setUpdaterNameIsSet(boolean value) {
    if (!value) {
      this.updaterName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;
    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;
    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((Integer)value);
      }
      break;
    case UPDATER:
      if (value == null) {
        unsetUpdater();
      } else {
        setUpdater((Integer)value);
      }
      break;
    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;
    case UPDATER_NAME:
      if (value == null) {
        unsetUpdaterName();
      } else {
        setUpdaterName((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Integer(getId());
    case NAME:
      return getName();
    case CODE:
      return getCode();
    case CREATOR:
      return new Integer(getCreator());
    case UPDATER:
      return new Integer(getUpdater());
    case UPDATE_TIME:
      return getUpdateTime();
    case UPDATER_NAME:
      return getUpdaterName();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case CODE:
      return isSetCode();
    case CREATOR:
      return isSetCreator();
    case UPDATER:
      return isSetUpdater();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case UPDATER_NAME:
      return isSetUpdaterName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DisplaySubjectChannelInfo)
      return this.equals((DisplaySubjectChannelInfo)that);
    return false;
  }

  public boolean equals(DisplaySubjectChannelInfo that) {
    if (that == null)
      return false;
    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }
    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }
    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }
    boolean this_present_creator = true;
    boolean that_present_creator = true;
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (this.creator != that.creator)
        return false;
    }
    boolean this_present_updater = true;
    boolean that_present_updater = true;
    if (this_present_updater || that_present_updater) {
      if (!(this_present_updater && that_present_updater))
        return false;
      if (this.updater != that.updater)
        return false;
    }
    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }
    boolean this_present_updaterName = true && this.isSetUpdaterName();
    boolean that_present_updaterName = true && that.isSetUpdaterName();
    if (this_present_updaterName || that_present_updaterName) {
      if (!(this_present_updaterName && that_present_updaterName))
        return false;
      if (!this.updaterName.equals(that.updaterName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);
    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);
    boolean present_code = true && (isSetCode());
    builder.append(present_code);
    if (present_code)
      builder.append(code);
    boolean present_creator = true;
    builder.append(present_creator);
    if (present_creator)
      builder.append(creator);
    boolean present_updater = true;
    builder.append(present_updater);
    if (present_updater)
      builder.append(updater);
    boolean present_updateTime = true && (isSetUpdateTime());
    builder.append(present_updateTime);
    if (present_updateTime)
      builder.append(updateTime);
    boolean present_updaterName = true && (isSetUpdaterName());
    builder.append(present_updaterName);
    if (present_updaterName)
      builder.append(updaterName);
    return builder.toHashCode();
  }

  public int compareTo(DisplaySubjectChannelInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DisplaySubjectChannelInfo typedOther = (DisplaySubjectChannelInfo)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = TBaseHelper.compareTo(this.code, typedOther.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(typedOther.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = TBaseHelper.compareTo(this.creator, typedOther.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdater()).compareTo(typedOther.isSetUpdater());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdater()) {
      lastComparison = TBaseHelper.compareTo(this.updater, typedOther.updater);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdaterName()).compareTo(typedOther.isSetUpdaterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdaterName()) {
      lastComparison = TBaseHelper.compareTo(this.updaterName, typedOther.updaterName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CODE
          if (field.type == TType.STRING) {
            this.code = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CREATOR
          if (field.type == TType.I32) {
            this.creator = iprot.readI32();
            setCreatorIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // UPDATER
          if (field.type == TType.I32) {
            this.updater = iprot.readI32();
            setUpdaterIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // UPDATE_TIME
          if (field.type == TType.STRING) {
            this.updateTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // UPDATER_NAME
          if (field.type == TType.STRING) {
            this.updaterName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.code != null) {
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeString(this.code);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CREATOR_FIELD_DESC);
    oprot.writeI32(this.creator);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UPDATER_FIELD_DESC);
    oprot.writeI32(this.updater);
    oprot.writeFieldEnd();
    if (this.updateTime != null) {
      if (isSetUpdateTime()) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(this.updateTime);
        oprot.writeFieldEnd();
      }
    }
    if (this.updaterName != null) {
      if (isSetUpdaterName()) {
        oprot.writeFieldBegin(UPDATER_NAME_FIELD_DESC);
        oprot.writeString(this.updaterName);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DisplaySubjectChannelInfo(");
    boolean first = true;
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creator:");
    sb.append(this.creator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updater:");
    sb.append(this.updater);
    first = false;
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
      }
    if (isSetUpdaterName()) {
      if (!first) sb.append(", ");
      sb.append("updaterName:");
      if (this.updaterName == null) {
        sb.append("null");
      } else {
        sb.append(this.updaterName);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
