/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.product;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class DayAldCaptchaCount implements TBase<DayAldCaptchaCount, DayAldCaptchaCount._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("DayAldCaptchaCount");

  private static final TField DATE_FIELD_DESC = new TField("date", TType.STRING, (short)1);
  private static final TField CHECKED_TOTAL_NUM_FIELD_DESC = new TField("checkedTotalNum", TType.I32, (short)2);


  public String date;
  public int checkedTotalNum;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    DATE((short)1, "date"),
    CHECKED_TOTAL_NUM((short)2, "checkedTotalNum");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATE
  	return DATE;
        case 2: // CHECKED_TOTAL_NUM
  	return CHECKED_TOTAL_NUM;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __CHECKEDTOTALNUM_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATE, new FieldMetaData("date", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CHECKED_TOTAL_NUM, new FieldMetaData("checkedTotalNum", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(DayAldCaptchaCount.class, metaDataMap);
  }


  public DayAldCaptchaCount() {
  }

  public DayAldCaptchaCount(
    String date,
    int checkedTotalNum)
  {
    this();
    this.date = date;
    this.checkedTotalNum = checkedTotalNum;
    setCheckedTotalNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DayAldCaptchaCount(DayAldCaptchaCount other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.checkedTotalNum = other.checkedTotalNum;
  }

  public DayAldCaptchaCount deepCopy() {
    return new DayAldCaptchaCount(this);
  }

  @Override
  public void clear() {
    this.date = null;
    setCheckedTotalNumIsSet(false);
    this.checkedTotalNum = 0;
  }

  public String getDate() {
    return this.date;
  }

  public DayAldCaptchaCount setDate(String date) {
    this.date = date;
    
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been asigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public int getCheckedTotalNum() {
    return this.checkedTotalNum;
  }

  public DayAldCaptchaCount setCheckedTotalNum(int checkedTotalNum) {
    this.checkedTotalNum = checkedTotalNum;
    setCheckedTotalNumIsSet(true);

    return this;
  }

  public void unsetCheckedTotalNum() {
  __isset_bit_vector.clear(__CHECKEDTOTALNUM_ISSET_ID);
  }

  /** Returns true if field checkedTotalNum is set (has been asigned a value) and false otherwise */
  public boolean isSetCheckedTotalNum() {
    return __isset_bit_vector.get(__CHECKEDTOTALNUM_ISSET_ID);
  }

  public void setCheckedTotalNumIsSet(boolean value) {
    __isset_bit_vector.set(__CHECKEDTOTALNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;
    case CHECKED_TOTAL_NUM:
      if (value == null) {
        unsetCheckedTotalNum();
      } else {
        setCheckedTotalNum((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATE:
      return getDate();
    case CHECKED_TOTAL_NUM:
      return new Integer(getCheckedTotalNum());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATE:
      return isSetDate();
    case CHECKED_TOTAL_NUM:
      return isSetCheckedTotalNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DayAldCaptchaCount)
      return this.equals((DayAldCaptchaCount)that);
    return false;
  }

  public boolean equals(DayAldCaptchaCount that) {
    if (that == null)
      return false;
    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }
    boolean this_present_checkedTotalNum = true;
    boolean that_present_checkedTotalNum = true;
    if (this_present_checkedTotalNum || that_present_checkedTotalNum) {
      if (!(this_present_checkedTotalNum && that_present_checkedTotalNum))
        return false;
      if (this.checkedTotalNum != that.checkedTotalNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_date = true && (isSetDate());
    builder.append(present_date);
    if (present_date)
      builder.append(date);
    boolean present_checkedTotalNum = true;
    builder.append(present_checkedTotalNum);
    if (present_checkedTotalNum)
      builder.append(checkedTotalNum);
    return builder.toHashCode();
  }

  public int compareTo(DayAldCaptchaCount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DayAldCaptchaCount typedOther = (DayAldCaptchaCount)other;

    lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = TBaseHelper.compareTo(this.date, typedOther.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedTotalNum()).compareTo(typedOther.isSetCheckedTotalNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedTotalNum()) {
      lastComparison = TBaseHelper.compareTo(this.checkedTotalNum, typedOther.checkedTotalNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // DATE
          if (field.type == TType.STRING) {
            this.date = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CHECKED_TOTAL_NUM
          if (field.type == TType.I32) {
            this.checkedTotalNum = iprot.readI32();
            setCheckedTotalNumIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.date != null) {
      oprot.writeFieldBegin(DATE_FIELD_DESC);
      oprot.writeString(this.date);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CHECKED_TOTAL_NUM_FIELD_DESC);
    oprot.writeI32(this.checkedTotalNum);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DayAldCaptchaCount(");
    boolean first = true;
    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkedTotalNum:");
    sb.append(this.checkedTotalNum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
