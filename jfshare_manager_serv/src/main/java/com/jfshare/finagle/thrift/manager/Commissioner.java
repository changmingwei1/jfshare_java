/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.manager;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class Commissioner implements TBase<Commissioner, Commissioner._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Commissioner");

  private static final TField CS_ID_FIELD_DESC = new TField("csId", TType.I32, (short)1);
  private static final TField LOGIN_NAME_FIELD_DESC = new TField("loginName", TType.STRING, (short)2);
  private static final TField CS_NAME_FIELD_DESC = new TField("csName", TType.STRING, (short)3);
  private static final TField PWD_ENC_FIELD_DESC = new TField("pwdEnc", TType.STRING, (short)4);


  public int csId;
  public String loginName;
  public String csName;
  public String pwdEnc;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    CS_ID((short)1, "csId"),
    LOGIN_NAME((short)2, "loginName"),
    CS_NAME((short)3, "csName"),
    PWD_ENC((short)4, "pwdEnc");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CS_ID
  	return CS_ID;
        case 2: // LOGIN_NAME
  	return LOGIN_NAME;
        case 3: // CS_NAME
  	return CS_NAME;
        case 4: // PWD_ENC
  	return PWD_ENC;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __CSID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CS_ID, new FieldMetaData("csId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.LOGIN_NAME, new FieldMetaData("loginName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CS_NAME, new FieldMetaData("csName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PWD_ENC, new FieldMetaData("pwdEnc", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Commissioner.class, metaDataMap);
  }


  public Commissioner() {
  }

  public Commissioner(
    int csId,
    String loginName,
    String csName,
    String pwdEnc)
  {
    this();
    this.csId = csId;
    setCsIdIsSet(true);
    this.loginName = loginName;
    this.csName = csName;
    this.pwdEnc = pwdEnc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Commissioner(Commissioner other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.csId = other.csId;
    if (other.isSetLoginName()) {
      this.loginName = other.loginName;
    }
    if (other.isSetCsName()) {
      this.csName = other.csName;
    }
    if (other.isSetPwdEnc()) {
      this.pwdEnc = other.pwdEnc;
    }
  }

  public Commissioner deepCopy() {
    return new Commissioner(this);
  }

  @Override
  public void clear() {
    setCsIdIsSet(false);
    this.csId = 0;
    this.loginName = null;
    this.csName = null;
    this.pwdEnc = null;
  }

  public int getCsId() {
    return this.csId;
  }

  public Commissioner setCsId(int csId) {
    this.csId = csId;
    setCsIdIsSet(true);

    return this;
  }

  public void unsetCsId() {
  __isset_bit_vector.clear(__CSID_ISSET_ID);
  }

  /** Returns true if field csId is set (has been asigned a value) and false otherwise */
  public boolean isSetCsId() {
    return __isset_bit_vector.get(__CSID_ISSET_ID);
  }

  public void setCsIdIsSet(boolean value) {
    __isset_bit_vector.set(__CSID_ISSET_ID, value);
  }

  public String getLoginName() {
    return this.loginName;
  }

  public Commissioner setLoginName(String loginName) {
    this.loginName = loginName;
    
    return this;
  }

  public void unsetLoginName() {
    this.loginName = null;
  }

  /** Returns true if field loginName is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginName() {
    return this.loginName != null;
  }

  public void setLoginNameIsSet(boolean value) {
    if (!value) {
      this.loginName = null;
    }
  }

  public String getCsName() {
    return this.csName;
  }

  public Commissioner setCsName(String csName) {
    this.csName = csName;
    
    return this;
  }

  public void unsetCsName() {
    this.csName = null;
  }

  /** Returns true if field csName is set (has been asigned a value) and false otherwise */
  public boolean isSetCsName() {
    return this.csName != null;
  }

  public void setCsNameIsSet(boolean value) {
    if (!value) {
      this.csName = null;
    }
  }

  public String getPwdEnc() {
    return this.pwdEnc;
  }

  public Commissioner setPwdEnc(String pwdEnc) {
    this.pwdEnc = pwdEnc;
    
    return this;
  }

  public void unsetPwdEnc() {
    this.pwdEnc = null;
  }

  /** Returns true if field pwdEnc is set (has been asigned a value) and false otherwise */
  public boolean isSetPwdEnc() {
    return this.pwdEnc != null;
  }

  public void setPwdEncIsSet(boolean value) {
    if (!value) {
      this.pwdEnc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CS_ID:
      if (value == null) {
        unsetCsId();
      } else {
        setCsId((Integer)value);
      }
      break;
    case LOGIN_NAME:
      if (value == null) {
        unsetLoginName();
      } else {
        setLoginName((String)value);
      }
      break;
    case CS_NAME:
      if (value == null) {
        unsetCsName();
      } else {
        setCsName((String)value);
      }
      break;
    case PWD_ENC:
      if (value == null) {
        unsetPwdEnc();
      } else {
        setPwdEnc((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CS_ID:
      return new Integer(getCsId());
    case LOGIN_NAME:
      return getLoginName();
    case CS_NAME:
      return getCsName();
    case PWD_ENC:
      return getPwdEnc();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CS_ID:
      return isSetCsId();
    case LOGIN_NAME:
      return isSetLoginName();
    case CS_NAME:
      return isSetCsName();
    case PWD_ENC:
      return isSetPwdEnc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Commissioner)
      return this.equals((Commissioner)that);
    return false;
  }

  public boolean equals(Commissioner that) {
    if (that == null)
      return false;
    boolean this_present_csId = true;
    boolean that_present_csId = true;
    if (this_present_csId || that_present_csId) {
      if (!(this_present_csId && that_present_csId))
        return false;
      if (this.csId != that.csId)
        return false;
    }
    boolean this_present_loginName = true && this.isSetLoginName();
    boolean that_present_loginName = true && that.isSetLoginName();
    if (this_present_loginName || that_present_loginName) {
      if (!(this_present_loginName && that_present_loginName))
        return false;
      if (!this.loginName.equals(that.loginName))
        return false;
    }
    boolean this_present_csName = true && this.isSetCsName();
    boolean that_present_csName = true && that.isSetCsName();
    if (this_present_csName || that_present_csName) {
      if (!(this_present_csName && that_present_csName))
        return false;
      if (!this.csName.equals(that.csName))
        return false;
    }
    boolean this_present_pwdEnc = true && this.isSetPwdEnc();
    boolean that_present_pwdEnc = true && that.isSetPwdEnc();
    if (this_present_pwdEnc || that_present_pwdEnc) {
      if (!(this_present_pwdEnc && that_present_pwdEnc))
        return false;
      if (!this.pwdEnc.equals(that.pwdEnc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_csId = true;
    builder.append(present_csId);
    if (present_csId)
      builder.append(csId);
    boolean present_loginName = true && (isSetLoginName());
    builder.append(present_loginName);
    if (present_loginName)
      builder.append(loginName);
    boolean present_csName = true && (isSetCsName());
    builder.append(present_csName);
    if (present_csName)
      builder.append(csName);
    boolean present_pwdEnc = true && (isSetPwdEnc());
    builder.append(present_pwdEnc);
    if (present_pwdEnc)
      builder.append(pwdEnc);
    return builder.toHashCode();
  }

  public int compareTo(Commissioner other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Commissioner typedOther = (Commissioner)other;

    lastComparison = Boolean.valueOf(isSetCsId()).compareTo(typedOther.isSetCsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsId()) {
      lastComparison = TBaseHelper.compareTo(this.csId, typedOther.csId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginName()).compareTo(typedOther.isSetLoginName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginName()) {
      lastComparison = TBaseHelper.compareTo(this.loginName, typedOther.loginName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsName()).compareTo(typedOther.isSetCsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsName()) {
      lastComparison = TBaseHelper.compareTo(this.csName, typedOther.csName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPwdEnc()).compareTo(typedOther.isSetPwdEnc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPwdEnc()) {
      lastComparison = TBaseHelper.compareTo(this.pwdEnc, typedOther.pwdEnc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // CS_ID
          if (field.type == TType.I32) {
            this.csId = iprot.readI32();
            setCsIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LOGIN_NAME
          if (field.type == TType.STRING) {
            this.loginName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CS_NAME
          if (field.type == TType.STRING) {
            this.csName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PWD_ENC
          if (field.type == TType.STRING) {
            this.pwdEnc = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CS_ID_FIELD_DESC);
    oprot.writeI32(this.csId);
    oprot.writeFieldEnd();
    if (this.loginName != null) {
      oprot.writeFieldBegin(LOGIN_NAME_FIELD_DESC);
      oprot.writeString(this.loginName);
      oprot.writeFieldEnd();
    }
    if (this.csName != null) {
      oprot.writeFieldBegin(CS_NAME_FIELD_DESC);
      oprot.writeString(this.csName);
      oprot.writeFieldEnd();
    }
    if (this.pwdEnc != null) {
      oprot.writeFieldBegin(PWD_ENC_FIELD_DESC);
      oprot.writeString(this.pwdEnc);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Commissioner(");
    boolean first = true;
    sb.append("csId:");
    sb.append(this.csId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginName:");
    if (this.loginName == null) {
      sb.append("null");
    } else {
      sb.append(this.loginName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("csName:");
    if (this.csName == null) {
      sb.append("null");
    } else {
      sb.append(this.csName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pwdEnc:");
    if (this.pwdEnc == null) {
      sb.append("null");
    } else {
      sb.append(this.pwdEnc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
