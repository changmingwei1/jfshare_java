<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd


                           	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"
       default-autowire="byName">

    <context:annotation-config/>

    <bean id="dataSourceRead"
          class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass">
            <value>com.mysql.jdbc.Driver</value>
        </property>
        <property name="jdbcUrl">
            <value>#{configManager.getMysqlConfig('jfx_public_mysql','slave1','jfshare').url}</value>
        </property>
        <property name="user">
            <value>#{configManager.getMysqlConfig('jfx_public_mysql','slave1','jfshare').user}</value>
        </property>
        <property name="password">
            <value>#{configManager.getMysqlConfig('jfx_public_mysql','slave1','jfshare').pwd}</value>
        </property>
        <property name="acquireIncrement">
            <value>3</value>
        </property>
        <property name="initialPoolSize">
            <value>3</value>
        </property>
        <property name="minPoolSize">
            <value>2</value>
        </property>
        <property name="maxPoolSize">
            <value>50</value>
        </property>
        <property name="maxIdleTime">
            <value>600</value>
        </property>
        <property name="idleConnectionTestPeriod">
            <value>900</value>
        </property>
        <property name="maxStatements">
            <value>100</value>
        </property>
        <property name="numHelperThreads">
            <value>10</value>
        </property>
        <property name="preferredTestQuery">
        	<value>SELECT 1</value>
        </property>
    </bean>

    <!-- 引入的配置文件 -->
    <!--<context:property-placeholder location="classpath:config/mybatis.properties" ignore-unresolvable="true"/>-->

    <!-- WriteMyBatis配置 -->
    <bean id="sqlSessionFactoryRead" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSourceRead" />
        <!-- mybatis configLocation -->
        <property name="configLocation" value="classpath:/mybatis/mybatis-config.xml" />
        <!-- 显式指定Mapper文件位置  -->
        <property name="mapperLocations">
            <array>
                <value>classpath:mybatis/sqlmap/address/*.xml</value>
                <value>classpath:mybatis/sqlmap/manual/*.xml</value>
            </array>
        </property>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置
         -->
        <property name="typeAliasesPackage" value="com.jfshare.order.model.mappers" />

    </bean>

    <!-- DAO目录指定配置-->
    <!--
        在applicationContext.xml中，
        1.MapperScannerConfigurer指明需要扫描的DAO接口的目录，动态创建其实现类。即只有接口的DAO。
        2.如果DAO接口在多个目录中，简单的做法是创建一个MyBatisDAO的annotation，
            所有DAO都用这个annotation标识，然后用annotations属性指定它，那么package配到项目顶层package就可以了
     -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.jfshare.order.model.mappers" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryRead" />
    </bean>
</beans>