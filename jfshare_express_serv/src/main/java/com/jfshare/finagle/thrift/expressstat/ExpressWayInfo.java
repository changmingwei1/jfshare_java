/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.expressstat;

import org.apache.commons.lang.builder.HashCodeBuilder;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ExpressWayInfo implements TBase<ExpressWayInfo, ExpressWayInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ExpressWayInfo");

  private static final TField COMPANY_KEY_FIELD_DESC = new TField("companyKey", TType.STRING, (short)1);
  private static final TField COMPANY_NAME_FIELD_DESC = new TField("companyName", TType.STRING, (short)2);
  private static final TField KUAIDI_KEY_FIELD_DESC = new TField("kuaidiKey", TType.STRING, (short)3);


  public String companyKey;
  public String companyName;
  public String kuaidiKey;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    COMPANY_KEY((short)1, "companyKey"),
    COMPANY_NAME((short)2, "companyName"),
    KUAIDI_KEY((short)3, "kuaidiKey");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPANY_KEY
  	return COMPANY_KEY;
        case 2: // COMPANY_NAME
  	return COMPANY_NAME;
        case 3: // KUAIDI_KEY
  	return KUAIDI_KEY;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPANY_KEY, new FieldMetaData("companyKey", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.COMPANY_NAME, new FieldMetaData("companyName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.KUAIDI_KEY, new FieldMetaData("kuaidiKey", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ExpressWayInfo.class, metaDataMap);
  }


  public ExpressWayInfo() {
  }

  public ExpressWayInfo(
    String companyKey,
    String companyName,
    String kuaidiKey)
  {
    this();
    this.companyKey = companyKey;
    this.companyName = companyName;
    this.kuaidiKey = kuaidiKey;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExpressWayInfo(ExpressWayInfo other) {
    if (other.isSetCompanyKey()) {
      this.companyKey = other.companyKey;
    }
    if (other.isSetCompanyName()) {
      this.companyName = other.companyName;
    }
    if (other.isSetKuaidiKey()) {
      this.kuaidiKey = other.kuaidiKey;
    }
  }

  public ExpressWayInfo deepCopy() {
    return new ExpressWayInfo(this);
  }

  @Override
  public void clear() {
    this.companyKey = null;
    this.companyName = null;
    this.kuaidiKey = null;
  }

  public String getCompanyKey() {
    return this.companyKey;
  }

  public ExpressWayInfo setCompanyKey(String companyKey) {
    this.companyKey = companyKey;
    
    return this;
  }

  public void unsetCompanyKey() {
    this.companyKey = null;
  }

  /** Returns true if field companyKey is set (has been asigned a value) and false otherwise */
  public boolean isSetCompanyKey() {
    return this.companyKey != null;
  }

  public void setCompanyKeyIsSet(boolean value) {
    if (!value) {
      this.companyKey = null;
    }
  }

  public String getCompanyName() {
    return this.companyName;
  }

  public ExpressWayInfo setCompanyName(String companyName) {
    this.companyName = companyName;
    
    return this;
  }

  public void unsetCompanyName() {
    this.companyName = null;
  }

  /** Returns true if field companyName is set (has been asigned a value) and false otherwise */
  public boolean isSetCompanyName() {
    return this.companyName != null;
  }

  public void setCompanyNameIsSet(boolean value) {
    if (!value) {
      this.companyName = null;
    }
  }

  public String getKuaidiKey() {
    return this.kuaidiKey;
  }

  public ExpressWayInfo setKuaidiKey(String kuaidiKey) {
    this.kuaidiKey = kuaidiKey;
    
    return this;
  }

  public void unsetKuaidiKey() {
    this.kuaidiKey = null;
  }

  /** Returns true if field kuaidiKey is set (has been asigned a value) and false otherwise */
  public boolean isSetKuaidiKey() {
    return this.kuaidiKey != null;
  }

  public void setKuaidiKeyIsSet(boolean value) {
    if (!value) {
      this.kuaidiKey = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPANY_KEY:
      if (value == null) {
        unsetCompanyKey();
      } else {
        setCompanyKey((String)value);
      }
      break;
    case COMPANY_NAME:
      if (value == null) {
        unsetCompanyName();
      } else {
        setCompanyName((String)value);
      }
      break;
    case KUAIDI_KEY:
      if (value == null) {
        unsetKuaidiKey();
      } else {
        setKuaidiKey((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPANY_KEY:
      return getCompanyKey();
    case COMPANY_NAME:
      return getCompanyName();
    case KUAIDI_KEY:
      return getKuaidiKey();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPANY_KEY:
      return isSetCompanyKey();
    case COMPANY_NAME:
      return isSetCompanyName();
    case KUAIDI_KEY:
      return isSetKuaidiKey();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExpressWayInfo)
      return this.equals((ExpressWayInfo)that);
    return false;
  }

  public boolean equals(ExpressWayInfo that) {
    if (that == null)
      return false;
    boolean this_present_companyKey = true && this.isSetCompanyKey();
    boolean that_present_companyKey = true && that.isSetCompanyKey();
    if (this_present_companyKey || that_present_companyKey) {
      if (!(this_present_companyKey && that_present_companyKey))
        return false;
      if (!this.companyKey.equals(that.companyKey))
        return false;
    }
    boolean this_present_companyName = true && this.isSetCompanyName();
    boolean that_present_companyName = true && that.isSetCompanyName();
    if (this_present_companyName || that_present_companyName) {
      if (!(this_present_companyName && that_present_companyName))
        return false;
      if (!this.companyName.equals(that.companyName))
        return false;
    }
    boolean this_present_kuaidiKey = true && this.isSetKuaidiKey();
    boolean that_present_kuaidiKey = true && that.isSetKuaidiKey();
    if (this_present_kuaidiKey || that_present_kuaidiKey) {
      if (!(this_present_kuaidiKey && that_present_kuaidiKey))
        return false;
      if (!this.kuaidiKey.equals(that.kuaidiKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_companyKey = true && (isSetCompanyKey());
    builder.append(present_companyKey);
    if (present_companyKey)
      builder.append(companyKey);
    boolean present_companyName = true && (isSetCompanyName());
    builder.append(present_companyName);
    if (present_companyName)
      builder.append(companyName);
    boolean present_kuaidiKey = true && (isSetKuaidiKey());
    builder.append(present_kuaidiKey);
    if (present_kuaidiKey)
      builder.append(kuaidiKey);
    return builder.toHashCode();
  }

  public int compareTo(ExpressWayInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ExpressWayInfo typedOther = (ExpressWayInfo)other;

    lastComparison = Boolean.valueOf(isSetCompanyKey()).compareTo(typedOther.isSetCompanyKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyKey()) {
      lastComparison = TBaseHelper.compareTo(this.companyKey, typedOther.companyKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyName()).compareTo(typedOther.isSetCompanyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyName()) {
      lastComparison = TBaseHelper.compareTo(this.companyName, typedOther.companyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKuaidiKey()).compareTo(typedOther.isSetKuaidiKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKuaidiKey()) {
      lastComparison = TBaseHelper.compareTo(this.kuaidiKey, typedOther.kuaidiKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // COMPANY_KEY
          if (field.type == TType.STRING) {
            this.companyKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // COMPANY_NAME
          if (field.type == TType.STRING) {
            this.companyName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // KUAIDI_KEY
          if (field.type == TType.STRING) {
            this.kuaidiKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.companyKey != null) {
      oprot.writeFieldBegin(COMPANY_KEY_FIELD_DESC);
      oprot.writeString(this.companyKey);
      oprot.writeFieldEnd();
    }
    if (this.companyName != null) {
      oprot.writeFieldBegin(COMPANY_NAME_FIELD_DESC);
      oprot.writeString(this.companyName);
      oprot.writeFieldEnd();
    }
    if (this.kuaidiKey != null) {
      oprot.writeFieldBegin(KUAIDI_KEY_FIELD_DESC);
      oprot.writeString(this.kuaidiKey);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExpressWayInfo(");
    boolean first = true;
    sb.append("companyKey:");
    if (this.companyKey == null) {
      sb.append("null");
    } else {
      sb.append(this.companyKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("companyName:");
    if (this.companyName == null) {
      sb.append("null");
    } else {
      sb.append(this.companyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kuaidiKey:");
    if (this.kuaidiKey == null) {
      sb.append("null");
    } else {
      sb.append(this.kuaidiKey);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
