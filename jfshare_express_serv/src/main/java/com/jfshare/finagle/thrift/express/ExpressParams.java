/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.express;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ExpressParams implements TBase<ExpressParams, ExpressParams._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ExpressParams");

  private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short)1);
  private static final TField QUERY_TYPE_FIELD_DESC = new TField("queryType", TType.I32, (short)2);
  private static final TField COM_FIELD_DESC = new TField("com", TType.STRING, (short)3);
  private static final TField NUM_FIELD_DESC = new TField("num", TType.STRING, (short)4);
  private static final TField COM_ID_FIELD_DESC = new TField("comId", TType.I32, (short)5);


  public String orderId;
  public int queryType;
  public String com;
  public String num;
  public int comId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    QUERY_TYPE((short)2, "queryType"),
    COM((short)3, "com"),
    NUM((short)4, "num"),
    COM_ID((short)5, "comId");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
  	return ORDER_ID;
        case 2: // QUERY_TYPE
  	return QUERY_TYPE;
        case 3: // COM
  	return COM;
        case 4: // NUM
  	return NUM;
        case 5: // COM_ID
  	return COM_ID;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __QUERYTYPE_ISSET_ID = 0;
  private static final int __COMID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.QUERY_TYPE, new FieldMetaData("queryType", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.COM, new FieldMetaData("com", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.NUM, new FieldMetaData("num", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.COM_ID, new FieldMetaData("comId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ExpressParams.class, metaDataMap);
  }


  public ExpressParams() {
  }

  public ExpressParams(
    String orderId,
    int queryType,
    String com,
    String num,
    int comId)
  {
    this();
    this.orderId = orderId;
    this.queryType = queryType;
    setQueryTypeIsSet(true);
    this.com = com;
    this.num = num;
    this.comId = comId;
    setComIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExpressParams(ExpressParams other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    this.queryType = other.queryType;
    if (other.isSetCom()) {
      this.com = other.com;
    }
    if (other.isSetNum()) {
      this.num = other.num;
    }
    this.comId = other.comId;
  }

  public ExpressParams deepCopy() {
    return new ExpressParams(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    setQueryTypeIsSet(false);
    this.queryType = 0;
    this.com = null;
    this.num = null;
    setComIdIsSet(false);
    this.comId = 0;
  }

  public String getOrderId() {
    return this.orderId;
  }

  public ExpressParams setOrderId(String orderId) {
    this.orderId = orderId;
    
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public int getQueryType() {
    return this.queryType;
  }

  public ExpressParams setQueryType(int queryType) {
    this.queryType = queryType;
    setQueryTypeIsSet(true);

    return this;
  }

  public void unsetQueryType() {
  __isset_bit_vector.clear(__QUERYTYPE_ISSET_ID);
  }

  /** Returns true if field queryType is set (has been asigned a value) and false otherwise */
  public boolean isSetQueryType() {
    return __isset_bit_vector.get(__QUERYTYPE_ISSET_ID);
  }

  public void setQueryTypeIsSet(boolean value) {
    __isset_bit_vector.set(__QUERYTYPE_ISSET_ID, value);
  }

  public String getCom() {
    return this.com;
  }

  public ExpressParams setCom(String com) {
    this.com = com;
    
    return this;
  }

  public void unsetCom() {
    this.com = null;
  }

  /** Returns true if field com is set (has been asigned a value) and false otherwise */
  public boolean isSetCom() {
    return this.com != null;
  }

  public void setComIsSet(boolean value) {
    if (!value) {
      this.com = null;
    }
  }

  public String getNum() {
    return this.num;
  }

  public ExpressParams setNum(String num) {
    this.num = num;
    
    return this;
  }

  public void unsetNum() {
    this.num = null;
  }

  /** Returns true if field num is set (has been asigned a value) and false otherwise */
  public boolean isSetNum() {
    return this.num != null;
  }

  public void setNumIsSet(boolean value) {
    if (!value) {
      this.num = null;
    }
  }

  public int getComId() {
    return this.comId;
  }

  public ExpressParams setComId(int comId) {
    this.comId = comId;
    setComIdIsSet(true);

    return this;
  }

  public void unsetComId() {
  __isset_bit_vector.clear(__COMID_ISSET_ID);
  }

  /** Returns true if field comId is set (has been asigned a value) and false otherwise */
  public boolean isSetComId() {
    return __isset_bit_vector.get(__COMID_ISSET_ID);
  }

  public void setComIdIsSet(boolean value) {
    __isset_bit_vector.set(__COMID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;
    case QUERY_TYPE:
      if (value == null) {
        unsetQueryType();
      } else {
        setQueryType((Integer)value);
      }
      break;
    case COM:
      if (value == null) {
        unsetCom();
      } else {
        setCom((String)value);
      }
      break;
    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((String)value);
      }
      break;
    case COM_ID:
      if (value == null) {
        unsetComId();
      } else {
        setComId((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();
    case QUERY_TYPE:
      return new Integer(getQueryType());
    case COM:
      return getCom();
    case NUM:
      return getNum();
    case COM_ID:
      return new Integer(getComId());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case QUERY_TYPE:
      return isSetQueryType();
    case COM:
      return isSetCom();
    case NUM:
      return isSetNum();
    case COM_ID:
      return isSetComId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExpressParams)
      return this.equals((ExpressParams)that);
    return false;
  }

  public boolean equals(ExpressParams that) {
    if (that == null)
      return false;
    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }
    boolean this_present_queryType = true;
    boolean that_present_queryType = true;
    if (this_present_queryType || that_present_queryType) {
      if (!(this_present_queryType && that_present_queryType))
        return false;
      if (this.queryType != that.queryType)
        return false;
    }
    boolean this_present_com = true && this.isSetCom();
    boolean that_present_com = true && that.isSetCom();
    if (this_present_com || that_present_com) {
      if (!(this_present_com && that_present_com))
        return false;
      if (!this.com.equals(that.com))
        return false;
    }
    boolean this_present_num = true && this.isSetNum();
    boolean that_present_num = true && that.isSetNum();
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (!this.num.equals(that.num))
        return false;
    }
    boolean this_present_comId = true;
    boolean that_present_comId = true;
    if (this_present_comId || that_present_comId) {
      if (!(this_present_comId && that_present_comId))
        return false;
      if (this.comId != that.comId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_orderId = true && (isSetOrderId());
    builder.append(present_orderId);
    if (present_orderId)
      builder.append(orderId);
    boolean present_queryType = true;
    builder.append(present_queryType);
    if (present_queryType)
      builder.append(queryType);
    boolean present_com = true && (isSetCom());
    builder.append(present_com);
    if (present_com)
      builder.append(com);
    boolean present_num = true && (isSetNum());
    builder.append(present_num);
    if (present_num)
      builder.append(num);
    boolean present_comId = true;
    builder.append(present_comId);
    if (present_comId)
      builder.append(comId);
    return builder.toHashCode();
  }

  public int compareTo(ExpressParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ExpressParams typedOther = (ExpressParams)other;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryType()).compareTo(typedOther.isSetQueryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryType()) {
      lastComparison = TBaseHelper.compareTo(this.queryType, typedOther.queryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCom()).compareTo(typedOther.isSetCom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCom()) {
      lastComparison = TBaseHelper.compareTo(this.com, typedOther.com);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum()).compareTo(typedOther.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = TBaseHelper.compareTo(this.num, typedOther.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComId()).compareTo(typedOther.isSetComId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComId()) {
      lastComparison = TBaseHelper.compareTo(this.comId, typedOther.comId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ORDER_ID
          if (field.type == TType.STRING) {
            this.orderId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // QUERY_TYPE
          if (field.type == TType.I32) {
            this.queryType = iprot.readI32();
            setQueryTypeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COM
          if (field.type == TType.STRING) {
            this.com = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // NUM
          if (field.type == TType.STRING) {
            this.num = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // COM_ID
          if (field.type == TType.I32) {
            this.comId = iprot.readI32();
            setComIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.orderId != null) {
      oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
      oprot.writeString(this.orderId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(QUERY_TYPE_FIELD_DESC);
    oprot.writeI32(this.queryType);
    oprot.writeFieldEnd();
    if (this.com != null) {
      oprot.writeFieldBegin(COM_FIELD_DESC);
      oprot.writeString(this.com);
      oprot.writeFieldEnd();
    }
    if (this.num != null) {
      oprot.writeFieldBegin(NUM_FIELD_DESC);
      oprot.writeString(this.num);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(COM_ID_FIELD_DESC);
    oprot.writeI32(this.comId);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExpressParams(");
    boolean first = true;
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryType:");
    sb.append(this.queryType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("com:");
    if (this.com == null) {
      sb.append("null");
    } else {
      sb.append(this.com);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num:");
    if (this.num == null) {
      sb.append("null");
    } else {
      sb.append(this.num);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comId:");
    sb.append(this.comId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
