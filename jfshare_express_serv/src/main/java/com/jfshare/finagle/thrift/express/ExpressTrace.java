/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.express;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ExpressTrace implements TBase<ExpressTrace, ExpressTrace._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ExpressTrace");

  private static final TField STATE_FIELD_DESC = new TField("state", TType.STRING, (short)1);
  private static final TField NU_FIELD_DESC = new TField("nu", TType.STRING, (short)2);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.STRING, (short)3);
  private static final TField TRACE_ITEMS_FIELD_DESC = new TField("traceItems", TType.LIST, (short)4);
  private static final TField ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, (short)5);


  public String state;
  public String nu;
  public String status;
  public List<TraceItem> traceItems;
  public String orderId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    STATE((short)1, "state"),
    NU((short)2, "nu"),
    STATUS((short)3, "status"),
    TRACE_ITEMS((short)4, "traceItems"),
    ORDER_ID((short)5, "orderId");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
  	return STATE;
        case 2: // NU
  	return NU;
        case 3: // STATUS
  	return STATUS;
        case 4: // TRACE_ITEMS
  	return TRACE_ITEMS;
        case 5: // ORDER_ID
  	return ORDER_ID;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new FieldMetaData("state", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.NU, new FieldMetaData("nu", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TRACE_ITEMS, new FieldMetaData("traceItems", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, TraceItem.class))));
    tmpMap.put(_Fields.ORDER_ID, new FieldMetaData("orderId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ExpressTrace.class, metaDataMap);
  }


  public ExpressTrace() {
  }

  public ExpressTrace(
    String state,
    String nu,
    String status,
    List<TraceItem> traceItems,
    String orderId)
  {
    this();
    this.state = state;
    this.nu = nu;
    this.status = status;
    this.traceItems = traceItems;
    this.orderId = orderId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExpressTrace(ExpressTrace other) {
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetNu()) {
      this.nu = other.nu;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetTraceItems()) {
      List<TraceItem> __this__traceItems = new ArrayList<TraceItem>();
      for (TraceItem other_element : other.traceItems) {
        __this__traceItems.add(new TraceItem(other_element));
      }
      this.traceItems = __this__traceItems;
    }
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
  }

  public ExpressTrace deepCopy() {
    return new ExpressTrace(this);
  }

  @Override
  public void clear() {
    this.state = null;
    this.nu = null;
    this.status = null;
    this.traceItems = null;
    this.orderId = null;
  }

  public String getState() {
    return this.state;
  }

  public ExpressTrace setState(String state) {
    this.state = state;
    
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been asigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public String getNu() {
    return this.nu;
  }

  public ExpressTrace setNu(String nu) {
    this.nu = nu;
    
    return this;
  }

  public void unsetNu() {
    this.nu = null;
  }

  /** Returns true if field nu is set (has been asigned a value) and false otherwise */
  public boolean isSetNu() {
    return this.nu != null;
  }

  public void setNuIsSet(boolean value) {
    if (!value) {
      this.nu = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public ExpressTrace setStatus(String status) {
    this.status = status;
    
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been asigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getTraceItemsSize() {
    return (this.traceItems == null) ? 0 : this.traceItems.size();
  }

  public java.util.Iterator<TraceItem> getTraceItemsIterator() {
    return (this.traceItems == null) ? null : this.traceItems.iterator();
  }

  public void addToTraceItems(TraceItem elem) {
    if (this.traceItems == null) {
      this.traceItems = new ArrayList<TraceItem>();
    }
    this.traceItems.add(elem);
  }

  public List<TraceItem> getTraceItems() {
    return this.traceItems;
  }

  public ExpressTrace setTraceItems(List<TraceItem> traceItems) {
    this.traceItems = traceItems;
    
    return this;
  }

  public void unsetTraceItems() {
    this.traceItems = null;
  }

  /** Returns true if field traceItems is set (has been asigned a value) and false otherwise */
  public boolean isSetTraceItems() {
    return this.traceItems != null;
  }

  public void setTraceItemsIsSet(boolean value) {
    if (!value) {
      this.traceItems = null;
    }
  }

  public String getOrderId() {
    return this.orderId;
  }

  public ExpressTrace setOrderId(String orderId) {
    this.orderId = orderId;
    
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been asigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((String)value);
      }
      break;
    case NU:
      if (value == null) {
        unsetNu();
      } else {
        setNu((String)value);
      }
      break;
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;
    case TRACE_ITEMS:
      if (value == null) {
        unsetTraceItems();
      } else {
        setTraceItems((List<TraceItem>)value);
      }
      break;
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return getState();
    case NU:
      return getNu();
    case STATUS:
      return getStatus();
    case TRACE_ITEMS:
      return getTraceItems();
    case ORDER_ID:
      return getOrderId();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case NU:
      return isSetNu();
    case STATUS:
      return isSetStatus();
    case TRACE_ITEMS:
      return isSetTraceItems();
    case ORDER_ID:
      return isSetOrderId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExpressTrace)
      return this.equals((ExpressTrace)that);
    return false;
  }

  public boolean equals(ExpressTrace that) {
    if (that == null)
      return false;
    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }
    boolean this_present_nu = true && this.isSetNu();
    boolean that_present_nu = true && that.isSetNu();
    if (this_present_nu || that_present_nu) {
      if (!(this_present_nu && that_present_nu))
        return false;
      if (!this.nu.equals(that.nu))
        return false;
    }
    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }
    boolean this_present_traceItems = true && this.isSetTraceItems();
    boolean that_present_traceItems = true && that.isSetTraceItems();
    if (this_present_traceItems || that_present_traceItems) {
      if (!(this_present_traceItems && that_present_traceItems))
        return false;
      if (!this.traceItems.equals(that.traceItems))
        return false;
    }
    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_state = true && (isSetState());
    builder.append(present_state);
    if (present_state)
      builder.append(state);
    boolean present_nu = true && (isSetNu());
    builder.append(present_nu);
    if (present_nu)
      builder.append(nu);
    boolean present_status = true && (isSetStatus());
    builder.append(present_status);
    if (present_status)
      builder.append(status);
    boolean present_traceItems = true && (isSetTraceItems());
    builder.append(present_traceItems);
    if (present_traceItems)
      builder.append(traceItems);
    boolean present_orderId = true && (isSetOrderId());
    builder.append(present_orderId);
    if (present_orderId)
      builder.append(orderId);
    return builder.toHashCode();
  }

  public int compareTo(ExpressTrace other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ExpressTrace typedOther = (ExpressTrace)other;

    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNu()).compareTo(typedOther.isSetNu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNu()) {
      lastComparison = TBaseHelper.compareTo(this.nu, typedOther.nu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceItems()).compareTo(typedOther.isSetTraceItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceItems()) {
      lastComparison = TBaseHelper.compareTo(this.traceItems, typedOther.traceItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(typedOther.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = TBaseHelper.compareTo(this.orderId, typedOther.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // STATE
          if (field.type == TType.STRING) {
            this.state = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NU
          if (field.type == TType.STRING) {
            this.nu = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // STATUS
          if (field.type == TType.STRING) {
            this.status = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TRACE_ITEMS
          if (field.type == TType.LIST) {
            {
            TList _list0 = iprot.readListBegin();
            this.traceItems = new ArrayList<TraceItem>(_list0.size);
            for (int _i1 = 0; _i1 < _list0.size; ++_i1)
            {
              TraceItem _elem2;
              _elem2 = new TraceItem();
              _elem2.read(iprot);
              this.traceItems.add(_elem2);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ORDER_ID
          if (field.type == TType.STRING) {
            this.orderId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.state != null) {
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeString(this.state);
      oprot.writeFieldEnd();
    }
    if (this.nu != null) {
      oprot.writeFieldBegin(NU_FIELD_DESC);
      oprot.writeString(this.nu);
      oprot.writeFieldEnd();
    }
    if (this.status != null) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeString(this.status);
      oprot.writeFieldEnd();
    }
    if (this.traceItems != null) {
      oprot.writeFieldBegin(TRACE_ITEMS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.traceItems.size()));
        for (TraceItem _iter3 : this.traceItems)
        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.orderId != null) {
      oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
      oprot.writeString(this.orderId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExpressTrace(");
    boolean first = true;
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nu:");
    if (this.nu == null) {
      sb.append("null");
    } else {
      sb.append(this.nu);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traceItems:");
    if (this.traceItems == null) {
      sb.append("null");
    } else {
      sb.append(this.traceItems);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
