/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.subject;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class DisplaySubjectInfo implements TBase<DisplaySubjectInfo, DisplaySubjectInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("DisplaySubjectInfo");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField PID_FIELD_DESC = new TField("pid", TType.I32, (short)3);
  private static final TField SORTED_FIELD_DESC = new TField("sorted", TType.I32, (short)4);
  private static final TField LEVEL_FIELD_DESC = new TField("level", TType.I32, (short)5);
  private static final TField IS_LEAF_FIELD_DESC = new TField("isLeaf", TType.I32, (short)6);
  private static final TField SUBJECT_IDS_FIELD_DESC = new TField("subjectIds", TType.STRING, (short)7);
  private static final TField PATH_FIELD_DESC = new TField("path", TType.STRING, (short)8);
  private static final TField IMAGE_FIELD_DESC = new TField("image", TType.STRING, (short)9);
  private static final TField DEMO_FIELD_DESC = new TField("demo", TType.STRING, (short)10);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.STRING, (short)11);
  private static final TField CREATOR_FIELD_DESC = new TField("creator", TType.I32, (short)12);
  private static final TField UPDATE_TIME_FIELD_DESC = new TField("updateTime", TType.STRING, (short)13);
  private static final TField UPDATER_FIELD_DESC = new TField("updater", TType.I32, (short)14);
  private static final TField DELETED_FIELD_DESC = new TField("deleted", TType.I32, (short)15);
  private static final TField DISPLAY_SUBJECT_NODES_FIELD_DESC = new TField("displaySubjectNodes", TType.LIST, (short)16);


  public int id;
  public String name;
  public int pid;
  public int sorted;
  public int level;
  public int isLeaf;
  public String subjectIds;
  public String path;
  public String image;
  public String demo;
  public String createTime;
  public int creator;
  public String updateTime;
  public int updater;
  public int deleted;
  public List<DisplaySubjectNode> displaySubjectNodes;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    PID((short)3, "pid"),
    SORTED((short)4, "sorted"),
    LEVEL((short)5, "level"),
    IS_LEAF((short)6, "isLeaf"),
    SUBJECT_IDS((short)7, "subjectIds"),
    PATH((short)8, "path"),
    IMAGE((short)9, "image"),
    DEMO((short)10, "demo"),
    CREATE_TIME((short)11, "createTime"),
    CREATOR((short)12, "creator"),
    UPDATE_TIME((short)13, "updateTime"),
    UPDATER((short)14, "updater"),
    DELETED((short)15, "deleted"),
    DISPLAY_SUBJECT_NODES((short)16, "displaySubjectNodes");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
  	return ID;
        case 2: // NAME
  	return NAME;
        case 3: // PID
  	return PID;
        case 4: // SORTED
  	return SORTED;
        case 5: // LEVEL
  	return LEVEL;
        case 6: // IS_LEAF
  	return IS_LEAF;
        case 7: // SUBJECT_IDS
  	return SUBJECT_IDS;
        case 8: // PATH
  	return PATH;
        case 9: // IMAGE
  	return IMAGE;
        case 10: // DEMO
  	return DEMO;
        case 11: // CREATE_TIME
  	return CREATE_TIME;
        case 12: // CREATOR
  	return CREATOR;
        case 13: // UPDATE_TIME
  	return UPDATE_TIME;
        case 14: // UPDATER
  	return UPDATER;
        case 15: // DELETED
  	return DELETED;
        case 16: // DISPLAY_SUBJECT_NODES
  	return DISPLAY_SUBJECT_NODES;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PID_ISSET_ID = 1;
  private static final int __SORTED_ISSET_ID = 2;
  private static final int __LEVEL_ISSET_ID = 3;
  private static final int __ISLEAF_ISSET_ID = 4;
  private static final int __CREATOR_ISSET_ID = 5;
  private static final int __UPDATER_ISSET_ID = 6;
  private static final int __DELETED_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PID, new FieldMetaData("pid", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.SORTED, new FieldMetaData("sorted", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.LEVEL, new FieldMetaData("level", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.IS_LEAF, new FieldMetaData("isLeaf", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.SUBJECT_IDS, new FieldMetaData("subjectIds", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PATH, new FieldMetaData("path", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.IMAGE, new FieldMetaData("image", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DEMO, new FieldMetaData("demo", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATOR, new FieldMetaData("creator", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new FieldMetaData("updateTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.UPDATER, new FieldMetaData("updater", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.DELETED, new FieldMetaData("deleted", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.DISPLAY_SUBJECT_NODES, new FieldMetaData("displaySubjectNodes", TFieldRequirementType.OPTIONAL,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, DisplaySubjectNode.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(DisplaySubjectInfo.class, metaDataMap);
  }


  public DisplaySubjectInfo() {
  }

  public DisplaySubjectInfo(
    int id,
    String name,
    int pid,
    int sorted,
    int level,
    int isLeaf,
    String subjectIds,
    String path,
    String image,
    String demo,
    String createTime,
    int creator,
    String updateTime,
    int updater,
    int deleted)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.pid = pid;
    setPidIsSet(true);
    this.sorted = sorted;
    setSortedIsSet(true);
    this.level = level;
    setLevelIsSet(true);
    this.isLeaf = isLeaf;
    setIsLeafIsSet(true);
    this.subjectIds = subjectIds;
    this.path = path;
    this.image = image;
    this.demo = demo;
    this.createTime = createTime;
    this.creator = creator;
    setCreatorIsSet(true);
    this.updateTime = updateTime;
    this.updater = updater;
    setUpdaterIsSet(true);
    this.deleted = deleted;
    setDeletedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DisplaySubjectInfo(DisplaySubjectInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.pid = other.pid;
    this.sorted = other.sorted;
    this.level = other.level;
    this.isLeaf = other.isLeaf;
    if (other.isSetSubjectIds()) {
      this.subjectIds = other.subjectIds;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetImage()) {
      this.image = other.image;
    }
    if (other.isSetDemo()) {
      this.demo = other.demo;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.creator = other.creator;
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.updater = other.updater;
    this.deleted = other.deleted;
    if (other.isSetDisplaySubjectNodes()) {
      List<DisplaySubjectNode> __this__displaySubjectNodes = new ArrayList<DisplaySubjectNode>();
      for (DisplaySubjectNode other_element : other.displaySubjectNodes) {
        __this__displaySubjectNodes.add(new DisplaySubjectNode(other_element));
      }
      this.displaySubjectNodes = __this__displaySubjectNodes;
    }
  }

  public DisplaySubjectInfo deepCopy() {
    return new DisplaySubjectInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setPidIsSet(false);
    this.pid = 0;
    setSortedIsSet(false);
    this.sorted = 0;
    setLevelIsSet(false);
    this.level = 0;
    setIsLeafIsSet(false);
    this.isLeaf = 0;
    this.subjectIds = null;
    this.path = null;
    this.image = null;
    this.demo = null;
    this.createTime = null;
    setCreatorIsSet(false);
    this.creator = 0;
    this.updateTime = null;
    setUpdaterIsSet(false);
    this.updater = 0;
    setDeletedIsSet(false);
    this.deleted = 0;
    this.displaySubjectNodes = null;
  }

  public int getId() {
    return this.id;
  }

  public DisplaySubjectInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);

    return this;
  }

  public void unsetId() {
  __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public DisplaySubjectInfo setName(String name) {
    this.name = name;
    
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getPid() {
    return this.pid;
  }

  public DisplaySubjectInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);

    return this;
  }

  public void unsetPid() {
  __isset_bit_vector.clear(__PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been asigned a value) and false otherwise */
  public boolean isSetPid() {
    return __isset_bit_vector.get(__PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bit_vector.set(__PID_ISSET_ID, value);
  }

  public int getSorted() {
    return this.sorted;
  }

  public DisplaySubjectInfo setSorted(int sorted) {
    this.sorted = sorted;
    setSortedIsSet(true);

    return this;
  }

  public void unsetSorted() {
  __isset_bit_vector.clear(__SORTED_ISSET_ID);
  }

  /** Returns true if field sorted is set (has been asigned a value) and false otherwise */
  public boolean isSetSorted() {
    return __isset_bit_vector.get(__SORTED_ISSET_ID);
  }

  public void setSortedIsSet(boolean value) {
    __isset_bit_vector.set(__SORTED_ISSET_ID, value);
  }

  public int getLevel() {
    return this.level;
  }

  public DisplaySubjectInfo setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);

    return this;
  }

  public void unsetLevel() {
  __isset_bit_vector.clear(__LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been asigned a value) and false otherwise */
  public boolean isSetLevel() {
    return __isset_bit_vector.get(__LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bit_vector.set(__LEVEL_ISSET_ID, value);
  }

  public int getIsLeaf() {
    return this.isLeaf;
  }

  public DisplaySubjectInfo setIsLeaf(int isLeaf) {
    this.isLeaf = isLeaf;
    setIsLeafIsSet(true);

    return this;
  }

  public void unsetIsLeaf() {
  __isset_bit_vector.clear(__ISLEAF_ISSET_ID);
  }

  /** Returns true if field isLeaf is set (has been asigned a value) and false otherwise */
  public boolean isSetIsLeaf() {
    return __isset_bit_vector.get(__ISLEAF_ISSET_ID);
  }

  public void setIsLeafIsSet(boolean value) {
    __isset_bit_vector.set(__ISLEAF_ISSET_ID, value);
  }

  public String getSubjectIds() {
    return this.subjectIds;
  }

  public DisplaySubjectInfo setSubjectIds(String subjectIds) {
    this.subjectIds = subjectIds;
    
    return this;
  }

  public void unsetSubjectIds() {
    this.subjectIds = null;
  }

  /** Returns true if field subjectIds is set (has been asigned a value) and false otherwise */
  public boolean isSetSubjectIds() {
    return this.subjectIds != null;
  }

  public void setSubjectIdsIsSet(boolean value) {
    if (!value) {
      this.subjectIds = null;
    }
  }

  public String getPath() {
    return this.path;
  }

  public DisplaySubjectInfo setPath(String path) {
    this.path = path;
    
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been asigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public String getImage() {
    return this.image;
  }

  public DisplaySubjectInfo setImage(String image) {
    this.image = image;
    
    return this;
  }

  public void unsetImage() {
    this.image = null;
  }

  /** Returns true if field image is set (has been asigned a value) and false otherwise */
  public boolean isSetImage() {
    return this.image != null;
  }

  public void setImageIsSet(boolean value) {
    if (!value) {
      this.image = null;
    }
  }

  public String getDemo() {
    return this.demo;
  }

  public DisplaySubjectInfo setDemo(String demo) {
    this.demo = demo;
    
    return this;
  }

  public void unsetDemo() {
    this.demo = null;
  }

  /** Returns true if field demo is set (has been asigned a value) and false otherwise */
  public boolean isSetDemo() {
    return this.demo != null;
  }

  public void setDemoIsSet(boolean value) {
    if (!value) {
      this.demo = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public DisplaySubjectInfo setCreateTime(String createTime) {
    this.createTime = createTime;
    
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getCreator() {
    return this.creator;
  }

  public DisplaySubjectInfo setCreator(int creator) {
    this.creator = creator;
    setCreatorIsSet(true);

    return this;
  }

  public void unsetCreator() {
  __isset_bit_vector.clear(__CREATOR_ISSET_ID);
  }

  /** Returns true if field creator is set (has been asigned a value) and false otherwise */
  public boolean isSetCreator() {
    return __isset_bit_vector.get(__CREATOR_ISSET_ID);
  }

  public void setCreatorIsSet(boolean value) {
    __isset_bit_vector.set(__CREATOR_ISSET_ID, value);
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public DisplaySubjectInfo setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public int getUpdater() {
    return this.updater;
  }

  public DisplaySubjectInfo setUpdater(int updater) {
    this.updater = updater;
    setUpdaterIsSet(true);

    return this;
  }

  public void unsetUpdater() {
  __isset_bit_vector.clear(__UPDATER_ISSET_ID);
  }

  /** Returns true if field updater is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdater() {
    return __isset_bit_vector.get(__UPDATER_ISSET_ID);
  }

  public void setUpdaterIsSet(boolean value) {
    __isset_bit_vector.set(__UPDATER_ISSET_ID, value);
  }

  public int getDeleted() {
    return this.deleted;
  }

  public DisplaySubjectInfo setDeleted(int deleted) {
    this.deleted = deleted;
    setDeletedIsSet(true);

    return this;
  }

  public void unsetDeleted() {
  __isset_bit_vector.clear(__DELETED_ISSET_ID);
  }

  /** Returns true if field deleted is set (has been asigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return __isset_bit_vector.get(__DELETED_ISSET_ID);
  }

  public void setDeletedIsSet(boolean value) {
    __isset_bit_vector.set(__DELETED_ISSET_ID, value);
  }

  public int getDisplaySubjectNodesSize() {
    return (this.displaySubjectNodes == null) ? 0 : this.displaySubjectNodes.size();
  }

  public java.util.Iterator<DisplaySubjectNode> getDisplaySubjectNodesIterator() {
    return (this.displaySubjectNodes == null) ? null : this.displaySubjectNodes.iterator();
  }

  public void addToDisplaySubjectNodes(DisplaySubjectNode elem) {
    if (this.displaySubjectNodes == null) {
      this.displaySubjectNodes = new ArrayList<DisplaySubjectNode>();
    }
    this.displaySubjectNodes.add(elem);
  }

  public List<DisplaySubjectNode> getDisplaySubjectNodes() {
    return this.displaySubjectNodes;
  }

  public DisplaySubjectInfo setDisplaySubjectNodes(List<DisplaySubjectNode> displaySubjectNodes) {
    this.displaySubjectNodes = displaySubjectNodes;
    
    return this;
  }

  public void unsetDisplaySubjectNodes() {
    this.displaySubjectNodes = null;
  }

  /** Returns true if field displaySubjectNodes is set (has been asigned a value) and false otherwise */
  public boolean isSetDisplaySubjectNodes() {
    return this.displaySubjectNodes != null;
  }

  public void setDisplaySubjectNodesIsSet(boolean value) {
    if (!value) {
      this.displaySubjectNodes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;
    case SORTED:
      if (value == null) {
        unsetSorted();
      } else {
        setSorted((Integer)value);
      }
      break;
    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;
    case IS_LEAF:
      if (value == null) {
        unsetIsLeaf();
      } else {
        setIsLeaf((Integer)value);
      }
      break;
    case SUBJECT_IDS:
      if (value == null) {
        unsetSubjectIds();
      } else {
        setSubjectIds((String)value);
      }
      break;
    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;
    case IMAGE:
      if (value == null) {
        unsetImage();
      } else {
        setImage((String)value);
      }
      break;
    case DEMO:
      if (value == null) {
        unsetDemo();
      } else {
        setDemo((String)value);
      }
      break;
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;
    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((Integer)value);
      }
      break;
    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;
    case UPDATER:
      if (value == null) {
        unsetUpdater();
      } else {
        setUpdater((Integer)value);
      }
      break;
    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((Integer)value);
      }
      break;
    case DISPLAY_SUBJECT_NODES:
      if (value == null) {
        unsetDisplaySubjectNodes();
      } else {
        setDisplaySubjectNodes((List<DisplaySubjectNode>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Integer(getId());
    case NAME:
      return getName();
    case PID:
      return new Integer(getPid());
    case SORTED:
      return new Integer(getSorted());
    case LEVEL:
      return new Integer(getLevel());
    case IS_LEAF:
      return new Integer(getIsLeaf());
    case SUBJECT_IDS:
      return getSubjectIds();
    case PATH:
      return getPath();
    case IMAGE:
      return getImage();
    case DEMO:
      return getDemo();
    case CREATE_TIME:
      return getCreateTime();
    case CREATOR:
      return new Integer(getCreator());
    case UPDATE_TIME:
      return getUpdateTime();
    case UPDATER:
      return new Integer(getUpdater());
    case DELETED:
      return new Integer(getDeleted());
    case DISPLAY_SUBJECT_NODES:
      return getDisplaySubjectNodes();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case PID:
      return isSetPid();
    case SORTED:
      return isSetSorted();
    case LEVEL:
      return isSetLevel();
    case IS_LEAF:
      return isSetIsLeaf();
    case SUBJECT_IDS:
      return isSetSubjectIds();
    case PATH:
      return isSetPath();
    case IMAGE:
      return isSetImage();
    case DEMO:
      return isSetDemo();
    case CREATE_TIME:
      return isSetCreateTime();
    case CREATOR:
      return isSetCreator();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case UPDATER:
      return isSetUpdater();
    case DELETED:
      return isSetDeleted();
    case DISPLAY_SUBJECT_NODES:
      return isSetDisplaySubjectNodes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DisplaySubjectInfo)
      return this.equals((DisplaySubjectInfo)that);
    return false;
  }

  public boolean equals(DisplaySubjectInfo that) {
    if (that == null)
      return false;
    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }
    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }
    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }
    boolean this_present_sorted = true;
    boolean that_present_sorted = true;
    if (this_present_sorted || that_present_sorted) {
      if (!(this_present_sorted && that_present_sorted))
        return false;
      if (this.sorted != that.sorted)
        return false;
    }
    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }
    boolean this_present_isLeaf = true;
    boolean that_present_isLeaf = true;
    if (this_present_isLeaf || that_present_isLeaf) {
      if (!(this_present_isLeaf && that_present_isLeaf))
        return false;
      if (this.isLeaf != that.isLeaf)
        return false;
    }
    boolean this_present_subjectIds = true && this.isSetSubjectIds();
    boolean that_present_subjectIds = true && that.isSetSubjectIds();
    if (this_present_subjectIds || that_present_subjectIds) {
      if (!(this_present_subjectIds && that_present_subjectIds))
        return false;
      if (!this.subjectIds.equals(that.subjectIds))
        return false;
    }
    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }
    boolean this_present_image = true && this.isSetImage();
    boolean that_present_image = true && that.isSetImage();
    if (this_present_image || that_present_image) {
      if (!(this_present_image && that_present_image))
        return false;
      if (!this.image.equals(that.image))
        return false;
    }
    boolean this_present_demo = true && this.isSetDemo();
    boolean that_present_demo = true && that.isSetDemo();
    if (this_present_demo || that_present_demo) {
      if (!(this_present_demo && that_present_demo))
        return false;
      if (!this.demo.equals(that.demo))
        return false;
    }
    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }
    boolean this_present_creator = true;
    boolean that_present_creator = true;
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (this.creator != that.creator)
        return false;
    }
    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }
    boolean this_present_updater = true;
    boolean that_present_updater = true;
    if (this_present_updater || that_present_updater) {
      if (!(this_present_updater && that_present_updater))
        return false;
      if (this.updater != that.updater)
        return false;
    }
    boolean this_present_deleted = true;
    boolean that_present_deleted = true;
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (this.deleted != that.deleted)
        return false;
    }
    boolean this_present_displaySubjectNodes = true && this.isSetDisplaySubjectNodes();
    boolean that_present_displaySubjectNodes = true && that.isSetDisplaySubjectNodes();
    if (this_present_displaySubjectNodes || that_present_displaySubjectNodes) {
      if (!(this_present_displaySubjectNodes && that_present_displaySubjectNodes))
        return false;
      if (!this.displaySubjectNodes.equals(that.displaySubjectNodes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);
    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);
    boolean present_pid = true;
    builder.append(present_pid);
    if (present_pid)
      builder.append(pid);
    boolean present_sorted = true;
    builder.append(present_sorted);
    if (present_sorted)
      builder.append(sorted);
    boolean present_level = true;
    builder.append(present_level);
    if (present_level)
      builder.append(level);
    boolean present_isLeaf = true;
    builder.append(present_isLeaf);
    if (present_isLeaf)
      builder.append(isLeaf);
    boolean present_subjectIds = true && (isSetSubjectIds());
    builder.append(present_subjectIds);
    if (present_subjectIds)
      builder.append(subjectIds);
    boolean present_path = true && (isSetPath());
    builder.append(present_path);
    if (present_path)
      builder.append(path);
    boolean present_image = true && (isSetImage());
    builder.append(present_image);
    if (present_image)
      builder.append(image);
    boolean present_demo = true && (isSetDemo());
    builder.append(present_demo);
    if (present_demo)
      builder.append(demo);
    boolean present_createTime = true && (isSetCreateTime());
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);
    boolean present_creator = true;
    builder.append(present_creator);
    if (present_creator)
      builder.append(creator);
    boolean present_updateTime = true && (isSetUpdateTime());
    builder.append(present_updateTime);
    if (present_updateTime)
      builder.append(updateTime);
    boolean present_updater = true;
    builder.append(present_updater);
    if (present_updater)
      builder.append(updater);
    boolean present_deleted = true;
    builder.append(present_deleted);
    if (present_deleted)
      builder.append(deleted);
    boolean present_displaySubjectNodes = true && (isSetDisplaySubjectNodes());
    builder.append(present_displaySubjectNodes);
    if (present_displaySubjectNodes)
      builder.append(displaySubjectNodes);
    return builder.toHashCode();
  }

  public int compareTo(DisplaySubjectInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DisplaySubjectInfo typedOther = (DisplaySubjectInfo)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(typedOther.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = TBaseHelper.compareTo(this.pid, typedOther.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSorted()).compareTo(typedOther.isSetSorted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSorted()) {
      lastComparison = TBaseHelper.compareTo(this.sorted, typedOther.sorted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLeaf()).compareTo(typedOther.isSetIsLeaf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLeaf()) {
      lastComparison = TBaseHelper.compareTo(this.isLeaf, typedOther.isLeaf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubjectIds()).compareTo(typedOther.isSetSubjectIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectIds()) {
      lastComparison = TBaseHelper.compareTo(this.subjectIds, typedOther.subjectIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = TBaseHelper.compareTo(this.path, typedOther.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImage()).compareTo(typedOther.isSetImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage()) {
      lastComparison = TBaseHelper.compareTo(this.image, typedOther.image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDemo()).compareTo(typedOther.isSetDemo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDemo()) {
      lastComparison = TBaseHelper.compareTo(this.demo, typedOther.demo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(typedOther.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = TBaseHelper.compareTo(this.creator, typedOther.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdater()).compareTo(typedOther.isSetUpdater());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdater()) {
      lastComparison = TBaseHelper.compareTo(this.updater, typedOther.updater);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted()).compareTo(typedOther.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = TBaseHelper.compareTo(this.deleted, typedOther.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplaySubjectNodes()).compareTo(typedOther.isSetDisplaySubjectNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplaySubjectNodes()) {
      lastComparison = TBaseHelper.compareTo(this.displaySubjectNodes, typedOther.displaySubjectNodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PID
          if (field.type == TType.I32) {
            this.pid = iprot.readI32();
            setPidIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SORTED
          if (field.type == TType.I32) {
            this.sorted = iprot.readI32();
            setSortedIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // LEVEL
          if (field.type == TType.I32) {
            this.level = iprot.readI32();
            setLevelIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // IS_LEAF
          if (field.type == TType.I32) {
            this.isLeaf = iprot.readI32();
            setIsLeafIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // SUBJECT_IDS
          if (field.type == TType.STRING) {
            this.subjectIds = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // PATH
          if (field.type == TType.STRING) {
            this.path = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // IMAGE
          if (field.type == TType.STRING) {
            this.image = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // DEMO
          if (field.type == TType.STRING) {
            this.demo = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // CREATE_TIME
          if (field.type == TType.STRING) {
            this.createTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // CREATOR
          if (field.type == TType.I32) {
            this.creator = iprot.readI32();
            setCreatorIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // UPDATE_TIME
          if (field.type == TType.STRING) {
            this.updateTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // UPDATER
          if (field.type == TType.I32) {
            this.updater = iprot.readI32();
            setUpdaterIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // DELETED
          if (field.type == TType.I32) {
            this.deleted = iprot.readI32();
            setDeletedIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // DISPLAY_SUBJECT_NODES
          if (field.type == TType.LIST) {
            {
            TList _list20 = iprot.readListBegin();
            this.displaySubjectNodes = new ArrayList<DisplaySubjectNode>(_list20.size);
            for (int _i21 = 0; _i21 < _list20.size; ++_i21)
            {
              DisplaySubjectNode _elem22;
              _elem22 = new DisplaySubjectNode();
              _elem22.read(iprot);
              this.displaySubjectNodes.add(_elem22);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PID_FIELD_DESC);
    oprot.writeI32(this.pid);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SORTED_FIELD_DESC);
    oprot.writeI32(this.sorted);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LEVEL_FIELD_DESC);
    oprot.writeI32(this.level);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(IS_LEAF_FIELD_DESC);
    oprot.writeI32(this.isLeaf);
    oprot.writeFieldEnd();
    if (this.subjectIds != null) {
      oprot.writeFieldBegin(SUBJECT_IDS_FIELD_DESC);
      oprot.writeString(this.subjectIds);
      oprot.writeFieldEnd();
    }
    if (this.path != null) {
      oprot.writeFieldBegin(PATH_FIELD_DESC);
      oprot.writeString(this.path);
      oprot.writeFieldEnd();
    }
    if (this.image != null) {
      oprot.writeFieldBegin(IMAGE_FIELD_DESC);
      oprot.writeString(this.image);
      oprot.writeFieldEnd();
    }
    if (this.demo != null) {
      oprot.writeFieldBegin(DEMO_FIELD_DESC);
      oprot.writeString(this.demo);
      oprot.writeFieldEnd();
    }
    if (this.createTime != null) {
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeString(this.createTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CREATOR_FIELD_DESC);
    oprot.writeI32(this.creator);
    oprot.writeFieldEnd();
    if (this.updateTime != null) {
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeString(this.updateTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(UPDATER_FIELD_DESC);
    oprot.writeI32(this.updater);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DELETED_FIELD_DESC);
    oprot.writeI32(this.deleted);
    oprot.writeFieldEnd();
    if (this.displaySubjectNodes != null) {
      if (isSetDisplaySubjectNodes()) {
        oprot.writeFieldBegin(DISPLAY_SUBJECT_NODES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.displaySubjectNodes.size()));
          for (DisplaySubjectNode _iter23 : this.displaySubjectNodes)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DisplaySubjectInfo(");
    boolean first = true;
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sorted:");
    sb.append(this.sorted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLeaf:");
    sb.append(this.isLeaf);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectIds:");
    if (this.subjectIds == null) {
      sb.append("null");
    } else {
      sb.append(this.subjectIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("image:");
    if (this.image == null) {
      sb.append("null");
    } else {
      sb.append(this.image);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("demo:");
    if (this.demo == null) {
      sb.append("null");
    } else {
      sb.append(this.demo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creator:");
    sb.append(this.creator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    if (this.updateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updater:");
    sb.append(this.updater);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deleted:");
    sb.append(this.deleted);
    first = false;
    if (isSetDisplaySubjectNodes()) {
      if (!first) sb.append(", ");
      sb.append("displaySubjectNodes:");
      if (this.displaySubjectNodes == null) {
        sb.append("null");
      } else {
        sb.append(this.displaySubjectNodes);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
