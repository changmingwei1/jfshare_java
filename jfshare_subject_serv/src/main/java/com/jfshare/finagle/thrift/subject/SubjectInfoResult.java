/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.subject;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class SubjectInfoResult implements TBase<SubjectInfoResult, SubjectInfoResult._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SubjectInfoResult");

  private static final TField RESULT_FIELD_DESC = new TField("result", TType.STRUCT, (short)1);
  private static final TField SUBJECT_INFO_FIELD_DESC = new TField("subjectInfo", TType.STRUCT, (short)2);
  private static final TField SUBJECT_ATTRIBUTES_FIELD_DESC = new TField("subjectAttributes", TType.LIST, (short)3);
  private static final TField BRAND_LIST_FIELD_DESC = new TField("brandList", TType.LIST, (short)4);


  public com.jfshare.finagle.thrift.result.Result result;
  public SubjectInfo subjectInfo;
  public List<SubjectAttribute> subjectAttributes;
  public List<com.jfshare.finagle.thrift.brand.BrandInfo> brandList;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    RESULT((short)1, "result"),
    SUBJECT_INFO((short)2, "subjectInfo"),
    SUBJECT_ATTRIBUTES((short)3, "subjectAttributes"),
    BRAND_LIST((short)4, "brandList");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT
  	return RESULT;
        case 2: // SUBJECT_INFO
  	return SUBJECT_INFO;
        case 3: // SUBJECT_ATTRIBUTES
  	return SUBJECT_ATTRIBUTES;
        case 4: // BRAND_LIST
  	return BRAND_LIST;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT, new FieldMetaData("result", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    tmpMap.put(_Fields.SUBJECT_INFO, new FieldMetaData("subjectInfo", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, SubjectInfo.class)));
    tmpMap.put(_Fields.SUBJECT_ATTRIBUTES, new FieldMetaData("subjectAttributes", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, SubjectAttribute.class))));
    tmpMap.put(_Fields.BRAND_LIST, new FieldMetaData("brandList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.brand.BrandInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(SubjectInfoResult.class, metaDataMap);
  }


  public SubjectInfoResult() {
  }

  public SubjectInfoResult(
    com.jfshare.finagle.thrift.result.Result result,
    SubjectInfo subjectInfo,
    List<SubjectAttribute> subjectAttributes,
    List<com.jfshare.finagle.thrift.brand.BrandInfo> brandList)
  {
    this();
    this.result = result;
    this.subjectInfo = subjectInfo;
    this.subjectAttributes = subjectAttributes;
    this.brandList = brandList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubjectInfoResult(SubjectInfoResult other) {
    if (other.isSetResult()) {
      this.result = new com.jfshare.finagle.thrift.result.Result(other.result);
    }
    if (other.isSetSubjectInfo()) {
      this.subjectInfo = new SubjectInfo(other.subjectInfo);
    }
    if (other.isSetSubjectAttributes()) {
      List<SubjectAttribute> __this__subjectAttributes = new ArrayList<SubjectAttribute>();
      for (SubjectAttribute other_element : other.subjectAttributes) {
        __this__subjectAttributes.add(new SubjectAttribute(other_element));
      }
      this.subjectAttributes = __this__subjectAttributes;
    }
    if (other.isSetBrandList()) {
      List<com.jfshare.finagle.thrift.brand.BrandInfo> __this__brandList = new ArrayList<com.jfshare.finagle.thrift.brand.BrandInfo>();
      for (com.jfshare.finagle.thrift.brand.BrandInfo other_element : other.brandList) {
        __this__brandList.add(new com.jfshare.finagle.thrift.brand.BrandInfo(other_element));
      }
      this.brandList = __this__brandList;
    }
  }

  public SubjectInfoResult deepCopy() {
    return new SubjectInfoResult(this);
  }

  @Override
  public void clear() {
    this.result = null;
    this.subjectInfo = null;
    this.subjectAttributes = null;
    this.brandList = null;
  }

  public com.jfshare.finagle.thrift.result.Result getResult() {
    return this.result;
  }

  public SubjectInfoResult setResult(com.jfshare.finagle.thrift.result.Result result) {
    this.result = result;
    
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been asigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public SubjectInfo getSubjectInfo() {
    return this.subjectInfo;
  }

  public SubjectInfoResult setSubjectInfo(SubjectInfo subjectInfo) {
    this.subjectInfo = subjectInfo;
    
    return this;
  }

  public void unsetSubjectInfo() {
    this.subjectInfo = null;
  }

  /** Returns true if field subjectInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetSubjectInfo() {
    return this.subjectInfo != null;
  }

  public void setSubjectInfoIsSet(boolean value) {
    if (!value) {
      this.subjectInfo = null;
    }
  }

  public int getSubjectAttributesSize() {
    return (this.subjectAttributes == null) ? 0 : this.subjectAttributes.size();
  }

  public java.util.Iterator<SubjectAttribute> getSubjectAttributesIterator() {
    return (this.subjectAttributes == null) ? null : this.subjectAttributes.iterator();
  }

  public void addToSubjectAttributes(SubjectAttribute elem) {
    if (this.subjectAttributes == null) {
      this.subjectAttributes = new ArrayList<SubjectAttribute>();
    }
    this.subjectAttributes.add(elem);
  }

  public List<SubjectAttribute> getSubjectAttributes() {
    return this.subjectAttributes;
  }

  public SubjectInfoResult setSubjectAttributes(List<SubjectAttribute> subjectAttributes) {
    this.subjectAttributes = subjectAttributes;
    
    return this;
  }

  public void unsetSubjectAttributes() {
    this.subjectAttributes = null;
  }

  /** Returns true if field subjectAttributes is set (has been asigned a value) and false otherwise */
  public boolean isSetSubjectAttributes() {
    return this.subjectAttributes != null;
  }

  public void setSubjectAttributesIsSet(boolean value) {
    if (!value) {
      this.subjectAttributes = null;
    }
  }

  public int getBrandListSize() {
    return (this.brandList == null) ? 0 : this.brandList.size();
  }

  public java.util.Iterator<com.jfshare.finagle.thrift.brand.BrandInfo> getBrandListIterator() {
    return (this.brandList == null) ? null : this.brandList.iterator();
  }

  public void addToBrandList(com.jfshare.finagle.thrift.brand.BrandInfo elem) {
    if (this.brandList == null) {
      this.brandList = new ArrayList<com.jfshare.finagle.thrift.brand.BrandInfo>();
    }
    this.brandList.add(elem);
  }

  public List<com.jfshare.finagle.thrift.brand.BrandInfo> getBrandList() {
    return this.brandList;
  }

  public SubjectInfoResult setBrandList(List<com.jfshare.finagle.thrift.brand.BrandInfo> brandList) {
    this.brandList = brandList;
    
    return this;
  }

  public void unsetBrandList() {
    this.brandList = null;
  }

  /** Returns true if field brandList is set (has been asigned a value) and false otherwise */
  public boolean isSetBrandList() {
    return this.brandList != null;
  }

  public void setBrandListIsSet(boolean value) {
    if (!value) {
      this.brandList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    case SUBJECT_INFO:
      if (value == null) {
        unsetSubjectInfo();
      } else {
        setSubjectInfo((SubjectInfo)value);
      }
      break;
    case SUBJECT_ATTRIBUTES:
      if (value == null) {
        unsetSubjectAttributes();
      } else {
        setSubjectAttributes((List<SubjectAttribute>)value);
      }
      break;
    case BRAND_LIST:
      if (value == null) {
        unsetBrandList();
      } else {
        setBrandList((List<com.jfshare.finagle.thrift.brand.BrandInfo>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT:
      return getResult();
    case SUBJECT_INFO:
      return getSubjectInfo();
    case SUBJECT_ATTRIBUTES:
      return getSubjectAttributes();
    case BRAND_LIST:
      return getBrandList();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT:
      return isSetResult();
    case SUBJECT_INFO:
      return isSetSubjectInfo();
    case SUBJECT_ATTRIBUTES:
      return isSetSubjectAttributes();
    case BRAND_LIST:
      return isSetBrandList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubjectInfoResult)
      return this.equals((SubjectInfoResult)that);
    return false;
  }

  public boolean equals(SubjectInfoResult that) {
    if (that == null)
      return false;
    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }
    boolean this_present_subjectInfo = true && this.isSetSubjectInfo();
    boolean that_present_subjectInfo = true && that.isSetSubjectInfo();
    if (this_present_subjectInfo || that_present_subjectInfo) {
      if (!(this_present_subjectInfo && that_present_subjectInfo))
        return false;
      if (!this.subjectInfo.equals(that.subjectInfo))
        return false;
    }
    boolean this_present_subjectAttributes = true && this.isSetSubjectAttributes();
    boolean that_present_subjectAttributes = true && that.isSetSubjectAttributes();
    if (this_present_subjectAttributes || that_present_subjectAttributes) {
      if (!(this_present_subjectAttributes && that_present_subjectAttributes))
        return false;
      if (!this.subjectAttributes.equals(that.subjectAttributes))
        return false;
    }
    boolean this_present_brandList = true && this.isSetBrandList();
    boolean that_present_brandList = true && that.isSetBrandList();
    if (this_present_brandList || that_present_brandList) {
      if (!(this_present_brandList && that_present_brandList))
        return false;
      if (!this.brandList.equals(that.brandList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_result = true && (isSetResult());
    builder.append(present_result);
    if (present_result)
      builder.append(result);
    boolean present_subjectInfo = true && (isSetSubjectInfo());
    builder.append(present_subjectInfo);
    if (present_subjectInfo)
      builder.append(subjectInfo);
    boolean present_subjectAttributes = true && (isSetSubjectAttributes());
    builder.append(present_subjectAttributes);
    if (present_subjectAttributes)
      builder.append(subjectAttributes);
    boolean present_brandList = true && (isSetBrandList());
    builder.append(present_brandList);
    if (present_brandList)
      builder.append(brandList);
    return builder.toHashCode();
  }

  public int compareTo(SubjectInfoResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SubjectInfoResult typedOther = (SubjectInfoResult)other;

    lastComparison = Boolean.valueOf(isSetResult()).compareTo(typedOther.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = TBaseHelper.compareTo(this.result, typedOther.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubjectInfo()).compareTo(typedOther.isSetSubjectInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectInfo()) {
      lastComparison = TBaseHelper.compareTo(this.subjectInfo, typedOther.subjectInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubjectAttributes()).compareTo(typedOther.isSetSubjectAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectAttributes()) {
      lastComparison = TBaseHelper.compareTo(this.subjectAttributes, typedOther.subjectAttributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandList()).compareTo(typedOther.isSetBrandList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandList()) {
      lastComparison = TBaseHelper.compareTo(this.brandList, typedOther.brandList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // RESULT
          if (field.type == TType.STRUCT) {
            this.result = new com.jfshare.finagle.thrift.result.Result();
            this.result.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SUBJECT_INFO
          if (field.type == TType.STRUCT) {
            this.subjectInfo = new SubjectInfo();
            this.subjectInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SUBJECT_ATTRIBUTES
          if (field.type == TType.LIST) {
            {
            TList _list4 = iprot.readListBegin();
            this.subjectAttributes = new ArrayList<SubjectAttribute>(_list4.size);
            for (int _i5 = 0; _i5 < _list4.size; ++_i5)
            {
              SubjectAttribute _elem6;
              _elem6 = new SubjectAttribute();
              _elem6.read(iprot);
              this.subjectAttributes.add(_elem6);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // BRAND_LIST
          if (field.type == TType.LIST) {
            {
            TList _list7 = iprot.readListBegin();
            this.brandList = new ArrayList<com.jfshare.finagle.thrift.brand.BrandInfo>(_list7.size);
            for (int _i8 = 0; _i8 < _list7.size; ++_i8)
            {
              com.jfshare.finagle.thrift.brand.BrandInfo _elem9;
              _elem9 = new com.jfshare.finagle.thrift.brand.BrandInfo();
              _elem9.read(iprot);
              this.brandList.add(_elem9);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.result != null) {
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      this.result.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.subjectInfo != null) {
      oprot.writeFieldBegin(SUBJECT_INFO_FIELD_DESC);
      this.subjectInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.subjectAttributes != null) {
      oprot.writeFieldBegin(SUBJECT_ATTRIBUTES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.subjectAttributes.size()));
        for (SubjectAttribute _iter10 : this.subjectAttributes)
        {
          _iter10.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.brandList != null) {
      oprot.writeFieldBegin(BRAND_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.brandList.size()));
        for (com.jfshare.finagle.thrift.brand.BrandInfo _iter11 : this.brandList)
        {
          _iter11.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubjectInfoResult(");
    boolean first = true;
    sb.append("result:");
    if (this.result == null) {
      sb.append("null");
    } else {
      sb.append(this.result);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectInfo:");
    if (this.subjectInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.subjectInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectAttributes:");
    if (this.subjectAttributes == null) {
      sb.append("null");
    } else {
      sb.append(this.subjectAttributes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandList:");
    if (this.brandList == null) {
      sb.append("null");
    } else {
      sb.append(this.brandList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
