/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.subject;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;

import java.util.*;

// No additional import required for struct/union.

public class SubjectRefDisplayInfo implements TBase<SubjectRefDisplayInfo, SubjectRefDisplayInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SubjectRefDisplayInfo");

  private static final TField SUBJECT_ID_FIELD_DESC = new TField("subjectId", TType.I32, (short)1);
  private static final TField DISPLAY_ID_FIELD_DESC = new TField("displayId", TType.I32, (short)2);


  public int subjectId;
  public int displayId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUBJECT_ID((short)1, "subjectId"),
    DISPLAY_ID((short)2, "displayId");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUBJECT_ID
  	return SUBJECT_ID;
        case 2: // DISPLAY_ID
  	return DISPLAY_ID;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __SUBJECTID_ISSET_ID = 0;
  private static final int __DISPLAYID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUBJECT_ID, new FieldMetaData("subjectId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.DISPLAY_ID, new FieldMetaData("displayId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(SubjectRefDisplayInfo.class, metaDataMap);
  }


  public SubjectRefDisplayInfo() {
  }

  public SubjectRefDisplayInfo(
    int subjectId,
    int displayId)
  {
    this();
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);
    this.displayId = displayId;
    setDisplayIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubjectRefDisplayInfo(SubjectRefDisplayInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.subjectId = other.subjectId;
    this.displayId = other.displayId;
  }

  public SubjectRefDisplayInfo deepCopy() {
    return new SubjectRefDisplayInfo(this);
  }

  @Override
  public void clear() {
    setSubjectIdIsSet(false);
    this.subjectId = 0;
    setDisplayIdIsSet(false);
    this.displayId = 0;
  }

  public int getSubjectId() {
    return this.subjectId;
  }

  public SubjectRefDisplayInfo setSubjectId(int subjectId) {
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);

    return this;
  }

  public void unsetSubjectId() {
  __isset_bit_vector.clear(__SUBJECTID_ISSET_ID);
  }

  /** Returns true if field subjectId is set (has been asigned a value) and false otherwise */
  public boolean isSetSubjectId() {
    return __isset_bit_vector.get(__SUBJECTID_ISSET_ID);
  }

  public void setSubjectIdIsSet(boolean value) {
    __isset_bit_vector.set(__SUBJECTID_ISSET_ID, value);
  }

  public int getDisplayId() {
    return this.displayId;
  }

  public SubjectRefDisplayInfo setDisplayId(int displayId) {
    this.displayId = displayId;
    setDisplayIdIsSet(true);

    return this;
  }

  public void unsetDisplayId() {
  __isset_bit_vector.clear(__DISPLAYID_ISSET_ID);
  }

  /** Returns true if field displayId is set (has been asigned a value) and false otherwise */
  public boolean isSetDisplayId() {
    return __isset_bit_vector.get(__DISPLAYID_ISSET_ID);
  }

  public void setDisplayIdIsSet(boolean value) {
    __isset_bit_vector.set(__DISPLAYID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUBJECT_ID:
      if (value == null) {
        unsetSubjectId();
      } else {
        setSubjectId((Integer)value);
      }
      break;
    case DISPLAY_ID:
      if (value == null) {
        unsetDisplayId();
      } else {
        setDisplayId((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUBJECT_ID:
      return new Integer(getSubjectId());
    case DISPLAY_ID:
      return new Integer(getDisplayId());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUBJECT_ID:
      return isSetSubjectId();
    case DISPLAY_ID:
      return isSetDisplayId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubjectRefDisplayInfo)
      return this.equals((SubjectRefDisplayInfo)that);
    return false;
  }

  public boolean equals(SubjectRefDisplayInfo that) {
    if (that == null)
      return false;
    boolean this_present_subjectId = true;
    boolean that_present_subjectId = true;
    if (this_present_subjectId || that_present_subjectId) {
      if (!(this_present_subjectId && that_present_subjectId))
        return false;
      if (this.subjectId != that.subjectId)
        return false;
    }
    boolean this_present_displayId = true;
    boolean that_present_displayId = true;
    if (this_present_displayId || that_present_displayId) {
      if (!(this_present_displayId && that_present_displayId))
        return false;
      if (this.displayId != that.displayId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_subjectId = true;
    builder.append(present_subjectId);
    if (present_subjectId)
      builder.append(subjectId);
    boolean present_displayId = true;
    builder.append(present_displayId);
    if (present_displayId)
      builder.append(displayId);
    return builder.toHashCode();
  }

  public int compareTo(SubjectRefDisplayInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SubjectRefDisplayInfo typedOther = (SubjectRefDisplayInfo)other;

    lastComparison = Boolean.valueOf(isSetSubjectId()).compareTo(typedOther.isSetSubjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectId()) {
      lastComparison = TBaseHelper.compareTo(this.subjectId, typedOther.subjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayId()).compareTo(typedOther.isSetDisplayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayId()) {
      lastComparison = TBaseHelper.compareTo(this.displayId, typedOther.displayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // SUBJECT_ID
          if (field.type == TType.I32) {
            this.subjectId = iprot.readI32();
            setSubjectIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // DISPLAY_ID
          if (field.type == TType.I32) {
            this.displayId = iprot.readI32();
            setDisplayIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SUBJECT_ID_FIELD_DESC);
    oprot.writeI32(this.subjectId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DISPLAY_ID_FIELD_DESC);
    oprot.writeI32(this.displayId);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubjectRefDisplayInfo(");
    boolean first = true;
    sb.append("subjectId:");
    sb.append(this.subjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayId:");
    sb.append(this.displayId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
