/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.subject;

import org.apache.commons.lang.builder.HashCodeBuilder;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class SubjectAttribute implements TBase<SubjectAttribute, SubjectAttribute._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SubjectAttribute");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField SUBJECT_ID_FIELD_DESC = new TField("subjectId", TType.I32, (short)3);
  private static final TField REWRITE_ID_FIELD_DESC = new TField("rewriteId", TType.I32, (short)4);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.STRING, (short)5);
  private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)6);
  private static final TField BE_REQUIRED_FIELD_DESC = new TField("beRequired", TType.I32, (short)7);
  private static final TField IS_SKU_FIELD_DESC = new TField("isSku", TType.I32, (short)8);
  private static final TField DEMO_FIELD_DESC = new TField("demo", TType.STRING, (short)9);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.STRING, (short)10);
  private static final TField CREATOR_FIELD_DESC = new TField("creator", TType.I32, (short)11);
  private static final TField UPDATE_TIME_FIELD_DESC = new TField("updateTime", TType.STRING, (short)12);
  private static final TField UPDATER_FIELD_DESC = new TField("updater", TType.I32, (short)13);
  private static final TField DELETED_FIELD_DESC = new TField("deleted", TType.I32, (short)14);
  private static final TField EXT1_FIELD_DESC = new TField("ext1", TType.STRING, (short)15);
  private static final TField EXT2_FIELD_DESC = new TField("ext2", TType.STRING, (short)16);
  private static final TField EXT3_FIELD_DESC = new TField("ext3", TType.STRING, (short)17);
  private static final TField EXT4_FIELD_DESC = new TField("ext4", TType.STRING, (short)18);
  private static final TField EXT5_FIELD_DESC = new TField("ext5", TType.STRING, (short)19);
  private static final TField EXT6_FIELD_DESC = new TField("ext6", TType.STRING, (short)20);


  public int id;
  public String name;
  public int subjectId;
  public int rewriteId;
  public String type;
  public String value;
  public int beRequired;
  public int isSku;
  public String demo;
  public String createTime;
  public int creator;
  public String updateTime;
  public int updater;
  public int deleted;
  public String ext1;
  public String ext2;
  public String ext3;
  public String ext4;
  public String ext5;
  public String ext6;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    SUBJECT_ID((short)3, "subjectId"),
    REWRITE_ID((short)4, "rewriteId"),
    TYPE((short)5, "type"),
    VALUE((short)6, "value"),
    BE_REQUIRED((short)7, "beRequired"),
    IS_SKU((short)8, "isSku"),
    DEMO((short)9, "demo"),
    CREATE_TIME((short)10, "createTime"),
    CREATOR((short)11, "creator"),
    UPDATE_TIME((short)12, "updateTime"),
    UPDATER((short)13, "updater"),
    DELETED((short)14, "deleted"),
    EXT1((short)15, "ext1"),
    EXT2((short)16, "ext2"),
    EXT3((short)17, "ext3"),
    EXT4((short)18, "ext4"),
    EXT5((short)19, "ext5"),
    EXT6((short)20, "ext6");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
  	return ID;
        case 2: // NAME
  	return NAME;
        case 3: // SUBJECT_ID
  	return SUBJECT_ID;
        case 4: // REWRITE_ID
  	return REWRITE_ID;
        case 5: // TYPE
  	return TYPE;
        case 6: // VALUE
  	return VALUE;
        case 7: // BE_REQUIRED
  	return BE_REQUIRED;
        case 8: // IS_SKU
  	return IS_SKU;
        case 9: // DEMO
  	return DEMO;
        case 10: // CREATE_TIME
  	return CREATE_TIME;
        case 11: // CREATOR
  	return CREATOR;
        case 12: // UPDATE_TIME
  	return UPDATE_TIME;
        case 13: // UPDATER
  	return UPDATER;
        case 14: // DELETED
  	return DELETED;
        case 15: // EXT1
  	return EXT1;
        case 16: // EXT2
  	return EXT2;
        case 17: // EXT3
  	return EXT3;
        case 18: // EXT4
  	return EXT4;
        case 19: // EXT5
  	return EXT5;
        case 20: // EXT6
  	return EXT6;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SUBJECTID_ISSET_ID = 1;
  private static final int __REWRITEID_ISSET_ID = 2;
  private static final int __BEREQUIRED_ISSET_ID = 3;
  private static final int __ISSKU_ISSET_ID = 4;
  private static final int __CREATOR_ISSET_ID = 5;
  private static final int __UPDATER_ISSET_ID = 6;
  private static final int __DELETED_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SUBJECT_ID, new FieldMetaData("subjectId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.REWRITE_ID, new FieldMetaData("rewriteId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.BE_REQUIRED, new FieldMetaData("beRequired", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.IS_SKU, new FieldMetaData("isSku", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.DEMO, new FieldMetaData("demo", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATOR, new FieldMetaData("creator", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new FieldMetaData("updateTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.UPDATER, new FieldMetaData("updater", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.DELETED, new FieldMetaData("deleted", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.EXT1, new FieldMetaData("ext1", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXT2, new FieldMetaData("ext2", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXT3, new FieldMetaData("ext3", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXT4, new FieldMetaData("ext4", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXT5, new FieldMetaData("ext5", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXT6, new FieldMetaData("ext6", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(SubjectAttribute.class, metaDataMap);
  }


  public SubjectAttribute() {
  }

  public SubjectAttribute(
    int id,
    String name,
    int subjectId,
    int rewriteId,
    String type,
    String value,
    int beRequired,
    int isSku,
    String demo,
    String createTime,
    int creator,
    String updateTime,
    int updater,
    int deleted)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);
    this.rewriteId = rewriteId;
    setRewriteIdIsSet(true);
    this.type = type;
    this.value = value;
    this.beRequired = beRequired;
    setBeRequiredIsSet(true);
    this.isSku = isSku;
    setIsSkuIsSet(true);
    this.demo = demo;
    this.createTime = createTime;
    this.creator = creator;
    setCreatorIsSet(true);
    this.updateTime = updateTime;
    this.updater = updater;
    setUpdaterIsSet(true);
    this.deleted = deleted;
    setDeletedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubjectAttribute(SubjectAttribute other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.subjectId = other.subjectId;
    this.rewriteId = other.rewriteId;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    this.beRequired = other.beRequired;
    this.isSku = other.isSku;
    if (other.isSetDemo()) {
      this.demo = other.demo;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.creator = other.creator;
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.updater = other.updater;
    this.deleted = other.deleted;
    if (other.isSetExt1()) {
      this.ext1 = other.ext1;
    }
    if (other.isSetExt2()) {
      this.ext2 = other.ext2;
    }
    if (other.isSetExt3()) {
      this.ext3 = other.ext3;
    }
    if (other.isSetExt4()) {
      this.ext4 = other.ext4;
    }
    if (other.isSetExt5()) {
      this.ext5 = other.ext5;
    }
    if (other.isSetExt6()) {
      this.ext6 = other.ext6;
    }
  }

  public SubjectAttribute deepCopy() {
    return new SubjectAttribute(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setSubjectIdIsSet(false);
    this.subjectId = 0;
    setRewriteIdIsSet(false);
    this.rewriteId = 0;
    this.type = null;
    this.value = null;
    setBeRequiredIsSet(false);
    this.beRequired = 0;
    setIsSkuIsSet(false);
    this.isSku = 0;
    this.demo = null;
    this.createTime = null;
    setCreatorIsSet(false);
    this.creator = 0;
    this.updateTime = null;
    setUpdaterIsSet(false);
    this.updater = 0;
    setDeletedIsSet(false);
    this.deleted = 0;
    this.ext1 = null;
    this.ext2 = null;
    this.ext3 = null;
    this.ext4 = null;
    this.ext5 = null;
    this.ext6 = null;
  }

  public int getId() {
    return this.id;
  }

  public SubjectAttribute setId(int id) {
    this.id = id;
    setIdIsSet(true);

    return this;
  }

  public void unsetId() {
  __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public SubjectAttribute setName(String name) {
    this.name = name;
    
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getSubjectId() {
    return this.subjectId;
  }

  public SubjectAttribute setSubjectId(int subjectId) {
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);

    return this;
  }

  public void unsetSubjectId() {
  __isset_bit_vector.clear(__SUBJECTID_ISSET_ID);
  }

  /** Returns true if field subjectId is set (has been asigned a value) and false otherwise */
  public boolean isSetSubjectId() {
    return __isset_bit_vector.get(__SUBJECTID_ISSET_ID);
  }

  public void setSubjectIdIsSet(boolean value) {
    __isset_bit_vector.set(__SUBJECTID_ISSET_ID, value);
  }

  public int getRewriteId() {
    return this.rewriteId;
  }

  public SubjectAttribute setRewriteId(int rewriteId) {
    this.rewriteId = rewriteId;
    setRewriteIdIsSet(true);

    return this;
  }

  public void unsetRewriteId() {
  __isset_bit_vector.clear(__REWRITEID_ISSET_ID);
  }

  /** Returns true if field rewriteId is set (has been asigned a value) and false otherwise */
  public boolean isSetRewriteId() {
    return __isset_bit_vector.get(__REWRITEID_ISSET_ID);
  }

  public void setRewriteIdIsSet(boolean value) {
    __isset_bit_vector.set(__REWRITEID_ISSET_ID, value);
  }

  public String getType() {
    return this.type;
  }

  public SubjectAttribute setType(String type) {
    this.type = type;
    
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been asigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getValue() {
    return this.value;
  }

  public SubjectAttribute setValue(String value) {
    this.value = value;
    
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been asigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public int getBeRequired() {
    return this.beRequired;
  }

  public SubjectAttribute setBeRequired(int beRequired) {
    this.beRequired = beRequired;
    setBeRequiredIsSet(true);

    return this;
  }

  public void unsetBeRequired() {
  __isset_bit_vector.clear(__BEREQUIRED_ISSET_ID);
  }

  /** Returns true if field beRequired is set (has been asigned a value) and false otherwise */
  public boolean isSetBeRequired() {
    return __isset_bit_vector.get(__BEREQUIRED_ISSET_ID);
  }

  public void setBeRequiredIsSet(boolean value) {
    __isset_bit_vector.set(__BEREQUIRED_ISSET_ID, value);
  }

  public int getIsSku() {
    return this.isSku;
  }

  public SubjectAttribute setIsSku(int isSku) {
    this.isSku = isSku;
    setIsSkuIsSet(true);

    return this;
  }

  public void unsetIsSku() {
  __isset_bit_vector.clear(__ISSKU_ISSET_ID);
  }

  /** Returns true if field isSku is set (has been asigned a value) and false otherwise */
  public boolean isSetIsSku() {
    return __isset_bit_vector.get(__ISSKU_ISSET_ID);
  }

  public void setIsSkuIsSet(boolean value) {
    __isset_bit_vector.set(__ISSKU_ISSET_ID, value);
  }

  public String getDemo() {
    return this.demo;
  }

  public SubjectAttribute setDemo(String demo) {
    this.demo = demo;
    
    return this;
  }

  public void unsetDemo() {
    this.demo = null;
  }

  /** Returns true if field demo is set (has been asigned a value) and false otherwise */
  public boolean isSetDemo() {
    return this.demo != null;
  }

  public void setDemoIsSet(boolean value) {
    if (!value) {
      this.demo = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public SubjectAttribute setCreateTime(String createTime) {
    this.createTime = createTime;
    
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getCreator() {
    return this.creator;
  }

  public SubjectAttribute setCreator(int creator) {
    this.creator = creator;
    setCreatorIsSet(true);

    return this;
  }

  public void unsetCreator() {
  __isset_bit_vector.clear(__CREATOR_ISSET_ID);
  }

  /** Returns true if field creator is set (has been asigned a value) and false otherwise */
  public boolean isSetCreator() {
    return __isset_bit_vector.get(__CREATOR_ISSET_ID);
  }

  public void setCreatorIsSet(boolean value) {
    __isset_bit_vector.set(__CREATOR_ISSET_ID, value);
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public SubjectAttribute setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public int getUpdater() {
    return this.updater;
  }

  public SubjectAttribute setUpdater(int updater) {
    this.updater = updater;
    setUpdaterIsSet(true);

    return this;
  }

  public void unsetUpdater() {
  __isset_bit_vector.clear(__UPDATER_ISSET_ID);
  }

  /** Returns true if field updater is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdater() {
    return __isset_bit_vector.get(__UPDATER_ISSET_ID);
  }

  public void setUpdaterIsSet(boolean value) {
    __isset_bit_vector.set(__UPDATER_ISSET_ID, value);
  }

  public int getDeleted() {
    return this.deleted;
  }

  public SubjectAttribute setDeleted(int deleted) {
    this.deleted = deleted;
    setDeletedIsSet(true);

    return this;
  }

  public void unsetDeleted() {
  __isset_bit_vector.clear(__DELETED_ISSET_ID);
  }

  /** Returns true if field deleted is set (has been asigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return __isset_bit_vector.get(__DELETED_ISSET_ID);
  }

  public void setDeletedIsSet(boolean value) {
    __isset_bit_vector.set(__DELETED_ISSET_ID, value);
  }

  public String getExt1() {
    return this.ext1;
  }

  public SubjectAttribute setExt1(String ext1) {
    this.ext1 = ext1;
    
    return this;
  }

  public void unsetExt1() {
    this.ext1 = null;
  }

  /** Returns true if field ext1 is set (has been asigned a value) and false otherwise */
  public boolean isSetExt1() {
    return this.ext1 != null;
  }

  public void setExt1IsSet(boolean value) {
    if (!value) {
      this.ext1 = null;
    }
  }

  public String getExt2() {
    return this.ext2;
  }

  public SubjectAttribute setExt2(String ext2) {
    this.ext2 = ext2;
    
    return this;
  }

  public void unsetExt2() {
    this.ext2 = null;
  }

  /** Returns true if field ext2 is set (has been asigned a value) and false otherwise */
  public boolean isSetExt2() {
    return this.ext2 != null;
  }

  public void setExt2IsSet(boolean value) {
    if (!value) {
      this.ext2 = null;
    }
  }

  public String getExt3() {
    return this.ext3;
  }

  public SubjectAttribute setExt3(String ext3) {
    this.ext3 = ext3;
    
    return this;
  }

  public void unsetExt3() {
    this.ext3 = null;
  }

  /** Returns true if field ext3 is set (has been asigned a value) and false otherwise */
  public boolean isSetExt3() {
    return this.ext3 != null;
  }

  public void setExt3IsSet(boolean value) {
    if (!value) {
      this.ext3 = null;
    }
  }

  public String getExt4() {
    return this.ext4;
  }

  public SubjectAttribute setExt4(String ext4) {
    this.ext4 = ext4;
    
    return this;
  }

  public void unsetExt4() {
    this.ext4 = null;
  }

  /** Returns true if field ext4 is set (has been asigned a value) and false otherwise */
  public boolean isSetExt4() {
    return this.ext4 != null;
  }

  public void setExt4IsSet(boolean value) {
    if (!value) {
      this.ext4 = null;
    }
  }

  public String getExt5() {
    return this.ext5;
  }

  public SubjectAttribute setExt5(String ext5) {
    this.ext5 = ext5;
    
    return this;
  }

  public void unsetExt5() {
    this.ext5 = null;
  }

  /** Returns true if field ext5 is set (has been asigned a value) and false otherwise */
  public boolean isSetExt5() {
    return this.ext5 != null;
  }

  public void setExt5IsSet(boolean value) {
    if (!value) {
      this.ext5 = null;
    }
  }

  public String getExt6() {
    return this.ext6;
  }

  public SubjectAttribute setExt6(String ext6) {
    this.ext6 = ext6;
    
    return this;
  }

  public void unsetExt6() {
    this.ext6 = null;
  }

  /** Returns true if field ext6 is set (has been asigned a value) and false otherwise */
  public boolean isSetExt6() {
    return this.ext6 != null;
  }

  public void setExt6IsSet(boolean value) {
    if (!value) {
      this.ext6 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;
    case SUBJECT_ID:
      if (value == null) {
        unsetSubjectId();
      } else {
        setSubjectId((Integer)value);
      }
      break;
    case REWRITE_ID:
      if (value == null) {
        unsetRewriteId();
      } else {
        setRewriteId((Integer)value);
      }
      break;
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;
    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;
    case BE_REQUIRED:
      if (value == null) {
        unsetBeRequired();
      } else {
        setBeRequired((Integer)value);
      }
      break;
    case IS_SKU:
      if (value == null) {
        unsetIsSku();
      } else {
        setIsSku((Integer)value);
      }
      break;
    case DEMO:
      if (value == null) {
        unsetDemo();
      } else {
        setDemo((String)value);
      }
      break;
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;
    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((Integer)value);
      }
      break;
    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;
    case UPDATER:
      if (value == null) {
        unsetUpdater();
      } else {
        setUpdater((Integer)value);
      }
      break;
    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((Integer)value);
      }
      break;
    case EXT1:
      if (value == null) {
        unsetExt1();
      } else {
        setExt1((String)value);
      }
      break;
    case EXT2:
      if (value == null) {
        unsetExt2();
      } else {
        setExt2((String)value);
      }
      break;
    case EXT3:
      if (value == null) {
        unsetExt3();
      } else {
        setExt3((String)value);
      }
      break;
    case EXT4:
      if (value == null) {
        unsetExt4();
      } else {
        setExt4((String)value);
      }
      break;
    case EXT5:
      if (value == null) {
        unsetExt5();
      } else {
        setExt5((String)value);
      }
      break;
    case EXT6:
      if (value == null) {
        unsetExt6();
      } else {
        setExt6((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Integer(getId());
    case NAME:
      return getName();
    case SUBJECT_ID:
      return new Integer(getSubjectId());
    case REWRITE_ID:
      return new Integer(getRewriteId());
    case TYPE:
      return getType();
    case VALUE:
      return getValue();
    case BE_REQUIRED:
      return new Integer(getBeRequired());
    case IS_SKU:
      return new Integer(getIsSku());
    case DEMO:
      return getDemo();
    case CREATE_TIME:
      return getCreateTime();
    case CREATOR:
      return new Integer(getCreator());
    case UPDATE_TIME:
      return getUpdateTime();
    case UPDATER:
      return new Integer(getUpdater());
    case DELETED:
      return new Integer(getDeleted());
    case EXT1:
      return getExt1();
    case EXT2:
      return getExt2();
    case EXT3:
      return getExt3();
    case EXT4:
      return getExt4();
    case EXT5:
      return getExt5();
    case EXT6:
      return getExt6();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case SUBJECT_ID:
      return isSetSubjectId();
    case REWRITE_ID:
      return isSetRewriteId();
    case TYPE:
      return isSetType();
    case VALUE:
      return isSetValue();
    case BE_REQUIRED:
      return isSetBeRequired();
    case IS_SKU:
      return isSetIsSku();
    case DEMO:
      return isSetDemo();
    case CREATE_TIME:
      return isSetCreateTime();
    case CREATOR:
      return isSetCreator();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case UPDATER:
      return isSetUpdater();
    case DELETED:
      return isSetDeleted();
    case EXT1:
      return isSetExt1();
    case EXT2:
      return isSetExt2();
    case EXT3:
      return isSetExt3();
    case EXT4:
      return isSetExt4();
    case EXT5:
      return isSetExt5();
    case EXT6:
      return isSetExt6();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubjectAttribute)
      return this.equals((SubjectAttribute)that);
    return false;
  }

  public boolean equals(SubjectAttribute that) {
    if (that == null)
      return false;
    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }
    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }
    boolean this_present_subjectId = true;
    boolean that_present_subjectId = true;
    if (this_present_subjectId || that_present_subjectId) {
      if (!(this_present_subjectId && that_present_subjectId))
        return false;
      if (this.subjectId != that.subjectId)
        return false;
    }
    boolean this_present_rewriteId = true;
    boolean that_present_rewriteId = true;
    if (this_present_rewriteId || that_present_rewriteId) {
      if (!(this_present_rewriteId && that_present_rewriteId))
        return false;
      if (this.rewriteId != that.rewriteId)
        return false;
    }
    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }
    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }
    boolean this_present_beRequired = true;
    boolean that_present_beRequired = true;
    if (this_present_beRequired || that_present_beRequired) {
      if (!(this_present_beRequired && that_present_beRequired))
        return false;
      if (this.beRequired != that.beRequired)
        return false;
    }
    boolean this_present_isSku = true;
    boolean that_present_isSku = true;
    if (this_present_isSku || that_present_isSku) {
      if (!(this_present_isSku && that_present_isSku))
        return false;
      if (this.isSku != that.isSku)
        return false;
    }
    boolean this_present_demo = true && this.isSetDemo();
    boolean that_present_demo = true && that.isSetDemo();
    if (this_present_demo || that_present_demo) {
      if (!(this_present_demo && that_present_demo))
        return false;
      if (!this.demo.equals(that.demo))
        return false;
    }
    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }
    boolean this_present_creator = true;
    boolean that_present_creator = true;
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (this.creator != that.creator)
        return false;
    }
    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }
    boolean this_present_updater = true;
    boolean that_present_updater = true;
    if (this_present_updater || that_present_updater) {
      if (!(this_present_updater && that_present_updater))
        return false;
      if (this.updater != that.updater)
        return false;
    }
    boolean this_present_deleted = true;
    boolean that_present_deleted = true;
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (this.deleted != that.deleted)
        return false;
    }
    boolean this_present_ext1 = true && this.isSetExt1();
    boolean that_present_ext1 = true && that.isSetExt1();
    if (this_present_ext1 || that_present_ext1) {
      if (!(this_present_ext1 && that_present_ext1))
        return false;
      if (!this.ext1.equals(that.ext1))
        return false;
    }
    boolean this_present_ext2 = true && this.isSetExt2();
    boolean that_present_ext2 = true && that.isSetExt2();
    if (this_present_ext2 || that_present_ext2) {
      if (!(this_present_ext2 && that_present_ext2))
        return false;
      if (!this.ext2.equals(that.ext2))
        return false;
    }
    boolean this_present_ext3 = true && this.isSetExt3();
    boolean that_present_ext3 = true && that.isSetExt3();
    if (this_present_ext3 || that_present_ext3) {
      if (!(this_present_ext3 && that_present_ext3))
        return false;
      if (!this.ext3.equals(that.ext3))
        return false;
    }
    boolean this_present_ext4 = true && this.isSetExt4();
    boolean that_present_ext4 = true && that.isSetExt4();
    if (this_present_ext4 || that_present_ext4) {
      if (!(this_present_ext4 && that_present_ext4))
        return false;
      if (!this.ext4.equals(that.ext4))
        return false;
    }
    boolean this_present_ext5 = true && this.isSetExt5();
    boolean that_present_ext5 = true && that.isSetExt5();
    if (this_present_ext5 || that_present_ext5) {
      if (!(this_present_ext5 && that_present_ext5))
        return false;
      if (!this.ext5.equals(that.ext5))
        return false;
    }
    boolean this_present_ext6 = true && this.isSetExt6();
    boolean that_present_ext6 = true && that.isSetExt6();
    if (this_present_ext6 || that_present_ext6) {
      if (!(this_present_ext6 && that_present_ext6))
        return false;
      if (!this.ext6.equals(that.ext6))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);
    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);
    boolean present_subjectId = true;
    builder.append(present_subjectId);
    if (present_subjectId)
      builder.append(subjectId);
    boolean present_rewriteId = true;
    builder.append(present_rewriteId);
    if (present_rewriteId)
      builder.append(rewriteId);
    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type);
    boolean present_value = true && (isSetValue());
    builder.append(present_value);
    if (present_value)
      builder.append(value);
    boolean present_beRequired = true;
    builder.append(present_beRequired);
    if (present_beRequired)
      builder.append(beRequired);
    boolean present_isSku = true;
    builder.append(present_isSku);
    if (present_isSku)
      builder.append(isSku);
    boolean present_demo = true && (isSetDemo());
    builder.append(present_demo);
    if (present_demo)
      builder.append(demo);
    boolean present_createTime = true && (isSetCreateTime());
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);
    boolean present_creator = true;
    builder.append(present_creator);
    if (present_creator)
      builder.append(creator);
    boolean present_updateTime = true && (isSetUpdateTime());
    builder.append(present_updateTime);
    if (present_updateTime)
      builder.append(updateTime);
    boolean present_updater = true;
    builder.append(present_updater);
    if (present_updater)
      builder.append(updater);
    boolean present_deleted = true;
    builder.append(present_deleted);
    if (present_deleted)
      builder.append(deleted);
    boolean present_ext1 = true && (isSetExt1());
    builder.append(present_ext1);
    if (present_ext1)
      builder.append(ext1);
    boolean present_ext2 = true && (isSetExt2());
    builder.append(present_ext2);
    if (present_ext2)
      builder.append(ext2);
    boolean present_ext3 = true && (isSetExt3());
    builder.append(present_ext3);
    if (present_ext3)
      builder.append(ext3);
    boolean present_ext4 = true && (isSetExt4());
    builder.append(present_ext4);
    if (present_ext4)
      builder.append(ext4);
    boolean present_ext5 = true && (isSetExt5());
    builder.append(present_ext5);
    if (present_ext5)
      builder.append(ext5);
    boolean present_ext6 = true && (isSetExt6());
    builder.append(present_ext6);
    if (present_ext6)
      builder.append(ext6);
    return builder.toHashCode();
  }

  public int compareTo(SubjectAttribute other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SubjectAttribute typedOther = (SubjectAttribute)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubjectId()).compareTo(typedOther.isSetSubjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectId()) {
      lastComparison = TBaseHelper.compareTo(this.subjectId, typedOther.subjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRewriteId()).compareTo(typedOther.isSetRewriteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRewriteId()) {
      lastComparison = TBaseHelper.compareTo(this.rewriteId, typedOther.rewriteId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeRequired()).compareTo(typedOther.isSetBeRequired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeRequired()) {
      lastComparison = TBaseHelper.compareTo(this.beRequired, typedOther.beRequired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSku()).compareTo(typedOther.isSetIsSku());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSku()) {
      lastComparison = TBaseHelper.compareTo(this.isSku, typedOther.isSku);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDemo()).compareTo(typedOther.isSetDemo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDemo()) {
      lastComparison = TBaseHelper.compareTo(this.demo, typedOther.demo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(typedOther.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = TBaseHelper.compareTo(this.creator, typedOther.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdater()).compareTo(typedOther.isSetUpdater());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdater()) {
      lastComparison = TBaseHelper.compareTo(this.updater, typedOther.updater);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted()).compareTo(typedOther.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = TBaseHelper.compareTo(this.deleted, typedOther.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt1()).compareTo(typedOther.isSetExt1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt1()) {
      lastComparison = TBaseHelper.compareTo(this.ext1, typedOther.ext1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt2()).compareTo(typedOther.isSetExt2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt2()) {
      lastComparison = TBaseHelper.compareTo(this.ext2, typedOther.ext2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt3()).compareTo(typedOther.isSetExt3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt3()) {
      lastComparison = TBaseHelper.compareTo(this.ext3, typedOther.ext3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt4()).compareTo(typedOther.isSetExt4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt4()) {
      lastComparison = TBaseHelper.compareTo(this.ext4, typedOther.ext4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt5()).compareTo(typedOther.isSetExt5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt5()) {
      lastComparison = TBaseHelper.compareTo(this.ext5, typedOther.ext5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt6()).compareTo(typedOther.isSetExt6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt6()) {
      lastComparison = TBaseHelper.compareTo(this.ext6, typedOther.ext6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SUBJECT_ID
          if (field.type == TType.I32) {
            this.subjectId = iprot.readI32();
            setSubjectIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // REWRITE_ID
          if (field.type == TType.I32) {
            this.rewriteId = iprot.readI32();
            setRewriteIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // TYPE
          if (field.type == TType.STRING) {
            this.type = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // VALUE
          if (field.type == TType.STRING) {
            this.value = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // BE_REQUIRED
          if (field.type == TType.I32) {
            this.beRequired = iprot.readI32();
            setBeRequiredIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // IS_SKU
          if (field.type == TType.I32) {
            this.isSku = iprot.readI32();
            setIsSkuIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // DEMO
          if (field.type == TType.STRING) {
            this.demo = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // CREATE_TIME
          if (field.type == TType.STRING) {
            this.createTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // CREATOR
          if (field.type == TType.I32) {
            this.creator = iprot.readI32();
            setCreatorIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // UPDATE_TIME
          if (field.type == TType.STRING) {
            this.updateTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // UPDATER
          if (field.type == TType.I32) {
            this.updater = iprot.readI32();
            setUpdaterIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // DELETED
          if (field.type == TType.I32) {
            this.deleted = iprot.readI32();
            setDeletedIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // EXT1
          if (field.type == TType.STRING) {
            this.ext1 = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // EXT2
          if (field.type == TType.STRING) {
            this.ext2 = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // EXT3
          if (field.type == TType.STRING) {
            this.ext3 = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // EXT4
          if (field.type == TType.STRING) {
            this.ext4 = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 19: // EXT5
          if (field.type == TType.STRING) {
            this.ext5 = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // EXT6
          if (field.type == TType.STRING) {
            this.ext6 = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SUBJECT_ID_FIELD_DESC);
    oprot.writeI32(this.subjectId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(REWRITE_ID_FIELD_DESC);
    oprot.writeI32(this.rewriteId);
    oprot.writeFieldEnd();
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeString(this.type);
      oprot.writeFieldEnd();
    }
    if (this.value != null) {
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeString(this.value);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(BE_REQUIRED_FIELD_DESC);
    oprot.writeI32(this.beRequired);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(IS_SKU_FIELD_DESC);
    oprot.writeI32(this.isSku);
    oprot.writeFieldEnd();
    if (this.demo != null) {
      oprot.writeFieldBegin(DEMO_FIELD_DESC);
      oprot.writeString(this.demo);
      oprot.writeFieldEnd();
    }
    if (this.createTime != null) {
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeString(this.createTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CREATOR_FIELD_DESC);
    oprot.writeI32(this.creator);
    oprot.writeFieldEnd();
    if (this.updateTime != null) {
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeString(this.updateTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(UPDATER_FIELD_DESC);
    oprot.writeI32(this.updater);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DELETED_FIELD_DESC);
    oprot.writeI32(this.deleted);
    oprot.writeFieldEnd();
    if (this.ext1 != null) {
      if (isSetExt1()) {
        oprot.writeFieldBegin(EXT1_FIELD_DESC);
        oprot.writeString(this.ext1);
        oprot.writeFieldEnd();
      }
    }
    if (this.ext2 != null) {
      if (isSetExt2()) {
        oprot.writeFieldBegin(EXT2_FIELD_DESC);
        oprot.writeString(this.ext2);
        oprot.writeFieldEnd();
      }
    }
    if (this.ext3 != null) {
      if (isSetExt3()) {
        oprot.writeFieldBegin(EXT3_FIELD_DESC);
        oprot.writeString(this.ext3);
        oprot.writeFieldEnd();
      }
    }
    if (this.ext4 != null) {
      if (isSetExt4()) {
        oprot.writeFieldBegin(EXT4_FIELD_DESC);
        oprot.writeString(this.ext4);
        oprot.writeFieldEnd();
      }
    }
    if (this.ext5 != null) {
      if (isSetExt5()) {
        oprot.writeFieldBegin(EXT5_FIELD_DESC);
        oprot.writeString(this.ext5);
        oprot.writeFieldEnd();
      }
    }
    if (this.ext6 != null) {
      if (isSetExt6()) {
        oprot.writeFieldBegin(EXT6_FIELD_DESC);
        oprot.writeString(this.ext6);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubjectAttribute(");
    boolean first = true;
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectId:");
    sb.append(this.subjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rewriteId:");
    sb.append(this.rewriteId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beRequired:");
    sb.append(this.beRequired);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSku:");
    sb.append(this.isSku);
    first = false;
    if (!first) sb.append(", ");
    sb.append("demo:");
    if (this.demo == null) {
      sb.append("null");
    } else {
      sb.append(this.demo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creator:");
    sb.append(this.creator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    if (this.updateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updater:");
    sb.append(this.updater);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deleted:");
    sb.append(this.deleted);
    first = false;
    if (isSetExt1()) {
      if (!first) sb.append(", ");
      sb.append("ext1:");
      if (this.ext1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ext1);
      }
      first = false;
      }
    if (isSetExt2()) {
      if (!first) sb.append(", ");
      sb.append("ext2:");
      if (this.ext2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ext2);
      }
      first = false;
      }
    if (isSetExt3()) {
      if (!first) sb.append(", ");
      sb.append("ext3:");
      if (this.ext3 == null) {
        sb.append("null");
      } else {
        sb.append(this.ext3);
      }
      first = false;
      }
    if (isSetExt4()) {
      if (!first) sb.append(", ");
      sb.append("ext4:");
      if (this.ext4 == null) {
        sb.append("null");
      } else {
        sb.append(this.ext4);
      }
      first = false;
      }
    if (isSetExt5()) {
      if (!first) sb.append(", ");
      sb.append("ext5:");
      if (this.ext5 == null) {
        sb.append("null");
      } else {
        sb.append(this.ext5);
      }
      first = false;
      }
    if (isSetExt6()) {
      if (!first) sb.append(", ");
      sb.append("ext6:");
      if (this.ext6 == null) {
        sb.append("null");
      } else {
        sb.append(this.ext6);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
