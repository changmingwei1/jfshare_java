/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.brand;

import org.apache.commons.lang.builder.HashCodeBuilder;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class BrandInfo implements TBase<BrandInfo, BrandInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BrandInfo");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField IMG_KEY_FIELD_DESC = new TField("imgKey", TType.STRING, (short)3);
  private static final TField URL_FIELD_DESC = new TField("url", TType.STRING, (short)4);
  private static final TField SERIAL_FIELD_DESC = new TField("serial", TType.I32, (short)5);
  private static final TField REMARK_FIELD_DESC = new TField("remark", TType.STRING, (short)6);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.STRING, (short)7);
  private static final TField CREATE_ID_FIELD_DESC = new TField("createId", TType.I32, (short)8);
  private static final TField LAST_UPDATE_TIME_FIELD_DESC = new TField("lastUpdateTime", TType.STRING, (short)9);
  private static final TField LAST_UPDATE_ID_FIELD_DESC = new TField("lastUpdateId", TType.I32, (short)10);
  private static final TField STATE_FIELD_DESC = new TField("state", TType.I32, (short)11);


  public int id;
  public String name;
  public String imgKey;
  public String url;
  public int serial;
  public String remark;
  public String createTime;
  public int createId;
  public String lastUpdateTime;
  public int lastUpdateId;
  public int state;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    IMG_KEY((short)3, "imgKey"),
    URL((short)4, "url"),
    SERIAL((short)5, "serial"),
    REMARK((short)6, "remark"),
    CREATE_TIME((short)7, "createTime"),
    CREATE_ID((short)8, "createId"),
    LAST_UPDATE_TIME((short)9, "lastUpdateTime"),
    LAST_UPDATE_ID((short)10, "lastUpdateId"),
    STATE((short)11, "state");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
  	return ID;
        case 2: // NAME
  	return NAME;
        case 3: // IMG_KEY
  	return IMG_KEY;
        case 4: // URL
  	return URL;
        case 5: // SERIAL
  	return SERIAL;
        case 6: // REMARK
  	return REMARK;
        case 7: // CREATE_TIME
  	return CREATE_TIME;
        case 8: // CREATE_ID
  	return CREATE_ID;
        case 9: // LAST_UPDATE_TIME
  	return LAST_UPDATE_TIME;
        case 10: // LAST_UPDATE_ID
  	return LAST_UPDATE_ID;
        case 11: // STATE
  	return STATE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SERIAL_ISSET_ID = 1;
  private static final int __CREATEID_ISSET_ID = 2;
  private static final int __LASTUPDATEID_ISSET_ID = 3;
  private static final int __STATE_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.IMG_KEY, new FieldMetaData("imgKey", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.URL, new FieldMetaData("url", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SERIAL, new FieldMetaData("serial", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.REMARK, new FieldMetaData("remark", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_ID, new FieldMetaData("createId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new FieldMetaData("lastUpdateTime", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_ID, new FieldMetaData("lastUpdateId", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.STATE, new FieldMetaData("state", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BrandInfo.class, metaDataMap);
  }


  public BrandInfo() {
  }

  public BrandInfo(
    int id,
    String name)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BrandInfo(BrandInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetImgKey()) {
      this.imgKey = other.imgKey;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.serial = other.serial;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.createId = other.createId;
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
    this.lastUpdateId = other.lastUpdateId;
    this.state = other.state;
  }

  public BrandInfo deepCopy() {
    return new BrandInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.imgKey = null;
    this.url = null;
    setSerialIsSet(false);
    this.serial = 0;
    this.remark = null;
    this.createTime = null;
    setCreateIdIsSet(false);
    this.createId = 0;
    this.lastUpdateTime = null;
    setLastUpdateIdIsSet(false);
    this.lastUpdateId = 0;
    setStateIsSet(false);
    this.state = 0;
  }

  public int getId() {
    return this.id;
  }

  public BrandInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);

    return this;
  }

  public void unsetId() {
  __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public BrandInfo setName(String name) {
    this.name = name;
    
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getImgKey() {
    return this.imgKey;
  }

  public BrandInfo setImgKey(String imgKey) {
    this.imgKey = imgKey;
    
    return this;
  }

  public void unsetImgKey() {
    this.imgKey = null;
  }

  /** Returns true if field imgKey is set (has been asigned a value) and false otherwise */
  public boolean isSetImgKey() {
    return this.imgKey != null;
  }

  public void setImgKeyIsSet(boolean value) {
    if (!value) {
      this.imgKey = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public BrandInfo setUrl(String url) {
    this.url = url;
    
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been asigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public int getSerial() {
    return this.serial;
  }

  public BrandInfo setSerial(int serial) {
    this.serial = serial;
    setSerialIsSet(true);

    return this;
  }

  public void unsetSerial() {
  __isset_bit_vector.clear(__SERIAL_ISSET_ID);
  }

  /** Returns true if field serial is set (has been asigned a value) and false otherwise */
  public boolean isSetSerial() {
    return __isset_bit_vector.get(__SERIAL_ISSET_ID);
  }

  public void setSerialIsSet(boolean value) {
    __isset_bit_vector.set(__SERIAL_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public BrandInfo setRemark(String remark) {
    this.remark = remark;
    
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been asigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public BrandInfo setCreateTime(String createTime) {
    this.createTime = createTime;
    
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getCreateId() {
    return this.createId;
  }

  public BrandInfo setCreateId(int createId) {
    this.createId = createId;
    setCreateIdIsSet(true);

    return this;
  }

  public void unsetCreateId() {
  __isset_bit_vector.clear(__CREATEID_ISSET_ID);
  }

  /** Returns true if field createId is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateId() {
    return __isset_bit_vector.get(__CREATEID_ISSET_ID);
  }

  public void setCreateIdIsSet(boolean value) {
    __isset_bit_vector.set(__CREATEID_ISSET_ID, value);
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public BrandInfo setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been asigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public int getLastUpdateId() {
    return this.lastUpdateId;
  }

  public BrandInfo setLastUpdateId(int lastUpdateId) {
    this.lastUpdateId = lastUpdateId;
    setLastUpdateIdIsSet(true);

    return this;
  }

  public void unsetLastUpdateId() {
  __isset_bit_vector.clear(__LASTUPDATEID_ISSET_ID);
  }

  /** Returns true if field lastUpdateId is set (has been asigned a value) and false otherwise */
  public boolean isSetLastUpdateId() {
    return __isset_bit_vector.get(__LASTUPDATEID_ISSET_ID);
  }

  public void setLastUpdateIdIsSet(boolean value) {
    __isset_bit_vector.set(__LASTUPDATEID_ISSET_ID, value);
  }

  public int getState() {
    return this.state;
  }

  public BrandInfo setState(int state) {
    this.state = state;
    setStateIsSet(true);

    return this;
  }

  public void unsetState() {
  __isset_bit_vector.clear(__STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been asigned a value) and false otherwise */
  public boolean isSetState() {
    return __isset_bit_vector.get(__STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bit_vector.set(__STATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;
    case IMG_KEY:
      if (value == null) {
        unsetImgKey();
      } else {
        setImgKey((String)value);
      }
      break;
    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;
    case SERIAL:
      if (value == null) {
        unsetSerial();
      } else {
        setSerial((Integer)value);
      }
      break;
    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;
    case CREATE_ID:
      if (value == null) {
        unsetCreateId();
      } else {
        setCreateId((Integer)value);
      }
      break;
    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;
    case LAST_UPDATE_ID:
      if (value == null) {
        unsetLastUpdateId();
      } else {
        setLastUpdateId((Integer)value);
      }
      break;
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Integer(getId());
    case NAME:
      return getName();
    case IMG_KEY:
      return getImgKey();
    case URL:
      return getUrl();
    case SERIAL:
      return new Integer(getSerial());
    case REMARK:
      return getRemark();
    case CREATE_TIME:
      return getCreateTime();
    case CREATE_ID:
      return new Integer(getCreateId());
    case LAST_UPDATE_TIME:
      return getLastUpdateTime();
    case LAST_UPDATE_ID:
      return new Integer(getLastUpdateId());
    case STATE:
      return new Integer(getState());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case IMG_KEY:
      return isSetImgKey();
    case URL:
      return isSetUrl();
    case SERIAL:
      return isSetSerial();
    case REMARK:
      return isSetRemark();
    case CREATE_TIME:
      return isSetCreateTime();
    case CREATE_ID:
      return isSetCreateId();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    case LAST_UPDATE_ID:
      return isSetLastUpdateId();
    case STATE:
      return isSetState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BrandInfo)
      return this.equals((BrandInfo)that);
    return false;
  }

  public boolean equals(BrandInfo that) {
    if (that == null)
      return false;
    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }
    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }
    boolean this_present_imgKey = true && this.isSetImgKey();
    boolean that_present_imgKey = true && that.isSetImgKey();
    if (this_present_imgKey || that_present_imgKey) {
      if (!(this_present_imgKey && that_present_imgKey))
        return false;
      if (!this.imgKey.equals(that.imgKey))
        return false;
    }
    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }
    boolean this_present_serial = true && this.isSetSerial();
    boolean that_present_serial = true && that.isSetSerial();
    if (this_present_serial || that_present_serial) {
      if (!(this_present_serial && that_present_serial))
        return false;
      if (this.serial != that.serial)
        return false;
    }
    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }
    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }
    boolean this_present_createId = true && this.isSetCreateId();
    boolean that_present_createId = true && that.isSetCreateId();
    if (this_present_createId || that_present_createId) {
      if (!(this_present_createId && that_present_createId))
        return false;
      if (this.createId != that.createId)
        return false;
    }
    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }
    boolean this_present_lastUpdateId = true && this.isSetLastUpdateId();
    boolean that_present_lastUpdateId = true && that.isSetLastUpdateId();
    if (this_present_lastUpdateId || that_present_lastUpdateId) {
      if (!(this_present_lastUpdateId && that_present_lastUpdateId))
        return false;
      if (this.lastUpdateId != that.lastUpdateId)
        return false;
    }
    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);
    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);
    boolean present_imgKey = true && (isSetImgKey());
    builder.append(present_imgKey);
    if (present_imgKey)
      builder.append(imgKey);
    boolean present_url = true && (isSetUrl());
    builder.append(present_url);
    if (present_url)
      builder.append(url);
    boolean present_serial = true && (isSetSerial());
    builder.append(present_serial);
    if (present_serial)
      builder.append(serial);
    boolean present_remark = true && (isSetRemark());
    builder.append(present_remark);
    if (present_remark)
      builder.append(remark);
    boolean present_createTime = true && (isSetCreateTime());
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);
    boolean present_createId = true && (isSetCreateId());
    builder.append(present_createId);
    if (present_createId)
      builder.append(createId);
    boolean present_lastUpdateTime = true && (isSetLastUpdateTime());
    builder.append(present_lastUpdateTime);
    if (present_lastUpdateTime)
      builder.append(lastUpdateTime);
    boolean present_lastUpdateId = true && (isSetLastUpdateId());
    builder.append(present_lastUpdateId);
    if (present_lastUpdateId)
      builder.append(lastUpdateId);
    boolean present_state = true && (isSetState());
    builder.append(present_state);
    if (present_state)
      builder.append(state);
    return builder.toHashCode();
  }

  public int compareTo(BrandInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BrandInfo typedOther = (BrandInfo)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgKey()).compareTo(typedOther.isSetImgKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgKey()) {
      lastComparison = TBaseHelper.compareTo(this.imgKey, typedOther.imgKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerial()).compareTo(typedOther.isSetSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerial()) {
      lastComparison = TBaseHelper.compareTo(this.serial, typedOther.serial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(typedOther.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = TBaseHelper.compareTo(this.remark, typedOther.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateId()).compareTo(typedOther.isSetCreateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateId()) {
      lastComparison = TBaseHelper.compareTo(this.createId, typedOther.createId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(typedOther.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = TBaseHelper.compareTo(this.lastUpdateTime, typedOther.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateId()).compareTo(typedOther.isSetLastUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateId()) {
      lastComparison = TBaseHelper.compareTo(this.lastUpdateId, typedOther.lastUpdateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // IMG_KEY
          if (field.type == TType.STRING) {
            this.imgKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // URL
          if (field.type == TType.STRING) {
            this.url = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SERIAL
          if (field.type == TType.I32) {
            this.serial = iprot.readI32();
            setSerialIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // REMARK
          if (field.type == TType.STRING) {
            this.remark = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // CREATE_TIME
          if (field.type == TType.STRING) {
            this.createTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // CREATE_ID
          if (field.type == TType.I32) {
            this.createId = iprot.readI32();
            setCreateIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // LAST_UPDATE_TIME
          if (field.type == TType.STRING) {
            this.lastUpdateTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // LAST_UPDATE_ID
          if (field.type == TType.I32) {
            this.lastUpdateId = iprot.readI32();
            setLastUpdateIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // STATE
          if (field.type == TType.I32) {
            this.state = iprot.readI32();
            setStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.imgKey != null) {
      if (isSetImgKey()) {
        oprot.writeFieldBegin(IMG_KEY_FIELD_DESC);
        oprot.writeString(this.imgKey);
        oprot.writeFieldEnd();
      }
    }
    if (this.url != null) {
      if (isSetUrl()) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(this.url);
        oprot.writeFieldEnd();
      }
    }
    if (isSetSerial()) {
      oprot.writeFieldBegin(SERIAL_FIELD_DESC);
      oprot.writeI32(this.serial);
      oprot.writeFieldEnd();
    }
    if (this.remark != null) {
      if (isSetRemark()) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(this.remark);
        oprot.writeFieldEnd();
      }
    }
    if (this.createTime != null) {
      if (isSetCreateTime()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(this.createTime);
        oprot.writeFieldEnd();
      }
    }
    if (isSetCreateId()) {
      oprot.writeFieldBegin(CREATE_ID_FIELD_DESC);
      oprot.writeI32(this.createId);
      oprot.writeFieldEnd();
    }
    if (this.lastUpdateTime != null) {
      if (isSetLastUpdateTime()) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(this.lastUpdateTime);
        oprot.writeFieldEnd();
      }
    }
    if (isSetLastUpdateId()) {
      oprot.writeFieldBegin(LAST_UPDATE_ID_FIELD_DESC);
      oprot.writeI32(this.lastUpdateId);
      oprot.writeFieldEnd();
    }
    if (isSetState()) {
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(this.state);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BrandInfo(");
    boolean first = true;
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetImgKey()) {
      if (!first) sb.append(", ");
      sb.append("imgKey:");
      if (this.imgKey == null) {
        sb.append("null");
      } else {
        sb.append(this.imgKey);
      }
      first = false;
      }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      }
    if (isSetSerial()) {
      if (!first) sb.append(", ");
      sb.append("serial:");
      sb.append(this.serial);
      first = false;
      }
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
      }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
      }
    if (isSetCreateId()) {
      if (!first) sb.append(", ");
      sb.append("createId:");
      sb.append(this.createId);
      first = false;
      }
    if (isSetLastUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("lastUpdateTime:");
      if (this.lastUpdateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.lastUpdateTime);
      }
      first = false;
      }
    if (isSetLastUpdateId()) {
      if (!first) sb.append(", ");
      sb.append("lastUpdateId:");
      sb.append(this.lastUpdateId);
      first = false;
      }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
