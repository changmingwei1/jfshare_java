/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.brand;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class QueryParam implements TBase<QueryParam, QueryParam._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("QueryParam");

  private static final TField PAGE_SIZE_FIELD_DESC = new TField("pageSize", TType.I32, (short)1);
  private static final TField CUR_PAGE_FIELD_DESC = new TField("curPage", TType.I32, (short)2);
  private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short)3);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)4);
  private static final TField HSUBJECT_ID_LIST_FIELD_DESC = new TField("hsubjectIdList", TType.LIST, (short)5);


  public int pageSize;
  public int curPage;
  public int id;
  public String name;
  public List<Integer> hsubjectIdList;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PAGE_SIZE((short)1, "pageSize"),
    CUR_PAGE((short)2, "curPage"),
    ID((short)3, "id"),
    NAME((short)4, "name"),
    HSUBJECT_ID_LIST((short)5, "hsubjectIdList");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE_SIZE
  	return PAGE_SIZE;
        case 2: // CUR_PAGE
  	return CUR_PAGE;
        case 3: // ID
  	return ID;
        case 4: // NAME
  	return NAME;
        case 5: // HSUBJECT_ID_LIST
  	return HSUBJECT_ID_LIST;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __PAGESIZE_ISSET_ID = 0;
  private static final int __CURPAGE_ISSET_ID = 1;
  private static final int __ID_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE_SIZE, new FieldMetaData("pageSize", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CUR_PAGE, new FieldMetaData("curPage", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.HSUBJECT_ID_LIST, new FieldMetaData("hsubjectIdList", TFieldRequirementType.OPTIONAL,
      new ListMetaData(TType.LIST,
                new FieldValueMetaData(TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(QueryParam.class, metaDataMap);
  }


  public QueryParam() {
  }

  public QueryParam(
    int pageSize,
    int curPage)
  {
    this();
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    this.curPage = curPage;
    setCurPageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryParam(QueryParam other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.pageSize = other.pageSize;
    this.curPage = other.curPage;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetHsubjectIdList()) {
      List<Integer> __this__hsubjectIdList = new ArrayList<Integer>();
      for (Integer other_element : other.hsubjectIdList) {
        __this__hsubjectIdList.add(other_element);
      }
      this.hsubjectIdList = __this__hsubjectIdList;
    }
  }

  public QueryParam deepCopy() {
    return new QueryParam(this);
  }

  @Override
  public void clear() {
    setPageSizeIsSet(false);
    this.pageSize = 0;
    setCurPageIsSet(false);
    this.curPage = 0;
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.hsubjectIdList = null;
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public QueryParam setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);

    return this;
  }

  public void unsetPageSize() {
  __isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been asigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
  }

  public int getCurPage() {
    return this.curPage;
  }

  public QueryParam setCurPage(int curPage) {
    this.curPage = curPage;
    setCurPageIsSet(true);

    return this;
  }

  public void unsetCurPage() {
  __isset_bit_vector.clear(__CURPAGE_ISSET_ID);
  }

  /** Returns true if field curPage is set (has been asigned a value) and false otherwise */
  public boolean isSetCurPage() {
    return __isset_bit_vector.get(__CURPAGE_ISSET_ID);
  }

  public void setCurPageIsSet(boolean value) {
    __isset_bit_vector.set(__CURPAGE_ISSET_ID, value);
  }

  public int getId() {
    return this.id;
  }

  public QueryParam setId(int id) {
    this.id = id;
    setIdIsSet(true);

    return this;
  }

  public void unsetId() {
  __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public QueryParam setName(String name) {
    this.name = name;
    
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getHsubjectIdListSize() {
    return (this.hsubjectIdList == null) ? 0 : this.hsubjectIdList.size();
  }

  public java.util.Iterator<Integer> getHsubjectIdListIterator() {
    return (this.hsubjectIdList == null) ? null : this.hsubjectIdList.iterator();
  }

  public void addToHsubjectIdList(int elem) {
    if (this.hsubjectIdList == null) {
      this.hsubjectIdList = new ArrayList<Integer>();
    }
    this.hsubjectIdList.add(elem);
  }

  public List<Integer> getHsubjectIdList() {
    return this.hsubjectIdList;
  }

  public QueryParam setHsubjectIdList(List<Integer> hsubjectIdList) {
    this.hsubjectIdList = hsubjectIdList;
    
    return this;
  }

  public void unsetHsubjectIdList() {
    this.hsubjectIdList = null;
  }

  /** Returns true if field hsubjectIdList is set (has been asigned a value) and false otherwise */
  public boolean isSetHsubjectIdList() {
    return this.hsubjectIdList != null;
  }

  public void setHsubjectIdListIsSet(boolean value) {
    if (!value) {
      this.hsubjectIdList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;
    case CUR_PAGE:
      if (value == null) {
        unsetCurPage();
      } else {
        setCurPage((Integer)value);
      }
      break;
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;
    case HSUBJECT_ID_LIST:
      if (value == null) {
        unsetHsubjectIdList();
      } else {
        setHsubjectIdList((List<Integer>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE_SIZE:
      return new Integer(getPageSize());
    case CUR_PAGE:
      return new Integer(getCurPage());
    case ID:
      return new Integer(getId());
    case NAME:
      return getName();
    case HSUBJECT_ID_LIST:
      return getHsubjectIdList();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE_SIZE:
      return isSetPageSize();
    case CUR_PAGE:
      return isSetCurPage();
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case HSUBJECT_ID_LIST:
      return isSetHsubjectIdList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryParam)
      return this.equals((QueryParam)that);
    return false;
  }

  public boolean equals(QueryParam that) {
    if (that == null)
      return false;
    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }
    boolean this_present_curPage = true;
    boolean that_present_curPage = true;
    if (this_present_curPage || that_present_curPage) {
      if (!(this_present_curPage && that_present_curPage))
        return false;
      if (this.curPage != that.curPage)
        return false;
    }
    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }
    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }
    boolean this_present_hsubjectIdList = true && this.isSetHsubjectIdList();
    boolean that_present_hsubjectIdList = true && that.isSetHsubjectIdList();
    if (this_present_hsubjectIdList || that_present_hsubjectIdList) {
      if (!(this_present_hsubjectIdList && that_present_hsubjectIdList))
        return false;
      if (!this.hsubjectIdList.equals(that.hsubjectIdList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_pageSize = true;
    builder.append(present_pageSize);
    if (present_pageSize)
      builder.append(pageSize);
    boolean present_curPage = true;
    builder.append(present_curPage);
    if (present_curPage)
      builder.append(curPage);
    boolean present_id = true && (isSetId());
    builder.append(present_id);
    if (present_id)
      builder.append(id);
    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);
    boolean present_hsubjectIdList = true && (isSetHsubjectIdList());
    builder.append(present_hsubjectIdList);
    if (present_hsubjectIdList)
      builder.append(hsubjectIdList);
    return builder.toHashCode();
  }

  public int compareTo(QueryParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryParam typedOther = (QueryParam)other;

    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurPage()).compareTo(typedOther.isSetCurPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurPage()) {
      lastComparison = TBaseHelper.compareTo(this.curPage, typedOther.curPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHsubjectIdList()).compareTo(typedOther.isSetHsubjectIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHsubjectIdList()) {
      lastComparison = TBaseHelper.compareTo(this.hsubjectIdList, typedOther.hsubjectIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // PAGE_SIZE
          if (field.type == TType.I32) {
            this.pageSize = iprot.readI32();
            setPageSizeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CUR_PAGE
          if (field.type == TType.I32) {
            this.curPage = iprot.readI32();
            setCurPageIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ID
          if (field.type == TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // HSUBJECT_ID_LIST
          if (field.type == TType.LIST) {
            {
            TList _list0 = iprot.readListBegin();
            this.hsubjectIdList = new ArrayList<Integer>(_list0.size);
            for (int _i1 = 0; _i1 < _list0.size; ++_i1)
            {
              int _elem2;
              _elem2 = iprot.readI32();
              this.hsubjectIdList.add(_elem2);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
    oprot.writeI32(this.pageSize);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CUR_PAGE_FIELD_DESC);
    oprot.writeI32(this.curPage);
    oprot.writeFieldEnd();
    if (isSetId()) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(this.id);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      if (isSetName()) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
    }
    if (this.hsubjectIdList != null) {
      if (isSetHsubjectIdList()) {
        oprot.writeFieldBegin(HSUBJECT_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.hsubjectIdList.size()));
          for (int _iter3 : this.hsubjectIdList)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryParam(");
    boolean first = true;
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("curPage:");
    sb.append(this.curPage);
    first = false;
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      }
    if (isSetHsubjectIdList()) {
      if (!first) sb.append(", ");
      sb.append("hsubjectIdList:");
      if (this.hsubjectIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.hsubjectIdList);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
