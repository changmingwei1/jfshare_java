/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.fileNameMapped;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class FileNameMappedInfo implements TBase<FileNameMappedInfo, FileNameMappedInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("FileNameMappedInfo");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short)1);
  private static final TField FILENAME_MD5_FIELD_DESC = new TField("filenameMd5", TType.STRING, (short)2);
  private static final TField FILENAME_FIELD_DESC = new TField("filename", TType.STRING, (short)3);
  private static final TField FILEID_FIELD_DESC = new TField("fileid", TType.STRING, (short)4);
  private static final TField BACKUP_STATE_FIELD_DESC = new TField("backupState", TType.I32, (short)5);
  private static final TField BACKUP_TIME_FIELD_DESC = new TField("backupTime", TType.STRING, (short)6);
  private static final TField SOURCE_FIELD_DESC = new TField("source", TType.STRING, (short)7);


  public int id;
  public String filenameMd5;
  public String filename;
  public String fileid;
  public int backupState;
  public String backupTime;
  public String source;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    FILENAME_MD5((short)2, "filenameMd5"),
    FILENAME((short)3, "filename"),
    FILEID((short)4, "fileid"),
    BACKUP_STATE((short)5, "backupState"),
    BACKUP_TIME((short)6, "backupTime"),
    SOURCE((short)7, "source");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
  	return ID;
        case 2: // FILENAME_MD5
  	return FILENAME_MD5;
        case 3: // FILENAME
  	return FILENAME;
        case 4: // FILEID
  	return FILEID;
        case 5: // BACKUP_STATE
  	return BACKUP_STATE;
        case 6: // BACKUP_TIME
  	return BACKUP_TIME;
        case 7: // SOURCE
  	return SOURCE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __BACKUPSTATE_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.FILENAME_MD5, new FieldMetaData("filenameMd5", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.FILENAME, new FieldMetaData("filename", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.FILEID, new FieldMetaData("fileid", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.BACKUP_STATE, new FieldMetaData("backupState", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.BACKUP_TIME, new FieldMetaData("backupTime", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new FieldMetaData("source", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(FileNameMappedInfo.class, metaDataMap);
  }


  public FileNameMappedInfo() {
  }

  public FileNameMappedInfo(
    int id,
    String filenameMd5)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.filenameMd5 = filenameMd5;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileNameMappedInfo(FileNameMappedInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetFilenameMd5()) {
      this.filenameMd5 = other.filenameMd5;
    }
    if (other.isSetFilename()) {
      this.filename = other.filename;
    }
    if (other.isSetFileid()) {
      this.fileid = other.fileid;
    }
    this.backupState = other.backupState;
    if (other.isSetBackupTime()) {
      this.backupTime = other.backupTime;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
  }

  public FileNameMappedInfo deepCopy() {
    return new FileNameMappedInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.filenameMd5 = null;
    this.filename = null;
    this.fileid = null;
    setBackupStateIsSet(false);
    this.backupState = 0;
    this.backupTime = null;
    this.source = null;
  }

  public int getId() {
    return this.id;
  }

  public FileNameMappedInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);

    return this;
  }

  public void unsetId() {
  __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getFilenameMd5() {
    return this.filenameMd5;
  }

  public FileNameMappedInfo setFilenameMd5(String filenameMd5) {
    this.filenameMd5 = filenameMd5;
    
    return this;
  }

  public void unsetFilenameMd5() {
    this.filenameMd5 = null;
  }

  /** Returns true if field filenameMd5 is set (has been asigned a value) and false otherwise */
  public boolean isSetFilenameMd5() {
    return this.filenameMd5 != null;
  }

  public void setFilenameMd5IsSet(boolean value) {
    if (!value) {
      this.filenameMd5 = null;
    }
  }

  public String getFilename() {
    return this.filename;
  }

  public FileNameMappedInfo setFilename(String filename) {
    this.filename = filename;
    
    return this;
  }

  public void unsetFilename() {
    this.filename = null;
  }

  /** Returns true if field filename is set (has been asigned a value) and false otherwise */
  public boolean isSetFilename() {
    return this.filename != null;
  }

  public void setFilenameIsSet(boolean value) {
    if (!value) {
      this.filename = null;
    }
  }

  public String getFileid() {
    return this.fileid;
  }

  public FileNameMappedInfo setFileid(String fileid) {
    this.fileid = fileid;
    
    return this;
  }

  public void unsetFileid() {
    this.fileid = null;
  }

  /** Returns true if field fileid is set (has been asigned a value) and false otherwise */
  public boolean isSetFileid() {
    return this.fileid != null;
  }

  public void setFileidIsSet(boolean value) {
    if (!value) {
      this.fileid = null;
    }
  }

  public int getBackupState() {
    return this.backupState;
  }

  public FileNameMappedInfo setBackupState(int backupState) {
    this.backupState = backupState;
    setBackupStateIsSet(true);

    return this;
  }

  public void unsetBackupState() {
  __isset_bit_vector.clear(__BACKUPSTATE_ISSET_ID);
  }

  /** Returns true if field backupState is set (has been asigned a value) and false otherwise */
  public boolean isSetBackupState() {
    return __isset_bit_vector.get(__BACKUPSTATE_ISSET_ID);
  }

  public void setBackupStateIsSet(boolean value) {
    __isset_bit_vector.set(__BACKUPSTATE_ISSET_ID, value);
  }

  public String getBackupTime() {
    return this.backupTime;
  }

  public FileNameMappedInfo setBackupTime(String backupTime) {
    this.backupTime = backupTime;
    
    return this;
  }

  public void unsetBackupTime() {
    this.backupTime = null;
  }

  /** Returns true if field backupTime is set (has been asigned a value) and false otherwise */
  public boolean isSetBackupTime() {
    return this.backupTime != null;
  }

  public void setBackupTimeIsSet(boolean value) {
    if (!value) {
      this.backupTime = null;
    }
  }

  public String getSource() {
    return this.source;
  }

  public FileNameMappedInfo setSource(String source) {
    this.source = source;
    
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been asigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;
    case FILENAME_MD5:
      if (value == null) {
        unsetFilenameMd5();
      } else {
        setFilenameMd5((String)value);
      }
      break;
    case FILENAME:
      if (value == null) {
        unsetFilename();
      } else {
        setFilename((String)value);
      }
      break;
    case FILEID:
      if (value == null) {
        unsetFileid();
      } else {
        setFileid((String)value);
      }
      break;
    case BACKUP_STATE:
      if (value == null) {
        unsetBackupState();
      } else {
        setBackupState((Integer)value);
      }
      break;
    case BACKUP_TIME:
      if (value == null) {
        unsetBackupTime();
      } else {
        setBackupTime((String)value);
      }
      break;
    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Integer(getId());
    case FILENAME_MD5:
      return getFilenameMd5();
    case FILENAME:
      return getFilename();
    case FILEID:
      return getFileid();
    case BACKUP_STATE:
      return new Integer(getBackupState());
    case BACKUP_TIME:
      return getBackupTime();
    case SOURCE:
      return getSource();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case FILENAME_MD5:
      return isSetFilenameMd5();
    case FILENAME:
      return isSetFilename();
    case FILEID:
      return isSetFileid();
    case BACKUP_STATE:
      return isSetBackupState();
    case BACKUP_TIME:
      return isSetBackupTime();
    case SOURCE:
      return isSetSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileNameMappedInfo)
      return this.equals((FileNameMappedInfo)that);
    return false;
  }

  public boolean equals(FileNameMappedInfo that) {
    if (that == null)
      return false;
    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }
    boolean this_present_filenameMd5 = true && this.isSetFilenameMd5();
    boolean that_present_filenameMd5 = true && that.isSetFilenameMd5();
    if (this_present_filenameMd5 || that_present_filenameMd5) {
      if (!(this_present_filenameMd5 && that_present_filenameMd5))
        return false;
      if (!this.filenameMd5.equals(that.filenameMd5))
        return false;
    }
    boolean this_present_filename = true && this.isSetFilename();
    boolean that_present_filename = true && that.isSetFilename();
    if (this_present_filename || that_present_filename) {
      if (!(this_present_filename && that_present_filename))
        return false;
      if (!this.filename.equals(that.filename))
        return false;
    }
    boolean this_present_fileid = true && this.isSetFileid();
    boolean that_present_fileid = true && that.isSetFileid();
    if (this_present_fileid || that_present_fileid) {
      if (!(this_present_fileid && that_present_fileid))
        return false;
      if (!this.fileid.equals(that.fileid))
        return false;
    }
    boolean this_present_backupState = true && this.isSetBackupState();
    boolean that_present_backupState = true && that.isSetBackupState();
    if (this_present_backupState || that_present_backupState) {
      if (!(this_present_backupState && that_present_backupState))
        return false;
      if (this.backupState != that.backupState)
        return false;
    }
    boolean this_present_backupTime = true && this.isSetBackupTime();
    boolean that_present_backupTime = true && that.isSetBackupTime();
    if (this_present_backupTime || that_present_backupTime) {
      if (!(this_present_backupTime && that_present_backupTime))
        return false;
      if (!this.backupTime.equals(that.backupTime))
        return false;
    }
    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);
    boolean present_filenameMd5 = true && (isSetFilenameMd5());
    builder.append(present_filenameMd5);
    if (present_filenameMd5)
      builder.append(filenameMd5);
    boolean present_filename = true && (isSetFilename());
    builder.append(present_filename);
    if (present_filename)
      builder.append(filename);
    boolean present_fileid = true && (isSetFileid());
    builder.append(present_fileid);
    if (present_fileid)
      builder.append(fileid);
    boolean present_backupState = true && (isSetBackupState());
    builder.append(present_backupState);
    if (present_backupState)
      builder.append(backupState);
    boolean present_backupTime = true && (isSetBackupTime());
    builder.append(present_backupTime);
    if (present_backupTime)
      builder.append(backupTime);
    boolean present_source = true && (isSetSource());
    builder.append(present_source);
    if (present_source)
      builder.append(source);
    return builder.toHashCode();
  }

  public int compareTo(FileNameMappedInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FileNameMappedInfo typedOther = (FileNameMappedInfo)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilenameMd5()).compareTo(typedOther.isSetFilenameMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilenameMd5()) {
      lastComparison = TBaseHelper.compareTo(this.filenameMd5, typedOther.filenameMd5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilename()).compareTo(typedOther.isSetFilename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilename()) {
      lastComparison = TBaseHelper.compareTo(this.filename, typedOther.filename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileid()).compareTo(typedOther.isSetFileid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileid()) {
      lastComparison = TBaseHelper.compareTo(this.fileid, typedOther.fileid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackupState()).compareTo(typedOther.isSetBackupState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackupState()) {
      lastComparison = TBaseHelper.compareTo(this.backupState, typedOther.backupState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackupTime()).compareTo(typedOther.isSetBackupTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackupTime()) {
      lastComparison = TBaseHelper.compareTo(this.backupTime, typedOther.backupTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FILENAME_MD5
          if (field.type == TType.STRING) {
            this.filenameMd5 = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // FILENAME
          if (field.type == TType.STRING) {
            this.filename = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // FILEID
          if (field.type == TType.STRING) {
            this.fileid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // BACKUP_STATE
          if (field.type == TType.I32) {
            this.backupState = iprot.readI32();
            setBackupStateIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // BACKUP_TIME
          if (field.type == TType.STRING) {
            this.backupTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // SOURCE
          if (field.type == TType.STRING) {
            this.source = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    if (this.filenameMd5 != null) {
      oprot.writeFieldBegin(FILENAME_MD5_FIELD_DESC);
      oprot.writeString(this.filenameMd5);
      oprot.writeFieldEnd();
    }
    if (this.filename != null) {
      if (isSetFilename()) {
        oprot.writeFieldBegin(FILENAME_FIELD_DESC);
        oprot.writeString(this.filename);
        oprot.writeFieldEnd();
      }
    }
    if (this.fileid != null) {
      if (isSetFileid()) {
        oprot.writeFieldBegin(FILEID_FIELD_DESC);
        oprot.writeString(this.fileid);
        oprot.writeFieldEnd();
      }
    }
    if (isSetBackupState()) {
      oprot.writeFieldBegin(BACKUP_STATE_FIELD_DESC);
      oprot.writeI32(this.backupState);
      oprot.writeFieldEnd();
    }
    if (this.backupTime != null) {
      if (isSetBackupTime()) {
        oprot.writeFieldBegin(BACKUP_TIME_FIELD_DESC);
        oprot.writeString(this.backupTime);
        oprot.writeFieldEnd();
      }
    }
    if (this.source != null) {
      if (isSetSource()) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(this.source);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileNameMappedInfo(");
    boolean first = true;
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("filenameMd5:");
    if (this.filenameMd5 == null) {
      sb.append("null");
    } else {
      sb.append(this.filenameMd5);
    }
    first = false;
    if (isSetFilename()) {
      if (!first) sb.append(", ");
      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      }
    if (isSetFileid()) {
      if (!first) sb.append(", ");
      sb.append("fileid:");
      if (this.fileid == null) {
        sb.append("null");
      } else {
        sb.append(this.fileid);
      }
      first = false;
      }
    if (isSetBackupState()) {
      if (!first) sb.append(", ");
      sb.append("backupState:");
      sb.append(this.backupState);
      first = false;
      }
    if (isSetBackupTime()) {
      if (!first) sb.append(", ");
      sb.append("backupTime:");
      if (this.backupTime == null) {
        sb.append("null");
      } else {
        sb.append(this.backupTime);
      }
      first = false;
      }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
