/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.card;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ToRechargeParams implements TBase<ToRechargeParams, ToRechargeParams._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ToRechargeParams");

  private static final TField VALIDATA_STR_FIELD_DESC = new TField("validataStr", TType.STRING, (short)1);
  private static final TField FILE_PATH_FIELD_DESC = new TField("filePath", TType.STRING, (short)2);
  private static final TField ACTIVITY_ID_FIELD_DESC = new TField("activityId", TType.STRING, (short)3);


  public String validataStr;
  public String filePath;
  public String activityId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    VALIDATA_STR((short)1, "validataStr"),
    FILE_PATH((short)2, "filePath"),
    ACTIVITY_ID((short)3, "activityId");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VALIDATA_STR
  	return VALIDATA_STR;
        case 2: // FILE_PATH
  	return FILE_PATH;
        case 3: // ACTIVITY_ID
  	return ACTIVITY_ID;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VALIDATA_STR, new FieldMetaData("validataStr", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.FILE_PATH, new FieldMetaData("filePath", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ACTIVITY_ID, new FieldMetaData("activityId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ToRechargeParams.class, metaDataMap);
  }


  public ToRechargeParams() {
  }

  public ToRechargeParams(
    String validataStr,
    String filePath,
    String activityId)
  {
    this();
    this.validataStr = validataStr;
    this.filePath = filePath;
    this.activityId = activityId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ToRechargeParams(ToRechargeParams other) {
    if (other.isSetValidataStr()) {
      this.validataStr = other.validataStr;
    }
    if (other.isSetFilePath()) {
      this.filePath = other.filePath;
    }
    if (other.isSetActivityId()) {
      this.activityId = other.activityId;
    }
  }

  public ToRechargeParams deepCopy() {
    return new ToRechargeParams(this);
  }

  @Override
  public void clear() {
    this.validataStr = null;
    this.filePath = null;
    this.activityId = null;
  }

  public String getValidataStr() {
    return this.validataStr;
  }

  public ToRechargeParams setValidataStr(String validataStr) {
    this.validataStr = validataStr;
    
    return this;
  }

  public void unsetValidataStr() {
    this.validataStr = null;
  }

  /** Returns true if field validataStr is set (has been asigned a value) and false otherwise */
  public boolean isSetValidataStr() {
    return this.validataStr != null;
  }

  public void setValidataStrIsSet(boolean value) {
    if (!value) {
      this.validataStr = null;
    }
  }

  public String getFilePath() {
    return this.filePath;
  }

  public ToRechargeParams setFilePath(String filePath) {
    this.filePath = filePath;
    
    return this;
  }

  public void unsetFilePath() {
    this.filePath = null;
  }

  /** Returns true if field filePath is set (has been asigned a value) and false otherwise */
  public boolean isSetFilePath() {
    return this.filePath != null;
  }

  public void setFilePathIsSet(boolean value) {
    if (!value) {
      this.filePath = null;
    }
  }

  public String getActivityId() {
    return this.activityId;
  }

  public ToRechargeParams setActivityId(String activityId) {
    this.activityId = activityId;
    
    return this;
  }

  public void unsetActivityId() {
    this.activityId = null;
  }

  /** Returns true if field activityId is set (has been asigned a value) and false otherwise */
  public boolean isSetActivityId() {
    return this.activityId != null;
  }

  public void setActivityIdIsSet(boolean value) {
    if (!value) {
      this.activityId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VALIDATA_STR:
      if (value == null) {
        unsetValidataStr();
      } else {
        setValidataStr((String)value);
      }
      break;
    case FILE_PATH:
      if (value == null) {
        unsetFilePath();
      } else {
        setFilePath((String)value);
      }
      break;
    case ACTIVITY_ID:
      if (value == null) {
        unsetActivityId();
      } else {
        setActivityId((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VALIDATA_STR:
      return getValidataStr();
    case FILE_PATH:
      return getFilePath();
    case ACTIVITY_ID:
      return getActivityId();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VALIDATA_STR:
      return isSetValidataStr();
    case FILE_PATH:
      return isSetFilePath();
    case ACTIVITY_ID:
      return isSetActivityId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ToRechargeParams)
      return this.equals((ToRechargeParams)that);
    return false;
  }

  public boolean equals(ToRechargeParams that) {
    if (that == null)
      return false;
    boolean this_present_validataStr = true && this.isSetValidataStr();
    boolean that_present_validataStr = true && that.isSetValidataStr();
    if (this_present_validataStr || that_present_validataStr) {
      if (!(this_present_validataStr && that_present_validataStr))
        return false;
      if (!this.validataStr.equals(that.validataStr))
        return false;
    }
    boolean this_present_filePath = true && this.isSetFilePath();
    boolean that_present_filePath = true && that.isSetFilePath();
    if (this_present_filePath || that_present_filePath) {
      if (!(this_present_filePath && that_present_filePath))
        return false;
      if (!this.filePath.equals(that.filePath))
        return false;
    }
    boolean this_present_activityId = true && this.isSetActivityId();
    boolean that_present_activityId = true && that.isSetActivityId();
    if (this_present_activityId || that_present_activityId) {
      if (!(this_present_activityId && that_present_activityId))
        return false;
      if (!this.activityId.equals(that.activityId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_validataStr = true && (isSetValidataStr());
    builder.append(present_validataStr);
    if (present_validataStr)
      builder.append(validataStr);
    boolean present_filePath = true && (isSetFilePath());
    builder.append(present_filePath);
    if (present_filePath)
      builder.append(filePath);
    boolean present_activityId = true && (isSetActivityId());
    builder.append(present_activityId);
    if (present_activityId)
      builder.append(activityId);
    return builder.toHashCode();
  }

  public int compareTo(ToRechargeParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ToRechargeParams typedOther = (ToRechargeParams)other;

    lastComparison = Boolean.valueOf(isSetValidataStr()).compareTo(typedOther.isSetValidataStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidataStr()) {
      lastComparison = TBaseHelper.compareTo(this.validataStr, typedOther.validataStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilePath()).compareTo(typedOther.isSetFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePath()) {
      lastComparison = TBaseHelper.compareTo(this.filePath, typedOther.filePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityId()).compareTo(typedOther.isSetActivityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityId()) {
      lastComparison = TBaseHelper.compareTo(this.activityId, typedOther.activityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // VALIDATA_STR
          if (field.type == TType.STRING) {
            this.validataStr = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FILE_PATH
          if (field.type == TType.STRING) {
            this.filePath = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ACTIVITY_ID
          if (field.type == TType.STRING) {
            this.activityId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.validataStr != null) {
      oprot.writeFieldBegin(VALIDATA_STR_FIELD_DESC);
      oprot.writeString(this.validataStr);
      oprot.writeFieldEnd();
    }
    if (this.filePath != null) {
      oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
      oprot.writeString(this.filePath);
      oprot.writeFieldEnd();
    }
    if (this.activityId != null) {
      oprot.writeFieldBegin(ACTIVITY_ID_FIELD_DESC);
      oprot.writeString(this.activityId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ToRechargeParams(");
    boolean first = true;
    sb.append("validataStr:");
    if (this.validataStr == null) {
      sb.append("null");
    } else {
      sb.append(this.validataStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filePath:");
    if (this.filePath == null) {
      sb.append("null");
    } else {
      sb.append(this.filePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activityId:");
    if (this.activityId == null) {
      sb.append("null");
    } else {
      sb.append(this.activityId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
