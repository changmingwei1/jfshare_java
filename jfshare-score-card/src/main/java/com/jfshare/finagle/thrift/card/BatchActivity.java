/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.card;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class BatchActivity implements TBase<BatchActivity, BatchActivity._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BatchActivity");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField PIECE_VALUE_FIELD_DESC = new TField("pieceValue", TType.STRING, (short)3);
  private static final TField TOTAL_COUNT_FIELD_DESC = new TField("totalCount", TType.I32, (short)4);
  private static final TField RECHARGE_TYPE_FIELD_DESC = new TField("rechargeType", TType.STRING, (short)5);
  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.STRING, (short)6);
  private static final TField START_TIME_FIELD_DESC = new TField("startTime", TType.STRING, (short)7);
  private static final TField END_TIME_FIELD_DESC = new TField("endTime", TType.STRING, (short)8);
  private static final TField CUR_STATUS_FIELD_DESC = new TField("curStatus", TType.STRING, (short)9);
  private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short)10);
  private static final TField MULTI_RECHARGE_ENABLE_FIELD_DESC = new TField("multiRechargeEnable", TType.STRING, (short)11);
  private static final TField USED_COUNT_FIELD_DESC = new TField("UsedCount", TType.I32, (short)12);
  private static final TField SEND_COUNT_FIELD_DESC = new TField("SendCount", TType.I32, (short)13);


  public int id;
  public String name;
  public String pieceValue;
  public int totalCount;
  public String rechargeType;
  public String createTime;
  public String startTime;
  public String endTime;
  public String curStatus;
  public String password;
  public String multiRechargeEnable;
  public int UsedCount;
  public int SendCount;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    PIECE_VALUE((short)3, "pieceValue"),
    TOTAL_COUNT((short)4, "totalCount"),
    RECHARGE_TYPE((short)5, "rechargeType"),
    CREATE_TIME((short)6, "createTime"),
    START_TIME((short)7, "startTime"),
    END_TIME((short)8, "endTime"),
    CUR_STATUS((short)9, "curStatus"),
    PASSWORD((short)10, "password"),
    MULTI_RECHARGE_ENABLE((short)11, "multiRechargeEnable"),
    USED_COUNT((short)12, "UsedCount"),
    SEND_COUNT((short)13, "SendCount");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
  	return ID;
        case 2: // NAME
  	return NAME;
        case 3: // PIECE_VALUE
  	return PIECE_VALUE;
        case 4: // TOTAL_COUNT
  	return TOTAL_COUNT;
        case 5: // RECHARGE_TYPE
  	return RECHARGE_TYPE;
        case 6: // CREATE_TIME
  	return CREATE_TIME;
        case 7: // START_TIME
  	return START_TIME;
        case 8: // END_TIME
  	return END_TIME;
        case 9: // CUR_STATUS
  	return CUR_STATUS;
        case 10: // PASSWORD
  	return PASSWORD;
        case 11: // MULTI_RECHARGE_ENABLE
  	return MULTI_RECHARGE_ENABLE;
        case 12: // USED_COUNT
  	return USED_COUNT;
        case 13: // SEND_COUNT
  	return SEND_COUNT;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TOTALCOUNT_ISSET_ID = 1;
  private static final int __USEDCOUNT_ISSET_ID = 2;
  private static final int __SENDCOUNT_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PIECE_VALUE, new FieldMetaData("pieceValue", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TOTAL_COUNT, new FieldMetaData("totalCount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.RECHARGE_TYPE, new FieldMetaData("rechargeType", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new FieldMetaData("createTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new FieldMetaData("startTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new FieldMetaData("endTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CUR_STATUS, new FieldMetaData("curStatus", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new FieldMetaData("password", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MULTI_RECHARGE_ENABLE, new FieldMetaData("multiRechargeEnable", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.USED_COUNT, new FieldMetaData("UsedCount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.SEND_COUNT, new FieldMetaData("SendCount", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BatchActivity.class, metaDataMap);
  }


  public BatchActivity() {
  }

  public BatchActivity(
    int id,
    String name,
    String pieceValue,
    int totalCount,
    String rechargeType,
    String createTime,
    String startTime,
    String endTime,
    String curStatus,
    String password,
    String multiRechargeEnable,
    int UsedCount,
    int SendCount)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.pieceValue = pieceValue;
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.rechargeType = rechargeType;
    this.createTime = createTime;
    this.startTime = startTime;
    this.endTime = endTime;
    this.curStatus = curStatus;
    this.password = password;
    this.multiRechargeEnable = multiRechargeEnable;
    this.UsedCount = UsedCount;
    setUsedCountIsSet(true);
    this.SendCount = SendCount;
    setSendCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BatchActivity(BatchActivity other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPieceValue()) {
      this.pieceValue = other.pieceValue;
    }
    this.totalCount = other.totalCount;
    if (other.isSetRechargeType()) {
      this.rechargeType = other.rechargeType;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    if (other.isSetCurStatus()) {
      this.curStatus = other.curStatus;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetMultiRechargeEnable()) {
      this.multiRechargeEnable = other.multiRechargeEnable;
    }
    this.UsedCount = other.UsedCount;
    this.SendCount = other.SendCount;
  }

  public BatchActivity deepCopy() {
    return new BatchActivity(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.pieceValue = null;
    setTotalCountIsSet(false);
    this.totalCount = 0;
    this.rechargeType = null;
    this.createTime = null;
    this.startTime = null;
    this.endTime = null;
    this.curStatus = null;
    this.password = null;
    this.multiRechargeEnable = null;
    setUsedCountIsSet(false);
    this.UsedCount = 0;
    setSendCountIsSet(false);
    this.SendCount = 0;
  }

  public int getId() {
    return this.id;
  }

  public BatchActivity setId(int id) {
    this.id = id;
    setIdIsSet(true);

    return this;
  }

  public void unsetId() {
  __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public BatchActivity setName(String name) {
    this.name = name;
    
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getPieceValue() {
    return this.pieceValue;
  }

  public BatchActivity setPieceValue(String pieceValue) {
    this.pieceValue = pieceValue;
    
    return this;
  }

  public void unsetPieceValue() {
    this.pieceValue = null;
  }

  /** Returns true if field pieceValue is set (has been asigned a value) and false otherwise */
  public boolean isSetPieceValue() {
    return this.pieceValue != null;
  }

  public void setPieceValueIsSet(boolean value) {
    if (!value) {
      this.pieceValue = null;
    }
  }

  public int getTotalCount() {
    return this.totalCount;
  }

  public BatchActivity setTotalCount(int totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);

    return this;
  }

  public void unsetTotalCount() {
  __isset_bit_vector.clear(__TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been asigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return __isset_bit_vector.get(__TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALCOUNT_ISSET_ID, value);
  }

  public String getRechargeType() {
    return this.rechargeType;
  }

  public BatchActivity setRechargeType(String rechargeType) {
    this.rechargeType = rechargeType;
    
    return this;
  }

  public void unsetRechargeType() {
    this.rechargeType = null;
  }

  /** Returns true if field rechargeType is set (has been asigned a value) and false otherwise */
  public boolean isSetRechargeType() {
    return this.rechargeType != null;
  }

  public void setRechargeTypeIsSet(boolean value) {
    if (!value) {
      this.rechargeType = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public BatchActivity setCreateTime(String createTime) {
    this.createTime = createTime;
    
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public BatchActivity setStartTime(String startTime) {
    this.startTime = startTime;
    
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been asigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public BatchActivity setEndTime(String endTime) {
    this.endTime = endTime;
    
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been asigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public String getCurStatus() {
    return this.curStatus;
  }

  public BatchActivity setCurStatus(String curStatus) {
    this.curStatus = curStatus;
    
    return this;
  }

  public void unsetCurStatus() {
    this.curStatus = null;
  }

  /** Returns true if field curStatus is set (has been asigned a value) and false otherwise */
  public boolean isSetCurStatus() {
    return this.curStatus != null;
  }

  public void setCurStatusIsSet(boolean value) {
    if (!value) {
      this.curStatus = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public BatchActivity setPassword(String password) {
    this.password = password;
    
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been asigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getMultiRechargeEnable() {
    return this.multiRechargeEnable;
  }

  public BatchActivity setMultiRechargeEnable(String multiRechargeEnable) {
    this.multiRechargeEnable = multiRechargeEnable;
    
    return this;
  }

  public void unsetMultiRechargeEnable() {
    this.multiRechargeEnable = null;
  }

  /** Returns true if field multiRechargeEnable is set (has been asigned a value) and false otherwise */
  public boolean isSetMultiRechargeEnable() {
    return this.multiRechargeEnable != null;
  }

  public void setMultiRechargeEnableIsSet(boolean value) {
    if (!value) {
      this.multiRechargeEnable = null;
    }
  }

  public int getUsedCount() {
    return this.UsedCount;
  }

  public BatchActivity setUsedCount(int UsedCount) {
    this.UsedCount = UsedCount;
    setUsedCountIsSet(true);

    return this;
  }

  public void unsetUsedCount() {
  __isset_bit_vector.clear(__USEDCOUNT_ISSET_ID);
  }

  /** Returns true if field UsedCount is set (has been asigned a value) and false otherwise */
  public boolean isSetUsedCount() {
    return __isset_bit_vector.get(__USEDCOUNT_ISSET_ID);
  }

  public void setUsedCountIsSet(boolean value) {
    __isset_bit_vector.set(__USEDCOUNT_ISSET_ID, value);
  }

  public int getSendCount() {
    return this.SendCount;
  }

  public BatchActivity setSendCount(int SendCount) {
    this.SendCount = SendCount;
    setSendCountIsSet(true);

    return this;
  }

  public void unsetSendCount() {
  __isset_bit_vector.clear(__SENDCOUNT_ISSET_ID);
  }

  /** Returns true if field SendCount is set (has been asigned a value) and false otherwise */
  public boolean isSetSendCount() {
    return __isset_bit_vector.get(__SENDCOUNT_ISSET_ID);
  }

  public void setSendCountIsSet(boolean value) {
    __isset_bit_vector.set(__SENDCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;
    case PIECE_VALUE:
      if (value == null) {
        unsetPieceValue();
      } else {
        setPieceValue((String)value);
      }
      break;
    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Integer)value);
      }
      break;
    case RECHARGE_TYPE:
      if (value == null) {
        unsetRechargeType();
      } else {
        setRechargeType((String)value);
      }
      break;
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;
    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;
    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;
    case CUR_STATUS:
      if (value == null) {
        unsetCurStatus();
      } else {
        setCurStatus((String)value);
      }
      break;
    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;
    case MULTI_RECHARGE_ENABLE:
      if (value == null) {
        unsetMultiRechargeEnable();
      } else {
        setMultiRechargeEnable((String)value);
      }
      break;
    case USED_COUNT:
      if (value == null) {
        unsetUsedCount();
      } else {
        setUsedCount((Integer)value);
      }
      break;
    case SEND_COUNT:
      if (value == null) {
        unsetSendCount();
      } else {
        setSendCount((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Integer(getId());
    case NAME:
      return getName();
    case PIECE_VALUE:
      return getPieceValue();
    case TOTAL_COUNT:
      return new Integer(getTotalCount());
    case RECHARGE_TYPE:
      return getRechargeType();
    case CREATE_TIME:
      return getCreateTime();
    case START_TIME:
      return getStartTime();
    case END_TIME:
      return getEndTime();
    case CUR_STATUS:
      return getCurStatus();
    case PASSWORD:
      return getPassword();
    case MULTI_RECHARGE_ENABLE:
      return getMultiRechargeEnable();
    case USED_COUNT:
      return new Integer(getUsedCount());
    case SEND_COUNT:
      return new Integer(getSendCount());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case PIECE_VALUE:
      return isSetPieceValue();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case RECHARGE_TYPE:
      return isSetRechargeType();
    case CREATE_TIME:
      return isSetCreateTime();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case CUR_STATUS:
      return isSetCurStatus();
    case PASSWORD:
      return isSetPassword();
    case MULTI_RECHARGE_ENABLE:
      return isSetMultiRechargeEnable();
    case USED_COUNT:
      return isSetUsedCount();
    case SEND_COUNT:
      return isSetSendCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BatchActivity)
      return this.equals((BatchActivity)that);
    return false;
  }

  public boolean equals(BatchActivity that) {
    if (that == null)
      return false;
    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }
    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }
    boolean this_present_pieceValue = true && this.isSetPieceValue();
    boolean that_present_pieceValue = true && that.isSetPieceValue();
    if (this_present_pieceValue || that_present_pieceValue) {
      if (!(this_present_pieceValue && that_present_pieceValue))
        return false;
      if (!this.pieceValue.equals(that.pieceValue))
        return false;
    }
    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }
    boolean this_present_rechargeType = true && this.isSetRechargeType();
    boolean that_present_rechargeType = true && that.isSetRechargeType();
    if (this_present_rechargeType || that_present_rechargeType) {
      if (!(this_present_rechargeType && that_present_rechargeType))
        return false;
      if (!this.rechargeType.equals(that.rechargeType))
        return false;
    }
    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }
    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }
    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }
    boolean this_present_curStatus = true && this.isSetCurStatus();
    boolean that_present_curStatus = true && that.isSetCurStatus();
    if (this_present_curStatus || that_present_curStatus) {
      if (!(this_present_curStatus && that_present_curStatus))
        return false;
      if (!this.curStatus.equals(that.curStatus))
        return false;
    }
    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }
    boolean this_present_multiRechargeEnable = true && this.isSetMultiRechargeEnable();
    boolean that_present_multiRechargeEnable = true && that.isSetMultiRechargeEnable();
    if (this_present_multiRechargeEnable || that_present_multiRechargeEnable) {
      if (!(this_present_multiRechargeEnable && that_present_multiRechargeEnable))
        return false;
      if (!this.multiRechargeEnable.equals(that.multiRechargeEnable))
        return false;
    }
    boolean this_present_UsedCount = true;
    boolean that_present_UsedCount = true;
    if (this_present_UsedCount || that_present_UsedCount) {
      if (!(this_present_UsedCount && that_present_UsedCount))
        return false;
      if (this.UsedCount != that.UsedCount)
        return false;
    }
    boolean this_present_SendCount = true;
    boolean that_present_SendCount = true;
    if (this_present_SendCount || that_present_SendCount) {
      if (!(this_present_SendCount && that_present_SendCount))
        return false;
      if (this.SendCount != that.SendCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);
    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);
    boolean present_pieceValue = true && (isSetPieceValue());
    builder.append(present_pieceValue);
    if (present_pieceValue)
      builder.append(pieceValue);
    boolean present_totalCount = true;
    builder.append(present_totalCount);
    if (present_totalCount)
      builder.append(totalCount);
    boolean present_rechargeType = true && (isSetRechargeType());
    builder.append(present_rechargeType);
    if (present_rechargeType)
      builder.append(rechargeType);
    boolean present_createTime = true && (isSetCreateTime());
    builder.append(present_createTime);
    if (present_createTime)
      builder.append(createTime);
    boolean present_startTime = true && (isSetStartTime());
    builder.append(present_startTime);
    if (present_startTime)
      builder.append(startTime);
    boolean present_endTime = true && (isSetEndTime());
    builder.append(present_endTime);
    if (present_endTime)
      builder.append(endTime);
    boolean present_curStatus = true && (isSetCurStatus());
    builder.append(present_curStatus);
    if (present_curStatus)
      builder.append(curStatus);
    boolean present_password = true && (isSetPassword());
    builder.append(present_password);
    if (present_password)
      builder.append(password);
    boolean present_multiRechargeEnable = true && (isSetMultiRechargeEnable());
    builder.append(present_multiRechargeEnable);
    if (present_multiRechargeEnable)
      builder.append(multiRechargeEnable);
    boolean present_UsedCount = true;
    builder.append(present_UsedCount);
    if (present_UsedCount)
      builder.append(UsedCount);
    boolean present_SendCount = true;
    builder.append(present_SendCount);
    if (present_SendCount)
      builder.append(SendCount);
    return builder.toHashCode();
  }

  public int compareTo(BatchActivity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BatchActivity typedOther = (BatchActivity)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPieceValue()).compareTo(typedOther.isSetPieceValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPieceValue()) {
      lastComparison = TBaseHelper.compareTo(this.pieceValue, typedOther.pieceValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(typedOther.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = TBaseHelper.compareTo(this.totalCount, typedOther.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRechargeType()).compareTo(typedOther.isSetRechargeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRechargeType()) {
      lastComparison = TBaseHelper.compareTo(this.rechargeType, typedOther.rechargeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = TBaseHelper.compareTo(this.startTime, typedOther.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = TBaseHelper.compareTo(this.endTime, typedOther.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurStatus()).compareTo(typedOther.isSetCurStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurStatus()) {
      lastComparison = TBaseHelper.compareTo(this.curStatus, typedOther.curStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = TBaseHelper.compareTo(this.password, typedOther.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiRechargeEnable()).compareTo(typedOther.isSetMultiRechargeEnable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiRechargeEnable()) {
      lastComparison = TBaseHelper.compareTo(this.multiRechargeEnable, typedOther.multiRechargeEnable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsedCount()).compareTo(typedOther.isSetUsedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedCount()) {
      lastComparison = TBaseHelper.compareTo(this.UsedCount, typedOther.UsedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendCount()).compareTo(typedOther.isSetSendCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendCount()) {
      lastComparison = TBaseHelper.compareTo(this.SendCount, typedOther.SendCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PIECE_VALUE
          if (field.type == TType.STRING) {
            this.pieceValue = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TOTAL_COUNT
          if (field.type == TType.I32) {
            this.totalCount = iprot.readI32();
            setTotalCountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // RECHARGE_TYPE
          if (field.type == TType.STRING) {
            this.rechargeType = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // CREATE_TIME
          if (field.type == TType.STRING) {
            this.createTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // START_TIME
          if (field.type == TType.STRING) {
            this.startTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // END_TIME
          if (field.type == TType.STRING) {
            this.endTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // CUR_STATUS
          if (field.type == TType.STRING) {
            this.curStatus = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // PASSWORD
          if (field.type == TType.STRING) {
            this.password = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // MULTI_RECHARGE_ENABLE
          if (field.type == TType.STRING) {
            this.multiRechargeEnable = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // USED_COUNT
          if (field.type == TType.I32) {
            this.UsedCount = iprot.readI32();
            setUsedCountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // SEND_COUNT
          if (field.type == TType.I32) {
            this.SendCount = iprot.readI32();
            setSendCountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.pieceValue != null) {
      oprot.writeFieldBegin(PIECE_VALUE_FIELD_DESC);
      oprot.writeString(this.pieceValue);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
    oprot.writeI32(this.totalCount);
    oprot.writeFieldEnd();
    if (this.rechargeType != null) {
      oprot.writeFieldBegin(RECHARGE_TYPE_FIELD_DESC);
      oprot.writeString(this.rechargeType);
      oprot.writeFieldEnd();
    }
    if (this.createTime != null) {
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeString(this.createTime);
      oprot.writeFieldEnd();
    }
    if (this.startTime != null) {
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeString(this.startTime);
      oprot.writeFieldEnd();
    }
    if (this.endTime != null) {
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeString(this.endTime);
      oprot.writeFieldEnd();
    }
    if (this.curStatus != null) {
      oprot.writeFieldBegin(CUR_STATUS_FIELD_DESC);
      oprot.writeString(this.curStatus);
      oprot.writeFieldEnd();
    }
    if (this.password != null) {
      oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
      oprot.writeString(this.password);
      oprot.writeFieldEnd();
    }
    if (this.multiRechargeEnable != null) {
      oprot.writeFieldBegin(MULTI_RECHARGE_ENABLE_FIELD_DESC);
      oprot.writeString(this.multiRechargeEnable);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(USED_COUNT_FIELD_DESC);
    oprot.writeI32(this.UsedCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SEND_COUNT_FIELD_DESC);
    oprot.writeI32(this.SendCount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BatchActivity(");
    boolean first = true;
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pieceValue:");
    if (this.pieceValue == null) {
      sb.append("null");
    } else {
      sb.append(this.pieceValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rechargeType:");
    if (this.rechargeType == null) {
      sb.append("null");
    } else {
      sb.append(this.rechargeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("curStatus:");
    if (this.curStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.curStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("multiRechargeEnable:");
    if (this.multiRechargeEnable == null) {
      sb.append("null");
    } else {
      sb.append(this.multiRechargeEnable);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UsedCount:");
    sb.append(this.UsedCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SendCount:");
    sb.append(this.SendCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
