/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.buyer;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ValidateInfo implements TBase<ValidateInfo, ValidateInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ValidateInfo");

  private static final TField THIRD_TYPE_FIELD_DESC = new TField("thirdType", TType.I32, (short)1);
  private static final TField CUST_ID_FIELD_DESC = new TField("custId", TType.STRING, (short)2);
  private static final TField ACCESS_TOKEN_FIELD_DESC = new TField("accessToken", TType.STRING, (short)3);
  private static final TField OPEN_ID_FIELD_DESC = new TField("openId", TType.STRING, (short)4);
  private static final TField VALI_NUM_FIELD_DESC = new TField("valiNum", TType.STRING, (short)5);
  private static final TField VALI_NUM_TYPE_FIELD_DESC = new TField("valiNumType", TType.STRING, (short)6);


  public int thirdType;
  public String custId;
  public String accessToken;
  public String openId;
  public String valiNum;
  public String valiNumType;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    THIRD_TYPE((short)1, "thirdType"),
    CUST_ID((short)2, "custId"),
    ACCESS_TOKEN((short)3, "accessToken"),
    OPEN_ID((short)4, "openId"),
    VALI_NUM((short)5, "valiNum"),
    VALI_NUM_TYPE((short)6, "valiNumType");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // THIRD_TYPE
  	return THIRD_TYPE;
        case 2: // CUST_ID
  	return CUST_ID;
        case 3: // ACCESS_TOKEN
  	return ACCESS_TOKEN;
        case 4: // OPEN_ID
  	return OPEN_ID;
        case 5: // VALI_NUM
  	return VALI_NUM;
        case 6: // VALI_NUM_TYPE
  	return VALI_NUM_TYPE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __THIRDTYPE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.THIRD_TYPE, new FieldMetaData("thirdType", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CUST_ID, new FieldMetaData("custId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ACCESS_TOKEN, new FieldMetaData("accessToken", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.OPEN_ID, new FieldMetaData("openId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.VALI_NUM, new FieldMetaData("valiNum", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.VALI_NUM_TYPE, new FieldMetaData("valiNumType", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ValidateInfo.class, metaDataMap);
  }


  public ValidateInfo() {
  }

  public ValidateInfo(
    int thirdType,
    String custId,
    String accessToken,
    String openId)
  {
    this();
    this.thirdType = thirdType;
    setThirdTypeIsSet(true);
    this.custId = custId;
    this.accessToken = accessToken;
    this.openId = openId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ValidateInfo(ValidateInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.thirdType = other.thirdType;
    if (other.isSetCustId()) {
      this.custId = other.custId;
    }
    if (other.isSetAccessToken()) {
      this.accessToken = other.accessToken;
    }
    if (other.isSetOpenId()) {
      this.openId = other.openId;
    }
    if (other.isSetValiNum()) {
      this.valiNum = other.valiNum;
    }
    if (other.isSetValiNumType()) {
      this.valiNumType = other.valiNumType;
    }
  }

  public ValidateInfo deepCopy() {
    return new ValidateInfo(this);
  }

  @Override
  public void clear() {
    setThirdTypeIsSet(false);
    this.thirdType = 0;
    this.custId = null;
    this.accessToken = null;
    this.openId = null;
    this.valiNum = null;
    this.valiNumType = null;
  }

  public int getThirdType() {
    return this.thirdType;
  }

  public ValidateInfo setThirdType(int thirdType) {
    this.thirdType = thirdType;
    setThirdTypeIsSet(true);

    return this;
  }

  public void unsetThirdType() {
  __isset_bit_vector.clear(__THIRDTYPE_ISSET_ID);
  }

  /** Returns true if field thirdType is set (has been asigned a value) and false otherwise */
  public boolean isSetThirdType() {
    return __isset_bit_vector.get(__THIRDTYPE_ISSET_ID);
  }

  public void setThirdTypeIsSet(boolean value) {
    __isset_bit_vector.set(__THIRDTYPE_ISSET_ID, value);
  }

  public String getCustId() {
    return this.custId;
  }

  public ValidateInfo setCustId(String custId) {
    this.custId = custId;
    
    return this;
  }

  public void unsetCustId() {
    this.custId = null;
  }

  /** Returns true if field custId is set (has been asigned a value) and false otherwise */
  public boolean isSetCustId() {
    return this.custId != null;
  }

  public void setCustIdIsSet(boolean value) {
    if (!value) {
      this.custId = null;
    }
  }

  public String getAccessToken() {
    return this.accessToken;
  }

  public ValidateInfo setAccessToken(String accessToken) {
    this.accessToken = accessToken;
    
    return this;
  }

  public void unsetAccessToken() {
    this.accessToken = null;
  }

  /** Returns true if field accessToken is set (has been asigned a value) and false otherwise */
  public boolean isSetAccessToken() {
    return this.accessToken != null;
  }

  public void setAccessTokenIsSet(boolean value) {
    if (!value) {
      this.accessToken = null;
    }
  }

  public String getOpenId() {
    return this.openId;
  }

  public ValidateInfo setOpenId(String openId) {
    this.openId = openId;
    
    return this;
  }

  public void unsetOpenId() {
    this.openId = null;
  }

  /** Returns true if field openId is set (has been asigned a value) and false otherwise */
  public boolean isSetOpenId() {
    return this.openId != null;
  }

  public void setOpenIdIsSet(boolean value) {
    if (!value) {
      this.openId = null;
    }
  }

  public String getValiNum() {
    return this.valiNum;
  }

  public ValidateInfo setValiNum(String valiNum) {
    this.valiNum = valiNum;
    
    return this;
  }

  public void unsetValiNum() {
    this.valiNum = null;
  }

  /** Returns true if field valiNum is set (has been asigned a value) and false otherwise */
  public boolean isSetValiNum() {
    return this.valiNum != null;
  }

  public void setValiNumIsSet(boolean value) {
    if (!value) {
      this.valiNum = null;
    }
  }

  public String getValiNumType() {
    return this.valiNumType;
  }

  public ValidateInfo setValiNumType(String valiNumType) {
    this.valiNumType = valiNumType;
    
    return this;
  }

  public void unsetValiNumType() {
    this.valiNumType = null;
  }

  /** Returns true if field valiNumType is set (has been asigned a value) and false otherwise */
  public boolean isSetValiNumType() {
    return this.valiNumType != null;
  }

  public void setValiNumTypeIsSet(boolean value) {
    if (!value) {
      this.valiNumType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case THIRD_TYPE:
      if (value == null) {
        unsetThirdType();
      } else {
        setThirdType((Integer)value);
      }
      break;
    case CUST_ID:
      if (value == null) {
        unsetCustId();
      } else {
        setCustId((String)value);
      }
      break;
    case ACCESS_TOKEN:
      if (value == null) {
        unsetAccessToken();
      } else {
        setAccessToken((String)value);
      }
      break;
    case OPEN_ID:
      if (value == null) {
        unsetOpenId();
      } else {
        setOpenId((String)value);
      }
      break;
    case VALI_NUM:
      if (value == null) {
        unsetValiNum();
      } else {
        setValiNum((String)value);
      }
      break;
    case VALI_NUM_TYPE:
      if (value == null) {
        unsetValiNumType();
      } else {
        setValiNumType((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case THIRD_TYPE:
      return new Integer(getThirdType());
    case CUST_ID:
      return getCustId();
    case ACCESS_TOKEN:
      return getAccessToken();
    case OPEN_ID:
      return getOpenId();
    case VALI_NUM:
      return getValiNum();
    case VALI_NUM_TYPE:
      return getValiNumType();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case THIRD_TYPE:
      return isSetThirdType();
    case CUST_ID:
      return isSetCustId();
    case ACCESS_TOKEN:
      return isSetAccessToken();
    case OPEN_ID:
      return isSetOpenId();
    case VALI_NUM:
      return isSetValiNum();
    case VALI_NUM_TYPE:
      return isSetValiNumType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ValidateInfo)
      return this.equals((ValidateInfo)that);
    return false;
  }

  public boolean equals(ValidateInfo that) {
    if (that == null)
      return false;
    boolean this_present_thirdType = true;
    boolean that_present_thirdType = true;
    if (this_present_thirdType || that_present_thirdType) {
      if (!(this_present_thirdType && that_present_thirdType))
        return false;
      if (this.thirdType != that.thirdType)
        return false;
    }
    boolean this_present_custId = true && this.isSetCustId();
    boolean that_present_custId = true && that.isSetCustId();
    if (this_present_custId || that_present_custId) {
      if (!(this_present_custId && that_present_custId))
        return false;
      if (!this.custId.equals(that.custId))
        return false;
    }
    boolean this_present_accessToken = true && this.isSetAccessToken();
    boolean that_present_accessToken = true && that.isSetAccessToken();
    if (this_present_accessToken || that_present_accessToken) {
      if (!(this_present_accessToken && that_present_accessToken))
        return false;
      if (!this.accessToken.equals(that.accessToken))
        return false;
    }
    boolean this_present_openId = true && this.isSetOpenId();
    boolean that_present_openId = true && that.isSetOpenId();
    if (this_present_openId || that_present_openId) {
      if (!(this_present_openId && that_present_openId))
        return false;
      if (!this.openId.equals(that.openId))
        return false;
    }
    boolean this_present_valiNum = true && this.isSetValiNum();
    boolean that_present_valiNum = true && that.isSetValiNum();
    if (this_present_valiNum || that_present_valiNum) {
      if (!(this_present_valiNum && that_present_valiNum))
        return false;
      if (!this.valiNum.equals(that.valiNum))
        return false;
    }
    boolean this_present_valiNumType = true && this.isSetValiNumType();
    boolean that_present_valiNumType = true && that.isSetValiNumType();
    if (this_present_valiNumType || that_present_valiNumType) {
      if (!(this_present_valiNumType && that_present_valiNumType))
        return false;
      if (!this.valiNumType.equals(that.valiNumType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_thirdType = true;
    builder.append(present_thirdType);
    if (present_thirdType)
      builder.append(thirdType);
    boolean present_custId = true && (isSetCustId());
    builder.append(present_custId);
    if (present_custId)
      builder.append(custId);
    boolean present_accessToken = true && (isSetAccessToken());
    builder.append(present_accessToken);
    if (present_accessToken)
      builder.append(accessToken);
    boolean present_openId = true && (isSetOpenId());
    builder.append(present_openId);
    if (present_openId)
      builder.append(openId);
    boolean present_valiNum = true && (isSetValiNum());
    builder.append(present_valiNum);
    if (present_valiNum)
      builder.append(valiNum);
    boolean present_valiNumType = true && (isSetValiNumType());
    builder.append(present_valiNumType);
    if (present_valiNumType)
      builder.append(valiNumType);
    return builder.toHashCode();
  }

  public int compareTo(ValidateInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ValidateInfo typedOther = (ValidateInfo)other;

    lastComparison = Boolean.valueOf(isSetThirdType()).compareTo(typedOther.isSetThirdType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdType()) {
      lastComparison = TBaseHelper.compareTo(this.thirdType, typedOther.thirdType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustId()).compareTo(typedOther.isSetCustId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustId()) {
      lastComparison = TBaseHelper.compareTo(this.custId, typedOther.custId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(typedOther.isSetAccessToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessToken()) {
      lastComparison = TBaseHelper.compareTo(this.accessToken, typedOther.accessToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenId()).compareTo(typedOther.isSetOpenId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenId()) {
      lastComparison = TBaseHelper.compareTo(this.openId, typedOther.openId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValiNum()).compareTo(typedOther.isSetValiNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValiNum()) {
      lastComparison = TBaseHelper.compareTo(this.valiNum, typedOther.valiNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValiNumType()).compareTo(typedOther.isSetValiNumType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValiNumType()) {
      lastComparison = TBaseHelper.compareTo(this.valiNumType, typedOther.valiNumType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // THIRD_TYPE
          if (field.type == TType.I32) {
            this.thirdType = iprot.readI32();
            setThirdTypeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CUST_ID
          if (field.type == TType.STRING) {
            this.custId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ACCESS_TOKEN
          if (field.type == TType.STRING) {
            this.accessToken = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // OPEN_ID
          if (field.type == TType.STRING) {
            this.openId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // VALI_NUM
          if (field.type == TType.STRING) {
            this.valiNum = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // VALI_NUM_TYPE
          if (field.type == TType.STRING) {
            this.valiNumType = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(THIRD_TYPE_FIELD_DESC);
    oprot.writeI32(this.thirdType);
    oprot.writeFieldEnd();
    if (this.custId != null) {
      oprot.writeFieldBegin(CUST_ID_FIELD_DESC);
      oprot.writeString(this.custId);
      oprot.writeFieldEnd();
    }
    if (this.accessToken != null) {
      oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
      oprot.writeString(this.accessToken);
      oprot.writeFieldEnd();
    }
    if (this.openId != null) {
      oprot.writeFieldBegin(OPEN_ID_FIELD_DESC);
      oprot.writeString(this.openId);
      oprot.writeFieldEnd();
    }
    if (this.valiNum != null) {
      if (isSetValiNum()) {
        oprot.writeFieldBegin(VALI_NUM_FIELD_DESC);
        oprot.writeString(this.valiNum);
        oprot.writeFieldEnd();
      }
    }
    if (this.valiNumType != null) {
      if (isSetValiNumType()) {
        oprot.writeFieldBegin(VALI_NUM_TYPE_FIELD_DESC);
        oprot.writeString(this.valiNumType);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ValidateInfo(");
    boolean first = true;
    sb.append("thirdType:");
    sb.append(this.thirdType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("custId:");
    if (this.custId == null) {
      sb.append("null");
    } else {
      sb.append(this.custId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessToken:");
    if (this.accessToken == null) {
      sb.append("null");
    } else {
      sb.append(this.accessToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openId:");
    if (this.openId == null) {
      sb.append("null");
    } else {
      sb.append(this.openId);
    }
    first = false;
    if (isSetValiNum()) {
      if (!first) sb.append(", ");
      sb.append("valiNum:");
      if (this.valiNum == null) {
        sb.append("null");
      } else {
        sb.append(this.valiNum);
      }
      first = false;
      }
    if (isSetValiNumType()) {
      if (!first) sb.append(", ");
      sb.append("valiNumType:");
      if (this.valiNumType == null) {
        sb.append("null");
      } else {
        sb.append(this.valiNumType);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
