/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.buyer;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class UserInfoThird implements TBase<UserInfoThird, UserInfoThird._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("UserInfoThird");

  private static final TField CUST_ID_FIELD_DESC = new TField("custId", TType.STRING, (short)1);
  private static final TField MOBILE_FIELD_DESC = new TField("mobile", TType.STRING, (short)2);
  private static final TField THIRD_TYPE_FIELD_DESC = new TField("thirdType", TType.I32, (short)3);
  private static final TField EXT_INFO_FIELD_DESC = new TField("extInfo", TType.STRING, (short)4);


  public String custId;
  public String mobile;
  public int thirdType;
  public String extInfo;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    CUST_ID((short)1, "custId"),
    MOBILE((short)2, "mobile"),
    THIRD_TYPE((short)3, "thirdType"),
    EXT_INFO((short)4, "extInfo");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CUST_ID
  	return CUST_ID;
        case 2: // MOBILE
  	return MOBILE;
        case 3: // THIRD_TYPE
  	return THIRD_TYPE;
        case 4: // EXT_INFO
  	return EXT_INFO;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __THIRDTYPE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CUST_ID, new FieldMetaData("custId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new FieldMetaData("mobile", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.THIRD_TYPE, new FieldMetaData("thirdType", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.EXT_INFO, new FieldMetaData("extInfo", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(UserInfoThird.class, metaDataMap);
  }


  public UserInfoThird() {
  }

  public UserInfoThird(
    String custId,
    String mobile,
    int thirdType,
    String extInfo)
  {
    this();
    this.custId = custId;
    this.mobile = mobile;
    this.thirdType = thirdType;
    setThirdTypeIsSet(true);
    this.extInfo = extInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserInfoThird(UserInfoThird other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetCustId()) {
      this.custId = other.custId;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    this.thirdType = other.thirdType;
    if (other.isSetExtInfo()) {
      this.extInfo = other.extInfo;
    }
  }

  public UserInfoThird deepCopy() {
    return new UserInfoThird(this);
  }

  @Override
  public void clear() {
    this.custId = null;
    this.mobile = null;
    setThirdTypeIsSet(false);
    this.thirdType = 0;
    this.extInfo = null;
  }

  public String getCustId() {
    return this.custId;
  }

  public UserInfoThird setCustId(String custId) {
    this.custId = custId;
    
    return this;
  }

  public void unsetCustId() {
    this.custId = null;
  }

  /** Returns true if field custId is set (has been asigned a value) and false otherwise */
  public boolean isSetCustId() {
    return this.custId != null;
  }

  public void setCustIdIsSet(boolean value) {
    if (!value) {
      this.custId = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public UserInfoThird setMobile(String mobile) {
    this.mobile = mobile;
    
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been asigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public int getThirdType() {
    return this.thirdType;
  }

  public UserInfoThird setThirdType(int thirdType) {
    this.thirdType = thirdType;
    setThirdTypeIsSet(true);

    return this;
  }

  public void unsetThirdType() {
  __isset_bit_vector.clear(__THIRDTYPE_ISSET_ID);
  }

  /** Returns true if field thirdType is set (has been asigned a value) and false otherwise */
  public boolean isSetThirdType() {
    return __isset_bit_vector.get(__THIRDTYPE_ISSET_ID);
  }

  public void setThirdTypeIsSet(boolean value) {
    __isset_bit_vector.set(__THIRDTYPE_ISSET_ID, value);
  }

  public String getExtInfo() {
    return this.extInfo;
  }

  public UserInfoThird setExtInfo(String extInfo) {
    this.extInfo = extInfo;
    
    return this;
  }

  public void unsetExtInfo() {
    this.extInfo = null;
  }

  /** Returns true if field extInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetExtInfo() {
    return this.extInfo != null;
  }

  public void setExtInfoIsSet(boolean value) {
    if (!value) {
      this.extInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CUST_ID:
      if (value == null) {
        unsetCustId();
      } else {
        setCustId((String)value);
      }
      break;
    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;
    case THIRD_TYPE:
      if (value == null) {
        unsetThirdType();
      } else {
        setThirdType((Integer)value);
      }
      break;
    case EXT_INFO:
      if (value == null) {
        unsetExtInfo();
      } else {
        setExtInfo((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CUST_ID:
      return getCustId();
    case MOBILE:
      return getMobile();
    case THIRD_TYPE:
      return new Integer(getThirdType());
    case EXT_INFO:
      return getExtInfo();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CUST_ID:
      return isSetCustId();
    case MOBILE:
      return isSetMobile();
    case THIRD_TYPE:
      return isSetThirdType();
    case EXT_INFO:
      return isSetExtInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserInfoThird)
      return this.equals((UserInfoThird)that);
    return false;
  }

  public boolean equals(UserInfoThird that) {
    if (that == null)
      return false;
    boolean this_present_custId = true && this.isSetCustId();
    boolean that_present_custId = true && that.isSetCustId();
    if (this_present_custId || that_present_custId) {
      if (!(this_present_custId && that_present_custId))
        return false;
      if (!this.custId.equals(that.custId))
        return false;
    }
    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }
    boolean this_present_thirdType = true;
    boolean that_present_thirdType = true;
    if (this_present_thirdType || that_present_thirdType) {
      if (!(this_present_thirdType && that_present_thirdType))
        return false;
      if (this.thirdType != that.thirdType)
        return false;
    }
    boolean this_present_extInfo = true && this.isSetExtInfo();
    boolean that_present_extInfo = true && that.isSetExtInfo();
    if (this_present_extInfo || that_present_extInfo) {
      if (!(this_present_extInfo && that_present_extInfo))
        return false;
      if (!this.extInfo.equals(that.extInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_custId = true && (isSetCustId());
    builder.append(present_custId);
    if (present_custId)
      builder.append(custId);
    boolean present_mobile = true && (isSetMobile());
    builder.append(present_mobile);
    if (present_mobile)
      builder.append(mobile);
    boolean present_thirdType = true;
    builder.append(present_thirdType);
    if (present_thirdType)
      builder.append(thirdType);
    boolean present_extInfo = true && (isSetExtInfo());
    builder.append(present_extInfo);
    if (present_extInfo)
      builder.append(extInfo);
    return builder.toHashCode();
  }

  public int compareTo(UserInfoThird other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserInfoThird typedOther = (UserInfoThird)other;

    lastComparison = Boolean.valueOf(isSetCustId()).compareTo(typedOther.isSetCustId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustId()) {
      lastComparison = TBaseHelper.compareTo(this.custId, typedOther.custId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(typedOther.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = TBaseHelper.compareTo(this.mobile, typedOther.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdType()).compareTo(typedOther.isSetThirdType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdType()) {
      lastComparison = TBaseHelper.compareTo(this.thirdType, typedOther.thirdType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtInfo()).compareTo(typedOther.isSetExtInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtInfo()) {
      lastComparison = TBaseHelper.compareTo(this.extInfo, typedOther.extInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // CUST_ID
          if (field.type == TType.STRING) {
            this.custId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MOBILE
          if (field.type == TType.STRING) {
            this.mobile = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // THIRD_TYPE
          if (field.type == TType.I32) {
            this.thirdType = iprot.readI32();
            setThirdTypeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // EXT_INFO
          if (field.type == TType.STRING) {
            this.extInfo = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.custId != null) {
      oprot.writeFieldBegin(CUST_ID_FIELD_DESC);
      oprot.writeString(this.custId);
      oprot.writeFieldEnd();
    }
    if (this.mobile != null) {
      oprot.writeFieldBegin(MOBILE_FIELD_DESC);
      oprot.writeString(this.mobile);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(THIRD_TYPE_FIELD_DESC);
    oprot.writeI32(this.thirdType);
    oprot.writeFieldEnd();
    if (this.extInfo != null) {
      oprot.writeFieldBegin(EXT_INFO_FIELD_DESC);
      oprot.writeString(this.extInfo);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserInfoThird(");
    boolean first = true;
    sb.append("custId:");
    if (this.custId == null) {
      sb.append("null");
    } else {
      sb.append(this.custId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdType:");
    sb.append(this.thirdType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extInfo:");
    if (this.extInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.extInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
