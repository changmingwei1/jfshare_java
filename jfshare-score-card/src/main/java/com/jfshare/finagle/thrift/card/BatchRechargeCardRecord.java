/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.card;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class BatchRechargeCardRecord implements TBase<BatchRechargeCardRecord, BatchRechargeCardRecord._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BatchRechargeCardRecord");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I32, (short)1);
  private static final TField ACTIVITY_ID_FIELD_DESC = new TField("activityId", TType.I32, (short)2);
  private static final TField CARD_NAME_FIELD_DESC = new TField("cardName", TType.STRING, (short)3);
  private static final TField PIECE_VALUE_FIELD_DESC = new TField("pieceValue", TType.I32, (short)4);
  private static final TField RECHARGE_TYPE_FIELD_DESC = new TField("rechargeType", TType.STRING, (short)5);
  private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I32, (short)6);
  private static final TField RECHARGE_TIME_FIELD_DESC = new TField("rechargeTime", TType.STRING, (short)7);


  public int id;
  public int activityId;
  public String cardName;
  public int pieceValue;
  public String rechargeType;
  public int userId;
  public String rechargeTime;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    ACTIVITY_ID((short)2, "activityId"),
    CARD_NAME((short)3, "cardName"),
    PIECE_VALUE((short)4, "pieceValue"),
    RECHARGE_TYPE((short)5, "rechargeType"),
    USER_ID((short)6, "userId"),
    RECHARGE_TIME((short)7, "rechargeTime");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
  	return ID;
        case 2: // ACTIVITY_ID
  	return ACTIVITY_ID;
        case 3: // CARD_NAME
  	return CARD_NAME;
        case 4: // PIECE_VALUE
  	return PIECE_VALUE;
        case 5: // RECHARGE_TYPE
  	return RECHARGE_TYPE;
        case 6: // USER_ID
  	return USER_ID;
        case 7: // RECHARGE_TIME
  	return RECHARGE_TIME;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ACTIVITYID_ISSET_ID = 1;
  private static final int __PIECEVALUE_ISSET_ID = 2;
  private static final int __USERID_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ACTIVITY_ID, new FieldMetaData("activityId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CARD_NAME, new FieldMetaData("cardName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PIECE_VALUE, new FieldMetaData("pieceValue", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.RECHARGE_TYPE, new FieldMetaData("rechargeType", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.RECHARGE_TIME, new FieldMetaData("rechargeTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BatchRechargeCardRecord.class, metaDataMap);
  }


  public BatchRechargeCardRecord() {
  }

  public BatchRechargeCardRecord(
    int id,
    int activityId,
    String cardName,
    int pieceValue,
    String rechargeType,
    int userId,
    String rechargeTime)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.activityId = activityId;
    setActivityIdIsSet(true);
    this.cardName = cardName;
    this.pieceValue = pieceValue;
    setPieceValueIsSet(true);
    this.rechargeType = rechargeType;
    this.userId = userId;
    setUserIdIsSet(true);
    this.rechargeTime = rechargeTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BatchRechargeCardRecord(BatchRechargeCardRecord other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    this.activityId = other.activityId;
    if (other.isSetCardName()) {
      this.cardName = other.cardName;
    }
    this.pieceValue = other.pieceValue;
    if (other.isSetRechargeType()) {
      this.rechargeType = other.rechargeType;
    }
    this.userId = other.userId;
    if (other.isSetRechargeTime()) {
      this.rechargeTime = other.rechargeTime;
    }
  }

  public BatchRechargeCardRecord deepCopy() {
    return new BatchRechargeCardRecord(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setActivityIdIsSet(false);
    this.activityId = 0;
    this.cardName = null;
    setPieceValueIsSet(false);
    this.pieceValue = 0;
    this.rechargeType = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.rechargeTime = null;
  }

  public int getId() {
    return this.id;
  }

  public BatchRechargeCardRecord setId(int id) {
    this.id = id;
    setIdIsSet(true);

    return this;
  }

  public void unsetId() {
  __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public int getActivityId() {
    return this.activityId;
  }

  public BatchRechargeCardRecord setActivityId(int activityId) {
    this.activityId = activityId;
    setActivityIdIsSet(true);

    return this;
  }

  public void unsetActivityId() {
  __isset_bit_vector.clear(__ACTIVITYID_ISSET_ID);
  }

  /** Returns true if field activityId is set (has been asigned a value) and false otherwise */
  public boolean isSetActivityId() {
    return __isset_bit_vector.get(__ACTIVITYID_ISSET_ID);
  }

  public void setActivityIdIsSet(boolean value) {
    __isset_bit_vector.set(__ACTIVITYID_ISSET_ID, value);
  }

  public String getCardName() {
    return this.cardName;
  }

  public BatchRechargeCardRecord setCardName(String cardName) {
    this.cardName = cardName;
    
    return this;
  }

  public void unsetCardName() {
    this.cardName = null;
  }

  /** Returns true if field cardName is set (has been asigned a value) and false otherwise */
  public boolean isSetCardName() {
    return this.cardName != null;
  }

  public void setCardNameIsSet(boolean value) {
    if (!value) {
      this.cardName = null;
    }
  }

  public int getPieceValue() {
    return this.pieceValue;
  }

  public BatchRechargeCardRecord setPieceValue(int pieceValue) {
    this.pieceValue = pieceValue;
    setPieceValueIsSet(true);

    return this;
  }

  public void unsetPieceValue() {
  __isset_bit_vector.clear(__PIECEVALUE_ISSET_ID);
  }

  /** Returns true if field pieceValue is set (has been asigned a value) and false otherwise */
  public boolean isSetPieceValue() {
    return __isset_bit_vector.get(__PIECEVALUE_ISSET_ID);
  }

  public void setPieceValueIsSet(boolean value) {
    __isset_bit_vector.set(__PIECEVALUE_ISSET_ID, value);
  }

  public String getRechargeType() {
    return this.rechargeType;
  }

  public BatchRechargeCardRecord setRechargeType(String rechargeType) {
    this.rechargeType = rechargeType;
    
    return this;
  }

  public void unsetRechargeType() {
    this.rechargeType = null;
  }

  /** Returns true if field rechargeType is set (has been asigned a value) and false otherwise */
  public boolean isSetRechargeType() {
    return this.rechargeType != null;
  }

  public void setRechargeTypeIsSet(boolean value) {
    if (!value) {
      this.rechargeType = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public BatchRechargeCardRecord setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);

    return this;
  }

  public void unsetUserId() {
  __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been asigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public String getRechargeTime() {
    return this.rechargeTime;
  }

  public BatchRechargeCardRecord setRechargeTime(String rechargeTime) {
    this.rechargeTime = rechargeTime;
    
    return this;
  }

  public void unsetRechargeTime() {
    this.rechargeTime = null;
  }

  /** Returns true if field rechargeTime is set (has been asigned a value) and false otherwise */
  public boolean isSetRechargeTime() {
    return this.rechargeTime != null;
  }

  public void setRechargeTimeIsSet(boolean value) {
    if (!value) {
      this.rechargeTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;
    case ACTIVITY_ID:
      if (value == null) {
        unsetActivityId();
      } else {
        setActivityId((Integer)value);
      }
      break;
    case CARD_NAME:
      if (value == null) {
        unsetCardName();
      } else {
        setCardName((String)value);
      }
      break;
    case PIECE_VALUE:
      if (value == null) {
        unsetPieceValue();
      } else {
        setPieceValue((Integer)value);
      }
      break;
    case RECHARGE_TYPE:
      if (value == null) {
        unsetRechargeType();
      } else {
        setRechargeType((String)value);
      }
      break;
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;
    case RECHARGE_TIME:
      if (value == null) {
        unsetRechargeTime();
      } else {
        setRechargeTime((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Integer(getId());
    case ACTIVITY_ID:
      return new Integer(getActivityId());
    case CARD_NAME:
      return getCardName();
    case PIECE_VALUE:
      return new Integer(getPieceValue());
    case RECHARGE_TYPE:
      return getRechargeType();
    case USER_ID:
      return new Integer(getUserId());
    case RECHARGE_TIME:
      return getRechargeTime();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ACTIVITY_ID:
      return isSetActivityId();
    case CARD_NAME:
      return isSetCardName();
    case PIECE_VALUE:
      return isSetPieceValue();
    case RECHARGE_TYPE:
      return isSetRechargeType();
    case USER_ID:
      return isSetUserId();
    case RECHARGE_TIME:
      return isSetRechargeTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BatchRechargeCardRecord)
      return this.equals((BatchRechargeCardRecord)that);
    return false;
  }

  public boolean equals(BatchRechargeCardRecord that) {
    if (that == null)
      return false;
    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }
    boolean this_present_activityId = true;
    boolean that_present_activityId = true;
    if (this_present_activityId || that_present_activityId) {
      if (!(this_present_activityId && that_present_activityId))
        return false;
      if (this.activityId != that.activityId)
        return false;
    }
    boolean this_present_cardName = true && this.isSetCardName();
    boolean that_present_cardName = true && that.isSetCardName();
    if (this_present_cardName || that_present_cardName) {
      if (!(this_present_cardName && that_present_cardName))
        return false;
      if (!this.cardName.equals(that.cardName))
        return false;
    }
    boolean this_present_pieceValue = true;
    boolean that_present_pieceValue = true;
    if (this_present_pieceValue || that_present_pieceValue) {
      if (!(this_present_pieceValue && that_present_pieceValue))
        return false;
      if (this.pieceValue != that.pieceValue)
        return false;
    }
    boolean this_present_rechargeType = true && this.isSetRechargeType();
    boolean that_present_rechargeType = true && that.isSetRechargeType();
    if (this_present_rechargeType || that_present_rechargeType) {
      if (!(this_present_rechargeType && that_present_rechargeType))
        return false;
      if (!this.rechargeType.equals(that.rechargeType))
        return false;
    }
    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }
    boolean this_present_rechargeTime = true && this.isSetRechargeTime();
    boolean that_present_rechargeTime = true && that.isSetRechargeTime();
    if (this_present_rechargeTime || that_present_rechargeTime) {
      if (!(this_present_rechargeTime && that_present_rechargeTime))
        return false;
      if (!this.rechargeTime.equals(that.rechargeTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);
    boolean present_activityId = true;
    builder.append(present_activityId);
    if (present_activityId)
      builder.append(activityId);
    boolean present_cardName = true && (isSetCardName());
    builder.append(present_cardName);
    if (present_cardName)
      builder.append(cardName);
    boolean present_pieceValue = true;
    builder.append(present_pieceValue);
    if (present_pieceValue)
      builder.append(pieceValue);
    boolean present_rechargeType = true && (isSetRechargeType());
    builder.append(present_rechargeType);
    if (present_rechargeType)
      builder.append(rechargeType);
    boolean present_userId = true;
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);
    boolean present_rechargeTime = true && (isSetRechargeTime());
    builder.append(present_rechargeTime);
    if (present_rechargeTime)
      builder.append(rechargeTime);
    return builder.toHashCode();
  }

  public int compareTo(BatchRechargeCardRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BatchRechargeCardRecord typedOther = (BatchRechargeCardRecord)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivityId()).compareTo(typedOther.isSetActivityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivityId()) {
      lastComparison = TBaseHelper.compareTo(this.activityId, typedOther.activityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardName()).compareTo(typedOther.isSetCardName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardName()) {
      lastComparison = TBaseHelper.compareTo(this.cardName, typedOther.cardName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPieceValue()).compareTo(typedOther.isSetPieceValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPieceValue()) {
      lastComparison = TBaseHelper.compareTo(this.pieceValue, typedOther.pieceValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRechargeType()).compareTo(typedOther.isSetRechargeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRechargeType()) {
      lastComparison = TBaseHelper.compareTo(this.rechargeType, typedOther.rechargeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRechargeTime()).compareTo(typedOther.isSetRechargeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRechargeTime()) {
      lastComparison = TBaseHelper.compareTo(this.rechargeTime, typedOther.rechargeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ACTIVITY_ID
          if (field.type == TType.I32) {
            this.activityId = iprot.readI32();
            setActivityIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CARD_NAME
          if (field.type == TType.STRING) {
            this.cardName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PIECE_VALUE
          if (field.type == TType.I32) {
            this.pieceValue = iprot.readI32();
            setPieceValueIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // RECHARGE_TYPE
          if (field.type == TType.STRING) {
            this.rechargeType = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // USER_ID
          if (field.type == TType.I32) {
            this.userId = iprot.readI32();
            setUserIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // RECHARGE_TIME
          if (field.type == TType.STRING) {
            this.rechargeTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ACTIVITY_ID_FIELD_DESC);
    oprot.writeI32(this.activityId);
    oprot.writeFieldEnd();
    if (this.cardName != null) {
      oprot.writeFieldBegin(CARD_NAME_FIELD_DESC);
      oprot.writeString(this.cardName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PIECE_VALUE_FIELD_DESC);
    oprot.writeI32(this.pieceValue);
    oprot.writeFieldEnd();
    if (this.rechargeType != null) {
      oprot.writeFieldBegin(RECHARGE_TYPE_FIELD_DESC);
      oprot.writeString(this.rechargeType);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(USER_ID_FIELD_DESC);
    oprot.writeI32(this.userId);
    oprot.writeFieldEnd();
    if (this.rechargeTime != null) {
      oprot.writeFieldBegin(RECHARGE_TIME_FIELD_DESC);
      oprot.writeString(this.rechargeTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BatchRechargeCardRecord(");
    boolean first = true;
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activityId:");
    sb.append(this.activityId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardName:");
    if (this.cardName == null) {
      sb.append("null");
    } else {
      sb.append(this.cardName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pieceValue:");
    sb.append(this.pieceValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rechargeType:");
    if (this.rechargeType == null) {
      sb.append("null");
    } else {
      sb.append(this.rechargeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rechargeTime:");
    if (this.rechargeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.rechargeTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
