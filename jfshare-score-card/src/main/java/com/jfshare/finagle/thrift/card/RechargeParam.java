/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.card;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class RechargeParam implements TBase<RechargeParam, RechargeParam._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("RechargeParam");

  private static final TField CARD_NAME_FIELD_DESC = new TField("cardName", TType.STRING, (short)1);
  private static final TField CARD_PSD_FIELD_DESC = new TField("cardPsd", TType.STRING, (short)2);
  private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I32, (short)3);


  public String cardName;
  public String cardPsd;
  public int userId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    CARD_NAME((short)1, "cardName"),
    CARD_PSD((short)2, "cardPsd"),
    USER_ID((short)3, "userId");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CARD_NAME
  	return CARD_NAME;
        case 2: // CARD_PSD
  	return CARD_PSD;
        case 3: // USER_ID
  	return USER_ID;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CARD_NAME, new FieldMetaData("cardName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CARD_PSD, new FieldMetaData("cardPsd", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(RechargeParam.class, metaDataMap);
  }


  public RechargeParam() {
  }

  public RechargeParam(
    String cardName,
    String cardPsd,
    int userId)
  {
    this();
    this.cardName = cardName;
    this.cardPsd = cardPsd;
    this.userId = userId;
    setUserIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RechargeParam(RechargeParam other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetCardName()) {
      this.cardName = other.cardName;
    }
    if (other.isSetCardPsd()) {
      this.cardPsd = other.cardPsd;
    }
    this.userId = other.userId;
  }

  public RechargeParam deepCopy() {
    return new RechargeParam(this);
  }

  @Override
  public void clear() {
    this.cardName = null;
    this.cardPsd = null;
    setUserIdIsSet(false);
    this.userId = 0;
  }

  public String getCardName() {
    return this.cardName;
  }

  public RechargeParam setCardName(String cardName) {
    this.cardName = cardName;
    
    return this;
  }

  public void unsetCardName() {
    this.cardName = null;
  }

  /** Returns true if field cardName is set (has been asigned a value) and false otherwise */
  public boolean isSetCardName() {
    return this.cardName != null;
  }

  public void setCardNameIsSet(boolean value) {
    if (!value) {
      this.cardName = null;
    }
  }

  public String getCardPsd() {
    return this.cardPsd;
  }

  public RechargeParam setCardPsd(String cardPsd) {
    this.cardPsd = cardPsd;
    
    return this;
  }

  public void unsetCardPsd() {
    this.cardPsd = null;
  }

  /** Returns true if field cardPsd is set (has been asigned a value) and false otherwise */
  public boolean isSetCardPsd() {
    return this.cardPsd != null;
  }

  public void setCardPsdIsSet(boolean value) {
    if (!value) {
      this.cardPsd = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public RechargeParam setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);

    return this;
  }

  public void unsetUserId() {
  __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been asigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CARD_NAME:
      if (value == null) {
        unsetCardName();
      } else {
        setCardName((String)value);
      }
      break;
    case CARD_PSD:
      if (value == null) {
        unsetCardPsd();
      } else {
        setCardPsd((String)value);
      }
      break;
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CARD_NAME:
      return getCardName();
    case CARD_PSD:
      return getCardPsd();
    case USER_ID:
      return new Integer(getUserId());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CARD_NAME:
      return isSetCardName();
    case CARD_PSD:
      return isSetCardPsd();
    case USER_ID:
      return isSetUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RechargeParam)
      return this.equals((RechargeParam)that);
    return false;
  }

  public boolean equals(RechargeParam that) {
    if (that == null)
      return false;
    boolean this_present_cardName = true && this.isSetCardName();
    boolean that_present_cardName = true && that.isSetCardName();
    if (this_present_cardName || that_present_cardName) {
      if (!(this_present_cardName && that_present_cardName))
        return false;
      if (!this.cardName.equals(that.cardName))
        return false;
    }
    boolean this_present_cardPsd = true && this.isSetCardPsd();
    boolean that_present_cardPsd = true && that.isSetCardPsd();
    if (this_present_cardPsd || that_present_cardPsd) {
      if (!(this_present_cardPsd && that_present_cardPsd))
        return false;
      if (!this.cardPsd.equals(that.cardPsd))
        return false;
    }
    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_cardName = true && (isSetCardName());
    builder.append(present_cardName);
    if (present_cardName)
      builder.append(cardName);
    boolean present_cardPsd = true && (isSetCardPsd());
    builder.append(present_cardPsd);
    if (present_cardPsd)
      builder.append(cardPsd);
    boolean present_userId = true;
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);
    return builder.toHashCode();
  }

  public int compareTo(RechargeParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RechargeParam typedOther = (RechargeParam)other;

    lastComparison = Boolean.valueOf(isSetCardName()).compareTo(typedOther.isSetCardName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardName()) {
      lastComparison = TBaseHelper.compareTo(this.cardName, typedOther.cardName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardPsd()).compareTo(typedOther.isSetCardPsd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardPsd()) {
      lastComparison = TBaseHelper.compareTo(this.cardPsd, typedOther.cardPsd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // CARD_NAME
          if (field.type == TType.STRING) {
            this.cardName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CARD_PSD
          if (field.type == TType.STRING) {
            this.cardPsd = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // USER_ID
          if (field.type == TType.I32) {
            this.userId = iprot.readI32();
            setUserIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.cardName != null) {
      oprot.writeFieldBegin(CARD_NAME_FIELD_DESC);
      oprot.writeString(this.cardName);
      oprot.writeFieldEnd();
    }
    if (this.cardPsd != null) {
      oprot.writeFieldBegin(CARD_PSD_FIELD_DESC);
      oprot.writeString(this.cardPsd);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(USER_ID_FIELD_DESC);
    oprot.writeI32(this.userId);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RechargeParam(");
    boolean first = true;
    sb.append("cardName:");
    if (this.cardName == null) {
      sb.append("null");
    } else {
      sb.append(this.cardName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardPsd:");
    if (this.cardPsd == null) {
      sb.append("null");
    } else {
      sb.append(this.cardPsd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
