/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.jfshare.finagle.thrift.buyer;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

import com.twitter.util.Future;
import com.twitter.util.Function;
import com.twitter.util.Function2;
import com.twitter.util.Try;
import com.twitter.util.Return;
import com.twitter.util.Throw;
import com.twitter.finagle.thrift.ThriftClientRequest;

public class BuyerServ {
  public interface Iface {
    public com.jfshare.finagle.thrift.result.BoolResult buyerIsExist(String loginName) throws TException;
    public com.jfshare.finagle.thrift.result.Result signin(Buyer buyer) throws TException;
    public com.jfshare.finagle.thrift.result.Result newSignin(Buyer buyer) throws TException;
    public BuyerResult login(Buyer buyer, LoginLog loginLog) throws TException;
    public BuyerResult newLogin(Buyer buyer, LoginLog loginLog) throws TException;
    public BuyerResult smsLogin(Buyer buyer, LoginLog loginLog) throws TException;
    public com.jfshare.finagle.thrift.result.Result logout(LoginLog loginLog) throws TException;
    public BuyerResult isOnline(LoginLog loginLog) throws TException;
    public BuyerResult getOnlineInfo(LoginLog loginLog) throws TException;
    public com.jfshare.finagle.thrift.result.StringResult pwdFind(int findWay, String account) throws TException;
    public BuyerResult getBuyer(Buyer buyer) throws TException;
    public BuyerListResult getListBuyer(List<Integer> userIdList) throws TException;
    public com.jfshare.finagle.thrift.result.Result updateBuyer(Buyer buyer) throws TException;
    public com.jfshare.finagle.thrift.result.Result resetBuyerPwd(String newPwd, Buyer buyer) throws TException;
    public com.jfshare.finagle.thrift.result.Result newResetBuyerPwd(String newPwd, Buyer buyer) throws TException;
    public BuyerResult signinThirdParty(LoginLog loginLog, ThirdpartyUser thirdUser) throws TException;
    public BuyerResult isBindThirdParty(String thirdType, LoginLog loginLog) throws TException;
    public AuthInfoResult getAuthInfo(AuthInfo authInfo, Buyer buyer, LoginLog loginLog) throws TException;
    public com.jfshare.finagle.thrift.result.Result validAuth(LoginLog loginLog, AuthInfo authInfo) throws TException;
    public BuyerResult thirdUserSignin(LoginLog loginLog, UserInfoThird UserThird, ValidateInfo validateInfo) throws TException;
    public BuyerResult isExitsThirdUser(LoginLog loginLog, ValidateInfo validateInfo) throws TException;
    public BuyerResult requestHttps(String url, String extInfo) throws TException;
  }

  public interface AsyncIface {
    public void buyerIsExist(String loginName, AsyncMethodCallback<AsyncClient.buyerIsExist_call> resultHandler) throws TException;
    public void signin(Buyer buyer, AsyncMethodCallback<AsyncClient.signin_call> resultHandler) throws TException;
    public void newSignin(Buyer buyer, AsyncMethodCallback<AsyncClient.newSignin_call> resultHandler) throws TException;
    public void login(Buyer buyer, LoginLog loginLog, AsyncMethodCallback<AsyncClient.login_call> resultHandler) throws TException;
    public void newLogin(Buyer buyer, LoginLog loginLog, AsyncMethodCallback<AsyncClient.newLogin_call> resultHandler) throws TException;
    public void smsLogin(Buyer buyer, LoginLog loginLog, AsyncMethodCallback<AsyncClient.smsLogin_call> resultHandler) throws TException;
    public void logout(LoginLog loginLog, AsyncMethodCallback<AsyncClient.logout_call> resultHandler) throws TException;
    public void isOnline(LoginLog loginLog, AsyncMethodCallback<AsyncClient.isOnline_call> resultHandler) throws TException;
    public void getOnlineInfo(LoginLog loginLog, AsyncMethodCallback<AsyncClient.getOnlineInfo_call> resultHandler) throws TException;
    public void pwdFind(int findWay, String account, AsyncMethodCallback<AsyncClient.pwdFind_call> resultHandler) throws TException;
    public void getBuyer(Buyer buyer, AsyncMethodCallback<AsyncClient.getBuyer_call> resultHandler) throws TException;
    public void getListBuyer(List<Integer> userIdList, AsyncMethodCallback<AsyncClient.getListBuyer_call> resultHandler) throws TException;
    public void updateBuyer(Buyer buyer, AsyncMethodCallback<AsyncClient.updateBuyer_call> resultHandler) throws TException;
    public void resetBuyerPwd(String newPwd, Buyer buyer, AsyncMethodCallback<AsyncClient.resetBuyerPwd_call> resultHandler) throws TException;
    public void newResetBuyerPwd(String newPwd, Buyer buyer, AsyncMethodCallback<AsyncClient.newResetBuyerPwd_call> resultHandler) throws TException;
    public void signinThirdParty(LoginLog loginLog, ThirdpartyUser thirdUser, AsyncMethodCallback<AsyncClient.signinThirdParty_call> resultHandler) throws TException;
    public void isBindThirdParty(String thirdType, LoginLog loginLog, AsyncMethodCallback<AsyncClient.isBindThirdParty_call> resultHandler) throws TException;
    public void getAuthInfo(AuthInfo authInfo, Buyer buyer, LoginLog loginLog, AsyncMethodCallback<AsyncClient.getAuthInfo_call> resultHandler) throws TException;
    public void validAuth(LoginLog loginLog, AuthInfo authInfo, AsyncMethodCallback<AsyncClient.validAuth_call> resultHandler) throws TException;
    public void thirdUserSignin(LoginLog loginLog, UserInfoThird UserThird, ValidateInfo validateInfo, AsyncMethodCallback<AsyncClient.thirdUserSignin_call> resultHandler) throws TException;
    public void isExitsThirdUser(LoginLog loginLog, ValidateInfo validateInfo, AsyncMethodCallback<AsyncClient.isExitsThirdUser_call> resultHandler) throws TException;
    public void requestHttps(String url, String extInfo, AsyncMethodCallback<AsyncClient.requestHttps_call> resultHandler) throws TException;
  }

  public interface ServiceIface {
    public Future<com.jfshare.finagle.thrift.result.BoolResult> buyerIsExist(String loginName);
    public Future<com.jfshare.finagle.thrift.result.Result> signin(Buyer buyer);
    public Future<com.jfshare.finagle.thrift.result.Result> newSignin(Buyer buyer);
    public Future<BuyerResult> login(Buyer buyer, LoginLog loginLog);
    public Future<BuyerResult> newLogin(Buyer buyer, LoginLog loginLog);
    public Future<BuyerResult> smsLogin(Buyer buyer, LoginLog loginLog);
    public Future<com.jfshare.finagle.thrift.result.Result> logout(LoginLog loginLog);
    public Future<BuyerResult> isOnline(LoginLog loginLog);
    public Future<BuyerResult> getOnlineInfo(LoginLog loginLog);
    public Future<com.jfshare.finagle.thrift.result.StringResult> pwdFind(int findWay, String account);
    public Future<BuyerResult> getBuyer(Buyer buyer);
    public Future<BuyerListResult> getListBuyer(List<Integer> userIdList);
    public Future<com.jfshare.finagle.thrift.result.Result> updateBuyer(Buyer buyer);
    public Future<com.jfshare.finagle.thrift.result.Result> resetBuyerPwd(String newPwd, Buyer buyer);
    public Future<com.jfshare.finagle.thrift.result.Result> newResetBuyerPwd(String newPwd, Buyer buyer);
    public Future<BuyerResult> signinThirdParty(LoginLog loginLog, ThirdpartyUser thirdUser);
    public Future<BuyerResult> isBindThirdParty(String thirdType, LoginLog loginLog);
    public Future<AuthInfoResult> getAuthInfo(AuthInfo authInfo, Buyer buyer, LoginLog loginLog);
    public Future<com.jfshare.finagle.thrift.result.Result> validAuth(LoginLog loginLog, AuthInfo authInfo);
    public Future<BuyerResult> thirdUserSignin(LoginLog loginLog, UserInfoThird UserThird, ValidateInfo validateInfo);
    public Future<BuyerResult> isExitsThirdUser(LoginLog loginLog, ValidateInfo validateInfo);
    public Future<BuyerResult> requestHttps(String url, String extInfo);
  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public com.jfshare.finagle.thrift.result.BoolResult buyerIsExist(String loginName) throws TException
    {
      send_buyerIsExist(loginName);
      return recv_buyerIsExist();
    }

    public void send_buyerIsExist(String loginName) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("buyerIsExist", TMessageType.CALL, ++seqid_));
      buyerIsExist_args args = new buyerIsExist_args();
      args.setLoginName(loginName);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.BoolResult recv_buyerIsExist() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "buyerIsExist failed: out of sequence response");
      }
      buyerIsExist_result result = new buyerIsExist_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "buyerIsExist failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.Result signin(Buyer buyer) throws TException
    {
      send_signin(buyer);
      return recv_signin();
    }

    public void send_signin(Buyer buyer) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("signin", TMessageType.CALL, ++seqid_));
      signin_args args = new signin_args();
      args.setBuyer(buyer);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_signin() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "signin failed: out of sequence response");
      }
      signin_result result = new signin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "signin failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.Result newSignin(Buyer buyer) throws TException
    {
      send_newSignin(buyer);
      return recv_newSignin();
    }

    public void send_newSignin(Buyer buyer) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("newSignin", TMessageType.CALL, ++seqid_));
      newSignin_args args = new newSignin_args();
      args.setBuyer(buyer);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_newSignin() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "newSignin failed: out of sequence response");
      }
      newSignin_result result = new newSignin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "newSignin failed: unknown result");
    }
    public BuyerResult login(Buyer buyer, LoginLog loginLog) throws TException
    {
      send_login(buyer, loginLog);
      return recv_login();
    }

    public void send_login(Buyer buyer, LoginLog loginLog) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("login", TMessageType.CALL, ++seqid_));
      login_args args = new login_args();
      args.setBuyer(buyer);
      args.setLoginLog(loginLog);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BuyerResult recv_login() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "login failed: out of sequence response");
      }
      login_result result = new login_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "login failed: unknown result");
    }
    public BuyerResult newLogin(Buyer buyer, LoginLog loginLog) throws TException
    {
      send_newLogin(buyer, loginLog);
      return recv_newLogin();
    }

    public void send_newLogin(Buyer buyer, LoginLog loginLog) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("newLogin", TMessageType.CALL, ++seqid_));
      newLogin_args args = new newLogin_args();
      args.setBuyer(buyer);
      args.setLoginLog(loginLog);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BuyerResult recv_newLogin() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "newLogin failed: out of sequence response");
      }
      newLogin_result result = new newLogin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "newLogin failed: unknown result");
    }
    public BuyerResult smsLogin(Buyer buyer, LoginLog loginLog) throws TException
    {
      send_smsLogin(buyer, loginLog);
      return recv_smsLogin();
    }

    public void send_smsLogin(Buyer buyer, LoginLog loginLog) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("smsLogin", TMessageType.CALL, ++seqid_));
      smsLogin_args args = new smsLogin_args();
      args.setBuyer(buyer);
      args.setLoginLog(loginLog);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BuyerResult recv_smsLogin() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "smsLogin failed: out of sequence response");
      }
      smsLogin_result result = new smsLogin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "smsLogin failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.Result logout(LoginLog loginLog) throws TException
    {
      send_logout(loginLog);
      return recv_logout();
    }

    public void send_logout(LoginLog loginLog) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("logout", TMessageType.CALL, ++seqid_));
      logout_args args = new logout_args();
      args.setLoginLog(loginLog);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_logout() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "logout failed: out of sequence response");
      }
      logout_result result = new logout_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "logout failed: unknown result");
    }
    public BuyerResult isOnline(LoginLog loginLog) throws TException
    {
      send_isOnline(loginLog);
      return recv_isOnline();
    }

    public void send_isOnline(LoginLog loginLog) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("isOnline", TMessageType.CALL, ++seqid_));
      isOnline_args args = new isOnline_args();
      args.setLoginLog(loginLog);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BuyerResult recv_isOnline() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "isOnline failed: out of sequence response");
      }
      isOnline_result result = new isOnline_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "isOnline failed: unknown result");
    }
    public BuyerResult getOnlineInfo(LoginLog loginLog) throws TException
    {
      send_getOnlineInfo(loginLog);
      return recv_getOnlineInfo();
    }

    public void send_getOnlineInfo(LoginLog loginLog) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getOnlineInfo", TMessageType.CALL, ++seqid_));
      getOnlineInfo_args args = new getOnlineInfo_args();
      args.setLoginLog(loginLog);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BuyerResult recv_getOnlineInfo() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getOnlineInfo failed: out of sequence response");
      }
      getOnlineInfo_result result = new getOnlineInfo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getOnlineInfo failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.StringResult pwdFind(int findWay, String account) throws TException
    {
      send_pwdFind(findWay, account);
      return recv_pwdFind();
    }

    public void send_pwdFind(int findWay, String account) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("pwdFind", TMessageType.CALL, ++seqid_));
      pwdFind_args args = new pwdFind_args();
      args.setFindWay(findWay);
      args.setAccount(account);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.StringResult recv_pwdFind() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "pwdFind failed: out of sequence response");
      }
      pwdFind_result result = new pwdFind_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "pwdFind failed: unknown result");
    }
    public BuyerResult getBuyer(Buyer buyer) throws TException
    {
      send_getBuyer(buyer);
      return recv_getBuyer();
    }

    public void send_getBuyer(Buyer buyer) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getBuyer", TMessageType.CALL, ++seqid_));
      getBuyer_args args = new getBuyer_args();
      args.setBuyer(buyer);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BuyerResult recv_getBuyer() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getBuyer failed: out of sequence response");
      }
      getBuyer_result result = new getBuyer_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getBuyer failed: unknown result");
    }
    public BuyerListResult getListBuyer(List<Integer> userIdList) throws TException
    {
      send_getListBuyer(userIdList);
      return recv_getListBuyer();
    }

    public void send_getListBuyer(List<Integer> userIdList) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getListBuyer", TMessageType.CALL, ++seqid_));
      getListBuyer_args args = new getListBuyer_args();
      args.setUserIdList(userIdList);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BuyerListResult recv_getListBuyer() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getListBuyer failed: out of sequence response");
      }
      getListBuyer_result result = new getListBuyer_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getListBuyer failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.Result updateBuyer(Buyer buyer) throws TException
    {
      send_updateBuyer(buyer);
      return recv_updateBuyer();
    }

    public void send_updateBuyer(Buyer buyer) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateBuyer", TMessageType.CALL, ++seqid_));
      updateBuyer_args args = new updateBuyer_args();
      args.setBuyer(buyer);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_updateBuyer() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateBuyer failed: out of sequence response");
      }
      updateBuyer_result result = new updateBuyer_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateBuyer failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.Result resetBuyerPwd(String newPwd, Buyer buyer) throws TException
    {
      send_resetBuyerPwd(newPwd, buyer);
      return recv_resetBuyerPwd();
    }

    public void send_resetBuyerPwd(String newPwd, Buyer buyer) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("resetBuyerPwd", TMessageType.CALL, ++seqid_));
      resetBuyerPwd_args args = new resetBuyerPwd_args();
      args.setNewPwd(newPwd);
      args.setBuyer(buyer);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_resetBuyerPwd() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "resetBuyerPwd failed: out of sequence response");
      }
      resetBuyerPwd_result result = new resetBuyerPwd_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "resetBuyerPwd failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.Result newResetBuyerPwd(String newPwd, Buyer buyer) throws TException
    {
      send_newResetBuyerPwd(newPwd, buyer);
      return recv_newResetBuyerPwd();
    }

    public void send_newResetBuyerPwd(String newPwd, Buyer buyer) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("newResetBuyerPwd", TMessageType.CALL, ++seqid_));
      newResetBuyerPwd_args args = new newResetBuyerPwd_args();
      args.setNewPwd(newPwd);
      args.setBuyer(buyer);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_newResetBuyerPwd() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "newResetBuyerPwd failed: out of sequence response");
      }
      newResetBuyerPwd_result result = new newResetBuyerPwd_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "newResetBuyerPwd failed: unknown result");
    }
    public BuyerResult signinThirdParty(LoginLog loginLog, ThirdpartyUser thirdUser) throws TException
    {
      send_signinThirdParty(loginLog, thirdUser);
      return recv_signinThirdParty();
    }

    public void send_signinThirdParty(LoginLog loginLog, ThirdpartyUser thirdUser) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("signinThirdParty", TMessageType.CALL, ++seqid_));
      signinThirdParty_args args = new signinThirdParty_args();
      args.setLoginLog(loginLog);
      args.setThirdUser(thirdUser);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BuyerResult recv_signinThirdParty() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "signinThirdParty failed: out of sequence response");
      }
      signinThirdParty_result result = new signinThirdParty_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "signinThirdParty failed: unknown result");
    }
    public BuyerResult isBindThirdParty(String thirdType, LoginLog loginLog) throws TException
    {
      send_isBindThirdParty(thirdType, loginLog);
      return recv_isBindThirdParty();
    }

    public void send_isBindThirdParty(String thirdType, LoginLog loginLog) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("isBindThirdParty", TMessageType.CALL, ++seqid_));
      isBindThirdParty_args args = new isBindThirdParty_args();
      args.setThirdType(thirdType);
      args.setLoginLog(loginLog);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BuyerResult recv_isBindThirdParty() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "isBindThirdParty failed: out of sequence response");
      }
      isBindThirdParty_result result = new isBindThirdParty_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "isBindThirdParty failed: unknown result");
    }
    public AuthInfoResult getAuthInfo(AuthInfo authInfo, Buyer buyer, LoginLog loginLog) throws TException
    {
      send_getAuthInfo(authInfo, buyer, loginLog);
      return recv_getAuthInfo();
    }

    public void send_getAuthInfo(AuthInfo authInfo, Buyer buyer, LoginLog loginLog) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAuthInfo", TMessageType.CALL, ++seqid_));
      getAuthInfo_args args = new getAuthInfo_args();
      args.setAuthInfo(authInfo);
      args.setBuyer(buyer);
      args.setLoginLog(loginLog);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public AuthInfoResult recv_getAuthInfo() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAuthInfo failed: out of sequence response");
      }
      getAuthInfo_result result = new getAuthInfo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAuthInfo failed: unknown result");
    }
    public com.jfshare.finagle.thrift.result.Result validAuth(LoginLog loginLog, AuthInfo authInfo) throws TException
    {
      send_validAuth(loginLog, authInfo);
      return recv_validAuth();
    }

    public void send_validAuth(LoginLog loginLog, AuthInfo authInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("validAuth", TMessageType.CALL, ++seqid_));
      validAuth_args args = new validAuth_args();
      args.setLoginLog(loginLog);
      args.setAuthInfo(authInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.jfshare.finagle.thrift.result.Result recv_validAuth() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "validAuth failed: out of sequence response");
      }
      validAuth_result result = new validAuth_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "validAuth failed: unknown result");
    }
    public BuyerResult thirdUserSignin(LoginLog loginLog, UserInfoThird UserThird, ValidateInfo validateInfo) throws TException
    {
      send_thirdUserSignin(loginLog, UserThird, validateInfo);
      return recv_thirdUserSignin();
    }

    public void send_thirdUserSignin(LoginLog loginLog, UserInfoThird UserThird, ValidateInfo validateInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("thirdUserSignin", TMessageType.CALL, ++seqid_));
      thirdUserSignin_args args = new thirdUserSignin_args();
      args.setLoginLog(loginLog);
      args.setUserThird(UserThird);
      args.setValidateInfo(validateInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BuyerResult recv_thirdUserSignin() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "thirdUserSignin failed: out of sequence response");
      }
      thirdUserSignin_result result = new thirdUserSignin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "thirdUserSignin failed: unknown result");
    }
    public BuyerResult isExitsThirdUser(LoginLog loginLog, ValidateInfo validateInfo) throws TException
    {
      send_isExitsThirdUser(loginLog, validateInfo);
      return recv_isExitsThirdUser();
    }

    public void send_isExitsThirdUser(LoginLog loginLog, ValidateInfo validateInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("isExitsThirdUser", TMessageType.CALL, ++seqid_));
      isExitsThirdUser_args args = new isExitsThirdUser_args();
      args.setLoginLog(loginLog);
      args.setValidateInfo(validateInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BuyerResult recv_isExitsThirdUser() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "isExitsThirdUser failed: out of sequence response");
      }
      isExitsThirdUser_result result = new isExitsThirdUser_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "isExitsThirdUser failed: unknown result");
    }
    public BuyerResult requestHttps(String url, String extInfo) throws TException
    {
      send_requestHttps(url, extInfo);
      return recv_requestHttps();
    }

    public void send_requestHttps(String url, String extInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("requestHttps", TMessageType.CALL, ++seqid_));
      requestHttps_args args = new requestHttps_args();
      args.setUrl(url);
      args.setExtInfo(extInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BuyerResult recv_requestHttps() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "requestHttps failed: out of sequence response");
      }
      requestHttps_result result = new requestHttps_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "requestHttps failed: unknown result");
    }
  }

  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void buyerIsExist(String loginName, AsyncMethodCallback<buyerIsExist_call> resultHandler) throws TException {
      checkReady();
      buyerIsExist_call method_call = new buyerIsExist_call(loginName, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class buyerIsExist_call extends TAsyncMethodCall {
      private String loginName;

      public buyerIsExist_call(String loginName, AsyncMethodCallback<buyerIsExist_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginName = loginName;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("buyerIsExist", TMessageType.CALL, 0));
        buyerIsExist_args args = new buyerIsExist_args();
        args.setLoginName(loginName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.BoolResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_buyerIsExist();
      }
     }
    public void signin(Buyer buyer, AsyncMethodCallback<signin_call> resultHandler) throws TException {
      checkReady();
      signin_call method_call = new signin_call(buyer, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class signin_call extends TAsyncMethodCall {
      private Buyer buyer;

      public signin_call(Buyer buyer, AsyncMethodCallback<signin_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.buyer = buyer;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("signin", TMessageType.CALL, 0));
        signin_args args = new signin_args();
        args.setBuyer(buyer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_signin();
      }
     }
    public void newSignin(Buyer buyer, AsyncMethodCallback<newSignin_call> resultHandler) throws TException {
      checkReady();
      newSignin_call method_call = new newSignin_call(buyer, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class newSignin_call extends TAsyncMethodCall {
      private Buyer buyer;

      public newSignin_call(Buyer buyer, AsyncMethodCallback<newSignin_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.buyer = buyer;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("newSignin", TMessageType.CALL, 0));
        newSignin_args args = new newSignin_args();
        args.setBuyer(buyer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_newSignin();
      }
     }
    public void login(Buyer buyer, LoginLog loginLog, AsyncMethodCallback<login_call> resultHandler) throws TException {
      checkReady();
      login_call method_call = new login_call(buyer, loginLog, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class login_call extends TAsyncMethodCall {
      private Buyer buyer;
      private LoginLog loginLog;

      public login_call(Buyer buyer, LoginLog loginLog, AsyncMethodCallback<login_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.buyer = buyer;
        this.loginLog = loginLog;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("login", TMessageType.CALL, 0));
        login_args args = new login_args();
        args.setBuyer(buyer);
        args.setLoginLog(loginLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BuyerResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_login();
      }
     }
    public void newLogin(Buyer buyer, LoginLog loginLog, AsyncMethodCallback<newLogin_call> resultHandler) throws TException {
      checkReady();
      newLogin_call method_call = new newLogin_call(buyer, loginLog, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class newLogin_call extends TAsyncMethodCall {
      private Buyer buyer;
      private LoginLog loginLog;

      public newLogin_call(Buyer buyer, LoginLog loginLog, AsyncMethodCallback<newLogin_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.buyer = buyer;
        this.loginLog = loginLog;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("newLogin", TMessageType.CALL, 0));
        newLogin_args args = new newLogin_args();
        args.setBuyer(buyer);
        args.setLoginLog(loginLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BuyerResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_newLogin();
      }
     }
    public void smsLogin(Buyer buyer, LoginLog loginLog, AsyncMethodCallback<smsLogin_call> resultHandler) throws TException {
      checkReady();
      smsLogin_call method_call = new smsLogin_call(buyer, loginLog, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class smsLogin_call extends TAsyncMethodCall {
      private Buyer buyer;
      private LoginLog loginLog;

      public smsLogin_call(Buyer buyer, LoginLog loginLog, AsyncMethodCallback<smsLogin_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.buyer = buyer;
        this.loginLog = loginLog;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("smsLogin", TMessageType.CALL, 0));
        smsLogin_args args = new smsLogin_args();
        args.setBuyer(buyer);
        args.setLoginLog(loginLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BuyerResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_smsLogin();
      }
     }
    public void logout(LoginLog loginLog, AsyncMethodCallback<logout_call> resultHandler) throws TException {
      checkReady();
      logout_call method_call = new logout_call(loginLog, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class logout_call extends TAsyncMethodCall {
      private LoginLog loginLog;

      public logout_call(LoginLog loginLog, AsyncMethodCallback<logout_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginLog = loginLog;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("logout", TMessageType.CALL, 0));
        logout_args args = new logout_args();
        args.setLoginLog(loginLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_logout();
      }
     }
    public void isOnline(LoginLog loginLog, AsyncMethodCallback<isOnline_call> resultHandler) throws TException {
      checkReady();
      isOnline_call method_call = new isOnline_call(loginLog, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class isOnline_call extends TAsyncMethodCall {
      private LoginLog loginLog;

      public isOnline_call(LoginLog loginLog, AsyncMethodCallback<isOnline_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginLog = loginLog;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("isOnline", TMessageType.CALL, 0));
        isOnline_args args = new isOnline_args();
        args.setLoginLog(loginLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BuyerResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isOnline();
      }
     }
    public void getOnlineInfo(LoginLog loginLog, AsyncMethodCallback<getOnlineInfo_call> resultHandler) throws TException {
      checkReady();
      getOnlineInfo_call method_call = new getOnlineInfo_call(loginLog, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getOnlineInfo_call extends TAsyncMethodCall {
      private LoginLog loginLog;

      public getOnlineInfo_call(LoginLog loginLog, AsyncMethodCallback<getOnlineInfo_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginLog = loginLog;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getOnlineInfo", TMessageType.CALL, 0));
        getOnlineInfo_args args = new getOnlineInfo_args();
        args.setLoginLog(loginLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BuyerResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOnlineInfo();
      }
     }
    public void pwdFind(int findWay, String account, AsyncMethodCallback<pwdFind_call> resultHandler) throws TException {
      checkReady();
      pwdFind_call method_call = new pwdFind_call(findWay, account, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class pwdFind_call extends TAsyncMethodCall {
      private int findWay;
      private String account;

      public pwdFind_call(int findWay, String account, AsyncMethodCallback<pwdFind_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.findWay = findWay;
        this.account = account;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("pwdFind", TMessageType.CALL, 0));
        pwdFind_args args = new pwdFind_args();
        args.setFindWay(findWay);
        args.setAccount(account);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.StringResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pwdFind();
      }
     }
    public void getBuyer(Buyer buyer, AsyncMethodCallback<getBuyer_call> resultHandler) throws TException {
      checkReady();
      getBuyer_call method_call = new getBuyer_call(buyer, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getBuyer_call extends TAsyncMethodCall {
      private Buyer buyer;

      public getBuyer_call(Buyer buyer, AsyncMethodCallback<getBuyer_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.buyer = buyer;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getBuyer", TMessageType.CALL, 0));
        getBuyer_args args = new getBuyer_args();
        args.setBuyer(buyer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BuyerResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBuyer();
      }
     }
    public void getListBuyer(List<Integer> userIdList, AsyncMethodCallback<getListBuyer_call> resultHandler) throws TException {
      checkReady();
      getListBuyer_call method_call = new getListBuyer_call(userIdList, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getListBuyer_call extends TAsyncMethodCall {
      private List<Integer> userIdList;

      public getListBuyer_call(List<Integer> userIdList, AsyncMethodCallback<getListBuyer_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userIdList = userIdList;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getListBuyer", TMessageType.CALL, 0));
        getListBuyer_args args = new getListBuyer_args();
        args.setUserIdList(userIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BuyerListResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListBuyer();
      }
     }
    public void updateBuyer(Buyer buyer, AsyncMethodCallback<updateBuyer_call> resultHandler) throws TException {
      checkReady();
      updateBuyer_call method_call = new updateBuyer_call(buyer, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class updateBuyer_call extends TAsyncMethodCall {
      private Buyer buyer;

      public updateBuyer_call(Buyer buyer, AsyncMethodCallback<updateBuyer_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.buyer = buyer;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("updateBuyer", TMessageType.CALL, 0));
        updateBuyer_args args = new updateBuyer_args();
        args.setBuyer(buyer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBuyer();
      }
     }
    public void resetBuyerPwd(String newPwd, Buyer buyer, AsyncMethodCallback<resetBuyerPwd_call> resultHandler) throws TException {
      checkReady();
      resetBuyerPwd_call method_call = new resetBuyerPwd_call(newPwd, buyer, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class resetBuyerPwd_call extends TAsyncMethodCall {
      private String newPwd;
      private Buyer buyer;

      public resetBuyerPwd_call(String newPwd, Buyer buyer, AsyncMethodCallback<resetBuyerPwd_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newPwd = newPwd;
        this.buyer = buyer;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("resetBuyerPwd", TMessageType.CALL, 0));
        resetBuyerPwd_args args = new resetBuyerPwd_args();
        args.setNewPwd(newPwd);
        args.setBuyer(buyer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resetBuyerPwd();
      }
     }
    public void newResetBuyerPwd(String newPwd, Buyer buyer, AsyncMethodCallback<newResetBuyerPwd_call> resultHandler) throws TException {
      checkReady();
      newResetBuyerPwd_call method_call = new newResetBuyerPwd_call(newPwd, buyer, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class newResetBuyerPwd_call extends TAsyncMethodCall {
      private String newPwd;
      private Buyer buyer;

      public newResetBuyerPwd_call(String newPwd, Buyer buyer, AsyncMethodCallback<newResetBuyerPwd_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newPwd = newPwd;
        this.buyer = buyer;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("newResetBuyerPwd", TMessageType.CALL, 0));
        newResetBuyerPwd_args args = new newResetBuyerPwd_args();
        args.setNewPwd(newPwd);
        args.setBuyer(buyer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_newResetBuyerPwd();
      }
     }
    public void signinThirdParty(LoginLog loginLog, ThirdpartyUser thirdUser, AsyncMethodCallback<signinThirdParty_call> resultHandler) throws TException {
      checkReady();
      signinThirdParty_call method_call = new signinThirdParty_call(loginLog, thirdUser, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class signinThirdParty_call extends TAsyncMethodCall {
      private LoginLog loginLog;
      private ThirdpartyUser thirdUser;

      public signinThirdParty_call(LoginLog loginLog, ThirdpartyUser thirdUser, AsyncMethodCallback<signinThirdParty_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginLog = loginLog;
        this.thirdUser = thirdUser;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("signinThirdParty", TMessageType.CALL, 0));
        signinThirdParty_args args = new signinThirdParty_args();
        args.setLoginLog(loginLog);
        args.setThirdUser(thirdUser);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BuyerResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_signinThirdParty();
      }
     }
    public void isBindThirdParty(String thirdType, LoginLog loginLog, AsyncMethodCallback<isBindThirdParty_call> resultHandler) throws TException {
      checkReady();
      isBindThirdParty_call method_call = new isBindThirdParty_call(thirdType, loginLog, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class isBindThirdParty_call extends TAsyncMethodCall {
      private String thirdType;
      private LoginLog loginLog;

      public isBindThirdParty_call(String thirdType, LoginLog loginLog, AsyncMethodCallback<isBindThirdParty_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.thirdType = thirdType;
        this.loginLog = loginLog;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("isBindThirdParty", TMessageType.CALL, 0));
        isBindThirdParty_args args = new isBindThirdParty_args();
        args.setThirdType(thirdType);
        args.setLoginLog(loginLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BuyerResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isBindThirdParty();
      }
     }
    public void getAuthInfo(AuthInfo authInfo, Buyer buyer, LoginLog loginLog, AsyncMethodCallback<getAuthInfo_call> resultHandler) throws TException {
      checkReady();
      getAuthInfo_call method_call = new getAuthInfo_call(authInfo, buyer, loginLog, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getAuthInfo_call extends TAsyncMethodCall {
      private AuthInfo authInfo;
      private Buyer buyer;
      private LoginLog loginLog;

      public getAuthInfo_call(AuthInfo authInfo, Buyer buyer, LoginLog loginLog, AsyncMethodCallback<getAuthInfo_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authInfo = authInfo;
        this.buyer = buyer;
        this.loginLog = loginLog;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getAuthInfo", TMessageType.CALL, 0));
        getAuthInfo_args args = new getAuthInfo_args();
        args.setAuthInfo(authInfo);
        args.setBuyer(buyer);
        args.setLoginLog(loginLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AuthInfoResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAuthInfo();
      }
     }
    public void validAuth(LoginLog loginLog, AuthInfo authInfo, AsyncMethodCallback<validAuth_call> resultHandler) throws TException {
      checkReady();
      validAuth_call method_call = new validAuth_call(loginLog, authInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class validAuth_call extends TAsyncMethodCall {
      private LoginLog loginLog;
      private AuthInfo authInfo;

      public validAuth_call(LoginLog loginLog, AuthInfo authInfo, AsyncMethodCallback<validAuth_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginLog = loginLog;
        this.authInfo = authInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("validAuth", TMessageType.CALL, 0));
        validAuth_args args = new validAuth_args();
        args.setLoginLog(loginLog);
        args.setAuthInfo(authInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.jfshare.finagle.thrift.result.Result getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_validAuth();
      }
     }
    public void thirdUserSignin(LoginLog loginLog, UserInfoThird UserThird, ValidateInfo validateInfo, AsyncMethodCallback<thirdUserSignin_call> resultHandler) throws TException {
      checkReady();
      thirdUserSignin_call method_call = new thirdUserSignin_call(loginLog, UserThird, validateInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class thirdUserSignin_call extends TAsyncMethodCall {
      private LoginLog loginLog;
      private UserInfoThird UserThird;
      private ValidateInfo validateInfo;

      public thirdUserSignin_call(LoginLog loginLog, UserInfoThird UserThird, ValidateInfo validateInfo, AsyncMethodCallback<thirdUserSignin_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginLog = loginLog;
        this.UserThird = UserThird;
        this.validateInfo = validateInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("thirdUserSignin", TMessageType.CALL, 0));
        thirdUserSignin_args args = new thirdUserSignin_args();
        args.setLoginLog(loginLog);
        args.setUserThird(UserThird);
        args.setValidateInfo(validateInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BuyerResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_thirdUserSignin();
      }
     }
    public void isExitsThirdUser(LoginLog loginLog, ValidateInfo validateInfo, AsyncMethodCallback<isExitsThirdUser_call> resultHandler) throws TException {
      checkReady();
      isExitsThirdUser_call method_call = new isExitsThirdUser_call(loginLog, validateInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class isExitsThirdUser_call extends TAsyncMethodCall {
      private LoginLog loginLog;
      private ValidateInfo validateInfo;

      public isExitsThirdUser_call(LoginLog loginLog, ValidateInfo validateInfo, AsyncMethodCallback<isExitsThirdUser_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginLog = loginLog;
        this.validateInfo = validateInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("isExitsThirdUser", TMessageType.CALL, 0));
        isExitsThirdUser_args args = new isExitsThirdUser_args();
        args.setLoginLog(loginLog);
        args.setValidateInfo(validateInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BuyerResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isExitsThirdUser();
      }
     }
    public void requestHttps(String url, String extInfo, AsyncMethodCallback<requestHttps_call> resultHandler) throws TException {
      checkReady();
      requestHttps_call method_call = new requestHttps_call(url, extInfo, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class requestHttps_call extends TAsyncMethodCall {
      private String url;
      private String extInfo;

      public requestHttps_call(String url, String extInfo, AsyncMethodCallback<requestHttps_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.url = url;
        this.extInfo = extInfo;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("requestHttps", TMessageType.CALL, 0));
        requestHttps_args args = new requestHttps_args();
        args.setUrl(url);
        args.setExtInfo(extInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BuyerResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestHttps();
      }
     }
   }


  public static class ServiceToClient implements ServiceIface {
    private com.twitter.finagle.Service<ThriftClientRequest, byte[]> service;
    private TProtocolFactory protocolFactory;
    public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service, TProtocolFactory protocolFactory) {
      
      this.service = service;
      this.protocolFactory = protocolFactory;
    }

    public Future<com.jfshare.finagle.thrift.result.BoolResult> buyerIsExist(String loginName) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("buyerIsExist", TMessageType.CALL, 0));
        buyerIsExist_args __args__ = new buyerIsExist_args();
        __args__.setLoginName(loginName);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.BoolResult>>() {
          public Future<com.jfshare.finagle.thrift.result.BoolResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_buyerIsExist());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.Result> signin(Buyer buyer) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("signin", TMessageType.CALL, 0));
        signin_args __args__ = new signin_args();
        __args__.setBuyer(buyer);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_signin());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.Result> newSignin(Buyer buyer) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("newSignin", TMessageType.CALL, 0));
        newSignin_args __args__ = new newSignin_args();
        __args__.setBuyer(buyer);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_newSignin());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<BuyerResult> login(Buyer buyer, LoginLog loginLog) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("login", TMessageType.CALL, 0));
        login_args __args__ = new login_args();
        __args__.setBuyer(buyer);
        __args__.setLoginLog(loginLog);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<BuyerResult>>() {
          public Future<BuyerResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_login());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<BuyerResult> newLogin(Buyer buyer, LoginLog loginLog) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("newLogin", TMessageType.CALL, 0));
        newLogin_args __args__ = new newLogin_args();
        __args__.setBuyer(buyer);
        __args__.setLoginLog(loginLog);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<BuyerResult>>() {
          public Future<BuyerResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_newLogin());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<BuyerResult> smsLogin(Buyer buyer, LoginLog loginLog) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("smsLogin", TMessageType.CALL, 0));
        smsLogin_args __args__ = new smsLogin_args();
        __args__.setBuyer(buyer);
        __args__.setLoginLog(loginLog);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<BuyerResult>>() {
          public Future<BuyerResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_smsLogin());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.Result> logout(LoginLog loginLog) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("logout", TMessageType.CALL, 0));
        logout_args __args__ = new logout_args();
        __args__.setLoginLog(loginLog);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_logout());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<BuyerResult> isOnline(LoginLog loginLog) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("isOnline", TMessageType.CALL, 0));
        isOnline_args __args__ = new isOnline_args();
        __args__.setLoginLog(loginLog);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<BuyerResult>>() {
          public Future<BuyerResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_isOnline());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<BuyerResult> getOnlineInfo(LoginLog loginLog) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("getOnlineInfo", TMessageType.CALL, 0));
        getOnlineInfo_args __args__ = new getOnlineInfo_args();
        __args__.setLoginLog(loginLog);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<BuyerResult>>() {
          public Future<BuyerResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_getOnlineInfo());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.StringResult> pwdFind(int findWay, String account) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("pwdFind", TMessageType.CALL, 0));
        pwdFind_args __args__ = new pwdFind_args();
        __args__.setFindWay(findWay);
        __args__.setAccount(account);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.StringResult>>() {
          public Future<com.jfshare.finagle.thrift.result.StringResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_pwdFind());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<BuyerResult> getBuyer(Buyer buyer) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("getBuyer", TMessageType.CALL, 0));
        getBuyer_args __args__ = new getBuyer_args();
        __args__.setBuyer(buyer);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<BuyerResult>>() {
          public Future<BuyerResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_getBuyer());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<BuyerListResult> getListBuyer(List<Integer> userIdList) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("getListBuyer", TMessageType.CALL, 0));
        getListBuyer_args __args__ = new getListBuyer_args();
        __args__.setUserIdList(userIdList);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<BuyerListResult>>() {
          public Future<BuyerListResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_getListBuyer());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.Result> updateBuyer(Buyer buyer) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("updateBuyer", TMessageType.CALL, 0));
        updateBuyer_args __args__ = new updateBuyer_args();
        __args__.setBuyer(buyer);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_updateBuyer());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.Result> resetBuyerPwd(String newPwd, Buyer buyer) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("resetBuyerPwd", TMessageType.CALL, 0));
        resetBuyerPwd_args __args__ = new resetBuyerPwd_args();
        __args__.setNewPwd(newPwd);
        __args__.setBuyer(buyer);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_resetBuyerPwd());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.Result> newResetBuyerPwd(String newPwd, Buyer buyer) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("newResetBuyerPwd", TMessageType.CALL, 0));
        newResetBuyerPwd_args __args__ = new newResetBuyerPwd_args();
        __args__.setNewPwd(newPwd);
        __args__.setBuyer(buyer);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_newResetBuyerPwd());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<BuyerResult> signinThirdParty(LoginLog loginLog, ThirdpartyUser thirdUser) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("signinThirdParty", TMessageType.CALL, 0));
        signinThirdParty_args __args__ = new signinThirdParty_args();
        __args__.setLoginLog(loginLog);
        __args__.setThirdUser(thirdUser);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<BuyerResult>>() {
          public Future<BuyerResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_signinThirdParty());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<BuyerResult> isBindThirdParty(String thirdType, LoginLog loginLog) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("isBindThirdParty", TMessageType.CALL, 0));
        isBindThirdParty_args __args__ = new isBindThirdParty_args();
        __args__.setThirdType(thirdType);
        __args__.setLoginLog(loginLog);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<BuyerResult>>() {
          public Future<BuyerResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_isBindThirdParty());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<AuthInfoResult> getAuthInfo(AuthInfo authInfo, Buyer buyer, LoginLog loginLog) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("getAuthInfo", TMessageType.CALL, 0));
        getAuthInfo_args __args__ = new getAuthInfo_args();
        __args__.setAuthInfo(authInfo);
        __args__.setBuyer(buyer);
        __args__.setLoginLog(loginLog);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<AuthInfoResult>>() {
          public Future<AuthInfoResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_getAuthInfo());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<com.jfshare.finagle.thrift.result.Result> validAuth(LoginLog loginLog, AuthInfo authInfo) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("validAuth", TMessageType.CALL, 0));
        validAuth_args __args__ = new validAuth_args();
        __args__.setLoginLog(loginLog);
        __args__.setAuthInfo(authInfo);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<com.jfshare.finagle.thrift.result.Result>>() {
          public Future<com.jfshare.finagle.thrift.result.Result> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_validAuth());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<BuyerResult> thirdUserSignin(LoginLog loginLog, UserInfoThird UserThird, ValidateInfo validateInfo) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("thirdUserSignin", TMessageType.CALL, 0));
        thirdUserSignin_args __args__ = new thirdUserSignin_args();
        __args__.setLoginLog(loginLog);
        __args__.setUserThird(UserThird);
        __args__.setValidateInfo(validateInfo);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<BuyerResult>>() {
          public Future<BuyerResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_thirdUserSignin());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<BuyerResult> isExitsThirdUser(LoginLog loginLog, ValidateInfo validateInfo) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("isExitsThirdUser", TMessageType.CALL, 0));
        isExitsThirdUser_args __args__ = new isExitsThirdUser_args();
        __args__.setLoginLog(loginLog);
        __args__.setValidateInfo(validateInfo);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<BuyerResult>>() {
          public Future<BuyerResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_isExitsThirdUser());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
    public Future<BuyerResult> requestHttps(String url, String extInfo) {
      try {
        // TODO: size
        TMemoryBuffer __memoryTransport__ = new TMemoryBuffer(512);
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("requestHttps", TMessageType.CALL, 0));
        requestHttps_args __args__ = new requestHttps_args();
        __args__.setUrl(url);
        __args__.setExtInfo(extInfo);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOfRange(__memoryTransport__.getArray(), 0, __memoryTransport__.length());
        ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);
        Future<byte[]> __done__ = this.service.apply(__request__);
        return __done__.flatMap(new Function<byte[], Future<BuyerResult>>() {
          public Future<BuyerResult> apply(byte[] __buffer__) {
            TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
            TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
            try {
              return Future.value((new Client(__prot__)).recv_requestHttps());
            } catch (Exception e) {
              return Future.exception(e);
            }
          }
        });
      } catch (TException e) {
        return Future.exception(e);
      }
    }
  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("buyerIsExist", new buyerIsExist());
      processMap_.put("signin", new signin());
      processMap_.put("newSignin", new newSignin());
      processMap_.put("login", new login());
      processMap_.put("newLogin", new newLogin());
      processMap_.put("smsLogin", new smsLogin());
      processMap_.put("logout", new logout());
      processMap_.put("isOnline", new isOnline());
      processMap_.put("getOnlineInfo", new getOnlineInfo());
      processMap_.put("pwdFind", new pwdFind());
      processMap_.put("getBuyer", new getBuyer());
      processMap_.put("getListBuyer", new getListBuyer());
      processMap_.put("updateBuyer", new updateBuyer());
      processMap_.put("resetBuyerPwd", new resetBuyerPwd());
      processMap_.put("newResetBuyerPwd", new newResetBuyerPwd());
      processMap_.put("signinThirdParty", new signinThirdParty());
      processMap_.put("isBindThirdParty", new isBindThirdParty());
      processMap_.put("getAuthInfo", new getAuthInfo());
      processMap_.put("validAuth", new validAuth());
      processMap_.put("thirdUserSignin", new thirdUserSignin());
      processMap_.put("isExitsThirdUser", new isExitsThirdUser());
      processMap_.put("requestHttps", new requestHttps());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class buyerIsExist implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        buyerIsExist_args args = new buyerIsExist_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("buyerIsExist", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        buyerIsExist_result result = new buyerIsExist_result();
        result.success = iface_.buyerIsExist(args.loginName);
        
        oprot.writeMessageBegin(new TMessage("buyerIsExist", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class signin implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        signin_args args = new signin_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("signin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        signin_result result = new signin_result();
        result.success = iface_.signin(args.buyer);
        
        oprot.writeMessageBegin(new TMessage("signin", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class newSignin implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        newSignin_args args = new newSignin_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("newSignin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        newSignin_result result = new newSignin_result();
        result.success = iface_.newSignin(args.buyer);
        
        oprot.writeMessageBegin(new TMessage("newSignin", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class login implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        login_args args = new login_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("login", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        login_result result = new login_result();
        result.success = iface_.login(args.buyer, args.loginLog);
        
        oprot.writeMessageBegin(new TMessage("login", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class newLogin implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        newLogin_args args = new newLogin_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("newLogin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        newLogin_result result = new newLogin_result();
        result.success = iface_.newLogin(args.buyer, args.loginLog);
        
        oprot.writeMessageBegin(new TMessage("newLogin", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class smsLogin implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        smsLogin_args args = new smsLogin_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("smsLogin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        smsLogin_result result = new smsLogin_result();
        result.success = iface_.smsLogin(args.buyer, args.loginLog);
        
        oprot.writeMessageBegin(new TMessage("smsLogin", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class logout implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        logout_args args = new logout_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("logout", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        logout_result result = new logout_result();
        result.success = iface_.logout(args.loginLog);
        
        oprot.writeMessageBegin(new TMessage("logout", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class isOnline implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        isOnline_args args = new isOnline_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("isOnline", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        isOnline_result result = new isOnline_result();
        result.success = iface_.isOnline(args.loginLog);
        
        oprot.writeMessageBegin(new TMessage("isOnline", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class getOnlineInfo implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getOnlineInfo_args args = new getOnlineInfo_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getOnlineInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getOnlineInfo_result result = new getOnlineInfo_result();
        result.success = iface_.getOnlineInfo(args.loginLog);
        
        oprot.writeMessageBegin(new TMessage("getOnlineInfo", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class pwdFind implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        pwdFind_args args = new pwdFind_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("pwdFind", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        pwdFind_result result = new pwdFind_result();
        result.success = iface_.pwdFind(args.findWay, args.account);
        
        oprot.writeMessageBegin(new TMessage("pwdFind", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class getBuyer implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getBuyer_args args = new getBuyer_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getBuyer", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getBuyer_result result = new getBuyer_result();
        result.success = iface_.getBuyer(args.buyer);
        
        oprot.writeMessageBegin(new TMessage("getBuyer", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class getListBuyer implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getListBuyer_args args = new getListBuyer_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getListBuyer", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getListBuyer_result result = new getListBuyer_result();
        result.success = iface_.getListBuyer(args.userIdList);
        
        oprot.writeMessageBegin(new TMessage("getListBuyer", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class updateBuyer implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateBuyer_args args = new updateBuyer_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateBuyer", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateBuyer_result result = new updateBuyer_result();
        result.success = iface_.updateBuyer(args.buyer);
        
        oprot.writeMessageBegin(new TMessage("updateBuyer", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class resetBuyerPwd implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        resetBuyerPwd_args args = new resetBuyerPwd_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("resetBuyerPwd", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        resetBuyerPwd_result result = new resetBuyerPwd_result();
        result.success = iface_.resetBuyerPwd(args.newPwd, args.buyer);
        
        oprot.writeMessageBegin(new TMessage("resetBuyerPwd", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class newResetBuyerPwd implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        newResetBuyerPwd_args args = new newResetBuyerPwd_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("newResetBuyerPwd", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        newResetBuyerPwd_result result = new newResetBuyerPwd_result();
        result.success = iface_.newResetBuyerPwd(args.newPwd, args.buyer);
        
        oprot.writeMessageBegin(new TMessage("newResetBuyerPwd", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class signinThirdParty implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        signinThirdParty_args args = new signinThirdParty_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("signinThirdParty", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        signinThirdParty_result result = new signinThirdParty_result();
        result.success = iface_.signinThirdParty(args.loginLog, args.thirdUser);
        
        oprot.writeMessageBegin(new TMessage("signinThirdParty", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class isBindThirdParty implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        isBindThirdParty_args args = new isBindThirdParty_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("isBindThirdParty", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        isBindThirdParty_result result = new isBindThirdParty_result();
        result.success = iface_.isBindThirdParty(args.thirdType, args.loginLog);
        
        oprot.writeMessageBegin(new TMessage("isBindThirdParty", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class getAuthInfo implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAuthInfo_args args = new getAuthInfo_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAuthInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAuthInfo_result result = new getAuthInfo_result();
        result.success = iface_.getAuthInfo(args.authInfo, args.buyer, args.loginLog);
        
        oprot.writeMessageBegin(new TMessage("getAuthInfo", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class validAuth implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        validAuth_args args = new validAuth_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("validAuth", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        validAuth_result result = new validAuth_result();
        result.success = iface_.validAuth(args.loginLog, args.authInfo);
        
        oprot.writeMessageBegin(new TMessage("validAuth", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class thirdUserSignin implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        thirdUserSignin_args args = new thirdUserSignin_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("thirdUserSignin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        thirdUserSignin_result result = new thirdUserSignin_result();
        result.success = iface_.thirdUserSignin(args.loginLog, args.UserThird, args.validateInfo);
        
        oprot.writeMessageBegin(new TMessage("thirdUserSignin", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class isExitsThirdUser implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        isExitsThirdUser_args args = new isExitsThirdUser_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("isExitsThirdUser", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        isExitsThirdUser_result result = new isExitsThirdUser_result();
        result.success = iface_.isExitsThirdUser(args.loginLog, args.validateInfo);
        
        oprot.writeMessageBegin(new TMessage("isExitsThirdUser", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class requestHttps implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        requestHttps_args args = new requestHttps_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("requestHttps", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        requestHttps_result result = new requestHttps_result();
        result.success = iface_.requestHttps(args.url, args.extInfo);
        
        oprot.writeMessageBegin(new TMessage("requestHttps", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
  }

  public static class Service extends com.twitter.finagle.Service<byte[], byte[]> {
    private final ServiceIface iface;
    private final TProtocolFactory protocolFactory;
    protected HashMap<String, Function2<TProtocol, Integer, Future<byte[]>>> functionMap = new HashMap<String, Function2<TProtocol, Integer, Future<byte[]>>>();
    public Service(final ServiceIface iface, final TProtocolFactory protocolFactory) {
      this.iface = iface;
      this.protocolFactory = protocolFactory;
      functionMap.put("buyerIsExist", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          buyerIsExist_args args = new buyerIsExist_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("buyerIsExist", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.BoolResult> future;
          try {
            future = iface.buyerIsExist(args.loginName);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.BoolResult, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.BoolResult value) {
                buyerIsExist_result result = new buyerIsExist_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("buyerIsExist", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("signin", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          signin_args args = new signin_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("signin", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.signin(args.buyer);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                signin_result result = new signin_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("signin", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("newSignin", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          newSignin_args args = new newSignin_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("newSignin", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.newSignin(args.buyer);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                newSignin_result result = new newSignin_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("newSignin", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("login", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          login_args args = new login_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("login", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<BuyerResult> future;
          try {
            future = iface.login(args.buyer, args.loginLog);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<BuyerResult, Future<byte[]>>() {
              public Future<byte[]> apply(BuyerResult value) {
                login_result result = new login_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("login", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("newLogin", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          newLogin_args args = new newLogin_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("newLogin", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<BuyerResult> future;
          try {
            future = iface.newLogin(args.buyer, args.loginLog);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<BuyerResult, Future<byte[]>>() {
              public Future<byte[]> apply(BuyerResult value) {
                newLogin_result result = new newLogin_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("newLogin", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("smsLogin", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          smsLogin_args args = new smsLogin_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("smsLogin", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<BuyerResult> future;
          try {
            future = iface.smsLogin(args.buyer, args.loginLog);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<BuyerResult, Future<byte[]>>() {
              public Future<byte[]> apply(BuyerResult value) {
                smsLogin_result result = new smsLogin_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("smsLogin", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("logout", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          logout_args args = new logout_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("logout", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.logout(args.loginLog);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                logout_result result = new logout_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("logout", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("isOnline", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          isOnline_args args = new isOnline_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("isOnline", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<BuyerResult> future;
          try {
            future = iface.isOnline(args.loginLog);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<BuyerResult, Future<byte[]>>() {
              public Future<byte[]> apply(BuyerResult value) {
                isOnline_result result = new isOnline_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("isOnline", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("getOnlineInfo", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          getOnlineInfo_args args = new getOnlineInfo_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("getOnlineInfo", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<BuyerResult> future;
          try {
            future = iface.getOnlineInfo(args.loginLog);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<BuyerResult, Future<byte[]>>() {
              public Future<byte[]> apply(BuyerResult value) {
                getOnlineInfo_result result = new getOnlineInfo_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("getOnlineInfo", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("pwdFind", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          pwdFind_args args = new pwdFind_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("pwdFind", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.StringResult> future;
          try {
            future = iface.pwdFind(args.findWay, args.account);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.StringResult, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.StringResult value) {
                pwdFind_result result = new pwdFind_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("pwdFind", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("getBuyer", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          getBuyer_args args = new getBuyer_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("getBuyer", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<BuyerResult> future;
          try {
            future = iface.getBuyer(args.buyer);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<BuyerResult, Future<byte[]>>() {
              public Future<byte[]> apply(BuyerResult value) {
                getBuyer_result result = new getBuyer_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("getBuyer", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("getListBuyer", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          getListBuyer_args args = new getListBuyer_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("getListBuyer", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<BuyerListResult> future;
          try {
            future = iface.getListBuyer(args.userIdList);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<BuyerListResult, Future<byte[]>>() {
              public Future<byte[]> apply(BuyerListResult value) {
                getListBuyer_result result = new getListBuyer_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("getListBuyer", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("updateBuyer", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          updateBuyer_args args = new updateBuyer_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("updateBuyer", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.updateBuyer(args.buyer);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                updateBuyer_result result = new updateBuyer_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("updateBuyer", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("resetBuyerPwd", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          resetBuyerPwd_args args = new resetBuyerPwd_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("resetBuyerPwd", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.resetBuyerPwd(args.newPwd, args.buyer);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                resetBuyerPwd_result result = new resetBuyerPwd_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("resetBuyerPwd", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("newResetBuyerPwd", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          newResetBuyerPwd_args args = new newResetBuyerPwd_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("newResetBuyerPwd", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.newResetBuyerPwd(args.newPwd, args.buyer);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                newResetBuyerPwd_result result = new newResetBuyerPwd_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("newResetBuyerPwd", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("signinThirdParty", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          signinThirdParty_args args = new signinThirdParty_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("signinThirdParty", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<BuyerResult> future;
          try {
            future = iface.signinThirdParty(args.loginLog, args.thirdUser);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<BuyerResult, Future<byte[]>>() {
              public Future<byte[]> apply(BuyerResult value) {
                signinThirdParty_result result = new signinThirdParty_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("signinThirdParty", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("isBindThirdParty", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          isBindThirdParty_args args = new isBindThirdParty_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("isBindThirdParty", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<BuyerResult> future;
          try {
            future = iface.isBindThirdParty(args.thirdType, args.loginLog);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<BuyerResult, Future<byte[]>>() {
              public Future<byte[]> apply(BuyerResult value) {
                isBindThirdParty_result result = new isBindThirdParty_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("isBindThirdParty", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("getAuthInfo", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          getAuthInfo_args args = new getAuthInfo_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("getAuthInfo", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<AuthInfoResult> future;
          try {
            future = iface.getAuthInfo(args.authInfo, args.buyer, args.loginLog);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<AuthInfoResult, Future<byte[]>>() {
              public Future<byte[]> apply(AuthInfoResult value) {
                getAuthInfo_result result = new getAuthInfo_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("getAuthInfo", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("validAuth", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          validAuth_args args = new validAuth_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("validAuth", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<com.jfshare.finagle.thrift.result.Result> future;
          try {
            future = iface.validAuth(args.loginLog, args.authInfo);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<com.jfshare.finagle.thrift.result.Result, Future<byte[]>>() {
              public Future<byte[]> apply(com.jfshare.finagle.thrift.result.Result value) {
                validAuth_result result = new validAuth_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("validAuth", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("thirdUserSignin", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          thirdUserSignin_args args = new thirdUserSignin_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("thirdUserSignin", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<BuyerResult> future;
          try {
            future = iface.thirdUserSignin(args.loginLog, args.UserThird, args.validateInfo);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<BuyerResult, Future<byte[]>>() {
              public Future<byte[]> apply(BuyerResult value) {
                thirdUserSignin_result result = new thirdUserSignin_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("thirdUserSignin", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("isExitsThirdUser", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          isExitsThirdUser_args args = new isExitsThirdUser_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("isExitsThirdUser", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<BuyerResult> future;
          try {
            future = iface.isExitsThirdUser(args.loginLog, args.validateInfo);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<BuyerResult, Future<byte[]>>() {
              public Future<byte[]> apply(BuyerResult value) {
                isExitsThirdUser_result result = new isExitsThirdUser_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("isExitsThirdUser", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
      functionMap.put("requestHttps", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          requestHttps_args args = new requestHttps_args();
          try {
            args.read(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("requestHttps", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<BuyerResult> future;
          try {
            future = iface.requestHttps(args.url, args.extInfo);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<BuyerResult, Future<byte[]>>() {
              public Future<byte[]> apply(BuyerResult value) {
                requestHttps_result result = new requestHttps_result();
                result.success = value;
                result.setSuccessIsSet(true);

                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage("requestHttps", TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
    }

    public Future<byte[]> apply(byte[] request) {
      TTransport inputTransport = new TMemoryInputTransport(request);
      TProtocol iprot = protocolFactory.getProtocol(inputTransport);

      TMessage msg;
      try {
        msg = iprot.readMessageBegin();
      } catch (Exception e) {
        return Future.exception(e);
      }

      Function2<TProtocol, Integer, Future<byte[]>> fn = functionMap.get(msg.name);
      if (fn == null) {
        try {
          TProtocolUtil.skip(iprot, TType.STRUCT);
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
          TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
          TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
          oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
        } catch (Exception e) {
          return Future.exception(e);
        }
      }

      return fn.apply(iprot, msg.seqid);
    }
  }

  public static class buyerIsExist_args implements TBase<buyerIsExist_args, buyerIsExist_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("buyerIsExist_args");

  private static final TField LOGIN_NAME_FIELD_DESC = new TField("loginName", TType.STRING, (short)1);


  public String loginName;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    LOGIN_NAME((short)1, "loginName");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOGIN_NAME
  	return LOGIN_NAME;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOGIN_NAME, new FieldMetaData("loginName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(buyerIsExist_args.class, metaDataMap);
  }


  public buyerIsExist_args() {
  }

  public buyerIsExist_args(
    String loginName)
  {
    this();
    this.loginName = loginName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public buyerIsExist_args(buyerIsExist_args other) {
    if (other.isSetLoginName()) {
      this.loginName = other.loginName;
    }
  }

  public buyerIsExist_args deepCopy() {
    return new buyerIsExist_args(this);
  }

  @Override
  public void clear() {
    this.loginName = null;
  }

  public String getLoginName() {
    return this.loginName;
  }

  public buyerIsExist_args setLoginName(String loginName) {
    this.loginName = loginName;
    
    return this;
  }

  public void unsetLoginName() {
    this.loginName = null;
  }

  /** Returns true if field loginName is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginName() {
    return this.loginName != null;
  }

  public void setLoginNameIsSet(boolean value) {
    if (!value) {
      this.loginName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOGIN_NAME:
      if (value == null) {
        unsetLoginName();
      } else {
        setLoginName((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOGIN_NAME:
      return getLoginName();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOGIN_NAME:
      return isSetLoginName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof buyerIsExist_args)
      return this.equals((buyerIsExist_args)that);
    return false;
  }

  public boolean equals(buyerIsExist_args that) {
    if (that == null)
      return false;
    boolean this_present_loginName = true && this.isSetLoginName();
    boolean that_present_loginName = true && that.isSetLoginName();
    if (this_present_loginName || that_present_loginName) {
      if (!(this_present_loginName && that_present_loginName))
        return false;
      if (!this.loginName.equals(that.loginName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_loginName = true && (isSetLoginName());
    builder.append(present_loginName);
    if (present_loginName)
      builder.append(loginName);
    return builder.toHashCode();
  }

  public int compareTo(buyerIsExist_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    buyerIsExist_args typedOther = (buyerIsExist_args)other;

    lastComparison = Boolean.valueOf(isSetLoginName()).compareTo(typedOther.isSetLoginName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginName()) {
      lastComparison = TBaseHelper.compareTo(this.loginName, typedOther.loginName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // LOGIN_NAME
          if (field.type == TType.STRING) {
            this.loginName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.loginName != null) {
      oprot.writeFieldBegin(LOGIN_NAME_FIELD_DESC);
      oprot.writeString(this.loginName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("buyerIsExist_args(");
    boolean first = true;
    sb.append("loginName:");
    if (this.loginName == null) {
      sb.append("null");
    } else {
      sb.append(this.loginName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class buyerIsExist_result implements TBase<buyerIsExist_result, buyerIsExist_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("buyerIsExist_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.BoolResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.BoolResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(buyerIsExist_result.class, metaDataMap);
  }


  public buyerIsExist_result() {
  }

  public buyerIsExist_result(
    com.jfshare.finagle.thrift.result.BoolResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public buyerIsExist_result(buyerIsExist_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.BoolResult(other.success);
    }
  }

  public buyerIsExist_result deepCopy() {
    return new buyerIsExist_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.BoolResult getSuccess() {
    return this.success;
  }

  public buyerIsExist_result setSuccess(com.jfshare.finagle.thrift.result.BoolResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.BoolResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof buyerIsExist_result)
      return this.equals((buyerIsExist_result)that);
    return false;
  }

  public boolean equals(buyerIsExist_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(buyerIsExist_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    buyerIsExist_result typedOther = (buyerIsExist_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.BoolResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("buyerIsExist_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class signin_args implements TBase<signin_args, signin_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("signin_args");

  private static final TField BUYER_FIELD_DESC = new TField("buyer", TType.STRUCT, (short)1);


  public Buyer buyer;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    BUYER((short)1, "buyer");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUYER
  	return BUYER;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUYER, new FieldMetaData("buyer", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, Buyer.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(signin_args.class, metaDataMap);
  }


  public signin_args() {
  }

  public signin_args(
    Buyer buyer)
  {
    this();
    this.buyer = buyer;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public signin_args(signin_args other) {
    if (other.isSetBuyer()) {
      this.buyer = new Buyer(other.buyer);
    }
  }

  public signin_args deepCopy() {
    return new signin_args(this);
  }

  @Override
  public void clear() {
    this.buyer = null;
  }

  public Buyer getBuyer() {
    return this.buyer;
  }

  public signin_args setBuyer(Buyer buyer) {
    this.buyer = buyer;
    
    return this;
  }

  public void unsetBuyer() {
    this.buyer = null;
  }

  /** Returns true if field buyer is set (has been asigned a value) and false otherwise */
  public boolean isSetBuyer() {
    return this.buyer != null;
  }

  public void setBuyerIsSet(boolean value) {
    if (!value) {
      this.buyer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUYER:
      if (value == null) {
        unsetBuyer();
      } else {
        setBuyer((Buyer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUYER:
      return getBuyer();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUYER:
      return isSetBuyer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof signin_args)
      return this.equals((signin_args)that);
    return false;
  }

  public boolean equals(signin_args that) {
    if (that == null)
      return false;
    boolean this_present_buyer = true && this.isSetBuyer();
    boolean that_present_buyer = true && that.isSetBuyer();
    if (this_present_buyer || that_present_buyer) {
      if (!(this_present_buyer && that_present_buyer))
        return false;
      if (!this.buyer.equals(that.buyer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_buyer = true && (isSetBuyer());
    builder.append(present_buyer);
    if (present_buyer)
      builder.append(buyer);
    return builder.toHashCode();
  }

  public int compareTo(signin_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    signin_args typedOther = (signin_args)other;

    lastComparison = Boolean.valueOf(isSetBuyer()).compareTo(typedOther.isSetBuyer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyer()) {
      lastComparison = TBaseHelper.compareTo(this.buyer, typedOther.buyer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // BUYER
          if (field.type == TType.STRUCT) {
            this.buyer = new Buyer();
            this.buyer.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.buyer != null) {
      oprot.writeFieldBegin(BUYER_FIELD_DESC);
      this.buyer.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("signin_args(");
    boolean first = true;
    sb.append("buyer:");
    if (this.buyer == null) {
      sb.append("null");
    } else {
      sb.append(this.buyer);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class signin_result implements TBase<signin_result, signin_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("signin_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(signin_result.class, metaDataMap);
  }


  public signin_result() {
  }

  public signin_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public signin_result(signin_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public signin_result deepCopy() {
    return new signin_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public signin_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof signin_result)
      return this.equals((signin_result)that);
    return false;
  }

  public boolean equals(signin_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(signin_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    signin_result typedOther = (signin_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("signin_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class newSignin_args implements TBase<newSignin_args, newSignin_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("newSignin_args");

  private static final TField BUYER_FIELD_DESC = new TField("buyer", TType.STRUCT, (short)1);


  public Buyer buyer;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    BUYER((short)1, "buyer");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUYER
  	return BUYER;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUYER, new FieldMetaData("buyer", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, Buyer.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(newSignin_args.class, metaDataMap);
  }


  public newSignin_args() {
  }

  public newSignin_args(
    Buyer buyer)
  {
    this();
    this.buyer = buyer;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public newSignin_args(newSignin_args other) {
    if (other.isSetBuyer()) {
      this.buyer = new Buyer(other.buyer);
    }
  }

  public newSignin_args deepCopy() {
    return new newSignin_args(this);
  }

  @Override
  public void clear() {
    this.buyer = null;
  }

  public Buyer getBuyer() {
    return this.buyer;
  }

  public newSignin_args setBuyer(Buyer buyer) {
    this.buyer = buyer;
    
    return this;
  }

  public void unsetBuyer() {
    this.buyer = null;
  }

  /** Returns true if field buyer is set (has been asigned a value) and false otherwise */
  public boolean isSetBuyer() {
    return this.buyer != null;
  }

  public void setBuyerIsSet(boolean value) {
    if (!value) {
      this.buyer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUYER:
      if (value == null) {
        unsetBuyer();
      } else {
        setBuyer((Buyer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUYER:
      return getBuyer();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUYER:
      return isSetBuyer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof newSignin_args)
      return this.equals((newSignin_args)that);
    return false;
  }

  public boolean equals(newSignin_args that) {
    if (that == null)
      return false;
    boolean this_present_buyer = true && this.isSetBuyer();
    boolean that_present_buyer = true && that.isSetBuyer();
    if (this_present_buyer || that_present_buyer) {
      if (!(this_present_buyer && that_present_buyer))
        return false;
      if (!this.buyer.equals(that.buyer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_buyer = true && (isSetBuyer());
    builder.append(present_buyer);
    if (present_buyer)
      builder.append(buyer);
    return builder.toHashCode();
  }

  public int compareTo(newSignin_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    newSignin_args typedOther = (newSignin_args)other;

    lastComparison = Boolean.valueOf(isSetBuyer()).compareTo(typedOther.isSetBuyer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyer()) {
      lastComparison = TBaseHelper.compareTo(this.buyer, typedOther.buyer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // BUYER
          if (field.type == TType.STRUCT) {
            this.buyer = new Buyer();
            this.buyer.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.buyer != null) {
      oprot.writeFieldBegin(BUYER_FIELD_DESC);
      this.buyer.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("newSignin_args(");
    boolean first = true;
    sb.append("buyer:");
    if (this.buyer == null) {
      sb.append("null");
    } else {
      sb.append(this.buyer);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class newSignin_result implements TBase<newSignin_result, newSignin_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("newSignin_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(newSignin_result.class, metaDataMap);
  }


  public newSignin_result() {
  }

  public newSignin_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public newSignin_result(newSignin_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public newSignin_result deepCopy() {
    return new newSignin_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public newSignin_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof newSignin_result)
      return this.equals((newSignin_result)that);
    return false;
  }

  public boolean equals(newSignin_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(newSignin_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    newSignin_result typedOther = (newSignin_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("newSignin_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class login_args implements TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("login_args");

  private static final TField BUYER_FIELD_DESC = new TField("buyer", TType.STRUCT, (short)1);
  private static final TField LOGIN_LOG_FIELD_DESC = new TField("loginLog", TType.STRUCT, (short)2);


  public Buyer buyer;
  public LoginLog loginLog;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    BUYER((short)1, "buyer"),
    LOGIN_LOG((short)2, "loginLog");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUYER
  	return BUYER;
        case 2: // LOGIN_LOG
  	return LOGIN_LOG;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUYER, new FieldMetaData("buyer", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, Buyer.class)));
    tmpMap.put(_Fields.LOGIN_LOG, new FieldMetaData("loginLog", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, LoginLog.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
  }


  public login_args() {
  }

  public login_args(
    Buyer buyer,
    LoginLog loginLog)
  {
    this();
    this.buyer = buyer;
    this.loginLog = loginLog;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public login_args(login_args other) {
    if (other.isSetBuyer()) {
      this.buyer = new Buyer(other.buyer);
    }
    if (other.isSetLoginLog()) {
      this.loginLog = new LoginLog(other.loginLog);
    }
  }

  public login_args deepCopy() {
    return new login_args(this);
  }

  @Override
  public void clear() {
    this.buyer = null;
    this.loginLog = null;
  }

  public Buyer getBuyer() {
    return this.buyer;
  }

  public login_args setBuyer(Buyer buyer) {
    this.buyer = buyer;
    
    return this;
  }

  public void unsetBuyer() {
    this.buyer = null;
  }

  /** Returns true if field buyer is set (has been asigned a value) and false otherwise */
  public boolean isSetBuyer() {
    return this.buyer != null;
  }

  public void setBuyerIsSet(boolean value) {
    if (!value) {
      this.buyer = null;
    }
  }

  public LoginLog getLoginLog() {
    return this.loginLog;
  }

  public login_args setLoginLog(LoginLog loginLog) {
    this.loginLog = loginLog;
    
    return this;
  }

  public void unsetLoginLog() {
    this.loginLog = null;
  }

  /** Returns true if field loginLog is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginLog() {
    return this.loginLog != null;
  }

  public void setLoginLogIsSet(boolean value) {
    if (!value) {
      this.loginLog = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUYER:
      if (value == null) {
        unsetBuyer();
      } else {
        setBuyer((Buyer)value);
      }
      break;
    case LOGIN_LOG:
      if (value == null) {
        unsetLoginLog();
      } else {
        setLoginLog((LoginLog)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUYER:
      return getBuyer();
    case LOGIN_LOG:
      return getLoginLog();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUYER:
      return isSetBuyer();
    case LOGIN_LOG:
      return isSetLoginLog();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof login_args)
      return this.equals((login_args)that);
    return false;
  }

  public boolean equals(login_args that) {
    if (that == null)
      return false;
    boolean this_present_buyer = true && this.isSetBuyer();
    boolean that_present_buyer = true && that.isSetBuyer();
    if (this_present_buyer || that_present_buyer) {
      if (!(this_present_buyer && that_present_buyer))
        return false;
      if (!this.buyer.equals(that.buyer))
        return false;
    }
    boolean this_present_loginLog = true && this.isSetLoginLog();
    boolean that_present_loginLog = true && that.isSetLoginLog();
    if (this_present_loginLog || that_present_loginLog) {
      if (!(this_present_loginLog && that_present_loginLog))
        return false;
      if (!this.loginLog.equals(that.loginLog))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_buyer = true && (isSetBuyer());
    builder.append(present_buyer);
    if (present_buyer)
      builder.append(buyer);
    boolean present_loginLog = true && (isSetLoginLog());
    builder.append(present_loginLog);
    if (present_loginLog)
      builder.append(loginLog);
    return builder.toHashCode();
  }

  public int compareTo(login_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    login_args typedOther = (login_args)other;

    lastComparison = Boolean.valueOf(isSetBuyer()).compareTo(typedOther.isSetBuyer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyer()) {
      lastComparison = TBaseHelper.compareTo(this.buyer, typedOther.buyer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginLog()).compareTo(typedOther.isSetLoginLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginLog()) {
      lastComparison = TBaseHelper.compareTo(this.loginLog, typedOther.loginLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // BUYER
          if (field.type == TType.STRUCT) {
            this.buyer = new Buyer();
            this.buyer.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LOGIN_LOG
          if (field.type == TType.STRUCT) {
            this.loginLog = new LoginLog();
            this.loginLog.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.buyer != null) {
      oprot.writeFieldBegin(BUYER_FIELD_DESC);
      this.buyer.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.loginLog != null) {
      oprot.writeFieldBegin(LOGIN_LOG_FIELD_DESC);
      this.loginLog.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("login_args(");
    boolean first = true;
    sb.append("buyer:");
    if (this.buyer == null) {
      sb.append("null");
    } else {
      sb.append(this.buyer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginLog:");
    if (this.loginLog == null) {
      sb.append("null");
    } else {
      sb.append(this.loginLog);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class login_result implements TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("login_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public BuyerResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, BuyerResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
  }


  public login_result() {
  }

  public login_result(
    BuyerResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public login_result(login_result other) {
    if (other.isSetSuccess()) {
      this.success = new BuyerResult(other.success);
    }
  }

  public login_result deepCopy() {
    return new login_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public BuyerResult getSuccess() {
    return this.success;
  }

  public login_result setSuccess(BuyerResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((BuyerResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof login_result)
      return this.equals((login_result)that);
    return false;
  }

  public boolean equals(login_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(login_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    login_result typedOther = (login_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new BuyerResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("login_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class newLogin_args implements TBase<newLogin_args, newLogin_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("newLogin_args");

  private static final TField BUYER_FIELD_DESC = new TField("buyer", TType.STRUCT, (short)1);
  private static final TField LOGIN_LOG_FIELD_DESC = new TField("loginLog", TType.STRUCT, (short)2);


  public Buyer buyer;
  public LoginLog loginLog;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    BUYER((short)1, "buyer"),
    LOGIN_LOG((short)2, "loginLog");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUYER
  	return BUYER;
        case 2: // LOGIN_LOG
  	return LOGIN_LOG;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUYER, new FieldMetaData("buyer", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, Buyer.class)));
    tmpMap.put(_Fields.LOGIN_LOG, new FieldMetaData("loginLog", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, LoginLog.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(newLogin_args.class, metaDataMap);
  }


  public newLogin_args() {
  }

  public newLogin_args(
    Buyer buyer,
    LoginLog loginLog)
  {
    this();
    this.buyer = buyer;
    this.loginLog = loginLog;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public newLogin_args(newLogin_args other) {
    if (other.isSetBuyer()) {
      this.buyer = new Buyer(other.buyer);
    }
    if (other.isSetLoginLog()) {
      this.loginLog = new LoginLog(other.loginLog);
    }
  }

  public newLogin_args deepCopy() {
    return new newLogin_args(this);
  }

  @Override
  public void clear() {
    this.buyer = null;
    this.loginLog = null;
  }

  public Buyer getBuyer() {
    return this.buyer;
  }

  public newLogin_args setBuyer(Buyer buyer) {
    this.buyer = buyer;
    
    return this;
  }

  public void unsetBuyer() {
    this.buyer = null;
  }

  /** Returns true if field buyer is set (has been asigned a value) and false otherwise */
  public boolean isSetBuyer() {
    return this.buyer != null;
  }

  public void setBuyerIsSet(boolean value) {
    if (!value) {
      this.buyer = null;
    }
  }

  public LoginLog getLoginLog() {
    return this.loginLog;
  }

  public newLogin_args setLoginLog(LoginLog loginLog) {
    this.loginLog = loginLog;
    
    return this;
  }

  public void unsetLoginLog() {
    this.loginLog = null;
  }

  /** Returns true if field loginLog is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginLog() {
    return this.loginLog != null;
  }

  public void setLoginLogIsSet(boolean value) {
    if (!value) {
      this.loginLog = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUYER:
      if (value == null) {
        unsetBuyer();
      } else {
        setBuyer((Buyer)value);
      }
      break;
    case LOGIN_LOG:
      if (value == null) {
        unsetLoginLog();
      } else {
        setLoginLog((LoginLog)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUYER:
      return getBuyer();
    case LOGIN_LOG:
      return getLoginLog();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUYER:
      return isSetBuyer();
    case LOGIN_LOG:
      return isSetLoginLog();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof newLogin_args)
      return this.equals((newLogin_args)that);
    return false;
  }

  public boolean equals(newLogin_args that) {
    if (that == null)
      return false;
    boolean this_present_buyer = true && this.isSetBuyer();
    boolean that_present_buyer = true && that.isSetBuyer();
    if (this_present_buyer || that_present_buyer) {
      if (!(this_present_buyer && that_present_buyer))
        return false;
      if (!this.buyer.equals(that.buyer))
        return false;
    }
    boolean this_present_loginLog = true && this.isSetLoginLog();
    boolean that_present_loginLog = true && that.isSetLoginLog();
    if (this_present_loginLog || that_present_loginLog) {
      if (!(this_present_loginLog && that_present_loginLog))
        return false;
      if (!this.loginLog.equals(that.loginLog))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_buyer = true && (isSetBuyer());
    builder.append(present_buyer);
    if (present_buyer)
      builder.append(buyer);
    boolean present_loginLog = true && (isSetLoginLog());
    builder.append(present_loginLog);
    if (present_loginLog)
      builder.append(loginLog);
    return builder.toHashCode();
  }

  public int compareTo(newLogin_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    newLogin_args typedOther = (newLogin_args)other;

    lastComparison = Boolean.valueOf(isSetBuyer()).compareTo(typedOther.isSetBuyer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyer()) {
      lastComparison = TBaseHelper.compareTo(this.buyer, typedOther.buyer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginLog()).compareTo(typedOther.isSetLoginLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginLog()) {
      lastComparison = TBaseHelper.compareTo(this.loginLog, typedOther.loginLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // BUYER
          if (field.type == TType.STRUCT) {
            this.buyer = new Buyer();
            this.buyer.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LOGIN_LOG
          if (field.type == TType.STRUCT) {
            this.loginLog = new LoginLog();
            this.loginLog.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.buyer != null) {
      oprot.writeFieldBegin(BUYER_FIELD_DESC);
      this.buyer.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.loginLog != null) {
      oprot.writeFieldBegin(LOGIN_LOG_FIELD_DESC);
      this.loginLog.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("newLogin_args(");
    boolean first = true;
    sb.append("buyer:");
    if (this.buyer == null) {
      sb.append("null");
    } else {
      sb.append(this.buyer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginLog:");
    if (this.loginLog == null) {
      sb.append("null");
    } else {
      sb.append(this.loginLog);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class newLogin_result implements TBase<newLogin_result, newLogin_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("newLogin_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public BuyerResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, BuyerResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(newLogin_result.class, metaDataMap);
  }


  public newLogin_result() {
  }

  public newLogin_result(
    BuyerResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public newLogin_result(newLogin_result other) {
    if (other.isSetSuccess()) {
      this.success = new BuyerResult(other.success);
    }
  }

  public newLogin_result deepCopy() {
    return new newLogin_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public BuyerResult getSuccess() {
    return this.success;
  }

  public newLogin_result setSuccess(BuyerResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((BuyerResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof newLogin_result)
      return this.equals((newLogin_result)that);
    return false;
  }

  public boolean equals(newLogin_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(newLogin_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    newLogin_result typedOther = (newLogin_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new BuyerResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("newLogin_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class smsLogin_args implements TBase<smsLogin_args, smsLogin_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("smsLogin_args");

  private static final TField BUYER_FIELD_DESC = new TField("buyer", TType.STRUCT, (short)1);
  private static final TField LOGIN_LOG_FIELD_DESC = new TField("loginLog", TType.STRUCT, (short)2);


  public Buyer buyer;
  public LoginLog loginLog;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    BUYER((short)1, "buyer"),
    LOGIN_LOG((short)2, "loginLog");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUYER
  	return BUYER;
        case 2: // LOGIN_LOG
  	return LOGIN_LOG;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUYER, new FieldMetaData("buyer", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, Buyer.class)));
    tmpMap.put(_Fields.LOGIN_LOG, new FieldMetaData("loginLog", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, LoginLog.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(smsLogin_args.class, metaDataMap);
  }


  public smsLogin_args() {
  }

  public smsLogin_args(
    Buyer buyer,
    LoginLog loginLog)
  {
    this();
    this.buyer = buyer;
    this.loginLog = loginLog;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public smsLogin_args(smsLogin_args other) {
    if (other.isSetBuyer()) {
      this.buyer = new Buyer(other.buyer);
    }
    if (other.isSetLoginLog()) {
      this.loginLog = new LoginLog(other.loginLog);
    }
  }

  public smsLogin_args deepCopy() {
    return new smsLogin_args(this);
  }

  @Override
  public void clear() {
    this.buyer = null;
    this.loginLog = null;
  }

  public Buyer getBuyer() {
    return this.buyer;
  }

  public smsLogin_args setBuyer(Buyer buyer) {
    this.buyer = buyer;
    
    return this;
  }

  public void unsetBuyer() {
    this.buyer = null;
  }

  /** Returns true if field buyer is set (has been asigned a value) and false otherwise */
  public boolean isSetBuyer() {
    return this.buyer != null;
  }

  public void setBuyerIsSet(boolean value) {
    if (!value) {
      this.buyer = null;
    }
  }

  public LoginLog getLoginLog() {
    return this.loginLog;
  }

  public smsLogin_args setLoginLog(LoginLog loginLog) {
    this.loginLog = loginLog;
    
    return this;
  }

  public void unsetLoginLog() {
    this.loginLog = null;
  }

  /** Returns true if field loginLog is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginLog() {
    return this.loginLog != null;
  }

  public void setLoginLogIsSet(boolean value) {
    if (!value) {
      this.loginLog = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUYER:
      if (value == null) {
        unsetBuyer();
      } else {
        setBuyer((Buyer)value);
      }
      break;
    case LOGIN_LOG:
      if (value == null) {
        unsetLoginLog();
      } else {
        setLoginLog((LoginLog)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUYER:
      return getBuyer();
    case LOGIN_LOG:
      return getLoginLog();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUYER:
      return isSetBuyer();
    case LOGIN_LOG:
      return isSetLoginLog();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof smsLogin_args)
      return this.equals((smsLogin_args)that);
    return false;
  }

  public boolean equals(smsLogin_args that) {
    if (that == null)
      return false;
    boolean this_present_buyer = true && this.isSetBuyer();
    boolean that_present_buyer = true && that.isSetBuyer();
    if (this_present_buyer || that_present_buyer) {
      if (!(this_present_buyer && that_present_buyer))
        return false;
      if (!this.buyer.equals(that.buyer))
        return false;
    }
    boolean this_present_loginLog = true && this.isSetLoginLog();
    boolean that_present_loginLog = true && that.isSetLoginLog();
    if (this_present_loginLog || that_present_loginLog) {
      if (!(this_present_loginLog && that_present_loginLog))
        return false;
      if (!this.loginLog.equals(that.loginLog))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_buyer = true && (isSetBuyer());
    builder.append(present_buyer);
    if (present_buyer)
      builder.append(buyer);
    boolean present_loginLog = true && (isSetLoginLog());
    builder.append(present_loginLog);
    if (present_loginLog)
      builder.append(loginLog);
    return builder.toHashCode();
  }

  public int compareTo(smsLogin_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    smsLogin_args typedOther = (smsLogin_args)other;

    lastComparison = Boolean.valueOf(isSetBuyer()).compareTo(typedOther.isSetBuyer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyer()) {
      lastComparison = TBaseHelper.compareTo(this.buyer, typedOther.buyer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginLog()).compareTo(typedOther.isSetLoginLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginLog()) {
      lastComparison = TBaseHelper.compareTo(this.loginLog, typedOther.loginLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // BUYER
          if (field.type == TType.STRUCT) {
            this.buyer = new Buyer();
            this.buyer.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LOGIN_LOG
          if (field.type == TType.STRUCT) {
            this.loginLog = new LoginLog();
            this.loginLog.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.buyer != null) {
      oprot.writeFieldBegin(BUYER_FIELD_DESC);
      this.buyer.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.loginLog != null) {
      oprot.writeFieldBegin(LOGIN_LOG_FIELD_DESC);
      this.loginLog.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("smsLogin_args(");
    boolean first = true;
    sb.append("buyer:");
    if (this.buyer == null) {
      sb.append("null");
    } else {
      sb.append(this.buyer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginLog:");
    if (this.loginLog == null) {
      sb.append("null");
    } else {
      sb.append(this.loginLog);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class smsLogin_result implements TBase<smsLogin_result, smsLogin_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("smsLogin_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public BuyerResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, BuyerResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(smsLogin_result.class, metaDataMap);
  }


  public smsLogin_result() {
  }

  public smsLogin_result(
    BuyerResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public smsLogin_result(smsLogin_result other) {
    if (other.isSetSuccess()) {
      this.success = new BuyerResult(other.success);
    }
  }

  public smsLogin_result deepCopy() {
    return new smsLogin_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public BuyerResult getSuccess() {
    return this.success;
  }

  public smsLogin_result setSuccess(BuyerResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((BuyerResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof smsLogin_result)
      return this.equals((smsLogin_result)that);
    return false;
  }

  public boolean equals(smsLogin_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(smsLogin_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    smsLogin_result typedOther = (smsLogin_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new BuyerResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("smsLogin_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class logout_args implements TBase<logout_args, logout_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("logout_args");

  private static final TField LOGIN_LOG_FIELD_DESC = new TField("loginLog", TType.STRUCT, (short)1);


  public LoginLog loginLog;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    LOGIN_LOG((short)1, "loginLog");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOGIN_LOG
  	return LOGIN_LOG;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOGIN_LOG, new FieldMetaData("loginLog", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, LoginLog.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(logout_args.class, metaDataMap);
  }


  public logout_args() {
  }

  public logout_args(
    LoginLog loginLog)
  {
    this();
    this.loginLog = loginLog;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public logout_args(logout_args other) {
    if (other.isSetLoginLog()) {
      this.loginLog = new LoginLog(other.loginLog);
    }
  }

  public logout_args deepCopy() {
    return new logout_args(this);
  }

  @Override
  public void clear() {
    this.loginLog = null;
  }

  public LoginLog getLoginLog() {
    return this.loginLog;
  }

  public logout_args setLoginLog(LoginLog loginLog) {
    this.loginLog = loginLog;
    
    return this;
  }

  public void unsetLoginLog() {
    this.loginLog = null;
  }

  /** Returns true if field loginLog is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginLog() {
    return this.loginLog != null;
  }

  public void setLoginLogIsSet(boolean value) {
    if (!value) {
      this.loginLog = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOGIN_LOG:
      if (value == null) {
        unsetLoginLog();
      } else {
        setLoginLog((LoginLog)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOGIN_LOG:
      return getLoginLog();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOGIN_LOG:
      return isSetLoginLog();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof logout_args)
      return this.equals((logout_args)that);
    return false;
  }

  public boolean equals(logout_args that) {
    if (that == null)
      return false;
    boolean this_present_loginLog = true && this.isSetLoginLog();
    boolean that_present_loginLog = true && that.isSetLoginLog();
    if (this_present_loginLog || that_present_loginLog) {
      if (!(this_present_loginLog && that_present_loginLog))
        return false;
      if (!this.loginLog.equals(that.loginLog))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_loginLog = true && (isSetLoginLog());
    builder.append(present_loginLog);
    if (present_loginLog)
      builder.append(loginLog);
    return builder.toHashCode();
  }

  public int compareTo(logout_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    logout_args typedOther = (logout_args)other;

    lastComparison = Boolean.valueOf(isSetLoginLog()).compareTo(typedOther.isSetLoginLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginLog()) {
      lastComparison = TBaseHelper.compareTo(this.loginLog, typedOther.loginLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // LOGIN_LOG
          if (field.type == TType.STRUCT) {
            this.loginLog = new LoginLog();
            this.loginLog.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.loginLog != null) {
      oprot.writeFieldBegin(LOGIN_LOG_FIELD_DESC);
      this.loginLog.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("logout_args(");
    boolean first = true;
    sb.append("loginLog:");
    if (this.loginLog == null) {
      sb.append("null");
    } else {
      sb.append(this.loginLog);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class logout_result implements TBase<logout_result, logout_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("logout_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(logout_result.class, metaDataMap);
  }


  public logout_result() {
  }

  public logout_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public logout_result(logout_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public logout_result deepCopy() {
    return new logout_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public logout_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof logout_result)
      return this.equals((logout_result)that);
    return false;
  }

  public boolean equals(logout_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(logout_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    logout_result typedOther = (logout_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("logout_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class isOnline_args implements TBase<isOnline_args, isOnline_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("isOnline_args");

  private static final TField LOGIN_LOG_FIELD_DESC = new TField("loginLog", TType.STRUCT, (short)1);


  public LoginLog loginLog;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    LOGIN_LOG((short)1, "loginLog");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOGIN_LOG
  	return LOGIN_LOG;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOGIN_LOG, new FieldMetaData("loginLog", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, LoginLog.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(isOnline_args.class, metaDataMap);
  }


  public isOnline_args() {
  }

  public isOnline_args(
    LoginLog loginLog)
  {
    this();
    this.loginLog = loginLog;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public isOnline_args(isOnline_args other) {
    if (other.isSetLoginLog()) {
      this.loginLog = new LoginLog(other.loginLog);
    }
  }

  public isOnline_args deepCopy() {
    return new isOnline_args(this);
  }

  @Override
  public void clear() {
    this.loginLog = null;
  }

  public LoginLog getLoginLog() {
    return this.loginLog;
  }

  public isOnline_args setLoginLog(LoginLog loginLog) {
    this.loginLog = loginLog;
    
    return this;
  }

  public void unsetLoginLog() {
    this.loginLog = null;
  }

  /** Returns true if field loginLog is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginLog() {
    return this.loginLog != null;
  }

  public void setLoginLogIsSet(boolean value) {
    if (!value) {
      this.loginLog = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOGIN_LOG:
      if (value == null) {
        unsetLoginLog();
      } else {
        setLoginLog((LoginLog)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOGIN_LOG:
      return getLoginLog();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOGIN_LOG:
      return isSetLoginLog();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof isOnline_args)
      return this.equals((isOnline_args)that);
    return false;
  }

  public boolean equals(isOnline_args that) {
    if (that == null)
      return false;
    boolean this_present_loginLog = true && this.isSetLoginLog();
    boolean that_present_loginLog = true && that.isSetLoginLog();
    if (this_present_loginLog || that_present_loginLog) {
      if (!(this_present_loginLog && that_present_loginLog))
        return false;
      if (!this.loginLog.equals(that.loginLog))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_loginLog = true && (isSetLoginLog());
    builder.append(present_loginLog);
    if (present_loginLog)
      builder.append(loginLog);
    return builder.toHashCode();
  }

  public int compareTo(isOnline_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    isOnline_args typedOther = (isOnline_args)other;

    lastComparison = Boolean.valueOf(isSetLoginLog()).compareTo(typedOther.isSetLoginLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginLog()) {
      lastComparison = TBaseHelper.compareTo(this.loginLog, typedOther.loginLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // LOGIN_LOG
          if (field.type == TType.STRUCT) {
            this.loginLog = new LoginLog();
            this.loginLog.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.loginLog != null) {
      oprot.writeFieldBegin(LOGIN_LOG_FIELD_DESC);
      this.loginLog.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("isOnline_args(");
    boolean first = true;
    sb.append("loginLog:");
    if (this.loginLog == null) {
      sb.append("null");
    } else {
      sb.append(this.loginLog);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class isOnline_result implements TBase<isOnline_result, isOnline_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("isOnline_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public BuyerResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, BuyerResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(isOnline_result.class, metaDataMap);
  }


  public isOnline_result() {
  }

  public isOnline_result(
    BuyerResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public isOnline_result(isOnline_result other) {
    if (other.isSetSuccess()) {
      this.success = new BuyerResult(other.success);
    }
  }

  public isOnline_result deepCopy() {
    return new isOnline_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public BuyerResult getSuccess() {
    return this.success;
  }

  public isOnline_result setSuccess(BuyerResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((BuyerResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof isOnline_result)
      return this.equals((isOnline_result)that);
    return false;
  }

  public boolean equals(isOnline_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(isOnline_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    isOnline_result typedOther = (isOnline_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new BuyerResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("isOnline_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class getOnlineInfo_args implements TBase<getOnlineInfo_args, getOnlineInfo_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("getOnlineInfo_args");

  private static final TField LOGIN_LOG_FIELD_DESC = new TField("loginLog", TType.STRUCT, (short)1);


  public LoginLog loginLog;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    LOGIN_LOG((short)1, "loginLog");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOGIN_LOG
  	return LOGIN_LOG;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOGIN_LOG, new FieldMetaData("loginLog", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, LoginLog.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(getOnlineInfo_args.class, metaDataMap);
  }


  public getOnlineInfo_args() {
  }

  public getOnlineInfo_args(
    LoginLog loginLog)
  {
    this();
    this.loginLog = loginLog;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public getOnlineInfo_args(getOnlineInfo_args other) {
    if (other.isSetLoginLog()) {
      this.loginLog = new LoginLog(other.loginLog);
    }
  }

  public getOnlineInfo_args deepCopy() {
    return new getOnlineInfo_args(this);
  }

  @Override
  public void clear() {
    this.loginLog = null;
  }

  public LoginLog getLoginLog() {
    return this.loginLog;
  }

  public getOnlineInfo_args setLoginLog(LoginLog loginLog) {
    this.loginLog = loginLog;
    
    return this;
  }

  public void unsetLoginLog() {
    this.loginLog = null;
  }

  /** Returns true if field loginLog is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginLog() {
    return this.loginLog != null;
  }

  public void setLoginLogIsSet(boolean value) {
    if (!value) {
      this.loginLog = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOGIN_LOG:
      if (value == null) {
        unsetLoginLog();
      } else {
        setLoginLog((LoginLog)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOGIN_LOG:
      return getLoginLog();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOGIN_LOG:
      return isSetLoginLog();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof getOnlineInfo_args)
      return this.equals((getOnlineInfo_args)that);
    return false;
  }

  public boolean equals(getOnlineInfo_args that) {
    if (that == null)
      return false;
    boolean this_present_loginLog = true && this.isSetLoginLog();
    boolean that_present_loginLog = true && that.isSetLoginLog();
    if (this_present_loginLog || that_present_loginLog) {
      if (!(this_present_loginLog && that_present_loginLog))
        return false;
      if (!this.loginLog.equals(that.loginLog))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_loginLog = true && (isSetLoginLog());
    builder.append(present_loginLog);
    if (present_loginLog)
      builder.append(loginLog);
    return builder.toHashCode();
  }

  public int compareTo(getOnlineInfo_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    getOnlineInfo_args typedOther = (getOnlineInfo_args)other;

    lastComparison = Boolean.valueOf(isSetLoginLog()).compareTo(typedOther.isSetLoginLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginLog()) {
      lastComparison = TBaseHelper.compareTo(this.loginLog, typedOther.loginLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // LOGIN_LOG
          if (field.type == TType.STRUCT) {
            this.loginLog = new LoginLog();
            this.loginLog.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.loginLog != null) {
      oprot.writeFieldBegin(LOGIN_LOG_FIELD_DESC);
      this.loginLog.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("getOnlineInfo_args(");
    boolean first = true;
    sb.append("loginLog:");
    if (this.loginLog == null) {
      sb.append("null");
    } else {
      sb.append(this.loginLog);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class getOnlineInfo_result implements TBase<getOnlineInfo_result, getOnlineInfo_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("getOnlineInfo_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public BuyerResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, BuyerResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(getOnlineInfo_result.class, metaDataMap);
  }


  public getOnlineInfo_result() {
  }

  public getOnlineInfo_result(
    BuyerResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public getOnlineInfo_result(getOnlineInfo_result other) {
    if (other.isSetSuccess()) {
      this.success = new BuyerResult(other.success);
    }
  }

  public getOnlineInfo_result deepCopy() {
    return new getOnlineInfo_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public BuyerResult getSuccess() {
    return this.success;
  }

  public getOnlineInfo_result setSuccess(BuyerResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((BuyerResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof getOnlineInfo_result)
      return this.equals((getOnlineInfo_result)that);
    return false;
  }

  public boolean equals(getOnlineInfo_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(getOnlineInfo_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    getOnlineInfo_result typedOther = (getOnlineInfo_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new BuyerResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("getOnlineInfo_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class pwdFind_args implements TBase<pwdFind_args, pwdFind_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("pwdFind_args");

  private static final TField FIND_WAY_FIELD_DESC = new TField("findWay", TType.I32, (short)1);
  private static final TField ACCOUNT_FIELD_DESC = new TField("account", TType.STRING, (short)2);


  public int findWay;
  public String account;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    FIND_WAY((short)1, "findWay"),
    ACCOUNT((short)2, "account");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIND_WAY
  	return FIND_WAY;
        case 2: // ACCOUNT
  	return ACCOUNT;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __FINDWAY_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIND_WAY, new FieldMetaData("findWay", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ACCOUNT, new FieldMetaData("account", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(pwdFind_args.class, metaDataMap);
  }


  public pwdFind_args() {
  }

  public pwdFind_args(
    int findWay,
    String account)
  {
    this();
    this.findWay = findWay;
    setFindWayIsSet(true);
    this.account = account;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public pwdFind_args(pwdFind_args other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.findWay = other.findWay;
    if (other.isSetAccount()) {
      this.account = other.account;
    }
  }

  public pwdFind_args deepCopy() {
    return new pwdFind_args(this);
  }

  @Override
  public void clear() {
    setFindWayIsSet(false);
    this.findWay = 0;
    this.account = null;
  }

  public int getFindWay() {
    return this.findWay;
  }

  public pwdFind_args setFindWay(int findWay) {
    this.findWay = findWay;
    setFindWayIsSet(true);

    return this;
  }

  public void unsetFindWay() {
  __isset_bit_vector.clear(__FINDWAY_ISSET_ID);
  }

  /** Returns true if field findWay is set (has been asigned a value) and false otherwise */
  public boolean isSetFindWay() {
    return __isset_bit_vector.get(__FINDWAY_ISSET_ID);
  }

  public void setFindWayIsSet(boolean value) {
    __isset_bit_vector.set(__FINDWAY_ISSET_ID, value);
  }

  public String getAccount() {
    return this.account;
  }

  public pwdFind_args setAccount(String account) {
    this.account = account;
    
    return this;
  }

  public void unsetAccount() {
    this.account = null;
  }

  /** Returns true if field account is set (has been asigned a value) and false otherwise */
  public boolean isSetAccount() {
    return this.account != null;
  }

  public void setAccountIsSet(boolean value) {
    if (!value) {
      this.account = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIND_WAY:
      if (value == null) {
        unsetFindWay();
      } else {
        setFindWay((Integer)value);
      }
      break;
    case ACCOUNT:
      if (value == null) {
        unsetAccount();
      } else {
        setAccount((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIND_WAY:
      return new Integer(getFindWay());
    case ACCOUNT:
      return getAccount();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIND_WAY:
      return isSetFindWay();
    case ACCOUNT:
      return isSetAccount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof pwdFind_args)
      return this.equals((pwdFind_args)that);
    return false;
  }

  public boolean equals(pwdFind_args that) {
    if (that == null)
      return false;
    boolean this_present_findWay = true;
    boolean that_present_findWay = true;
    if (this_present_findWay || that_present_findWay) {
      if (!(this_present_findWay && that_present_findWay))
        return false;
      if (this.findWay != that.findWay)
        return false;
    }
    boolean this_present_account = true && this.isSetAccount();
    boolean that_present_account = true && that.isSetAccount();
    if (this_present_account || that_present_account) {
      if (!(this_present_account && that_present_account))
        return false;
      if (!this.account.equals(that.account))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_findWay = true;
    builder.append(present_findWay);
    if (present_findWay)
      builder.append(findWay);
    boolean present_account = true && (isSetAccount());
    builder.append(present_account);
    if (present_account)
      builder.append(account);
    return builder.toHashCode();
  }

  public int compareTo(pwdFind_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    pwdFind_args typedOther = (pwdFind_args)other;

    lastComparison = Boolean.valueOf(isSetFindWay()).compareTo(typedOther.isSetFindWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFindWay()) {
      lastComparison = TBaseHelper.compareTo(this.findWay, typedOther.findWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccount()).compareTo(typedOther.isSetAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccount()) {
      lastComparison = TBaseHelper.compareTo(this.account, typedOther.account);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // FIND_WAY
          if (field.type == TType.I32) {
            this.findWay = iprot.readI32();
            setFindWayIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ACCOUNT
          if (field.type == TType.STRING) {
            this.account = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(FIND_WAY_FIELD_DESC);
    oprot.writeI32(this.findWay);
    oprot.writeFieldEnd();
    if (this.account != null) {
      oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
      oprot.writeString(this.account);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("pwdFind_args(");
    boolean first = true;
    sb.append("findWay:");
    sb.append(this.findWay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("account:");
    if (this.account == null) {
      sb.append("null");
    } else {
      sb.append(this.account);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class pwdFind_result implements TBase<pwdFind_result, pwdFind_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("pwdFind_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.StringResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.StringResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(pwdFind_result.class, metaDataMap);
  }


  public pwdFind_result() {
  }

  public pwdFind_result(
    com.jfshare.finagle.thrift.result.StringResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public pwdFind_result(pwdFind_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.StringResult(other.success);
    }
  }

  public pwdFind_result deepCopy() {
    return new pwdFind_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.StringResult getSuccess() {
    return this.success;
  }

  public pwdFind_result setSuccess(com.jfshare.finagle.thrift.result.StringResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.StringResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof pwdFind_result)
      return this.equals((pwdFind_result)that);
    return false;
  }

  public boolean equals(pwdFind_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(pwdFind_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    pwdFind_result typedOther = (pwdFind_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.StringResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("pwdFind_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class getBuyer_args implements TBase<getBuyer_args, getBuyer_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("getBuyer_args");

  private static final TField BUYER_FIELD_DESC = new TField("buyer", TType.STRUCT, (short)1);


  public Buyer buyer;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    BUYER((short)1, "buyer");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUYER
  	return BUYER;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUYER, new FieldMetaData("buyer", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, Buyer.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(getBuyer_args.class, metaDataMap);
  }


  public getBuyer_args() {
  }

  public getBuyer_args(
    Buyer buyer)
  {
    this();
    this.buyer = buyer;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public getBuyer_args(getBuyer_args other) {
    if (other.isSetBuyer()) {
      this.buyer = new Buyer(other.buyer);
    }
  }

  public getBuyer_args deepCopy() {
    return new getBuyer_args(this);
  }

  @Override
  public void clear() {
    this.buyer = null;
  }

  public Buyer getBuyer() {
    return this.buyer;
  }

  public getBuyer_args setBuyer(Buyer buyer) {
    this.buyer = buyer;
    
    return this;
  }

  public void unsetBuyer() {
    this.buyer = null;
  }

  /** Returns true if field buyer is set (has been asigned a value) and false otherwise */
  public boolean isSetBuyer() {
    return this.buyer != null;
  }

  public void setBuyerIsSet(boolean value) {
    if (!value) {
      this.buyer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUYER:
      if (value == null) {
        unsetBuyer();
      } else {
        setBuyer((Buyer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUYER:
      return getBuyer();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUYER:
      return isSetBuyer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof getBuyer_args)
      return this.equals((getBuyer_args)that);
    return false;
  }

  public boolean equals(getBuyer_args that) {
    if (that == null)
      return false;
    boolean this_present_buyer = true && this.isSetBuyer();
    boolean that_present_buyer = true && that.isSetBuyer();
    if (this_present_buyer || that_present_buyer) {
      if (!(this_present_buyer && that_present_buyer))
        return false;
      if (!this.buyer.equals(that.buyer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_buyer = true && (isSetBuyer());
    builder.append(present_buyer);
    if (present_buyer)
      builder.append(buyer);
    return builder.toHashCode();
  }

  public int compareTo(getBuyer_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    getBuyer_args typedOther = (getBuyer_args)other;

    lastComparison = Boolean.valueOf(isSetBuyer()).compareTo(typedOther.isSetBuyer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyer()) {
      lastComparison = TBaseHelper.compareTo(this.buyer, typedOther.buyer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // BUYER
          if (field.type == TType.STRUCT) {
            this.buyer = new Buyer();
            this.buyer.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.buyer != null) {
      oprot.writeFieldBegin(BUYER_FIELD_DESC);
      this.buyer.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("getBuyer_args(");
    boolean first = true;
    sb.append("buyer:");
    if (this.buyer == null) {
      sb.append("null");
    } else {
      sb.append(this.buyer);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class getBuyer_result implements TBase<getBuyer_result, getBuyer_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("getBuyer_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public BuyerResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, BuyerResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(getBuyer_result.class, metaDataMap);
  }


  public getBuyer_result() {
  }

  public getBuyer_result(
    BuyerResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public getBuyer_result(getBuyer_result other) {
    if (other.isSetSuccess()) {
      this.success = new BuyerResult(other.success);
    }
  }

  public getBuyer_result deepCopy() {
    return new getBuyer_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public BuyerResult getSuccess() {
    return this.success;
  }

  public getBuyer_result setSuccess(BuyerResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((BuyerResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof getBuyer_result)
      return this.equals((getBuyer_result)that);
    return false;
  }

  public boolean equals(getBuyer_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(getBuyer_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    getBuyer_result typedOther = (getBuyer_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new BuyerResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("getBuyer_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class getListBuyer_args implements TBase<getListBuyer_args, getListBuyer_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("getListBuyer_args");

  private static final TField USER_ID_LIST_FIELD_DESC = new TField("userIdList", TType.LIST, (short)1);


  public List<Integer> userIdList;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_ID_LIST((short)1, "userIdList");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID_LIST
  	return USER_ID_LIST;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID_LIST, new FieldMetaData("userIdList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new FieldValueMetaData(TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(getListBuyer_args.class, metaDataMap);
  }


  public getListBuyer_args() {
  }

  public getListBuyer_args(
    List<Integer> userIdList)
  {
    this();
    this.userIdList = userIdList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public getListBuyer_args(getListBuyer_args other) {
    if (other.isSetUserIdList()) {
      List<Integer> __this__userIdList = new ArrayList<Integer>();
      for (Integer other_element : other.userIdList) {
        __this__userIdList.add(other_element);
      }
      this.userIdList = __this__userIdList;
    }
  }

  public getListBuyer_args deepCopy() {
    return new getListBuyer_args(this);
  }

  @Override
  public void clear() {
    this.userIdList = null;
  }

  public int getUserIdListSize() {
    return (this.userIdList == null) ? 0 : this.userIdList.size();
  }

  public java.util.Iterator<Integer> getUserIdListIterator() {
    return (this.userIdList == null) ? null : this.userIdList.iterator();
  }

  public void addToUserIdList(int elem) {
    if (this.userIdList == null) {
      this.userIdList = new ArrayList<Integer>();
    }
    this.userIdList.add(elem);
  }

  public List<Integer> getUserIdList() {
    return this.userIdList;
  }

  public getListBuyer_args setUserIdList(List<Integer> userIdList) {
    this.userIdList = userIdList;
    
    return this;
  }

  public void unsetUserIdList() {
    this.userIdList = null;
  }

  /** Returns true if field userIdList is set (has been asigned a value) and false otherwise */
  public boolean isSetUserIdList() {
    return this.userIdList != null;
  }

  public void setUserIdListIsSet(boolean value) {
    if (!value) {
      this.userIdList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID_LIST:
      if (value == null) {
        unsetUserIdList();
      } else {
        setUserIdList((List<Integer>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID_LIST:
      return getUserIdList();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID_LIST:
      return isSetUserIdList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof getListBuyer_args)
      return this.equals((getListBuyer_args)that);
    return false;
  }

  public boolean equals(getListBuyer_args that) {
    if (that == null)
      return false;
    boolean this_present_userIdList = true && this.isSetUserIdList();
    boolean that_present_userIdList = true && that.isSetUserIdList();
    if (this_present_userIdList || that_present_userIdList) {
      if (!(this_present_userIdList && that_present_userIdList))
        return false;
      if (!this.userIdList.equals(that.userIdList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_userIdList = true && (isSetUserIdList());
    builder.append(present_userIdList);
    if (present_userIdList)
      builder.append(userIdList);
    return builder.toHashCode();
  }

  public int compareTo(getListBuyer_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    getListBuyer_args typedOther = (getListBuyer_args)other;

    lastComparison = Boolean.valueOf(isSetUserIdList()).compareTo(typedOther.isSetUserIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIdList()) {
      lastComparison = TBaseHelper.compareTo(this.userIdList, typedOther.userIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // USER_ID_LIST
          if (field.type == TType.LIST) {
            {
            TList _list4 = iprot.readListBegin();
            this.userIdList = new ArrayList<Integer>(_list4.size);
            for (int _i5 = 0; _i5 < _list4.size; ++_i5)
            {
              int _elem6;
              _elem6 = iprot.readI32();
              this.userIdList.add(_elem6);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.userIdList != null) {
      oprot.writeFieldBegin(USER_ID_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.userIdList.size()));
        for (int _iter7 : this.userIdList)
        {
          oprot.writeI32(_iter7);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("getListBuyer_args(");
    boolean first = true;
    sb.append("userIdList:");
    if (this.userIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.userIdList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class getListBuyer_result implements TBase<getListBuyer_result, getListBuyer_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("getListBuyer_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public BuyerListResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, BuyerListResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(getListBuyer_result.class, metaDataMap);
  }


  public getListBuyer_result() {
  }

  public getListBuyer_result(
    BuyerListResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public getListBuyer_result(getListBuyer_result other) {
    if (other.isSetSuccess()) {
      this.success = new BuyerListResult(other.success);
    }
  }

  public getListBuyer_result deepCopy() {
    return new getListBuyer_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public BuyerListResult getSuccess() {
    return this.success;
  }

  public getListBuyer_result setSuccess(BuyerListResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((BuyerListResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof getListBuyer_result)
      return this.equals((getListBuyer_result)that);
    return false;
  }

  public boolean equals(getListBuyer_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(getListBuyer_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    getListBuyer_result typedOther = (getListBuyer_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new BuyerListResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("getListBuyer_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class updateBuyer_args implements TBase<updateBuyer_args, updateBuyer_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("updateBuyer_args");

  private static final TField BUYER_FIELD_DESC = new TField("buyer", TType.STRUCT, (short)1);


  public Buyer buyer;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    BUYER((short)1, "buyer");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUYER
  	return BUYER;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUYER, new FieldMetaData("buyer", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, Buyer.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(updateBuyer_args.class, metaDataMap);
  }


  public updateBuyer_args() {
  }

  public updateBuyer_args(
    Buyer buyer)
  {
    this();
    this.buyer = buyer;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public updateBuyer_args(updateBuyer_args other) {
    if (other.isSetBuyer()) {
      this.buyer = new Buyer(other.buyer);
    }
  }

  public updateBuyer_args deepCopy() {
    return new updateBuyer_args(this);
  }

  @Override
  public void clear() {
    this.buyer = null;
  }

  public Buyer getBuyer() {
    return this.buyer;
  }

  public updateBuyer_args setBuyer(Buyer buyer) {
    this.buyer = buyer;
    
    return this;
  }

  public void unsetBuyer() {
    this.buyer = null;
  }

  /** Returns true if field buyer is set (has been asigned a value) and false otherwise */
  public boolean isSetBuyer() {
    return this.buyer != null;
  }

  public void setBuyerIsSet(boolean value) {
    if (!value) {
      this.buyer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUYER:
      if (value == null) {
        unsetBuyer();
      } else {
        setBuyer((Buyer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUYER:
      return getBuyer();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUYER:
      return isSetBuyer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof updateBuyer_args)
      return this.equals((updateBuyer_args)that);
    return false;
  }

  public boolean equals(updateBuyer_args that) {
    if (that == null)
      return false;
    boolean this_present_buyer = true && this.isSetBuyer();
    boolean that_present_buyer = true && that.isSetBuyer();
    if (this_present_buyer || that_present_buyer) {
      if (!(this_present_buyer && that_present_buyer))
        return false;
      if (!this.buyer.equals(that.buyer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_buyer = true && (isSetBuyer());
    builder.append(present_buyer);
    if (present_buyer)
      builder.append(buyer);
    return builder.toHashCode();
  }

  public int compareTo(updateBuyer_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    updateBuyer_args typedOther = (updateBuyer_args)other;

    lastComparison = Boolean.valueOf(isSetBuyer()).compareTo(typedOther.isSetBuyer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyer()) {
      lastComparison = TBaseHelper.compareTo(this.buyer, typedOther.buyer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // BUYER
          if (field.type == TType.STRUCT) {
            this.buyer = new Buyer();
            this.buyer.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.buyer != null) {
      oprot.writeFieldBegin(BUYER_FIELD_DESC);
      this.buyer.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("updateBuyer_args(");
    boolean first = true;
    sb.append("buyer:");
    if (this.buyer == null) {
      sb.append("null");
    } else {
      sb.append(this.buyer);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class updateBuyer_result implements TBase<updateBuyer_result, updateBuyer_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("updateBuyer_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(updateBuyer_result.class, metaDataMap);
  }


  public updateBuyer_result() {
  }

  public updateBuyer_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public updateBuyer_result(updateBuyer_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public updateBuyer_result deepCopy() {
    return new updateBuyer_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public updateBuyer_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof updateBuyer_result)
      return this.equals((updateBuyer_result)that);
    return false;
  }

  public boolean equals(updateBuyer_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(updateBuyer_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    updateBuyer_result typedOther = (updateBuyer_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("updateBuyer_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class resetBuyerPwd_args implements TBase<resetBuyerPwd_args, resetBuyerPwd_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("resetBuyerPwd_args");

  private static final TField NEW_PWD_FIELD_DESC = new TField("newPwd", TType.STRING, (short)1);
  private static final TField BUYER_FIELD_DESC = new TField("buyer", TType.STRUCT, (short)2);


  public String newPwd;
  public Buyer buyer;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    NEW_PWD((short)1, "newPwd"),
    BUYER((short)2, "buyer");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NEW_PWD
  	return NEW_PWD;
        case 2: // BUYER
  	return BUYER;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NEW_PWD, new FieldMetaData("newPwd", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.BUYER, new FieldMetaData("buyer", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, Buyer.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(resetBuyerPwd_args.class, metaDataMap);
  }


  public resetBuyerPwd_args() {
  }

  public resetBuyerPwd_args(
    String newPwd,
    Buyer buyer)
  {
    this();
    this.newPwd = newPwd;
    this.buyer = buyer;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public resetBuyerPwd_args(resetBuyerPwd_args other) {
    if (other.isSetNewPwd()) {
      this.newPwd = other.newPwd;
    }
    if (other.isSetBuyer()) {
      this.buyer = new Buyer(other.buyer);
    }
  }

  public resetBuyerPwd_args deepCopy() {
    return new resetBuyerPwd_args(this);
  }

  @Override
  public void clear() {
    this.newPwd = null;
    this.buyer = null;
  }

  public String getNewPwd() {
    return this.newPwd;
  }

  public resetBuyerPwd_args setNewPwd(String newPwd) {
    this.newPwd = newPwd;
    
    return this;
  }

  public void unsetNewPwd() {
    this.newPwd = null;
  }

  /** Returns true if field newPwd is set (has been asigned a value) and false otherwise */
  public boolean isSetNewPwd() {
    return this.newPwd != null;
  }

  public void setNewPwdIsSet(boolean value) {
    if (!value) {
      this.newPwd = null;
    }
  }

  public Buyer getBuyer() {
    return this.buyer;
  }

  public resetBuyerPwd_args setBuyer(Buyer buyer) {
    this.buyer = buyer;
    
    return this;
  }

  public void unsetBuyer() {
    this.buyer = null;
  }

  /** Returns true if field buyer is set (has been asigned a value) and false otherwise */
  public boolean isSetBuyer() {
    return this.buyer != null;
  }

  public void setBuyerIsSet(boolean value) {
    if (!value) {
      this.buyer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NEW_PWD:
      if (value == null) {
        unsetNewPwd();
      } else {
        setNewPwd((String)value);
      }
      break;
    case BUYER:
      if (value == null) {
        unsetBuyer();
      } else {
        setBuyer((Buyer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NEW_PWD:
      return getNewPwd();
    case BUYER:
      return getBuyer();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NEW_PWD:
      return isSetNewPwd();
    case BUYER:
      return isSetBuyer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof resetBuyerPwd_args)
      return this.equals((resetBuyerPwd_args)that);
    return false;
  }

  public boolean equals(resetBuyerPwd_args that) {
    if (that == null)
      return false;
    boolean this_present_newPwd = true && this.isSetNewPwd();
    boolean that_present_newPwd = true && that.isSetNewPwd();
    if (this_present_newPwd || that_present_newPwd) {
      if (!(this_present_newPwd && that_present_newPwd))
        return false;
      if (!this.newPwd.equals(that.newPwd))
        return false;
    }
    boolean this_present_buyer = true && this.isSetBuyer();
    boolean that_present_buyer = true && that.isSetBuyer();
    if (this_present_buyer || that_present_buyer) {
      if (!(this_present_buyer && that_present_buyer))
        return false;
      if (!this.buyer.equals(that.buyer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_newPwd = true && (isSetNewPwd());
    builder.append(present_newPwd);
    if (present_newPwd)
      builder.append(newPwd);
    boolean present_buyer = true && (isSetBuyer());
    builder.append(present_buyer);
    if (present_buyer)
      builder.append(buyer);
    return builder.toHashCode();
  }

  public int compareTo(resetBuyerPwd_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    resetBuyerPwd_args typedOther = (resetBuyerPwd_args)other;

    lastComparison = Boolean.valueOf(isSetNewPwd()).compareTo(typedOther.isSetNewPwd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewPwd()) {
      lastComparison = TBaseHelper.compareTo(this.newPwd, typedOther.newPwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyer()).compareTo(typedOther.isSetBuyer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyer()) {
      lastComparison = TBaseHelper.compareTo(this.buyer, typedOther.buyer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // NEW_PWD
          if (field.type == TType.STRING) {
            this.newPwd = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // BUYER
          if (field.type == TType.STRUCT) {
            this.buyer = new Buyer();
            this.buyer.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.newPwd != null) {
      oprot.writeFieldBegin(NEW_PWD_FIELD_DESC);
      oprot.writeString(this.newPwd);
      oprot.writeFieldEnd();
    }
    if (this.buyer != null) {
      oprot.writeFieldBegin(BUYER_FIELD_DESC);
      this.buyer.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("resetBuyerPwd_args(");
    boolean first = true;
    sb.append("newPwd:");
    if (this.newPwd == null) {
      sb.append("null");
    } else {
      sb.append(this.newPwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyer:");
    if (this.buyer == null) {
      sb.append("null");
    } else {
      sb.append(this.buyer);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class resetBuyerPwd_result implements TBase<resetBuyerPwd_result, resetBuyerPwd_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("resetBuyerPwd_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(resetBuyerPwd_result.class, metaDataMap);
  }


  public resetBuyerPwd_result() {
  }

  public resetBuyerPwd_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public resetBuyerPwd_result(resetBuyerPwd_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public resetBuyerPwd_result deepCopy() {
    return new resetBuyerPwd_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public resetBuyerPwd_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof resetBuyerPwd_result)
      return this.equals((resetBuyerPwd_result)that);
    return false;
  }

  public boolean equals(resetBuyerPwd_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(resetBuyerPwd_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    resetBuyerPwd_result typedOther = (resetBuyerPwd_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("resetBuyerPwd_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class newResetBuyerPwd_args implements TBase<newResetBuyerPwd_args, newResetBuyerPwd_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("newResetBuyerPwd_args");

  private static final TField NEW_PWD_FIELD_DESC = new TField("newPwd", TType.STRING, (short)1);
  private static final TField BUYER_FIELD_DESC = new TField("buyer", TType.STRUCT, (short)2);


  public String newPwd;
  public Buyer buyer;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    NEW_PWD((short)1, "newPwd"),
    BUYER((short)2, "buyer");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NEW_PWD
  	return NEW_PWD;
        case 2: // BUYER
  	return BUYER;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NEW_PWD, new FieldMetaData("newPwd", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.BUYER, new FieldMetaData("buyer", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, Buyer.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(newResetBuyerPwd_args.class, metaDataMap);
  }


  public newResetBuyerPwd_args() {
  }

  public newResetBuyerPwd_args(
    String newPwd,
    Buyer buyer)
  {
    this();
    this.newPwd = newPwd;
    this.buyer = buyer;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public newResetBuyerPwd_args(newResetBuyerPwd_args other) {
    if (other.isSetNewPwd()) {
      this.newPwd = other.newPwd;
    }
    if (other.isSetBuyer()) {
      this.buyer = new Buyer(other.buyer);
    }
  }

  public newResetBuyerPwd_args deepCopy() {
    return new newResetBuyerPwd_args(this);
  }

  @Override
  public void clear() {
    this.newPwd = null;
    this.buyer = null;
  }

  public String getNewPwd() {
    return this.newPwd;
  }

  public newResetBuyerPwd_args setNewPwd(String newPwd) {
    this.newPwd = newPwd;
    
    return this;
  }

  public void unsetNewPwd() {
    this.newPwd = null;
  }

  /** Returns true if field newPwd is set (has been asigned a value) and false otherwise */
  public boolean isSetNewPwd() {
    return this.newPwd != null;
  }

  public void setNewPwdIsSet(boolean value) {
    if (!value) {
      this.newPwd = null;
    }
  }

  public Buyer getBuyer() {
    return this.buyer;
  }

  public newResetBuyerPwd_args setBuyer(Buyer buyer) {
    this.buyer = buyer;
    
    return this;
  }

  public void unsetBuyer() {
    this.buyer = null;
  }

  /** Returns true if field buyer is set (has been asigned a value) and false otherwise */
  public boolean isSetBuyer() {
    return this.buyer != null;
  }

  public void setBuyerIsSet(boolean value) {
    if (!value) {
      this.buyer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NEW_PWD:
      if (value == null) {
        unsetNewPwd();
      } else {
        setNewPwd((String)value);
      }
      break;
    case BUYER:
      if (value == null) {
        unsetBuyer();
      } else {
        setBuyer((Buyer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NEW_PWD:
      return getNewPwd();
    case BUYER:
      return getBuyer();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NEW_PWD:
      return isSetNewPwd();
    case BUYER:
      return isSetBuyer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof newResetBuyerPwd_args)
      return this.equals((newResetBuyerPwd_args)that);
    return false;
  }

  public boolean equals(newResetBuyerPwd_args that) {
    if (that == null)
      return false;
    boolean this_present_newPwd = true && this.isSetNewPwd();
    boolean that_present_newPwd = true && that.isSetNewPwd();
    if (this_present_newPwd || that_present_newPwd) {
      if (!(this_present_newPwd && that_present_newPwd))
        return false;
      if (!this.newPwd.equals(that.newPwd))
        return false;
    }
    boolean this_present_buyer = true && this.isSetBuyer();
    boolean that_present_buyer = true && that.isSetBuyer();
    if (this_present_buyer || that_present_buyer) {
      if (!(this_present_buyer && that_present_buyer))
        return false;
      if (!this.buyer.equals(that.buyer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_newPwd = true && (isSetNewPwd());
    builder.append(present_newPwd);
    if (present_newPwd)
      builder.append(newPwd);
    boolean present_buyer = true && (isSetBuyer());
    builder.append(present_buyer);
    if (present_buyer)
      builder.append(buyer);
    return builder.toHashCode();
  }

  public int compareTo(newResetBuyerPwd_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    newResetBuyerPwd_args typedOther = (newResetBuyerPwd_args)other;

    lastComparison = Boolean.valueOf(isSetNewPwd()).compareTo(typedOther.isSetNewPwd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewPwd()) {
      lastComparison = TBaseHelper.compareTo(this.newPwd, typedOther.newPwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyer()).compareTo(typedOther.isSetBuyer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyer()) {
      lastComparison = TBaseHelper.compareTo(this.buyer, typedOther.buyer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // NEW_PWD
          if (field.type == TType.STRING) {
            this.newPwd = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // BUYER
          if (field.type == TType.STRUCT) {
            this.buyer = new Buyer();
            this.buyer.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.newPwd != null) {
      oprot.writeFieldBegin(NEW_PWD_FIELD_DESC);
      oprot.writeString(this.newPwd);
      oprot.writeFieldEnd();
    }
    if (this.buyer != null) {
      oprot.writeFieldBegin(BUYER_FIELD_DESC);
      this.buyer.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("newResetBuyerPwd_args(");
    boolean first = true;
    sb.append("newPwd:");
    if (this.newPwd == null) {
      sb.append("null");
    } else {
      sb.append(this.newPwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyer:");
    if (this.buyer == null) {
      sb.append("null");
    } else {
      sb.append(this.buyer);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class newResetBuyerPwd_result implements TBase<newResetBuyerPwd_result, newResetBuyerPwd_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("newResetBuyerPwd_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(newResetBuyerPwd_result.class, metaDataMap);
  }


  public newResetBuyerPwd_result() {
  }

  public newResetBuyerPwd_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public newResetBuyerPwd_result(newResetBuyerPwd_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public newResetBuyerPwd_result deepCopy() {
    return new newResetBuyerPwd_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public newResetBuyerPwd_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof newResetBuyerPwd_result)
      return this.equals((newResetBuyerPwd_result)that);
    return false;
  }

  public boolean equals(newResetBuyerPwd_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(newResetBuyerPwd_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    newResetBuyerPwd_result typedOther = (newResetBuyerPwd_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("newResetBuyerPwd_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class signinThirdParty_args implements TBase<signinThirdParty_args, signinThirdParty_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("signinThirdParty_args");

  private static final TField LOGIN_LOG_FIELD_DESC = new TField("loginLog", TType.STRUCT, (short)1);
  private static final TField THIRD_USER_FIELD_DESC = new TField("thirdUser", TType.STRUCT, (short)2);


  public LoginLog loginLog;
  public ThirdpartyUser thirdUser;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    LOGIN_LOG((short)1, "loginLog"),
    THIRD_USER((short)2, "thirdUser");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOGIN_LOG
  	return LOGIN_LOG;
        case 2: // THIRD_USER
  	return THIRD_USER;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOGIN_LOG, new FieldMetaData("loginLog", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, LoginLog.class)));
    tmpMap.put(_Fields.THIRD_USER, new FieldMetaData("thirdUser", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, ThirdpartyUser.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(signinThirdParty_args.class, metaDataMap);
  }


  public signinThirdParty_args() {
  }

  public signinThirdParty_args(
    LoginLog loginLog,
    ThirdpartyUser thirdUser)
  {
    this();
    this.loginLog = loginLog;
    this.thirdUser = thirdUser;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public signinThirdParty_args(signinThirdParty_args other) {
    if (other.isSetLoginLog()) {
      this.loginLog = new LoginLog(other.loginLog);
    }
    if (other.isSetThirdUser()) {
      this.thirdUser = new ThirdpartyUser(other.thirdUser);
    }
  }

  public signinThirdParty_args deepCopy() {
    return new signinThirdParty_args(this);
  }

  @Override
  public void clear() {
    this.loginLog = null;
    this.thirdUser = null;
  }

  public LoginLog getLoginLog() {
    return this.loginLog;
  }

  public signinThirdParty_args setLoginLog(LoginLog loginLog) {
    this.loginLog = loginLog;
    
    return this;
  }

  public void unsetLoginLog() {
    this.loginLog = null;
  }

  /** Returns true if field loginLog is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginLog() {
    return this.loginLog != null;
  }

  public void setLoginLogIsSet(boolean value) {
    if (!value) {
      this.loginLog = null;
    }
  }

  public ThirdpartyUser getThirdUser() {
    return this.thirdUser;
  }

  public signinThirdParty_args setThirdUser(ThirdpartyUser thirdUser) {
    this.thirdUser = thirdUser;
    
    return this;
  }

  public void unsetThirdUser() {
    this.thirdUser = null;
  }

  /** Returns true if field thirdUser is set (has been asigned a value) and false otherwise */
  public boolean isSetThirdUser() {
    return this.thirdUser != null;
  }

  public void setThirdUserIsSet(boolean value) {
    if (!value) {
      this.thirdUser = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOGIN_LOG:
      if (value == null) {
        unsetLoginLog();
      } else {
        setLoginLog((LoginLog)value);
      }
      break;
    case THIRD_USER:
      if (value == null) {
        unsetThirdUser();
      } else {
        setThirdUser((ThirdpartyUser)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOGIN_LOG:
      return getLoginLog();
    case THIRD_USER:
      return getThirdUser();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOGIN_LOG:
      return isSetLoginLog();
    case THIRD_USER:
      return isSetThirdUser();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof signinThirdParty_args)
      return this.equals((signinThirdParty_args)that);
    return false;
  }

  public boolean equals(signinThirdParty_args that) {
    if (that == null)
      return false;
    boolean this_present_loginLog = true && this.isSetLoginLog();
    boolean that_present_loginLog = true && that.isSetLoginLog();
    if (this_present_loginLog || that_present_loginLog) {
      if (!(this_present_loginLog && that_present_loginLog))
        return false;
      if (!this.loginLog.equals(that.loginLog))
        return false;
    }
    boolean this_present_thirdUser = true && this.isSetThirdUser();
    boolean that_present_thirdUser = true && that.isSetThirdUser();
    if (this_present_thirdUser || that_present_thirdUser) {
      if (!(this_present_thirdUser && that_present_thirdUser))
        return false;
      if (!this.thirdUser.equals(that.thirdUser))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_loginLog = true && (isSetLoginLog());
    builder.append(present_loginLog);
    if (present_loginLog)
      builder.append(loginLog);
    boolean present_thirdUser = true && (isSetThirdUser());
    builder.append(present_thirdUser);
    if (present_thirdUser)
      builder.append(thirdUser);
    return builder.toHashCode();
  }

  public int compareTo(signinThirdParty_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    signinThirdParty_args typedOther = (signinThirdParty_args)other;

    lastComparison = Boolean.valueOf(isSetLoginLog()).compareTo(typedOther.isSetLoginLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginLog()) {
      lastComparison = TBaseHelper.compareTo(this.loginLog, typedOther.loginLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdUser()).compareTo(typedOther.isSetThirdUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdUser()) {
      lastComparison = TBaseHelper.compareTo(this.thirdUser, typedOther.thirdUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // LOGIN_LOG
          if (field.type == TType.STRUCT) {
            this.loginLog = new LoginLog();
            this.loginLog.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // THIRD_USER
          if (field.type == TType.STRUCT) {
            this.thirdUser = new ThirdpartyUser();
            this.thirdUser.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.loginLog != null) {
      oprot.writeFieldBegin(LOGIN_LOG_FIELD_DESC);
      this.loginLog.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.thirdUser != null) {
      oprot.writeFieldBegin(THIRD_USER_FIELD_DESC);
      this.thirdUser.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("signinThirdParty_args(");
    boolean first = true;
    sb.append("loginLog:");
    if (this.loginLog == null) {
      sb.append("null");
    } else {
      sb.append(this.loginLog);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdUser:");
    if (this.thirdUser == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdUser);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class signinThirdParty_result implements TBase<signinThirdParty_result, signinThirdParty_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("signinThirdParty_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public BuyerResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, BuyerResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(signinThirdParty_result.class, metaDataMap);
  }


  public signinThirdParty_result() {
  }

  public signinThirdParty_result(
    BuyerResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public signinThirdParty_result(signinThirdParty_result other) {
    if (other.isSetSuccess()) {
      this.success = new BuyerResult(other.success);
    }
  }

  public signinThirdParty_result deepCopy() {
    return new signinThirdParty_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public BuyerResult getSuccess() {
    return this.success;
  }

  public signinThirdParty_result setSuccess(BuyerResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((BuyerResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof signinThirdParty_result)
      return this.equals((signinThirdParty_result)that);
    return false;
  }

  public boolean equals(signinThirdParty_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(signinThirdParty_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    signinThirdParty_result typedOther = (signinThirdParty_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new BuyerResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("signinThirdParty_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class isBindThirdParty_args implements TBase<isBindThirdParty_args, isBindThirdParty_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("isBindThirdParty_args");

  private static final TField THIRD_TYPE_FIELD_DESC = new TField("thirdType", TType.STRING, (short)1);
  private static final TField LOGIN_LOG_FIELD_DESC = new TField("loginLog", TType.STRUCT, (short)2);


  public String thirdType;
  public LoginLog loginLog;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    THIRD_TYPE((short)1, "thirdType"),
    LOGIN_LOG((short)2, "loginLog");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // THIRD_TYPE
  	return THIRD_TYPE;
        case 2: // LOGIN_LOG
  	return LOGIN_LOG;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.THIRD_TYPE, new FieldMetaData("thirdType", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LOGIN_LOG, new FieldMetaData("loginLog", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, LoginLog.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(isBindThirdParty_args.class, metaDataMap);
  }


  public isBindThirdParty_args() {
  }

  public isBindThirdParty_args(
    String thirdType,
    LoginLog loginLog)
  {
    this();
    this.thirdType = thirdType;
    this.loginLog = loginLog;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public isBindThirdParty_args(isBindThirdParty_args other) {
    if (other.isSetThirdType()) {
      this.thirdType = other.thirdType;
    }
    if (other.isSetLoginLog()) {
      this.loginLog = new LoginLog(other.loginLog);
    }
  }

  public isBindThirdParty_args deepCopy() {
    return new isBindThirdParty_args(this);
  }

  @Override
  public void clear() {
    this.thirdType = null;
    this.loginLog = null;
  }

  public String getThirdType() {
    return this.thirdType;
  }

  public isBindThirdParty_args setThirdType(String thirdType) {
    this.thirdType = thirdType;
    
    return this;
  }

  public void unsetThirdType() {
    this.thirdType = null;
  }

  /** Returns true if field thirdType is set (has been asigned a value) and false otherwise */
  public boolean isSetThirdType() {
    return this.thirdType != null;
  }

  public void setThirdTypeIsSet(boolean value) {
    if (!value) {
      this.thirdType = null;
    }
  }

  public LoginLog getLoginLog() {
    return this.loginLog;
  }

  public isBindThirdParty_args setLoginLog(LoginLog loginLog) {
    this.loginLog = loginLog;
    
    return this;
  }

  public void unsetLoginLog() {
    this.loginLog = null;
  }

  /** Returns true if field loginLog is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginLog() {
    return this.loginLog != null;
  }

  public void setLoginLogIsSet(boolean value) {
    if (!value) {
      this.loginLog = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case THIRD_TYPE:
      if (value == null) {
        unsetThirdType();
      } else {
        setThirdType((String)value);
      }
      break;
    case LOGIN_LOG:
      if (value == null) {
        unsetLoginLog();
      } else {
        setLoginLog((LoginLog)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case THIRD_TYPE:
      return getThirdType();
    case LOGIN_LOG:
      return getLoginLog();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case THIRD_TYPE:
      return isSetThirdType();
    case LOGIN_LOG:
      return isSetLoginLog();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof isBindThirdParty_args)
      return this.equals((isBindThirdParty_args)that);
    return false;
  }

  public boolean equals(isBindThirdParty_args that) {
    if (that == null)
      return false;
    boolean this_present_thirdType = true && this.isSetThirdType();
    boolean that_present_thirdType = true && that.isSetThirdType();
    if (this_present_thirdType || that_present_thirdType) {
      if (!(this_present_thirdType && that_present_thirdType))
        return false;
      if (!this.thirdType.equals(that.thirdType))
        return false;
    }
    boolean this_present_loginLog = true && this.isSetLoginLog();
    boolean that_present_loginLog = true && that.isSetLoginLog();
    if (this_present_loginLog || that_present_loginLog) {
      if (!(this_present_loginLog && that_present_loginLog))
        return false;
      if (!this.loginLog.equals(that.loginLog))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_thirdType = true && (isSetThirdType());
    builder.append(present_thirdType);
    if (present_thirdType)
      builder.append(thirdType);
    boolean present_loginLog = true && (isSetLoginLog());
    builder.append(present_loginLog);
    if (present_loginLog)
      builder.append(loginLog);
    return builder.toHashCode();
  }

  public int compareTo(isBindThirdParty_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    isBindThirdParty_args typedOther = (isBindThirdParty_args)other;

    lastComparison = Boolean.valueOf(isSetThirdType()).compareTo(typedOther.isSetThirdType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdType()) {
      lastComparison = TBaseHelper.compareTo(this.thirdType, typedOther.thirdType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginLog()).compareTo(typedOther.isSetLoginLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginLog()) {
      lastComparison = TBaseHelper.compareTo(this.loginLog, typedOther.loginLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // THIRD_TYPE
          if (field.type == TType.STRING) {
            this.thirdType = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LOGIN_LOG
          if (field.type == TType.STRUCT) {
            this.loginLog = new LoginLog();
            this.loginLog.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.thirdType != null) {
      oprot.writeFieldBegin(THIRD_TYPE_FIELD_DESC);
      oprot.writeString(this.thirdType);
      oprot.writeFieldEnd();
    }
    if (this.loginLog != null) {
      oprot.writeFieldBegin(LOGIN_LOG_FIELD_DESC);
      this.loginLog.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("isBindThirdParty_args(");
    boolean first = true;
    sb.append("thirdType:");
    if (this.thirdType == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginLog:");
    if (this.loginLog == null) {
      sb.append("null");
    } else {
      sb.append(this.loginLog);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class isBindThirdParty_result implements TBase<isBindThirdParty_result, isBindThirdParty_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("isBindThirdParty_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public BuyerResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, BuyerResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(isBindThirdParty_result.class, metaDataMap);
  }


  public isBindThirdParty_result() {
  }

  public isBindThirdParty_result(
    BuyerResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public isBindThirdParty_result(isBindThirdParty_result other) {
    if (other.isSetSuccess()) {
      this.success = new BuyerResult(other.success);
    }
  }

  public isBindThirdParty_result deepCopy() {
    return new isBindThirdParty_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public BuyerResult getSuccess() {
    return this.success;
  }

  public isBindThirdParty_result setSuccess(BuyerResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((BuyerResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof isBindThirdParty_result)
      return this.equals((isBindThirdParty_result)that);
    return false;
  }

  public boolean equals(isBindThirdParty_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(isBindThirdParty_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    isBindThirdParty_result typedOther = (isBindThirdParty_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new BuyerResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("isBindThirdParty_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class getAuthInfo_args implements TBase<getAuthInfo_args, getAuthInfo_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("getAuthInfo_args");

  private static final TField AUTH_INFO_FIELD_DESC = new TField("authInfo", TType.STRUCT, (short)1);
  private static final TField BUYER_FIELD_DESC = new TField("buyer", TType.STRUCT, (short)2);
  private static final TField LOGIN_LOG_FIELD_DESC = new TField("loginLog", TType.STRUCT, (short)3);


  public AuthInfo authInfo;
  public Buyer buyer;
  public LoginLog loginLog;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    AUTH_INFO((short)1, "authInfo"),
    BUYER((short)2, "buyer"),
    LOGIN_LOG((short)3, "loginLog");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AUTH_INFO
  	return AUTH_INFO;
        case 2: // BUYER
  	return BUYER;
        case 3: // LOGIN_LOG
  	return LOGIN_LOG;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUTH_INFO, new FieldMetaData("authInfo", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, AuthInfo.class)));
    tmpMap.put(_Fields.BUYER, new FieldMetaData("buyer", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, Buyer.class)));
    tmpMap.put(_Fields.LOGIN_LOG, new FieldMetaData("loginLog", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, LoginLog.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(getAuthInfo_args.class, metaDataMap);
  }


  public getAuthInfo_args() {
  }

  public getAuthInfo_args(
    AuthInfo authInfo,
    Buyer buyer,
    LoginLog loginLog)
  {
    this();
    this.authInfo = authInfo;
    this.buyer = buyer;
    this.loginLog = loginLog;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public getAuthInfo_args(getAuthInfo_args other) {
    if (other.isSetAuthInfo()) {
      this.authInfo = new AuthInfo(other.authInfo);
    }
    if (other.isSetBuyer()) {
      this.buyer = new Buyer(other.buyer);
    }
    if (other.isSetLoginLog()) {
      this.loginLog = new LoginLog(other.loginLog);
    }
  }

  public getAuthInfo_args deepCopy() {
    return new getAuthInfo_args(this);
  }

  @Override
  public void clear() {
    this.authInfo = null;
    this.buyer = null;
    this.loginLog = null;
  }

  public AuthInfo getAuthInfo() {
    return this.authInfo;
  }

  public getAuthInfo_args setAuthInfo(AuthInfo authInfo) {
    this.authInfo = authInfo;
    
    return this;
  }

  public void unsetAuthInfo() {
    this.authInfo = null;
  }

  /** Returns true if field authInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetAuthInfo() {
    return this.authInfo != null;
  }

  public void setAuthInfoIsSet(boolean value) {
    if (!value) {
      this.authInfo = null;
    }
  }

  public Buyer getBuyer() {
    return this.buyer;
  }

  public getAuthInfo_args setBuyer(Buyer buyer) {
    this.buyer = buyer;
    
    return this;
  }

  public void unsetBuyer() {
    this.buyer = null;
  }

  /** Returns true if field buyer is set (has been asigned a value) and false otherwise */
  public boolean isSetBuyer() {
    return this.buyer != null;
  }

  public void setBuyerIsSet(boolean value) {
    if (!value) {
      this.buyer = null;
    }
  }

  public LoginLog getLoginLog() {
    return this.loginLog;
  }

  public getAuthInfo_args setLoginLog(LoginLog loginLog) {
    this.loginLog = loginLog;
    
    return this;
  }

  public void unsetLoginLog() {
    this.loginLog = null;
  }

  /** Returns true if field loginLog is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginLog() {
    return this.loginLog != null;
  }

  public void setLoginLogIsSet(boolean value) {
    if (!value) {
      this.loginLog = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AUTH_INFO:
      if (value == null) {
        unsetAuthInfo();
      } else {
        setAuthInfo((AuthInfo)value);
      }
      break;
    case BUYER:
      if (value == null) {
        unsetBuyer();
      } else {
        setBuyer((Buyer)value);
      }
      break;
    case LOGIN_LOG:
      if (value == null) {
        unsetLoginLog();
      } else {
        setLoginLog((LoginLog)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AUTH_INFO:
      return getAuthInfo();
    case BUYER:
      return getBuyer();
    case LOGIN_LOG:
      return getLoginLog();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AUTH_INFO:
      return isSetAuthInfo();
    case BUYER:
      return isSetBuyer();
    case LOGIN_LOG:
      return isSetLoginLog();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof getAuthInfo_args)
      return this.equals((getAuthInfo_args)that);
    return false;
  }

  public boolean equals(getAuthInfo_args that) {
    if (that == null)
      return false;
    boolean this_present_authInfo = true && this.isSetAuthInfo();
    boolean that_present_authInfo = true && that.isSetAuthInfo();
    if (this_present_authInfo || that_present_authInfo) {
      if (!(this_present_authInfo && that_present_authInfo))
        return false;
      if (!this.authInfo.equals(that.authInfo))
        return false;
    }
    boolean this_present_buyer = true && this.isSetBuyer();
    boolean that_present_buyer = true && that.isSetBuyer();
    if (this_present_buyer || that_present_buyer) {
      if (!(this_present_buyer && that_present_buyer))
        return false;
      if (!this.buyer.equals(that.buyer))
        return false;
    }
    boolean this_present_loginLog = true && this.isSetLoginLog();
    boolean that_present_loginLog = true && that.isSetLoginLog();
    if (this_present_loginLog || that_present_loginLog) {
      if (!(this_present_loginLog && that_present_loginLog))
        return false;
      if (!this.loginLog.equals(that.loginLog))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_authInfo = true && (isSetAuthInfo());
    builder.append(present_authInfo);
    if (present_authInfo)
      builder.append(authInfo);
    boolean present_buyer = true && (isSetBuyer());
    builder.append(present_buyer);
    if (present_buyer)
      builder.append(buyer);
    boolean present_loginLog = true && (isSetLoginLog());
    builder.append(present_loginLog);
    if (present_loginLog)
      builder.append(loginLog);
    return builder.toHashCode();
  }

  public int compareTo(getAuthInfo_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    getAuthInfo_args typedOther = (getAuthInfo_args)other;

    lastComparison = Boolean.valueOf(isSetAuthInfo()).compareTo(typedOther.isSetAuthInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthInfo()) {
      lastComparison = TBaseHelper.compareTo(this.authInfo, typedOther.authInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyer()).compareTo(typedOther.isSetBuyer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyer()) {
      lastComparison = TBaseHelper.compareTo(this.buyer, typedOther.buyer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginLog()).compareTo(typedOther.isSetLoginLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginLog()) {
      lastComparison = TBaseHelper.compareTo(this.loginLog, typedOther.loginLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // AUTH_INFO
          if (field.type == TType.STRUCT) {
            this.authInfo = new AuthInfo();
            this.authInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // BUYER
          if (field.type == TType.STRUCT) {
            this.buyer = new Buyer();
            this.buyer.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LOGIN_LOG
          if (field.type == TType.STRUCT) {
            this.loginLog = new LoginLog();
            this.loginLog.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.authInfo != null) {
      oprot.writeFieldBegin(AUTH_INFO_FIELD_DESC);
      this.authInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.buyer != null) {
      oprot.writeFieldBegin(BUYER_FIELD_DESC);
      this.buyer.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.loginLog != null) {
      oprot.writeFieldBegin(LOGIN_LOG_FIELD_DESC);
      this.loginLog.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("getAuthInfo_args(");
    boolean first = true;
    sb.append("authInfo:");
    if (this.authInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.authInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyer:");
    if (this.buyer == null) {
      sb.append("null");
    } else {
      sb.append(this.buyer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginLog:");
    if (this.loginLog == null) {
      sb.append("null");
    } else {
      sb.append(this.loginLog);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class getAuthInfo_result implements TBase<getAuthInfo_result, getAuthInfo_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("getAuthInfo_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public AuthInfoResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, AuthInfoResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(getAuthInfo_result.class, metaDataMap);
  }


  public getAuthInfo_result() {
  }

  public getAuthInfo_result(
    AuthInfoResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public getAuthInfo_result(getAuthInfo_result other) {
    if (other.isSetSuccess()) {
      this.success = new AuthInfoResult(other.success);
    }
  }

  public getAuthInfo_result deepCopy() {
    return new getAuthInfo_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public AuthInfoResult getSuccess() {
    return this.success;
  }

  public getAuthInfo_result setSuccess(AuthInfoResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((AuthInfoResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof getAuthInfo_result)
      return this.equals((getAuthInfo_result)that);
    return false;
  }

  public boolean equals(getAuthInfo_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(getAuthInfo_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    getAuthInfo_result typedOther = (getAuthInfo_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new AuthInfoResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("getAuthInfo_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class validAuth_args implements TBase<validAuth_args, validAuth_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("validAuth_args");

  private static final TField LOGIN_LOG_FIELD_DESC = new TField("loginLog", TType.STRUCT, (short)1);
  private static final TField AUTH_INFO_FIELD_DESC = new TField("authInfo", TType.STRUCT, (short)2);


  public LoginLog loginLog;
  public AuthInfo authInfo;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    LOGIN_LOG((short)1, "loginLog"),
    AUTH_INFO((short)2, "authInfo");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOGIN_LOG
  	return LOGIN_LOG;
        case 2: // AUTH_INFO
  	return AUTH_INFO;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOGIN_LOG, new FieldMetaData("loginLog", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, LoginLog.class)));
    tmpMap.put(_Fields.AUTH_INFO, new FieldMetaData("authInfo", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, AuthInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(validAuth_args.class, metaDataMap);
  }


  public validAuth_args() {
  }

  public validAuth_args(
    LoginLog loginLog,
    AuthInfo authInfo)
  {
    this();
    this.loginLog = loginLog;
    this.authInfo = authInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public validAuth_args(validAuth_args other) {
    if (other.isSetLoginLog()) {
      this.loginLog = new LoginLog(other.loginLog);
    }
    if (other.isSetAuthInfo()) {
      this.authInfo = new AuthInfo(other.authInfo);
    }
  }

  public validAuth_args deepCopy() {
    return new validAuth_args(this);
  }

  @Override
  public void clear() {
    this.loginLog = null;
    this.authInfo = null;
  }

  public LoginLog getLoginLog() {
    return this.loginLog;
  }

  public validAuth_args setLoginLog(LoginLog loginLog) {
    this.loginLog = loginLog;
    
    return this;
  }

  public void unsetLoginLog() {
    this.loginLog = null;
  }

  /** Returns true if field loginLog is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginLog() {
    return this.loginLog != null;
  }

  public void setLoginLogIsSet(boolean value) {
    if (!value) {
      this.loginLog = null;
    }
  }

  public AuthInfo getAuthInfo() {
    return this.authInfo;
  }

  public validAuth_args setAuthInfo(AuthInfo authInfo) {
    this.authInfo = authInfo;
    
    return this;
  }

  public void unsetAuthInfo() {
    this.authInfo = null;
  }

  /** Returns true if field authInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetAuthInfo() {
    return this.authInfo != null;
  }

  public void setAuthInfoIsSet(boolean value) {
    if (!value) {
      this.authInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOGIN_LOG:
      if (value == null) {
        unsetLoginLog();
      } else {
        setLoginLog((LoginLog)value);
      }
      break;
    case AUTH_INFO:
      if (value == null) {
        unsetAuthInfo();
      } else {
        setAuthInfo((AuthInfo)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOGIN_LOG:
      return getLoginLog();
    case AUTH_INFO:
      return getAuthInfo();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOGIN_LOG:
      return isSetLoginLog();
    case AUTH_INFO:
      return isSetAuthInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof validAuth_args)
      return this.equals((validAuth_args)that);
    return false;
  }

  public boolean equals(validAuth_args that) {
    if (that == null)
      return false;
    boolean this_present_loginLog = true && this.isSetLoginLog();
    boolean that_present_loginLog = true && that.isSetLoginLog();
    if (this_present_loginLog || that_present_loginLog) {
      if (!(this_present_loginLog && that_present_loginLog))
        return false;
      if (!this.loginLog.equals(that.loginLog))
        return false;
    }
    boolean this_present_authInfo = true && this.isSetAuthInfo();
    boolean that_present_authInfo = true && that.isSetAuthInfo();
    if (this_present_authInfo || that_present_authInfo) {
      if (!(this_present_authInfo && that_present_authInfo))
        return false;
      if (!this.authInfo.equals(that.authInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_loginLog = true && (isSetLoginLog());
    builder.append(present_loginLog);
    if (present_loginLog)
      builder.append(loginLog);
    boolean present_authInfo = true && (isSetAuthInfo());
    builder.append(present_authInfo);
    if (present_authInfo)
      builder.append(authInfo);
    return builder.toHashCode();
  }

  public int compareTo(validAuth_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    validAuth_args typedOther = (validAuth_args)other;

    lastComparison = Boolean.valueOf(isSetLoginLog()).compareTo(typedOther.isSetLoginLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginLog()) {
      lastComparison = TBaseHelper.compareTo(this.loginLog, typedOther.loginLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthInfo()).compareTo(typedOther.isSetAuthInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthInfo()) {
      lastComparison = TBaseHelper.compareTo(this.authInfo, typedOther.authInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // LOGIN_LOG
          if (field.type == TType.STRUCT) {
            this.loginLog = new LoginLog();
            this.loginLog.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // AUTH_INFO
          if (field.type == TType.STRUCT) {
            this.authInfo = new AuthInfo();
            this.authInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.loginLog != null) {
      oprot.writeFieldBegin(LOGIN_LOG_FIELD_DESC);
      this.loginLog.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.authInfo != null) {
      oprot.writeFieldBegin(AUTH_INFO_FIELD_DESC);
      this.authInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("validAuth_args(");
    boolean first = true;
    sb.append("loginLog:");
    if (this.loginLog == null) {
      sb.append("null");
    } else {
      sb.append(this.loginLog);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authInfo:");
    if (this.authInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.authInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class validAuth_result implements TBase<validAuth_result, validAuth_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("validAuth_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public com.jfshare.finagle.thrift.result.Result success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, com.jfshare.finagle.thrift.result.Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(validAuth_result.class, metaDataMap);
  }


  public validAuth_result() {
  }

  public validAuth_result(
    com.jfshare.finagle.thrift.result.Result success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public validAuth_result(validAuth_result other) {
    if (other.isSetSuccess()) {
      this.success = new com.jfshare.finagle.thrift.result.Result(other.success);
    }
  }

  public validAuth_result deepCopy() {
    return new validAuth_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public com.jfshare.finagle.thrift.result.Result getSuccess() {
    return this.success;
  }

  public validAuth_result setSuccess(com.jfshare.finagle.thrift.result.Result success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((com.jfshare.finagle.thrift.result.Result)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof validAuth_result)
      return this.equals((validAuth_result)that);
    return false;
  }

  public boolean equals(validAuth_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(validAuth_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    validAuth_result typedOther = (validAuth_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new com.jfshare.finagle.thrift.result.Result();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("validAuth_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class thirdUserSignin_args implements TBase<thirdUserSignin_args, thirdUserSignin_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("thirdUserSignin_args");

  private static final TField LOGIN_LOG_FIELD_DESC = new TField("loginLog", TType.STRUCT, (short)1);
  private static final TField USER_THIRD_FIELD_DESC = new TField("UserThird", TType.STRUCT, (short)2);
  private static final TField VALIDATE_INFO_FIELD_DESC = new TField("validateInfo", TType.STRUCT, (short)3);


  public LoginLog loginLog;
  public UserInfoThird UserThird;
  public ValidateInfo validateInfo;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    LOGIN_LOG((short)1, "loginLog"),
    USER_THIRD((short)2, "UserThird"),
    VALIDATE_INFO((short)3, "validateInfo");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOGIN_LOG
  	return LOGIN_LOG;
        case 2: // USER_THIRD
  	return USER_THIRD;
        case 3: // VALIDATE_INFO
  	return VALIDATE_INFO;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOGIN_LOG, new FieldMetaData("loginLog", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, LoginLog.class)));
    tmpMap.put(_Fields.USER_THIRD, new FieldMetaData("UserThird", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, UserInfoThird.class)));
    tmpMap.put(_Fields.VALIDATE_INFO, new FieldMetaData("validateInfo", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, ValidateInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(thirdUserSignin_args.class, metaDataMap);
  }


  public thirdUserSignin_args() {
  }

  public thirdUserSignin_args(
    LoginLog loginLog,
    UserInfoThird UserThird,
    ValidateInfo validateInfo)
  {
    this();
    this.loginLog = loginLog;
    this.UserThird = UserThird;
    this.validateInfo = validateInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public thirdUserSignin_args(thirdUserSignin_args other) {
    if (other.isSetLoginLog()) {
      this.loginLog = new LoginLog(other.loginLog);
    }
    if (other.isSetUserThird()) {
      this.UserThird = new UserInfoThird(other.UserThird);
    }
    if (other.isSetValidateInfo()) {
      this.validateInfo = new ValidateInfo(other.validateInfo);
    }
  }

  public thirdUserSignin_args deepCopy() {
    return new thirdUserSignin_args(this);
  }

  @Override
  public void clear() {
    this.loginLog = null;
    this.UserThird = null;
    this.validateInfo = null;
  }

  public LoginLog getLoginLog() {
    return this.loginLog;
  }

  public thirdUserSignin_args setLoginLog(LoginLog loginLog) {
    this.loginLog = loginLog;
    
    return this;
  }

  public void unsetLoginLog() {
    this.loginLog = null;
  }

  /** Returns true if field loginLog is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginLog() {
    return this.loginLog != null;
  }

  public void setLoginLogIsSet(boolean value) {
    if (!value) {
      this.loginLog = null;
    }
  }

  public UserInfoThird getUserThird() {
    return this.UserThird;
  }

  public thirdUserSignin_args setUserThird(UserInfoThird UserThird) {
    this.UserThird = UserThird;
    
    return this;
  }

  public void unsetUserThird() {
    this.UserThird = null;
  }

  /** Returns true if field UserThird is set (has been asigned a value) and false otherwise */
  public boolean isSetUserThird() {
    return this.UserThird != null;
  }

  public void setUserThirdIsSet(boolean value) {
    if (!value) {
      this.UserThird = null;
    }
  }

  public ValidateInfo getValidateInfo() {
    return this.validateInfo;
  }

  public thirdUserSignin_args setValidateInfo(ValidateInfo validateInfo) {
    this.validateInfo = validateInfo;
    
    return this;
  }

  public void unsetValidateInfo() {
    this.validateInfo = null;
  }

  /** Returns true if field validateInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetValidateInfo() {
    return this.validateInfo != null;
  }

  public void setValidateInfoIsSet(boolean value) {
    if (!value) {
      this.validateInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOGIN_LOG:
      if (value == null) {
        unsetLoginLog();
      } else {
        setLoginLog((LoginLog)value);
      }
      break;
    case USER_THIRD:
      if (value == null) {
        unsetUserThird();
      } else {
        setUserThird((UserInfoThird)value);
      }
      break;
    case VALIDATE_INFO:
      if (value == null) {
        unsetValidateInfo();
      } else {
        setValidateInfo((ValidateInfo)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOGIN_LOG:
      return getLoginLog();
    case USER_THIRD:
      return getUserThird();
    case VALIDATE_INFO:
      return getValidateInfo();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOGIN_LOG:
      return isSetLoginLog();
    case USER_THIRD:
      return isSetUserThird();
    case VALIDATE_INFO:
      return isSetValidateInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof thirdUserSignin_args)
      return this.equals((thirdUserSignin_args)that);
    return false;
  }

  public boolean equals(thirdUserSignin_args that) {
    if (that == null)
      return false;
    boolean this_present_loginLog = true && this.isSetLoginLog();
    boolean that_present_loginLog = true && that.isSetLoginLog();
    if (this_present_loginLog || that_present_loginLog) {
      if (!(this_present_loginLog && that_present_loginLog))
        return false;
      if (!this.loginLog.equals(that.loginLog))
        return false;
    }
    boolean this_present_UserThird = true && this.isSetUserThird();
    boolean that_present_UserThird = true && that.isSetUserThird();
    if (this_present_UserThird || that_present_UserThird) {
      if (!(this_present_UserThird && that_present_UserThird))
        return false;
      if (!this.UserThird.equals(that.UserThird))
        return false;
    }
    boolean this_present_validateInfo = true && this.isSetValidateInfo();
    boolean that_present_validateInfo = true && that.isSetValidateInfo();
    if (this_present_validateInfo || that_present_validateInfo) {
      if (!(this_present_validateInfo && that_present_validateInfo))
        return false;
      if (!this.validateInfo.equals(that.validateInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_loginLog = true && (isSetLoginLog());
    builder.append(present_loginLog);
    if (present_loginLog)
      builder.append(loginLog);
    boolean present_UserThird = true && (isSetUserThird());
    builder.append(present_UserThird);
    if (present_UserThird)
      builder.append(UserThird);
    boolean present_validateInfo = true && (isSetValidateInfo());
    builder.append(present_validateInfo);
    if (present_validateInfo)
      builder.append(validateInfo);
    return builder.toHashCode();
  }

  public int compareTo(thirdUserSignin_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    thirdUserSignin_args typedOther = (thirdUserSignin_args)other;

    lastComparison = Boolean.valueOf(isSetLoginLog()).compareTo(typedOther.isSetLoginLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginLog()) {
      lastComparison = TBaseHelper.compareTo(this.loginLog, typedOther.loginLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserThird()).compareTo(typedOther.isSetUserThird());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserThird()) {
      lastComparison = TBaseHelper.compareTo(this.UserThird, typedOther.UserThird);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidateInfo()).compareTo(typedOther.isSetValidateInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidateInfo()) {
      lastComparison = TBaseHelper.compareTo(this.validateInfo, typedOther.validateInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // LOGIN_LOG
          if (field.type == TType.STRUCT) {
            this.loginLog = new LoginLog();
            this.loginLog.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // USER_THIRD
          if (field.type == TType.STRUCT) {
            this.UserThird = new UserInfoThird();
            this.UserThird.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // VALIDATE_INFO
          if (field.type == TType.STRUCT) {
            this.validateInfo = new ValidateInfo();
            this.validateInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.loginLog != null) {
      oprot.writeFieldBegin(LOGIN_LOG_FIELD_DESC);
      this.loginLog.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.UserThird != null) {
      oprot.writeFieldBegin(USER_THIRD_FIELD_DESC);
      this.UserThird.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.validateInfo != null) {
      oprot.writeFieldBegin(VALIDATE_INFO_FIELD_DESC);
      this.validateInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("thirdUserSignin_args(");
    boolean first = true;
    sb.append("loginLog:");
    if (this.loginLog == null) {
      sb.append("null");
    } else {
      sb.append(this.loginLog);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UserThird:");
    if (this.UserThird == null) {
      sb.append("null");
    } else {
      sb.append(this.UserThird);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("validateInfo:");
    if (this.validateInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.validateInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class thirdUserSignin_result implements TBase<thirdUserSignin_result, thirdUserSignin_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("thirdUserSignin_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public BuyerResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, BuyerResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(thirdUserSignin_result.class, metaDataMap);
  }


  public thirdUserSignin_result() {
  }

  public thirdUserSignin_result(
    BuyerResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public thirdUserSignin_result(thirdUserSignin_result other) {
    if (other.isSetSuccess()) {
      this.success = new BuyerResult(other.success);
    }
  }

  public thirdUserSignin_result deepCopy() {
    return new thirdUserSignin_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public BuyerResult getSuccess() {
    return this.success;
  }

  public thirdUserSignin_result setSuccess(BuyerResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((BuyerResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof thirdUserSignin_result)
      return this.equals((thirdUserSignin_result)that);
    return false;
  }

  public boolean equals(thirdUserSignin_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(thirdUserSignin_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    thirdUserSignin_result typedOther = (thirdUserSignin_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new BuyerResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("thirdUserSignin_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class isExitsThirdUser_args implements TBase<isExitsThirdUser_args, isExitsThirdUser_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("isExitsThirdUser_args");

  private static final TField LOGIN_LOG_FIELD_DESC = new TField("loginLog", TType.STRUCT, (short)1);
  private static final TField VALIDATE_INFO_FIELD_DESC = new TField("validateInfo", TType.STRUCT, (short)2);


  public LoginLog loginLog;
  public ValidateInfo validateInfo;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    LOGIN_LOG((short)1, "loginLog"),
    VALIDATE_INFO((short)2, "validateInfo");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOGIN_LOG
  	return LOGIN_LOG;
        case 2: // VALIDATE_INFO
  	return VALIDATE_INFO;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOGIN_LOG, new FieldMetaData("loginLog", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, LoginLog.class)));
    tmpMap.put(_Fields.VALIDATE_INFO, new FieldMetaData("validateInfo", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, ValidateInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(isExitsThirdUser_args.class, metaDataMap);
  }


  public isExitsThirdUser_args() {
  }

  public isExitsThirdUser_args(
    LoginLog loginLog,
    ValidateInfo validateInfo)
  {
    this();
    this.loginLog = loginLog;
    this.validateInfo = validateInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public isExitsThirdUser_args(isExitsThirdUser_args other) {
    if (other.isSetLoginLog()) {
      this.loginLog = new LoginLog(other.loginLog);
    }
    if (other.isSetValidateInfo()) {
      this.validateInfo = new ValidateInfo(other.validateInfo);
    }
  }

  public isExitsThirdUser_args deepCopy() {
    return new isExitsThirdUser_args(this);
  }

  @Override
  public void clear() {
    this.loginLog = null;
    this.validateInfo = null;
  }

  public LoginLog getLoginLog() {
    return this.loginLog;
  }

  public isExitsThirdUser_args setLoginLog(LoginLog loginLog) {
    this.loginLog = loginLog;
    
    return this;
  }

  public void unsetLoginLog() {
    this.loginLog = null;
  }

  /** Returns true if field loginLog is set (has been asigned a value) and false otherwise */
  public boolean isSetLoginLog() {
    return this.loginLog != null;
  }

  public void setLoginLogIsSet(boolean value) {
    if (!value) {
      this.loginLog = null;
    }
  }

  public ValidateInfo getValidateInfo() {
    return this.validateInfo;
  }

  public isExitsThirdUser_args setValidateInfo(ValidateInfo validateInfo) {
    this.validateInfo = validateInfo;
    
    return this;
  }

  public void unsetValidateInfo() {
    this.validateInfo = null;
  }

  /** Returns true if field validateInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetValidateInfo() {
    return this.validateInfo != null;
  }

  public void setValidateInfoIsSet(boolean value) {
    if (!value) {
      this.validateInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOGIN_LOG:
      if (value == null) {
        unsetLoginLog();
      } else {
        setLoginLog((LoginLog)value);
      }
      break;
    case VALIDATE_INFO:
      if (value == null) {
        unsetValidateInfo();
      } else {
        setValidateInfo((ValidateInfo)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOGIN_LOG:
      return getLoginLog();
    case VALIDATE_INFO:
      return getValidateInfo();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOGIN_LOG:
      return isSetLoginLog();
    case VALIDATE_INFO:
      return isSetValidateInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof isExitsThirdUser_args)
      return this.equals((isExitsThirdUser_args)that);
    return false;
  }

  public boolean equals(isExitsThirdUser_args that) {
    if (that == null)
      return false;
    boolean this_present_loginLog = true && this.isSetLoginLog();
    boolean that_present_loginLog = true && that.isSetLoginLog();
    if (this_present_loginLog || that_present_loginLog) {
      if (!(this_present_loginLog && that_present_loginLog))
        return false;
      if (!this.loginLog.equals(that.loginLog))
        return false;
    }
    boolean this_present_validateInfo = true && this.isSetValidateInfo();
    boolean that_present_validateInfo = true && that.isSetValidateInfo();
    if (this_present_validateInfo || that_present_validateInfo) {
      if (!(this_present_validateInfo && that_present_validateInfo))
        return false;
      if (!this.validateInfo.equals(that.validateInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_loginLog = true && (isSetLoginLog());
    builder.append(present_loginLog);
    if (present_loginLog)
      builder.append(loginLog);
    boolean present_validateInfo = true && (isSetValidateInfo());
    builder.append(present_validateInfo);
    if (present_validateInfo)
      builder.append(validateInfo);
    return builder.toHashCode();
  }

  public int compareTo(isExitsThirdUser_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    isExitsThirdUser_args typedOther = (isExitsThirdUser_args)other;

    lastComparison = Boolean.valueOf(isSetLoginLog()).compareTo(typedOther.isSetLoginLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginLog()) {
      lastComparison = TBaseHelper.compareTo(this.loginLog, typedOther.loginLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidateInfo()).compareTo(typedOther.isSetValidateInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidateInfo()) {
      lastComparison = TBaseHelper.compareTo(this.validateInfo, typedOther.validateInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // LOGIN_LOG
          if (field.type == TType.STRUCT) {
            this.loginLog = new LoginLog();
            this.loginLog.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // VALIDATE_INFO
          if (field.type == TType.STRUCT) {
            this.validateInfo = new ValidateInfo();
            this.validateInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.loginLog != null) {
      oprot.writeFieldBegin(LOGIN_LOG_FIELD_DESC);
      this.loginLog.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.validateInfo != null) {
      oprot.writeFieldBegin(VALIDATE_INFO_FIELD_DESC);
      this.validateInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("isExitsThirdUser_args(");
    boolean first = true;
    sb.append("loginLog:");
    if (this.loginLog == null) {
      sb.append("null");
    } else {
      sb.append(this.loginLog);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("validateInfo:");
    if (this.validateInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.validateInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class isExitsThirdUser_result implements TBase<isExitsThirdUser_result, isExitsThirdUser_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("isExitsThirdUser_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public BuyerResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, BuyerResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(isExitsThirdUser_result.class, metaDataMap);
  }


  public isExitsThirdUser_result() {
  }

  public isExitsThirdUser_result(
    BuyerResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public isExitsThirdUser_result(isExitsThirdUser_result other) {
    if (other.isSetSuccess()) {
      this.success = new BuyerResult(other.success);
    }
  }

  public isExitsThirdUser_result deepCopy() {
    return new isExitsThirdUser_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public BuyerResult getSuccess() {
    return this.success;
  }

  public isExitsThirdUser_result setSuccess(BuyerResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((BuyerResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof isExitsThirdUser_result)
      return this.equals((isExitsThirdUser_result)that);
    return false;
  }

  public boolean equals(isExitsThirdUser_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(isExitsThirdUser_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    isExitsThirdUser_result typedOther = (isExitsThirdUser_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new BuyerResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("isExitsThirdUser_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class requestHttps_args implements TBase<requestHttps_args, requestHttps_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("requestHttps_args");

  private static final TField URL_FIELD_DESC = new TField("url", TType.STRING, (short)1);
  private static final TField EXT_INFO_FIELD_DESC = new TField("extInfo", TType.STRING, (short)2);


  public String url;
  public String extInfo;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    URL((short)1, "url"),
    EXT_INFO((short)2, "extInfo");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URL
  	return URL;
        case 2: // EXT_INFO
  	return EXT_INFO;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URL, new FieldMetaData("url", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXT_INFO, new FieldMetaData("extInfo", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(requestHttps_args.class, metaDataMap);
  }


  public requestHttps_args() {
  }

  public requestHttps_args(
    String url,
    String extInfo)
  {
    this();
    this.url = url;
    this.extInfo = extInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public requestHttps_args(requestHttps_args other) {
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetExtInfo()) {
      this.extInfo = other.extInfo;
    }
  }

  public requestHttps_args deepCopy() {
    return new requestHttps_args(this);
  }

  @Override
  public void clear() {
    this.url = null;
    this.extInfo = null;
  }

  public String getUrl() {
    return this.url;
  }

  public requestHttps_args setUrl(String url) {
    this.url = url;
    
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been asigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getExtInfo() {
    return this.extInfo;
  }

  public requestHttps_args setExtInfo(String extInfo) {
    this.extInfo = extInfo;
    
    return this;
  }

  public void unsetExtInfo() {
    this.extInfo = null;
  }

  /** Returns true if field extInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetExtInfo() {
    return this.extInfo != null;
  }

  public void setExtInfoIsSet(boolean value) {
    if (!value) {
      this.extInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;
    case EXT_INFO:
      if (value == null) {
        unsetExtInfo();
      } else {
        setExtInfo((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case URL:
      return getUrl();
    case EXT_INFO:
      return getExtInfo();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case URL:
      return isSetUrl();
    case EXT_INFO:
      return isSetExtInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof requestHttps_args)
      return this.equals((requestHttps_args)that);
    return false;
  }

  public boolean equals(requestHttps_args that) {
    if (that == null)
      return false;
    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }
    boolean this_present_extInfo = true && this.isSetExtInfo();
    boolean that_present_extInfo = true && that.isSetExtInfo();
    if (this_present_extInfo || that_present_extInfo) {
      if (!(this_present_extInfo && that_present_extInfo))
        return false;
      if (!this.extInfo.equals(that.extInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_url = true && (isSetUrl());
    builder.append(present_url);
    if (present_url)
      builder.append(url);
    boolean present_extInfo = true && (isSetExtInfo());
    builder.append(present_extInfo);
    if (present_extInfo)
      builder.append(extInfo);
    return builder.toHashCode();
  }

  public int compareTo(requestHttps_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    requestHttps_args typedOther = (requestHttps_args)other;

    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtInfo()).compareTo(typedOther.isSetExtInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtInfo()) {
      lastComparison = TBaseHelper.compareTo(this.extInfo, typedOther.extInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // URL
          if (field.type == TType.STRING) {
            this.url = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // EXT_INFO
          if (field.type == TType.STRING) {
            this.extInfo = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.url != null) {
      oprot.writeFieldBegin(URL_FIELD_DESC);
      oprot.writeString(this.url);
      oprot.writeFieldEnd();
    }
    if (this.extInfo != null) {
      oprot.writeFieldBegin(EXT_INFO_FIELD_DESC);
      oprot.writeString(this.extInfo);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("requestHttps_args(");
    boolean first = true;
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extInfo:");
    if (this.extInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.extInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

  public static class requestHttps_result implements TBase<requestHttps_result, requestHttps_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("requestHttps_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public BuyerResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, BuyerResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(requestHttps_result.class, metaDataMap);
  }


  public requestHttps_result() {
  }

  public requestHttps_result(
    BuyerResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public requestHttps_result(requestHttps_result other) {
    if (other.isSetSuccess()) {
      this.success = new BuyerResult(other.success);
    }
  }

  public requestHttps_result deepCopy() {
    return new requestHttps_result(this);
  }

  @Override
  public void clear() {
    this.success = null;
  }

  public BuyerResult getSuccess() {
    return this.success;
  }

  public requestHttps_result setSuccess(BuyerResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((BuyerResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof requestHttps_result)
      return this.equals((requestHttps_result)that);
    return false;
  }

  public boolean equals(requestHttps_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(requestHttps_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    requestHttps_result typedOther = (requestHttps_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new BuyerResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("requestHttps_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


}